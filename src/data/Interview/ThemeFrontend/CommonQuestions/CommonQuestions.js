export const CommonQuestions = {
  id: 602,
  title: "Common questions",
  children: [
    {
      title: "Основные структуры данных и их организация",
      children: [
        {
          title:
            "В фронтенд-разработке используются различные структуры данных для организации и хранения информации",
          type: "text",
          description: `
                <p>Вот некоторые из них:</p>
                  <li>Массивы (Arrays): Упорядоченные коллекции элементов, которые могут быть любого типа. Массивы позволяют хранить списки данных и обеспечивают доступ к элементам по индексу.</li>
                  <li>Объекты (Objects): Непорядочные коллекции пар "ключ-значение". Объекты используются для хранения связанных данных и представляют собой более сложные структуры, чем массивы.</li>
                  <li>Строки (Strings): Последовательности символов, которые используются для представления текстовой информации.</li>
                  <li>Множества (Sets): Коллекции уникальных значений. Множества полезны для хранения данных, когда важно избегать дубликатов.</li>
                  <li>Словари (Maps): Коллекции пар "ключ-значение", где ключи могут быть любого типа. Словари обеспечивают быстрый доступ к значениям по ключам.</li>
                  <p>Эти структуры данных могут быть организованы в более сложные структуры, такие как деревья и графы, в зависимости от требований приложения.</p>
                `,
        },
      ],
    },
    {
      title: "Двоичная система счисления",
      children: [
        {
          title:
            "Двоичная система счисления — это система, основанная на двух символах: 0 и 1",
          type: "text",
          description: `
                <p>Она является основой для работы всех цифровых компьютеров, так как они используют двоичную логику для обработки данных. В двоичной системе каждое число представляется как последовательность битов (binary digits), где каждый бит может принимать значение 0 или 1.
                Например, число 5 в десятичной системе представляется как 101 в двоичной системе:</p>
                  <li>1  2^2 (4) + 0  2^1 (0) + 1 * 2^0 (1) = 5</li>
                <p>Двоичная система используется для представления данных, выполнения арифметических операций и управления логикой в компьютерах.</p>
                `,
        },
      ],
    },
    {
      title: "как работает браузер",
      children: [
        {
          title:
            "Браузер — это программа, которая выполняет следующие основные функции:",
          type: "text",
          description: `
                  <li>Запрос ресурсов: Браузер отправляет HTTP(S)-запросы к веб-серверу для получения HTML, CSS, JavaScript, изображений и других ресурсов.</li>
                  <li>Парсинг HTML: После получения ответа от сервера браузер начинает парсить HTML-код, создавая DOM (Document Object Model) — дерево объектов, представляющее структуру документа.</li>
                  <li>Парсинг CSS: Браузер обрабатывает CSS-файлы и создает CSSOM (CSS Object Model), который содержит правила стилей для элементов.</li>
                  <li>Создание страницы: Браузер объединяет DOM и CSSOM, чтобы создать Render Tree (дерево отображения), которое содержит только видимые элементы и их стили.</li>
                  <li>Рендеринг: Браузер вычисляет, как элементы должны быть отображены на экране (положение, размеры и так далее), и выполняет ученение — отрисовку страницы на экране устройства.</li>
                  <li>Обработка событий: Браузер отслеживает пользовательские действия (нажатия кнопок, движения мыши и т. д.) и обрабатывает события, вызывая соответствующий JavaScript-код.</li>
                `,
        },
      ],
    },
    {
      title: "Что такое DOM",
      children: [
        {
          title:
            "DOM (Document Object Model) — это программный интерфейс для классов документов HTML и XML. Он представляет структуру документа в виде дерева узлов, где каждый узел соответствует элементу или тексту на странице. DOM позволяет программно изменять структуру, содержимое и стиль документа.",
          type: "text",
          description: `
                <p>С помощью DOM разработчики могут:</p>
                  <li>Добавлять, удалять и изменять элементы на странице.</li>
                  <li>Изменять атрибуты и стиль элементов.</li>
                  <li>Реагировать на события, происходящие в документе.</li>
                <p>DOM позволяет языкам программирования, таким как JavaScript, эффективно взаимодействовать с HTML и динамически изменять пользовательский интерфейс без перезагрузки страницы.</p>
                `,
        },
      ],
    },
    {
      title: "Что такое BOM",
      children: [
        {
          title: "Определение BOM",
          type: "text",
          description: `
                <p>BOM (Browser Object Model) — это интерфейс, который предоставляет JavaScript доступ к объектам, представляющим браузер и его окружение. С помощью BOM разработчики могут взаимодействовать с элементами браузера, такими как окно, история, адресная строка и другие аспекты, не относящиеся непосредственно к документу.</p>
                `,
        },
        {
          title: "Основные объекты BOM",
          type: "text",
          description: `
                  <ul>
                    <li><strong>window:</strong> Главный объект, представляющий окно браузера. Все другие объекты BOM являются его свойствами.</li>
                    <li><strong>document:</strong> Объект, представляющий текущий HTML-документ, к которому можно получить доступ через 'window.document'.</li>
                    <li><strong>navigator:</strong> Объект, предоставляющий информацию о браузере и операционной системе пользователя.</li>
                    <li><strong>location:</strong> Объект, содержащий информацию о текущем URL и позволяющий изменять его.</li>
                    <li><strong>history:</strong> Объект, позволяющий взаимодействовать с историей браузера (например, переход назад и вперед).</li>
                  </ul>
                `,
        },
        {
          title: "Примеры использования BOM",
          type: "text",
          description: `
                  <ul>
                    <li><strong>Изменение URL:</strong> С помощью 'location.href' можно менять адрес текущей страницы.</li>
                    <li><strong>Получение информации о браузере:</strong> 'navigator.userAgent' позволяет узнать информацию о браузере пользователя.</li>
                    <li><strong>Управление историей:</strong> 'history.back()' и 'history.forward()' позволяют навигировать по истории посещенных страниц.</li>
                  </ul>
                `,
        },
        {
          title: "Преимущества и недостатки BOM",
          type: "text",
          description: `
                  <ul>
                    <li><strong>Преимущества:</strong> Позволяет взаимодействовать с браузером, что дает возможность создавать более динамичные и интерактивные веб-приложения.</li>
                    <li><strong>Недостатки:</strong> BOM не стандартизирован, поэтому могут быть различия в реализации между разными браузерами.</li>
                  </ul>
                `,
        },
        {
          title: "Заключение",
          type: "text",
          description: `
                  <p>BOM является важной частью разработки веб-приложений, предоставляя доступ к объектам браузера и позволяя создавать более интерактивные интерфейсы. Понимание BOM поможет разработчикам лучше использовать возможности браузера для улучшения пользовательского опыта.</p>
                `,
        },
      ],
    },
    {
      title: "Фазы событий в DOM",
      children: [
        {
          title: "1. Фаза захвата (Capturing Phase)",
          type: "text",
          description: `
                  <p>Событие начинает движение от верхнего уровня DOM-дерева к целевому элементу.</p>
                  <p>Событие "захватывается" верхними элементами, начиная с объекта <code>window</code> и проходя через все родительские элементы.</p>
                `,
        },
        {
          title: "2. Фаза целевого элемента (Target Phase)",
          type: "text",
          description: `
                  <p>Событие достигает целевого элемента, на который было инициировано.</p>
                  <p>В этой фазе событие обрабатывается непосредственно целевым элементом.</p>
                `,
        },
        {
          title: "3. Фаза всплытия (Bubbling Phase)",
          type: "text",
          description: `
                  <p>После обработки события целевым элементом оно начинает всплывать обратно к родительским элементам.</p>
                  <p>Событие проходит через всех родителей целевого элемента, начиная с непосредственного родителя и до корня документа.</p>
                `,
        },
        {
          title: "Пример работы фаз событий",
          type: "text",
          description: `
                  <p>1. Пользователь кликает на кнопку внутри <code>&lt;div&gt;</code>.<br>
                  2. Событие "клик" проходит от объекта <code>window</code> вниз к <code>&lt;div&gt;</code>, затем к кнопке (фаза захвата).<br>
                  3. Событие обрабатывается кнопкой (фаза целевого элемента).<br>
                  4. Затем событие "всплывает" обратно к <code>&lt;div&gt;</code> и выше (фаза всплытия).</p>
                `,
        },
        {
          title: "Обработка событий",
          type: "text",
          description: `
                  <p>Можно указать, в какой фазе будет срабатывать обработчик, используя третий аргумент в <code>addEventListener</code>.</p>
                `,
          code: `
element.addEventListener('click', handler, true); // Фаза захвата
element.addEventListener('click', handler, false); // Фаза всплытия
                `,
        },
      ],
    },
    {
      title: "Из чего состоит HTTP запрос",
      children: [
        {
          title: "HTTP-запрос состоит из нескольких частей:",
          type: "text",
          description: `
                <p>Метод: Указывает тип запроса, например:</p>
                  <li>GET: Запрос на получение данных.</li>
                  <li>POST: Отправка данных на сервер.</li>
                  <li>PUT, DELETE и другие методы.</li>
                  <li>URL (Uniform Resource Locator): Указывает адрес ресурса, к которому осуществляется обращение.</li>
                  <li>Версия протокола: Например, HTTP/1.1 или HTTP/2.</li>
                <p>Заголовки (Headers): Дополнительные метаданные о запросе, которые могут включать:</p>
                  <li>Content-Type: Указывает формат передаваемых данных.</li>
                  <li>Authorization: Используется для передачи учетных данных и токенов.</li>
                  <li>Другие заголовки, определяющие поведение кэширования, управление сессиями и т.д.</li>
                  <li>Тело (Body): Опциональная часть запроса, которая содержит данные, отправляемые на сервер (обычно в запросах POST, PUT и PATCH).</li>
                `,
        },
      ],
    },
    {
      title: "Разница между cookie, sessionStorage и localStorage",
      children: [
        {
          title: "Cookie",
          type: "text",
          description: `
                  <p>Основные характеристики cookie:</p>
                  <li><strong>Применение</strong>: Хранит данные на стороне клиента, отправляемые на сервер при каждом запросе.</li>
                  <li><strong>Размер</strong>: Ограничен примерно 4 КБ.</li>
                  <li><strong>Время жизни</strong>: Может иметь заданное время жизни и храниться до его истечения.</li>
                  <li><strong>Доступ</strong>: Доступен для сервера и клиента.</li>
                `,
        },
        {
          title: "sessionStorage",
          type: "text",
          description: `
                  <p>Основные характеристики sessionStorage:</p>
                  <li><strong>Применение</strong>: Хранит данные, специфичные для одной сессии.</li>
                  <li><strong>Размер</strong>: Обычно ограничен до 5-10 МБ.</li>
                  <li><strong>Время жизни</strong>: Данные существуют лишь в течение одной вкладки.</li>
                  <li><strong>Доступ</strong>: Доступен только из текущей вкладки.</li>
                `,
        },
        {
          title: "localStorage",
          type: "text",
          description: `
                  <p>Основные характеристики localStorage:</p>
                  <li><strong>Применение</strong>: Хранит данные, доступные между сессиями.</li>
                  <li><strong>Размер</strong>: Обычно ограничен до 5-10 МБ.</li>
                  <li><strong>Время жизни</strong>: Данные сохраняются до тех пор, пока пользователь их не удалит.</li>
                  <li><strong>Доступ</strong>: Доступен только для клиентских скриптов.</li>
                `,
        },
      ],
    },
    {
      title: "Жизненный цикл страницы: три ключевых события",
      children: [
        {
          title: "Загрузка и парсинг HTML",
          type: "text",
          description: `
                  <p>Основные характеристики загрузки и парсинга HTML:</p>
                  <ul>
                    <li><strong>Событие</strong>: Браузер загружает HTML-документ и начинает его парсить.</li>
                    <li><strong>Результат</strong>: Создается дерево элементов (DOM — Document Object Model).</li>
                    <li><strong>Зависимости</strong>: В процессе могут обнаруживаться внешние ресурсы (CSS, JavaScript).</li>
                    <li><strong>Ключевое событие</strong>: <code>DOMContentLoaded</code> срабатывает, когда HTML полностью загружен и разобран.</li>
                  </ul>
                `,
        },
        {
          title: "Загрузка и парсинг CSS",
          type: "text",
          description: `
                  <p>Основные характеристики загрузки и парсинга CSS:</p>
                  <ul>
                    <li><strong>Событие</strong>: Браузер загружает и парсит файлы CSS.</li>
                    <li><strong>Результат</strong>: Создается дерево стилей (CSSOM — CSS Object Model).</li>
                    <li><strong>Блокировка</strong>: Этот этап может блокировать рендеринг страницы.</li>
                  </ul>
                `,
        },
        {
          title: "Создание и рендеринг страницы",
          type: "text",
          description: `
                  <p>Основные характеристики создания и рендеринга страницы:</p>
                  <ul>
                    <li><strong>Событие</strong>: Браузер создает дерево рендеринга и отображает страницу.</li>
                    <li><strong>Результат</strong>: Объединение DOM и CSSOM для создания визуального представления.</li>
                    <li><strong>Ключевое событие</strong>: <code>load</code> срабатывает, когда вся страница и ее зависимости загружены.</li>
                  </ul>
                `,
        },
        {
          title: "Закрытие (beforeunload)",
          type: "text",
          description: `
                  <p>Событие 'beforeunload' срабатывает, когда пользователь пытается покинуть страницу или обновить ее. Оно позволяет разработчикам предупреждать пользователей о том, что у них есть несохраненные изменения, и дает возможность предотвратить случайное закрытие страницы.</p>
                `,
        },
      ],
    },
  ],
};
