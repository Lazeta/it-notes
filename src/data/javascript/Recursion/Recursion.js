export const Recursion = {
  id: 235,
  title: "Recursion",
  children: [
    {
      title: "Определение",
      type: "text",
      description: `
            <p><strong>Рекурсия</strong> — это функция вызывающая саму себя для решения подзадач. Рекурсивные функции обычно разбивают задачу на меньшие подзадачи, которые решаются аналогичным образом.</p>
          `,
    },
    {
      title: "Структура рекурсивной функции",
      type: "text",
      description: `
            <p>Рекурсивная функция должна иметь:</p>
            <ul>
              <li><strong>Базовый случай</strong>: Условие, при котором функция прекращает вызывать саму себя, чтобы избежать бесконечной рекурсии.</li>
              <li><strong>Рекурсивный случай</strong>: Вызов самой функции с меньшей или более простой версией задачи.</li>
            </ul>
          `,
      code: `
function factorial(n) {
if (n === 0) { // базовый случай
return 1;
}
return n * factorial(n - 1); // рекурсивный случай
}
console.log(factorial(5)); // 120
          `,
    },
    {
      title: "Примеры использования",
      type: "text",
      description: `
            <p>Рекурсия может быть использована в следующих ситуациях:</p>
            <ul>
              <li>Вычисление факториала.</li>
              <li>Обход деревьев и графов.</li>
              <li>Решение задач, таких как сортировка (например, быстрая сортировка, сортировка слиянием).</li>
              <li>Решение задач, связанных с последовательностями (например, числа Фибоначчи).</li>
            </ul>
          `,
    },
    {
      title: "Преимущества и недостатки",
      type: "text",
      description: `
            <p>Преимущества и недостатки рекурсии:</p>
            <ul>
              <li><strong>Преимущества:</strong> Код более лаконичен и понятен, особенно при работе со сложными структурами данных.</li>
              <li><strong>Недостатки:</strong> Рекурсия может приводить к большому потреблению памяти из-за хранения состояния вызовов стека и может быть менее эффективной по сравнению с итеративными подходами.</li>
            </ul>
          `,
    },
  ],
};
