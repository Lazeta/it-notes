export const stringsAndTemplateLiterals = {
  id: 526,
  title: "Strings & Template Literals",
  children: [
    {
      title: "–ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏",
      type: "text",
      description: `
          <p><strong>–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫:</strong></p>
          <pre><code>const str1 = '–û–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏';
  const str2 = "–î–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏";
  const str3 = \`–®–∞–±–ª–æ–Ω–Ω—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã\`;</code></pre>
  
          <p><strong>–î–æ—Å—Ç—É–ø –∫ —Å–∏–º–≤–æ–ª–∞–º:</strong></p>
          <pre><code>'hello'[1]; // 'e'
  'hello'.charAt(1); // 'e'
  'hello'.at(-1); // 'o' (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥)</code></pre>
  
          <p><strong>–î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏:</strong></p>
          <pre><code>'–ü—Ä–∏–≤–µ—Ç'.length; // 6</code></pre>
        `,
    },
    {
      title: "–ú–µ—Ç–æ–¥—ã —Å—Ç—Ä–æ–∫",
      type: "text",
      description: `
          <p><strong>–ü–æ–∏—Å–∫ –≤ —Å—Ç—Ä–æ–∫–µ:</strong></p>
          <pre><code>'hello'.indexOf('l'); // 2
  'hello'.lastIndexOf('l'); // 3
  'hello'.includes('ell'); // true
  'hello'.startsWith('he'); // true
  'hello'.endsWith('lo'); // true</code></pre>
  
          <p><strong>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏:</strong></p>
          <pre><code>'Hello'.toLowerCase(); // 'hello'
  'hello'.toUpperCase(); // 'HELLO'
  ' hello '.trim(); // 'hello'
  'hello'.repeat(3); // 'hellohellohello'</code></pre>
  
          <p><strong>–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏:</strong></p>
          <pre><code>'hello'.slice(1, 4); // 'ell'
  'hello'.substring(1, 4); // 'ell'
  'hello'.substr(1, 3); // 'ell' (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π)</code></pre>
        `,
    },
    {
      title: "–®–∞–±–ª–æ–Ω–Ω—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã (Template literals)",
      type: "text",
      description: `
          <p><strong>–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:</strong></p>
          <pre><code>\`–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
  –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
  –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞\`;</code></pre>
  
          <p><strong>–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:</strong></p>
          <pre><code>const name = '–ê–Ω–Ω–∞';
  const age = 25;
  \`–ú–µ–Ω—è –∑–æ–≤—É—Ç \${name} –∏ –º–Ω–µ \${age} –ª–µ—Ç.\`;
  // "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞ –∏ –º–Ω–µ 25 –ª–µ—Ç."</code></pre>
  
          <p><strong>–í—ã—Ä–∞–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏:</strong></p>
          <pre><code>\`–°—É–º–º–∞: \${5 + 3}\`; // "–°—É–º–º–∞: 8"
  \`–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: \${new Date().toLocaleDateString()}\`;</code></pre>
        `,
    },
    {
      title: "–¢–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã",
      type: "text",
      description: `
          <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫:</strong></p>
          <pre><code>function highlight(strings, ...values) {
    return strings.reduce((result, str, i) => {
      return \`\${result}\${str}\${values[i] ? \`&lt;mark&gt;\${values[i]}&lt;/mark&gt;\` : ''}\`;
    }, '');
  }
  
  const name = '–ê–ª–µ–∫—Å–µ–π';
  const age = 30;
  
  highlight\`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \${name}, –≤–æ–∑—Ä–∞—Å—Ç \${age}\`;
  // "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å &lt;mark&gt;–ê–ª–µ–∫—Å–µ–π&lt;/mark&gt;, –≤–æ–∑—Ä–∞—Å—Ç &lt;mark&gt;30&lt;/mark&gt;"</code></pre>
  
          <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong></p>
          <ul>
            <li>–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML</li>
            <li>–ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è</li>
            <li>–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞</li>
          </ul>
        `,
    },
    {
      title: "–ü–æ–ª–µ–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã",
      type: "text",
      description: `
          <p><strong>–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:</strong></p>
          <pre><code>'a,b,c'.split(','); // ['a', 'b', 'c']
  ['a', 'b', 'c'].join('-'); // 'a-b-c'</code></pre>
  
          <p><strong>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ:</strong></p>
          <pre><code>'123'.match(/\\d+/); // ['123', index: 0, ...]
  'hello'.search(/ell/); // 1</code></pre>
  
          <p><strong>–ó–∞–º–µ–Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏:</strong></p>
          <pre><code>'Hello world'.replace('world', 'everyone'); // 'Hello everyone'
  '2023-10-15'.replace(/(\\d{4})-(\\d{2})-(\\d{2})/, '$3.$2.$1'); // '15.10.2023'</code></pre>
        `,
    },
    {
      title: "–Æ–Ω–∏–∫–æ–¥ –∏ —Å—Ç—Ä–æ–∫–∏",
      type: "text",
      description: `
          <p><strong>–°—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã:</strong></p>
          <pre><code>'üòÇ'.length; // 2 (—Å—É—Ä—Ä–æ–≥–∞—Ç–Ω–∞—è –ø–∞—Ä–∞)
  'üòÇ'.codePointAt(0); // 128514
  String.fromCodePoint(128514); // 'üòÇ'</code></pre>
  
          <p><strong>–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:</strong></p>
          <pre><code>'√©'.normalize('NFC').length; // 1
  'eÃÅ'.normalize('NFC').length; // 1 (–æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–∏–º–≤–æ–ª—ã)</code></pre>
  
          <p><strong>–ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º:</strong></p>
          <pre><code>for (const char of 'strüòÇ') {
    console.log(char); // 's', 't', 'r', 'üòÇ'
  }</code></pre>
        `,
    },
    {
      title: "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã",
      type: "text",
      description: `
          <p><strong>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª:</strong></p>
          <pre><code>const price = 123456.789;
  \`–¶–µ–Ω–∞: \${price.toLocaleString('ru-RU')} —Ä—É–±.\`;
  // "–¶–µ–Ω–∞: 123 456,789 —Ä—É–±."</code></pre>
  
          <p><strong>–®–∞–±–ª–æ–Ω—ã –¥–ª—è HTML:</strong></p>
          <pre><code>const items = ['–•–ª–µ–±', '–ú–æ–ª–æ–∫–æ', '–Ø–π—Ü–∞'];
  const html = \`
    &lt;ul&gt;
      \${items.map(item => \`&lt;li&gt;\${item}&lt;/li&gt;\`).join('')}
    &lt;/ul&gt;
  \`;</code></pre>
  
          <p><strong>–®–∞–±–ª–æ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:</strong></p>
          <pre><code>function sql(strings, ...values) {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞
  }
  sql\`SELECT * FROM users WHERE id = \${userId}\`;</code></pre>
        `,
    },
  ],
};
