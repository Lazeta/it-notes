export const FunctionalProgramming = {
  id: 185,
  title: "Functional Programming (Функциональное программирование)",
  children: [
    {
      title: "Определение",
      type: "text",
      description: `
        <p><strong>Функциональное программирование</strong> — это парадигма программирования, в которой основное внимание уделяется использованию функций как основных строительных блоков программы. В этой парадигме минимизируется изменение состояния данных и побочные эффекты.</p>
        <p>Цель функционального программирования — создание предсказуемого, легко тестируемого и поддерживаемого кода.</p>
      `,
    },
    {
      title: "Основные концепции",
      type: "text",
      description: `
        <p>Ключевые концепции функционального программирования:</p>
        <ul>
          <li><strong>Чистые функции:</strong> Функции, которые всегда возвращают один и тот же результат для одинаковых входных данных и не имеют побочных эффектов.</li>
          <li><strong>Иммутабельность:</strong> Данные не изменяются, вместо этого создаются новые значения на основе существующих.</li>
          <li><strong>Функции высшего порядка:</strong> Функции, которые могут принимать другие функции в качестве аргументов или возвращать функции в качестве результата.</li>
          <li><strong>Рекурсия:</strong> Механизм, при котором функция вызывает сама себя для решения подзадач. Рекурсия часто используется вместо циклов.</li>
          <li><strong>Ленивые вычисления:</strong> Стратегия выполнения вычислений только тогда, когда их результат действительно нужен.</li>
          <li><strong>Каррирование:</strong> Преобразование функции с множеством аргументов в последовательность функций с одним аргументом.</li>
          <li><strong>Частичное применение:</strong> Создание новой функции с фиксированными значениями для части аргументов.</li>
        </ul>
      `,
    },
    {
      title: "Преимущества",
      type: "text",
      description: `
        <p>Функциональное программирование предлагает множество преимуществ:</p>
        <ul>
          <li><strong>Упрощение отладки и тестирования:</strong> Чистые функции делают код более предсказуемым.</li>
          <li><strong>Лучшее управление состоянием:</strong> Минимизация изменения состояния снижает количество ошибок.</li>
          <li><strong>Улучшение читаемости и поддержки кода:</strong> Использование функций высшего порядка и иммутабельности делает код более декларативным.</li>
          <li><strong>Параллелизм:</strong> Отсутствие побочных эффектов упрощает параллельное выполнение задач.</li>
        </ul>
      `,
    },
    {
      title: "Пример чистой функции",
      type: "text",
      description: `
        <p>Чистая функция — это функция, которая всегда возвращает один и тот же результат для одинаковых входных данных и не имеет побочных эффектов (например, изменения глобальных переменных).</p>
      `,
      code: `
function add(a, b) {
  return a + b;
}

console.log(add(2, 3)); // 5
console.log(add(2, 3)); // 5 (результат всегда одинаковый)
      `,
    },
    {
      title: "Функции высшего порядка",
      type: "text",
      description: `
        <p>Функции высшего порядка — это функции, которые принимают другие функции в качестве аргументов или возвращают функции в качестве результата.</p>
      `,
      code: `
function applyFunction(fn, value) {
  return fn(value);
}

function double(x) {
  return x * 2;
}

const result = applyFunction(double, 5); // 10
console.log(result);
      `,
    },
    {
      title: "Пример рекурсии",
      type: "text",
      description: `
        <p>Рекурсия — это механизм, при котором функция вызывает сама себя для решения подзадач. Это особенно полезно для работы со структурами данных, такими как деревья.</p>
      `,
      code: `
function factorial(n) {
  if (n === 0) {
    return 1; // Базовый случай: факториал 0 равен 1
  } else {
    return n * factorial(n - 1); // Рекурсивный случай: n! = n * (n-1)!
  }
}

console.log(factorial(5)); // 120
      `,
    },
    {
      title: "Пример ленивых вычислений",
      type: "text",
      description: `
        <p>Ленивые вычисления позволяют выполнять операции только тогда, когда их результат действительно нужен. Это полезно для оптимизации работы с большими данными.</p>
      `,
      code: `
function* lazySquares(numbers) {
  for (const number of numbers) {
    yield number * number;
  }
}

const numbers = [1, 2, 3, 4, 5];
const lazyCalc = lazySquares(numbers);

// Вычисляем и печатаем только первое значение
console.log(lazyCalc.next().value); // 1

// Вычисляем и печатаем второе значение
console.log(lazyCalc.next().value); // 4

// Итерируем по оставшимся значениям и вычисляем их
for (const square of lazyCalc) {
  console.log(square); // 9, 16, 25
}
      `,
    },
    {
      title: "Каррирование",
      type: "text",
      description: `
        <p>Каррирование — это процесс преобразования функции с множеством аргументов в последовательность функций с одним аргументом.</p>
      `,
      code: `
function multiply(a) {
  return function(b) {
    return a * b;
  };
}

const double = multiply(2);
console.log(double(5)); // 10

const triple = multiply(3);
console.log(triple(5)); // 15
      `,
    },
    {
      title: "Заключение",
      type: "text",
      description: `
        <p>Функциональное программирование — это мощная парадигма, которая помогает писать чистый, предсказуемый и легко тестируемый код. Хотя она может показаться сложной для новичков, её принципы (чистые функции, иммутабельность, функции высшего порядка) становятся естественными с практикой.</p>
      `,
    },
  ],
};
