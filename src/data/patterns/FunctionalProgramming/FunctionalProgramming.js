export const FunctionalProgramming = {
  id: 185,
  title: "Functional programming",
  children: [
    {
      title: "Определение",
      type: "text",
      description: `
            <p>Функциональное программирование — это парадигма программирования, в которой основное внимание уделяется использованию функций и избеганию изменения состояния и данных.</p>
          `,
    },
    {
      title: "Основные концепции",
      type: "text",
      description: `
            <p>Ключевые концепции функционального программирования:</p>
            <ul>
              <li><strong>Чистые функции</strong>: функции, которые всегда возвращают один и тот же результат для одинаковых входных данных и не имеют побочных эффектов.</li>
              <li><strong>Иммутабельность</strong>: состояние не изменяется, вместо этого создаются новые значения.</li>
              <li><strong>Функции высшего порядка</strong>: функции, которые принимают другие функции в качестве аргументов или возвращают функции.</li>
              <li><strong>Лямбда-функции</strong>: анонимные функции, которые могут быть определены и использованы непосредственно в коде.</li>
            </ul>
          `,
    },
    {
      title: "Преимущества",
      type: "text",
      description: `
            <p>Функциональное программирование предлагает множество преимуществ, включая:</p>
            <ul>
              <li>Упрощение отладки и тестирования.</li>
              <li>Лучшее управление состоянием.</li>
              <li>Улучшение читаемости и поддержки кода.</li>
            </ul>
          `,
    },
    {
      title: "Пример чистой функции",
      type: "text",
      description: `
            <p>Пример чистой функции, которая вычисляет сумму двух чисел:</p>
          `,
      code: `
function add(a, b) {
return a + b;
}
          `,
    },
    {
      title: "Функции высшего порядка",
      type: "text",
      description: `
            <p>Пример функции высшего порядка, которая принимает другую функцию в качестве аргумента:</p>
          `,
      code: `
function applyFunction(fn, value) {
return fn(value);
}

function double(x) {
return x * 2;
}

const result = applyFunction(double, 5); // 10
          `,
    },
    {
      title: "Заключение",
      type: "text",
      description: `
            <p>Функциональное программирование способствует созданию более предсказуемого и поддерживаемого кода, что делает его популярным выбором для разработки современного программного обеспечения.</p>
          `,
    },
  ],
};
