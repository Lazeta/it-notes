export const FunctionalProgramming = {
  id: 185,
  title: "Functional programming",
  children: [
    {
      title: "Определение",
      type: "text",
      description: `
            <p>Функциональное программирование — это парадигма программирования, в которой основное внимание уделяется использованию функций и избеганию изменения состояния и данных.</p>
          `,
    },
    {
      title: "Основные концепции",
      type: "text",
      description: `
            <p>Ключевые концепции функционального программирования:</p>
            <ul>
              <li><strong>Чистые функции</strong>: функции, которые всегда возвращают один и тот же результат для одинаковых входных данных и не имеют побочных эффектов.</li>
              <li><strong>Иммутабельность</strong>: состояние не изменяется, вместо этого создаются новые значения.</li>
              <li><strong>Функции высшего порядка</strong>: функции, которые могут принимать другие функции в качестве аргументов или возвращать функции в качестве результата. Это позволяет создавать более гибкий и абстрактный код.</li>
              <li><strong>Рекурсия</strong>: механизм, при котором функция вызывает сама себя для решения подзадач. Рекурсия часто используется вместо циклов в функциональном программировании</li>
              <li><strong>Ленивые вычисления</strong>: стратегия вычислений, при которой вычисления выполняются только тогда, когда их результат действительно нужен. Это может быть полезно для работы с бесконечными структурами данных или для оптимизации.</li>
            </ul>
          `,
    },
    {
      title: "Преимущества",
      type: "text",
      description: `
            <p>Функциональное программирование предлагает множество преимуществ, включая:</p>
            <ul>
              <li>Упрощение отладки и тестирования.</li>
              <li>Лучшее управление состоянием.</li>
              <li>Улучшение читаемости и поддержки кода.</li>
            </ul>
          `,
    },
    {
      title: "Пример чистой функции",
      type: "text",
      description: `
            <p>Пример чистой функции, которая вычисляет сумму двух чисел:</p>
          `,
      code: `
function add(a, b) {
return a + b;
}
          `,
    },
    {
      title: "Функции высшего порядка",
      type: "text",
      description: `
            <p>Пример функции высшего порядка, которая принимает другую функцию в качестве аргумента:</p>
          `,
      code: `
function applyFunction(fn, value) {
return fn(value);
}

function double(x) {
return x * 2;
}

const result = applyFunction(double, 5); // 10
          `,
    },
    {
      title: "Пример Рекурсии",
      type: "text",
      description: `<p>Вот пример рекурсивной функции для вычисления факториала:</p>`,
      code: `
function factorial(n) {
  if (n === 0) {
    return 1; // Базовый случай: факториал 0 равен 1
  } else {
    return n * factorial(n - 1); // Рекурсивный случай: n! = n * (n-1)!
  }
}

console.log(factorial(5)); // Вывод: 120`,
    },
    {
      title: "Пример ленивых вычислений",
      type: "text",
      description: `<p>Пример с генератором:</p>`,
      code: `
function* lazySquares(numbers) {
  for (const number of numbers) {
    yield number * number;
  }
}

const numbers = [1, 2, 3, 4, 5];
const lazyCalc = lazySquares(numbers);

// Вычисляем и печатаем только первое значение
console.log(lazyCalc.next().value); // Вывод: 1

// Вычисляем и печатаем второе значение
console.log(lazyCalc.next().value); // Вывод: 4

// Итерируем по оставшимся значениям и вычисляем их
for (const square of lazyCalc) {
  console.log(square); // Вывод: 9, 16, 25
}`,
    },
  ],
};
