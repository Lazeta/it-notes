export const FiberTree = {
  id: 533,
  title: "Fiber",
  children: [
    {
      title: "Что такое Fiber?",
      type: "text",
      description: `
        <p><strong>Fiber</strong> — это новая архитектура алгоритма рендеринга в React, представленная в версии 16. Она была создана для улучшения производительности, оптимизации управления состоянием и работы с асинхронными обновлениями.</p>
        <p>Основная цель Fiber — сделать React более отзывчивым и эффективным за счет разделения работы на маленькие части, которые могут быть приостановлены, возобновлены или отменены.</p>
      `,
    },
    {
      title: "Проблемы, которые решает Fiber",
      type: "text",
      description: `
        <p>До Fiber React использовал рекурсивный процесс для рендеринга, что делало невозможным приостановку или отмену рендеринга. Это приводило к следующим проблемам:</p>
        <ul>
          <li><strong>Блокировка основного потока:</strong> Рендеринг больших деревьев мог блокировать UI на время выполнения.</li>
          <li><strong>Отсутствие приоритетов:</strong> Все обновления выполнялись с одинаковым приоритетом, даже если некоторые из них были менее важными.</li>
          <li><strong>Сложность отладки:</strong> Рекурсивный подход затруднял понимание и отладку процесса рендеринга.</li>
        </ul>
      `,
    },
    {
      title: "Основные особенности Fiber",
      type: "text",
      description: `
        <ul>
          <li><strong>Переход на асинхронность:</strong> Fiber позволяет React приостанавливать и возобновлять рендеринг, что позволяет более эффективно обрабатывать сложные UI.</li>
          <li><strong>Приоритет обновлений:</strong> Fiber поддерживает приоритеты, позволяя React обрабатывать более важные обновления быстрее.</li>
          <li><strong>Улучшенная работа с интерактивностью:</strong> Fiber помогает разработчикам создавать более отзывчивые интерфейсы, управляя рендерингом в зависимости от пользовательского ввода.</li>
          <li><strong>Инкрементальный рендеринг:</strong> Fiber разбивает работу на маленькие задачи, которые могут быть выполнены постепенно.</li>
        </ul>
      `,
    },
    {
      title: "Как работает Fiber?",
      type: "text",
      description: `
        <p><strong>Fiber использует концепцию "волокон" (fiber), которые представляют собой единичные узлы в древовидной структуре компонентов. Каждый узел содержит информацию о состоянии компонента, его дочерних узлах и текущей задаче.</strong></p>
        <p>Основные этапы работы Fiber:</p>
        <ul>
          <li><strong>Реконсиляция:</strong> Fiber проходит по дереву компонентов и определяет, какие изменения нужно применить.</li>
          <li><strong>Приостановка:</strong> Если браузер занят (например, отрисовкой), Fiber может приостановить выполнение задачи и продолжить её позже.</li>
          <li><strong>Коммит:</strong> После завершения реконсиляции Fiber применяет изменения к DOM.</li>
        </ul>
      `,
    },
    {
      title: "Структура Fiber-узла",
      type: "text",
      description: `
        <p>Каждый Fiber-узел содержит следующие ключевые свойства:</p>
        <ul>
          <li><strong>type:</strong> Тип компонента (например, функция или класс).</li>
          <li><strong>props:</strong> Свойства компонента.</li>
          <li><strong>stateNode:</strong> Ссылка на экземпляр компонента или DOM-элемент.</li>
          <li><strong>child:</strong> Первый дочерний узел.</li>
          <li><strong>sibling:</strong> Следующий соседний узел.</li>
          <li><strong>return:</strong> Родительский узел.</li>
        </ul>
      `,
    },
    {
      title: "Пример использования Fiber",
      type: "text",
      description: `
        <p><strong>Fiber не требует явного использования в коде, но вы можете заметить улучшения производительности при использовании React 16 и выше. Например:</strong></p>
      `,
      code: `
import React from 'react';

function App() {
  return (
    <div>
      <h1>Привет, Fiber!</h1>
    </div>
  );
}

export default App;
      `,
    },
    {
      title: "requestIdleCallback",
      type: "text",
      description: `
        <p><strong>requestIdleCallback</strong> — это метод, который позволяет выполнять задачи, когда браузер "свободен" (т.е. нет срочных задач).</p>
        <p>Идеально подходит для фоновых вычислений, которые не критичны для отрисовки. Задачи, запланированные с помощью <strong>requestIdleCallback</strong>, могут быть прерваны, если появляются более важные задачи.</p>
      `,
      code: `
requestIdleCallback(() => {
  // Фоновая задача
  console.log('Выполняется фоновая задача');
});
      `,
    },
    {
      title: "requestAnimationFrame",
      type: "text",
      description: `
        <p><strong>requestAnimationFrame</strong> — это метод, который запускает выполнение кода перед следующей перерисовкой экрана. Это обеспечивает выполнение задач на частоте 60 кадров в секунду (каждые ~16.6 мс).</p>
        <p>Используется для анимаций и плавных визуальных изменений, гарантируя, что задача будет выполнена до следующего кадра.</p>
      `,
      code: `
requestAnimationFrame(() => {
  // Код для анимации
  console.log('Анимация выполняется');
});
      `,
    },
    {
      title: "Преимущества Fiber",
      type: "text",
      description: `
        <ul>
          <li><strong>Оптимизация производительности:</strong> Fiber улучшает рендеринг, что особенно важно для сложных пользовательских интерфейсов.</li>
          <li><strong>Управление приоритетами:</strong> Возможность управления приоритетами обновлений помогает делать интерфейс более отзывчивым.</li>
          <li><strong>Поддержка асинхронного рендеринга:</strong> Fiber позволяет React выполнять рендеринг в фоновом режиме, не блокируя основной поток.</li>
          <li><strong>Гибкость:</strong> Fiber может приостанавливать, возобновлять и отменять задачи, что делает его более гибким по сравнению с предыдущими версиями.</li>
        </ul>
      `,
    },
    {
      title: "Недостатки Fiber",
      type: "text",
      description: `
        <ul>
          <li><strong>Сложность:</strong> Понимание и отладка Fiber может быть сложнее для разработчиков, привыкших к более простым подходам.</li>
          <li><strong>Совместимость:</strong> Некоторые старые библиотеки и код могут не полностью поддерживать новые функции Fiber.</li>
        </ul>
      `,
      url: "https://uncleseneca.medium.com/%D0%BF%D0%BE%D0%B4%D1%80%D0%BE%D0%B1%D0%BD%D1%8B%D0%B9-%D0%BE%D0%B1%D0%B7%D0%BE%D1%80-react-fiber-66485d12bd37",
      link: "Подробнее о Fiber",
    },
  ],
};
