export const testDataBase = {
  id: 100325,
  title: "Data Base (База Данных)",
  questions: [
    {
      id: 100326,
      question: "Что такое база данных?",
      answer: `
      **База данных (Database):**
      - Организованная коллекция данных, которая хранится и управляется системой управления базами данных (СУБД).
      - Используется для эффективного хранения, поиска и обновления данных.

      **Пример использования:**
      - Хранение информации о пользователях, продуктах или заказах в интернет-магазине.
      `,
    },
    {
      id: 100327,
      question: "Какие типы баз данных существуют?",
      answer: `
      **Типы баз данных:**
      1. **Реляционные базы данных (RDBMS):**
         - Данные хранятся в виде таблиц (строки и столбцы).
         - Примеры: MySQL, PostgreSQL, SQLite, Oracle Database.
      
      2. **Нереляционные базы данных (NoSQL):**
         - Данные хранятся в виде документов, графов или ключ-значений.
         - Примеры: MongoDB (документо-ориентированная), Redis (ключ-значение), Neo4j (графовая).

      3. **Гибридные базы данных:**
         - Сочетают возможности реляционных и нереляционных баз данных.
      `,
    },
    {
      id: 100328,
      question: "Что такое SQL?",
      answer: `
      **SQL (Structured Query Language):**
      - Язык программирования, используемый для работы с реляционными базами данных.
      - Позволяет выполнять операции CRUD (Create, Read, Update, Delete):
        - \`SELECT\`: Чтение данных.
        - \`INSERT\`: Добавление новых данных.
        - \`UPDATE\`: Обновление существующих данных.
        - \`DELETE\`: Удаление данных.

      **Пример запроса:**
      \`\`\`sql
      SELECT name, age FROM users WHERE age > 18;
      \`\`\`
      `,
    },
    {
      id: 100329,
      question: "Что такое NoSQL и чем он отличается от SQL?",
      answer: `
      **NoSQL:**
      - Не требует строгой схемы данных (schema-less).
      - Подходит для больших объемов неструктурированных данных.
      - Примеры: MongoDB, Redis, Cassandra.

      **Различия между SQL и NoSQL:**
      | Критерий          | SQL                         | NoSQL                       |
      |-------------------|----------------------------|-----------------------------|
      | Структура данных  | Таблицы                    | Документы, ключ-значение, графы |
      | Масштабируемость  | Вертикальная               | Горизонтальная              |
      | Гибкость          | Строгая схема данных       | Без схемы                   |
      | Примеры           | MySQL, PostgreSQL          | MongoDB, Redis              |
      `,
    },
    {
      id: 100330,
      question: "Что такое индексы в базах данных?",
      answer: `
      **Индексы:**
      - Специальные структуры данных, которые ускоряют поиск и выборку данных.
      - Аналог книги: содержание помогает быстро найти нужную страницу.

      **Пример создания индекса:**
      \`\`\`sql
      CREATE INDEX idx_name ON users(name);
      \`\`\`

      **Преимущества:**
      - Ускоряет выполнение запросов.
      - Уменьшает время сканирования таблицы.

      **Недостатки:**
      - Замедляет операции вставки/обновления данных.
      - Увеличивает использование дискового пространства.
      `,
    },
    {
      id: 100331,
      question: "Что такое транзакции в базах данных?",
      answer: `
      **Транзакции:**
      - Группа операций, которые должны быть выполнены как единое целое.
      - Обеспечивают ACID-свойства:
        - **A**tomicity (атомарность): Все или ничего.
        - **C**onsistency (согласованность): Данные остаются валидными.
        - **I**solation (изолированность): Независимость транзакций.
        - **D**urability (долговечность): Результат сохраняется даже при сбоях.

      **Пример транзакции:**
      \`\`\`sql
      BEGIN TRANSACTION;
      UPDATE accounts SET balance = balance - 100 WHERE user_id = 1;
      UPDATE accounts SET balance = balance + 100 WHERE user_id = 2;
      COMMIT;
      \`\`\`
      `,
    },
    {
      id: 100332,
      question: "Что такое нормализация базы данных?",
      answer: `
      **Нормализация:**
      - Процесс организации данных для минимизации избыточности и зависимостей.
      - Разделение данных на связанные таблицы.

      **Пример нормализации:**
      - Первая нормальная форма (1NF): Устранение повторяющихся групп.
      - Вторая нормальная форма (2NF): Устранение частичной зависимости.
      - Третья нормальная форма (3NF): Устранение транзитивной зависимости.

      **Преимущества:**
      - Снижение дублирования данных.
      - Упрощение обновления данных.

      **Недостатки:**
      - Может замедлить сложные запросы.
      `,
    },
    {
      id: 100333,
      question: "Что такое денормализация и зачем она нужна?",
      answer: `
      **Денормализация:**
      - Процесс добавления избыточности в базу данных для повышения производительности чтения.
      - Часто используется в аналитических системах.

      **Пример:**
      - Вместо нескольких JOIN-операций данные дублируются в одной таблице.

      **Преимущества:**
      - Ускорение запросов за счет уменьшения JOIN-операций.

      **Недостатки:**
      - Увеличение объема данных.
      - Возможность возникновения аномалий при обновлении.
      `,
    },
    {
      id: 100334,
      question: "Что такое первичный ключ и внешний ключ?",
      answer: `
      **Первичный ключ (Primary Key):**
      - Уникальный идентификатор строки в таблице.
      - Не может содержать дубликаты или NULL-значения.

      **Внешний ключ (Foreign Key):**
      - Ссылается на первичный ключ другой таблицы.
      - Обеспечивает связь между таблицами.

      **Пример:**
      \`\`\`sql
      CREATE TABLE users (
        id INT PRIMARY KEY,
        name VARCHAR(50)
      );

      CREATE TABLE orders (
        order_id INT PRIMARY KEY,
        user_id INT,
        FOREIGN KEY (user_id) REFERENCES users(id)
      );
      \`\`\`
      `,
    },
    {
      id: 100335,
      question: "Что такое ORM?",
      answer: `
      **ORM (Object-Relational Mapping):**
      - Технология, позволяющая работать с базами данных через объекты, а не SQL-запросы.
      - Преобразует объекты в записи базы данных и наоборот.

      **Примеры ORM:**
      - Sequelize (JavaScript/Node.js).
      - Hibernate (Java).
      - SQLAlchemy (Python).

      **Преимущества:**
      - Упрощение работы с базой данных.
      - Абстракция от SQL.

      **Недостатки:**
      - Может быть менее производительным для сложных запросов.
      `,
    },
  ],
};
