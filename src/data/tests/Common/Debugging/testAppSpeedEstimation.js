export const testAppSpeedEstimation = {
  id: 101825,
  title: "Тест по оценке скорости приложения",
  questions: [
    {
      id: 101826,
      question: "Что такое производительность приложения?",
      answer: `
      **Производительность приложения:**
      - Это мера того, насколько быстро и эффективно приложение выполняет свои задачи.
      - Включает такие аспекты, как время загрузки, время отклика, плавность анимаций и использование ресурсов (CPU, RAM).

      **Ключевые метрики:**
      1. **Время загрузки:** Время, необходимое для полной загрузки приложения.
      2. **Время отклика:** Время, за которое приложение реагирует на действия пользователя.
      3. **FPS (Frames Per Second):** Частота кадров для анимаций и интерфейса.
      4. **Использование памяти:** Объем оперативной памяти, потребляемый приложением.

      **Пример:**
      - Приложение с временем загрузки менее 2 секунд считается быстрым.
      `,
    },
    {
      id: 101827,
      question:
        "Какие инструменты используются для оценки скорости веб-приложений?",
      answer: `
      **Инструменты для оценки скорости:**
      1. **Google Lighthouse:**
         - Инструмент для анализа производительности, доступности и SEO.
      2. **WebPageTest:**
         - Позволяет тестировать скорость загрузки страницы с различных устройств и местоположений.
      3. **Chrome DevTools:**
         - Встроенный инструмент браузера для анализа производительности и использования ресурсов.
      4. **GTmetrix:**
         - Анализирует скорость загрузки и предлагает рекомендации по оптимизации.
      5. **Pingdom:**
         - Измеряет время загрузки и предоставляет детальный отчет.

      **Пример:**
      - Используйте Google Lighthouse в Chrome DevTools для генерации отчета о производительности.
      `,
    },
    {
      id: 101828,
      question: "Как оптимизировать скорость загрузки приложения?",
      answer: `
      **Методы оптимизации:**
      1. **Минификация кода:**
         - Уменьшите размер JavaScript, CSS и HTML файлов.
      2. **Сжатие изображений:**
         - Используйте современные форматы (например, WebP) и сжимайте изображения.
      3. **Использование CDN:**
         - Размещайте статические ресурсы на серверах, близких к пользователям.
      4. **Кэширование:**
         - Используйте браузерное кэширование для повторяющихся запросов.
      5. **Ленивая загрузка (Lazy Loading):**
         - Загружайте только те ресурсы, которые видны пользователю.
      6. **Оптимизация базы данных:**
         - Индексируйте таблицы и минимизируйте количество запросов.

      **Пример:**
      \`\`\`html
      <img src="image.jpg" loading="lazy" alt="Пример ленивой загрузки">
      \`\`\`
      `,
    },
    {
      id: 101829,
      question:
        "Что такое Core Web Vitals и как они влияют на производительность?",
      answer: `
      **Core Web Vitals:**
      - Это набор метрик, разработанных Google для оценки пользовательского опыта:
        1. **LCP (Largest Contentful Paint):**
           - Время загрузки самого большого элемента на странице.
        2. **FID (First Input Delay):**
           - Время между действием пользователя и реакцией приложения.
        3. **CLS (Cumulative Layout Shift):**
           - Стабильность макета (изменение положения элементов).

      **Влияние:**
      - Высокие показатели Core Web Vitals улучшают SEO и пользовательский опыт.

      **Пример:**
      - LCP менее 2.5 секунд считается хорошим показателем.
      `,
    },
    {
      id: 101830,
      question: "Как уменьшить время отклика сервера (TTFB)?",
      answer: `
      **Методы уменьшения TTFB (Time to First Byte):**
      1. **Оптимизация серверного кода:**
         - Убедитесь, что сервер обрабатывает запросы максимально быстро.
      2. **Использование кэширования:**
         - Кэшируйте ответы сервера для часто запрашиваемых данных.
      3. **Использование HTTP/2 или HTTP/3:**
         - Ускорьте передачу данных благодаря мультиплексированию.
      4. **Размещение сервера ближе к пользователям:**
         - Используйте CDN для уменьшения задержек.

      **Пример:**
      - Переход с HTTP/1.1 на HTTP/2 может значительно снизить TTFB.
      `,
    },
    {
      id: 101831,
      question: "Как влияет JavaScript на производительность приложения?",
      answer: `
      **Влияние JavaScript:**
      1. **Блокировка рендеринга:**
         - Большой объем JavaScript может замедлить отрисовку страницы.
      2. **Парсинг и выполнение:**
         - Браузер тратит время на парсинг и выполнение JavaScript.
      3. **Перегрузка памяти:**
         - Неправильно написанный код может привести к утечкам памяти.

      **Оптимизация:**
      - Минифицируйте JavaScript.
      - Используйте \`defer\` или \`async\` для загрузки скриптов.
      - Разделяйте код на модули.

      **Пример:**
      \`\`\`html
      <script src="app.js" defer></script>
      \`\`\`
      `,
    },
    {
      id: 101832,
      question:
        "Что такое Lazy Loading и как он помогает улучшить производительность?",
      answer: `
      **Lazy Loading:**
      - Это техника, при которой ресурсы загружаются только тогда, когда они становятся необходимыми (например, когда пользователь прокручивает страницу).

      **Преимущества:**
      - Уменьшает начальную нагрузку на сеть.
      - Ускоряет первоначальную загрузку страницы.

      **Пример:**
      \`\`\`html
      <img src="image.jpg" loading="lazy" alt="Ленивая загрузка изображения">
      \`\`\`
      `,
    },
    {
      id: 101833,
      question:
        "Какие методы можно использовать для уменьшения времени отрисовки интерфейса?",
      answer: `
      **Методы уменьшения времени отрисовки:**
      1. **Виртуализация списка:**
         - Рендерите только видимые элементы списка.
      2. **CSS-оптимизация:**
         - Избегайте сложных селекторов и свойств, таких как \`box-shadow\`.
      3. **Асинхронная загрузка:**
         - Загружайте ненужные ресурсы после загрузки основного контента.
      4. **Использование GPU:**
         - Переносите анимации на GPU с помощью свойства \`transform\`.

      **Пример:**
      \`\`\`css
      .element {
        will-change: transform;
      }
      \`\`\`
      `,
    },
    {
      id: 101834,
      question:
        "Что такое Tree Shaking и как он помогает улучшить производительность?",
      answer: `
      **Tree Shaking:**
      - Это процесс удаления неиспользуемого кода (dead code) во время сборки приложения.

      **Преимущества:**
      - Уменьшает размер финального пакета.
      - Ускоряет загрузку и выполнение приложения.

      **Пример:**
      - Используйте инструменты, такие как Webpack или Rollup, для автоматического удаления неиспользуемого кода.
      `,
    },
    {
      id: 101835,
      question:
        "Какие стратегии кэширования можно использовать для улучшения производительности?",
      answer: `
      **Стратегии кэширования:**
      1. **Браузерное кэширование:**
         - Настройте заголовки \`Cache-Control\` и \`Expires\`.
      2. **Service Workers:**
         - Используйте для управления кэшированием и офлайн-доступом.
      3. **CDN-кэширование:**
         - Размещайте статические ресурсы на CDN.
      4. **Server-Side Caching:**
         - Кэшируйте результаты запросов на стороне сервера.

      **Пример:**
      \`\`\`
      Cache-Control: max-age=3600
      \`\`\`
      - Ресурс будет храниться в кэше 1 час.
      `,
    },
  ],
};
