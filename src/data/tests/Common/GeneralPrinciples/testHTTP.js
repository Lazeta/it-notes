export const testHTTP = {
  id: 101800,
  title: "Тест по HTTP и HTTPS",
  questions: [
    {
      id: 101801,
      question: "Что такое HTTP?",
      answer: `
      **HTTP (HyperText Transfer Protocol):**
      - Это протокол передачи данных, используемый для обмена информацией между клиентом (например, браузером) и сервером.
      - Основная задача — доставка HTML-документов, изображений, стилей и других ресурсов.
      - Работает поверх TCP/IP и использует текстовый формат для запросов и ответов.

      **Основные характеристики:**
      1. **Безопасность:** Не защищает данные (все передается в открытом виде).
      2. **Порт:** По умолчанию использует порт 80.
      3. **Пример запроса:**
         \`\`\`
         GET /index.html HTTP/1.1
         Host: example.com
         \`\`\`
      `,
    },
    {
      id: 101802,
      question: "Что такое HTTPS?",
      answer: `
      **HTTPS (HyperText Transfer Protocol Secure):**
      - Это безопасная версия HTTP, которая шифрует данные с помощью протоколов SSL/TLS.
      - Обеспечивает конфиденциальность, целостность и аутентификацию данных.

      **Основные характеристики:**
      1. **Шифрование:** Данные передаются в зашифрованном виде.
      2. **Порт:** По умолчанию использует порт 443.
      3. **SSL/TLS сертификат:** Сервер должен иметь сертификат для установления безопасного соединения.

      **Пример:**
      - \`https://example.com \` — безопасное соединение.
      `,
    },
    {
      id: 101803,
      question: "Какие основные различия между HTTP и HTTPS?",
      answer: `
      **Различия:**
      1. **Безопасность:**
         - HTTP: Нет шифрования, данные передаются в открытом виде.
         - HTTPS: Данные шифруются с помощью SSL/TLS.
      2. **Порт:**
         - HTTP: Порт 80.
         - HTTPS: Порт 443.
      3. **Сертификаты:**
         - HTTP: Не требует сертификатов.
         - HTTPS: Требует SSL/TLS сертификат.
      4. **Производительность:**
         - HTTP: Быстрее, так как нет шифрования.
         - HTTPS: Медленнее из-за процесса шифрования/дешифрования.
      5. **SEO:**
         - HTTPS: Предпочтителен для поисковых систем.

      **Пример:**
      - \`http://example.com\` — небезопасное соединение.
      - \`https://example.com \` — безопасное соединение.
      `,
    },
    {
      id: 101804,
      question: "Как работает SSL/TLS в HTTPS?",
      answer: `
      **SSL/TLS:**
      - Это протоколы, обеспечивающие безопасную передачу данных через HTTPS.
      - Процесс работы:
        1. **Handshake (рукопожатие):**
           - Клиент и сервер обмениваются ключами для шифрования.
        2. **Шифрование данных:**
           - Все данные шифруются на стороне клиента и расшифровываются на стороне сервера.
        3. **Аутентификация:**
           - Сервер предоставляет SSL/TLS сертификат для подтверждения своей личности.

      **Пример:**
      - При посещении \`https://example.com \`, браузер проверяет SSL/TLS сертификат сервера и устанавливает защищенное соединение.
      `,
    },
    {
      id: 101805,
      question: "Какие методы HTTP вы знаете?",
      answer: `
      **Методы HTTP:**
      1. **GET:**
         - Запрашивает данные с сервера (например, HTML-страницу).
      2. **POST:**
         - Отправляет данные на сервер (например, форму).
      3. **PUT:**
         - Обновляет существующий ресурс на сервере.
      4. **DELETE:**
         - Удаляет ресурс на сервере.
      5. **HEAD:**
         - Запрашивает только заголовки ответа (без тела).
      6. **PATCH:**
         - Частично обновляет ресурс.

      **Пример запроса:**
      \`\`\`
      GET /api/data HTTP/1.1
      Host: example.com
      \`\`\`
      `,
    },
    {
      id: 101806,
      question: "Что такое статусные коды HTTP?",
      answer: `
      **Статусные коды HTTP:**
      - Это трехзначные числа, которые сервер возвращает в ответ на HTTP-запрос.
      - Коды делятся на категории:
        1. **1xx (Информационные):** Запрос получен, продолжение процесса.
        2. **2xx (Успешные):** Запрос успешно обработан.
        3. **3xx (Перенаправления):** Дальнейшие действия необходимы для завершения запроса.
        4. **4xx (Клиентские ошибки):** Ошибка на стороне клиента.
        5. **5xx (Серверные ошибки):** Ошибка на стороне сервера.

      **Примеры:**
      - \`200 OK\`: Успешный запрос.
      - \`404 Not Found\`: Ресурс не найден.
      - \`500 Internal Server Error\`: Ошибка сервера.
      `,
    },
    {
      id: 101807,
      question: "Что такое кэширование в HTTP?",
      answer: `
      **Кэширование:**
      - Это механизм хранения копий ресурсов (например, HTML, CSS, изображений) для ускорения последующих запросов.
      - Используются заголовки:
        - \`Cache-Control\`: Управляет кэшированием.
        - \`ETag\`: Идентификатор ресурса для проверки его актуальности.
        - \`Expires\`: Время, до которого ресурс считается актуальным.

      **Пример:**
      \`\`\`
      Cache-Control: max-age=3600
      \`\`\`
      - Ресурс будет храниться в кэше 1 час.
      `,
    },
    {
      id: 101808,
      question: "Что такое CORS и как он связан с HTTP?",
      answer: `
      **CORS (Cross-Origin Resource Sharing):**
      - Это механизм, который позволяет серверу разрешать или запрещать запросы с других доменов.
      - Используется для защиты от межсайтовых атак (CSRF).
      - Заголовки:
        - \`Access-Control-Allow-Origin\`: Разрешенные источники.
        - \`Access-Control-Allow-Methods\`: Разрешенные методы (GET, POST и т.д.).

      **Пример:**
      \`\`\`
      Access-Control-Allow-Origin: *
      \`\`\`
      - Разрешены запросы с любого домена.
      `,
    },
    {
      id: 101809,
      question: "Что такое REST и как он связан с HTTP?",
      answer: `
      **REST (Representational State Transfer):**
      - Это архитектурный стиль для создания API, основанный на использовании HTTP-методов и URL.
      - Основные принципы:
        1. **Ресурсы:** Каждый ресурс имеет уникальный URL.
        2. **Методы:** Используются HTTP-методы (GET, POST, PUT, DELETE).
        3. **Состояние:** Сервер не хранит состояние клиента между запросами.

      **Пример:**
      - \`GET /users\`: Получить список пользователей.
      - \`POST /users\`: Создать нового пользователя.
      `,
    },
    {
      id: 101810,
      question: "Какие заголовки HTTP вы знаете?",
      answer: `
      **Заголовки HTTP:**
      1. **Общие заголовки:**
         - \`Cache-Control\`, \`Connection\`, \`Date\`.
      2. **Заголовки запроса:**
         - \`Host\`, \`User-Agent\`, \`Accept\`, \`Authorization\`.
      3. **Заголовки ответа:**
         - \`Content-Type\`, \`Content-Length\`, \`Set-Cookie\`.

      **Пример:**
      \`\`\`
      GET /index.html HTTP/1.1
      Host: example.com
      User-Agent: Mozilla/5.0
      Accept: text/html
      \`\`\`
      `,
    },
  ],
};
