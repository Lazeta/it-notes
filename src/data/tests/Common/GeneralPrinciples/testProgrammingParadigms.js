export const testProgrammingParadigms = {
  id: 101875,
  title: "Тест по парадигмам программирования",
  questions: [
    {
      id: 101876,
      question: "Что такое парадигма программирования?",
      answer: `
      **Парадигма программирования:**
      - Это способ организации структуры и процесса разработки программного обеспечения.
      - Определяет стиль написания кода, подходы к решению задач и принципы проектирования.

      **Основные парадигмы:**
      1. Императивное программирование.
      2. Объектно-ориентированное программирование (ООП).
      3. Функциональное программирование.
      4. Логическое программирование.
      5. Декларативное программирование.

      **Пример:**
      - В ООП программы организованы вокруг объектов, а в функциональном программировании — вокруг функций.
      `,
    },
    {
      id: 101877,
      question: "Что такое императивное программирование?",
      answer: `
      **Императивное программирование:**
      - Это парадигма, которая фокусируется на описании *как* выполнить задачу.
      - Программа представляет собой последовательность инструкций, которые изменяют состояние программы.

      **Пример:**
      \`\`\`javascript
      let sum = 0;
      for (let i = 1; i <= 5; i++) {
        sum += i;
      }
      console.log(sum); // 15
      \`\`\`
      `,
    },
    {
      id: 101878,
      question: "Что такое объектно-ориентированное программирование (ООП)?",
      answer: `
      **Объектно-ориентированное программирование (ООП):**
      - Это парадигма, основанная на использовании объектов, которые содержат данные (свойства) и поведение (методы).
      - Ключевые концепции:
        1. **Инкапсуляция:** Скрытие деталей реализации.
        2. **Наследование:** Создание новых классов на основе существующих.
        3. **Полиморфизм:** Возможность использовать один интерфейс для разных типов данных.
        4. **Абстракция:** Выделение ключевых характеристик объекта.

      **Пример:**
      \`\`\`javascript
      class Animal {
        constructor(name) {
          this.name = name;
        }
        speak() {
          console.log(\`\${this.name} makes a noise.\`);
        }
      }

      class Dog extends Animal {
        speak() {
          console.log(\`\${this.name} barks.\`);
        }
      }

      const dog = new Dog('Rex');
      dog.speak(); // Rex barks.
      \`\`\`
      `,
    },
    {
      id: 101879,
      question: "Что такое функциональное программирование?",
      answer: `
      **Функциональное программирование:**
      - Это парадигма, которая фокусируется на использовании *чистых функций* (функций без побочных эффектов).
      - Основные принципы:
        1. Неизменяемость данных.
        2. Отсутствие состояния (stateless).
        3. Композиция функций.
        4. Рекурсия вместо циклов.

      **Пример:**
      \`\`\`javascript
      const numbers = [1, 2, 3, 4];
      const doubled = numbers.map(n => n * 2);
      console.log(doubled); // [2, 4, 6, 8]
      \`\`\`
      `,
    },
    {
      id: 101880,
      question: "Что такое декларативное программирование?",
      answer: `
      **Декларативное программирование:**
      - Это парадигма, которая фокусируется на описании *что* нужно сделать, а не *как* это делать.
      - Примеры: SQL, HTML, React.

      **Пример:**
      \`\`\`javascript
      // Императивный подход:
      const numbers = [1, 2, 3, 4];
      const evenNumbers = [];
      for (let num of numbers) {
        if (num % 2 === 0) {
          evenNumbers.push(num);
        }
      }

      // Декларативный подход:
      const evenNumbersDeclarative = numbers.filter(n => n % 2 === 0);
      console.log(evenNumbersDeclarative); // [2, 4]
      \`\`\`
      `,
    },
    {
      id: 101881,
      question: "Что такое логическое программирование?",
      answer: `
      **Логическое программирование:**
      - Это парадигма, которая основана на использовании логических правил и фактов для решения задач.
      - Примеры языков: Prolog.

      **Пример:**
      \`\`\`prolog
      % Факты
      родитель(анна, борис).
      родитель(борис, катя).

      % Правило
      предок(X, Y) :- родитель(X, Y).
      предок(X, Y) :- родитель(X, Z), предок(Z, Y).

      % Запрос
      ?- предок(анна, катя). % true
      \`\`\`
      `,
    },
    {
      id: 101882,
      question:
        "В чем разница между императивным и декларативным программированием?",
      answer: `
      **Разница:**
      1. **Императивное:**
         - Описывает шаги для достижения результата.
         - Пример: Циклы, условные операторы.
      2. **Декларативное:**
         - Описывает желаемый результат, не указывая, как его достичь.
         - Пример: SQL-запросы, React.

      **Пример:**
      \`\`\`javascript
      // Императивный подход:
      const result = [];
      for (let i = 0; i < 5; i++) {
        result.push(i * 2);
      }

      // Декларативный подход:
      const resultDeclarative = Array.from({ length: 5 }, (_, i) => i * 2);
      \`\`\`
      `,
    },
    {
      id: 101883,
      question: "Что такое полиморфизм в ООП?",
      answer: `
      **Полиморфизм:**
      - Это возможность использовать один интерфейс для работы с объектами разных типов.
      - Типы полиморфизма:
        1. **Ад-хок полиморфизм:** Перегрузка функций или операторов.
        2. **Параметрический полиморфизм:** Шаблоны или обобщения.
        3. **Подтипизация:** Наследование и переопределение методов.

      **Пример:**
      \`\`\`javascript
      class Shape {
        draw() {
          console.log('Drawing a shape');
        }
      }

      class Circle extends Shape {
        draw() {
          console.log('Drawing a circle');
        }
      }

      const shapes = [new Shape(), new Circle()];
      shapes.forEach(shape => shape.draw());
      // Drawing a shape
      // Drawing a circle
      \`\`\`
      `,
    },
    {
      id: 101884,
      question:
        "Что такое рекурсия и как она используется в функциональном программировании?",
      answer: `
      **Рекурсия:**
      - Это техника, при которой функция вызывает саму себя для решения подзадач.
      - В функциональном программировании рекурсия часто используется вместо циклов.

      **Пример:**
      \`\`\`javascript
      function factorial(n) {
        if (n === 0) return 1;
        return n * factorial(n - 1);
      }

      console.log(factorial(5)); // 120
      \`\`\`
      `,
    },
    {
      id: 101885,
      question: "Какие преимущества у функционального программирования?",
      answer: `
      **Преимущества:**
      1. **Чистые функции:** Предсказуемость и отсутствие побочных эффектов.
      2. **Неизменяемость данных:** Упрощает отладку и тестирование.
      3. **Композиция функций:** Возможность комбинировать функции для создания сложных решений.
      4. **Параллелизм:** Легче писать многопоточные программы.

      **Пример:**
      \`\`\`javascript
      const add = x => y => x + y;
      const increment = add(1);
      console.log(increment(5)); // 6
      \`\`\`
      `,
    },
  ],
};
