export const testGitFlow = {
  id: 101050,
  title: "Git Flow",
  questions: [
    {
      id: 101051,
      question: "Что такое Git Flow и зачем он нужен?",
      answer: `
      **Git Flow:**
      - Это соглашение (workflow) для управления ветками в Git, которое помогает организовать процесс разработки программного обеспечения.
      - Основная цель — упростить совместную работу над проектом, четко разделяя этапы разработки.

      **Основные ветки:**
      1. **main/master:** Ветка с готовым к выпуску кодом.
      2. **develop:** Основная ветка для текущей разработки.
      3. **feature:** Ветки для новых функций.
      4. **release:** Подготовка к выпуску новой версии.
      5. **hotfix:** Исправление критических ошибок в production.

      **Преимущества:**
      - Четкое разделение задач между командами.
      - Упрощение выпуска новых версий.
      - Минимизация конфликтов при совместной работе.
      `,
    },
    {
      id: 101052,
      question: "Как работают ветки в Git Flow?",
      answer: `
      **Работа с ветками:**
      1. **main/master:**
         - Содержит только стабильный код, готовый к выпуску.
         - Обновляется только через слияние веток \`release\` или \`hotfix\`.

      2. **develop:**
         - Основная ветка для текущей разработки.
         - Все новые функции из \`feature\` веток сливаются сюда.

      3. **feature:**
         - Создаются для разработки новых функций.
         - Название ветки обычно начинается с \`feature/\`.
         - После завершения работы сливаются в \`develop\`.

      4. **release:**
         - Создается для подготовки нового релиза.
         - В этой ветке исправляются мелкие баги и обновляется документация.
         - После завершения работы сливаются в \`main\` и \`develop\`.

      5. **hotfix:**
         - Создается для быстрого исправления критических ошибок в production.
         - После завершения работы сливаются в \`main\` и \`develop\`.

      **Пример создания ветки feature:**
      \`\`\`bash
      git checkout develop
      git checkout -b feature/new-feature
      # Разработка...
      git checkout develop
      git merge feature/new-feature
      git branch -d feature/new-feature
      \`\`\`
      `,
    },
    {
      id: 101053,
      question: "Как создать новую ветку feature в Git Flow?",
      answer: `
      **Создание ветки feature:**
      1. Переключитесь на ветку \`develop\`:
         \`\`\`bash
         git checkout develop
         \`\`\`
      2. Создайте новую ветку для функции:
         \`\`\`bash
         git checkout -b feature/new-feature
         \`\`\`
      3. После завершения разработки слейте её обратно в \`develop\`:
         \`\`\`bash
         git checkout develop
         git merge feature/new-feature
         git branch -d feature/new-feature
         \`\`\`
      `,
    },
    {
      id: 101054,
      question: "Как подготовить релиз с использованием Git Flow?",
      answer: `
      **Подготовка релиза:**
      1. Создайте ветку \`release\` из \`develop\`:
         \`\`\`bash
         git checkout develop
         git checkout -b release/1.0.0
         \`\`\`
      2. Исправьте мелкие баги и обновите документацию.
      3. После завершения подготовки слейте ветку \`release\` в \`main\` и \`develop\`:
         \`\`\`bash
         git checkout main
         git merge release/1.0.0
         git tag -a v1.0.0 -m "Release version 1.0.0"

         git checkout develop
         git merge release/1.0.0
         git branch -d release/1.0.0
         \`\`\`
      `,
    },
    {
      id: 101055,
      question: "Как исправить критическую ошибку с помощью hotfix в Git Flow?",
      answer: `
      **Исправление hotfix:**
      1. Создайте ветку \`hotfix\` из \`main\`:
         \`\`\`bash
         git checkout main
         git checkout -b hotfix/1.0.1
         \`\`\`
      2. Исправьте ошибку и протестируйте изменения.
      3. После завершения исправлений слейте ветку \`hotfix\` в \`main\` и \`develop\`:
         \`\`\`bash
         git checkout main
         git merge hotfix/1.0.1
         git tag -a v1.0.1 -m "Hotfix version 1.0.1"

         git checkout develop
         git merge hotfix/1.0.1
         git branch -d hotfix/1.0.1
         \`\`\`
      `,
    },
    {
      id: 101056,
      question: "Какие преимущества у Git Flow?",
      answer: `
      **Преимущества Git Flow:**
      1. **Четкая структура:** Каждая ветка имеет четкое назначение.
      2. **Удобство выпуска релизов:** Подготовка релизов происходит в отдельной ветке.
      3. **Быстрые исправления:** Hotfix-ветки позволяют быстро устранять критические ошибки.
      4. **Минимизация конфликтов:** Разделение задач снижает вероятность конфликтов при слиянии.
      5. **Поддержка долгосрочных проектов:** Хорошо подходит для крупных проектов с регулярными релизами.
      `,
    },
    {
      id: 101057,
      question: "Какие недостатки у Git Flow?",
      answer: `
      **Недостатки Git Flow:**
      1. **Сложность для маленьких проектов:** Может быть избыточным для небольших команд или простых проектов.
      2. **Много веток:** Большое количество веток может усложнить управление.
      3. **Дополнительные шаги:** Требует больше операций слияния и переключения между ветками.
      4. **Не подходит для CI/CD:** Модель плохо сочетается с непрерывной интеграцией и доставкой.
      `,
    },
    {
      id: 101058,
      question: "В чем разница между Git Flow и GitHub Flow?",
      answer: `
      **Разница между Git Flow и GitHub Flow:**
      1. **Git Flow:**
         - Ориентирован на проекты с регулярными релизами.
         - Использует несколько типов веток (\`feature\`, \`release\`, \`hotfix\`).

      2. **GitHub Flow:**
         - Простая модель для непрерывной доставки.
         - Основана на ветках \`main\` и \`feature\`.
         - Каждая ветка должна быть готова к выпуску после проверки.

      **Выбор модели:**
      - Git Flow подходит для крупных проектов с плановыми релизами.
      - GitHub Flow лучше для небольших проектов и команд, работающих в режиме CI/CD.
      `,
    },
    {
      id: 101059,
      question: "Как создать тег для релиза в Git Flow?",
      answer: `
      **Создание тега для релиза:**
      1. Переключитесь на ветку \`main\`:
         \`\`\`bash
         git checkout main
         \`\`\`
      2. Создайте аннотированный тег:
         \`\`\`bash
         git tag -a v1.0.0 -m "Release version 1.0.0"
         \`\`\`
      3. Отправьте тег в удаленный репозиторий:
         \`\`\`bash
         git push origin v1.0.0
         \`\`\`
      `,
    },
    {
      id: 101060,
      question: "Как откатить изменения в Git Flow?",
      answer: `
      **Откат изменений:**
      1. **Откат коммита:**
         - Если нужно отменить последний коммит:
         \`\`\`bash
         git reset --hard HEAD~1
         \`\`\`
      2. **Откат слияния:**
         - Если нужно отменить слияние:
         \`\`\`bash
         git revert -m 1 <commit-hash>
         \`\`\`
      3. **Откат релиза:**
         - Если релиз содержит ошибки, можно создать hotfix или откатить тег:
         \`\`\`bash
         git tag -d v1.0.0
         git push origin :refs/tags/v1.0.0
         \`\`\`
      `,
    },
  ],
};
