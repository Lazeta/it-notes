export const testMethodologyBem = {
  id: 100925,
  title: "Методология BEM",
  questions: [
    {
      id: 100926,
      question: "Что такое методология BEM?",
      answer: `
      **Методология BEM (Block, Element, Modifier):**
      - Это подход к написанию CSS-классов и структурированию HTML-кода, который помогает создавать масштабируемые и поддерживаемые интерфейсы.
      - Основана на трех ключевых понятиях:
        1. **Блок (Block):** Независимый компонент, который можно переиспользовать.
        2. **Элемент (Element):** Часть блока, которая не имеет смысла вне этого блока.
        3. **Модификатор (Modifier):** Флаг или состояние, которое изменяет внешний вид или поведение блока/элемента.

      **Пример:**
      \`\`\`html
      <div class="card">
        <div class="card__title">Заголовок</div>
        <div class="card__content card__content--highlighted">Контент</div>
      </div>
      \`\`\`
      `,
    },
    {
      id: 100927,
      question: "Какие преимущества у методологии BEM?",
      answer: `
      **Преимущества BEM:**
      1. **Масштабируемость:** Легко добавлять новые компоненты без конфликтов.
      2. **Читаемость:** Классы описывают структуру и назначение элементов.
      3. **Переиспользование:** Блоки можно использовать в разных частях проекта.
      4. **Поддержка:** Упрощается работа с кодом для новых разработчиков.
      5. **Изоляция:** Классы уникальны, что минимизирует конфликты стилей.

      **Пример:**
      - Использование одного блока \`button\` в разных местах интерфейса.
      `,
    },
    {
      id: 100928,
      question: "Как правильно называть классы в BEM?",
      answer: `
      **Правила именования классов в BEM:**
      1. **Блок:** Название блока пишется в нижнем регистре.
         - Пример: \`header\`, \`button\`.
      2. **Элемент:** Название элемента отделяется от блока двойным подчеркиванием (\`__\`).
         - Пример: \`card__title\`, \`menu__item\`.
      3. **Модификатор:** Модификатор отделяется от блока или элемента двойным дефисом (\`--\`).
         - Пример: \`button--disabled\`, \`card__content--highlighted\`.

      **Важно:**
      - Классы должны быть осмысленными и описывать функционал, а не внешний вид.
      `,
    },
    {
      id: 100929,
      question: "Что такое блок в BEM?",
      answer: `
      **Блок:**
      - Это независимый компонент, который можно переиспользовать.
      - Блок не зависит от других блоков и может существовать автономно.

      **Пример:**
      \`\`\`html
      <div class="button">Кнопка</div>
      \`\`\`
      - \`button\` — это блок.
      `,
    },
    {
      id: 100930,
      question: "Что такое элемент в BEM?",
      answer: `
      **Элемент:**
      - Это часть блока, которая не имеет смысла вне этого блока.
      - Элемент всегда связан с конкретным блоком.

      **Пример:**
      \`\`\`html
      <div class="card">
        <div class="card__title">Заголовок</div>
        <div class="card__content">Контент</div>
      </div>
      \`\`\`
      - \`card__title\` и \`card__content\` — это элементы блока \`card\`.
      `,
    },
    {
      id: 100931,
      question: "Что такое модификатор в BEM?",
      answer: `
      **Модификатор:**
      - Это флаг или состояние, которое изменяет внешний вид или поведение блока/элемента.
      - Модификатор может быть булевым (например, \`--active\`) или иметь значение (например, \`--size-large\`).

      **Пример:**
      \`\`\`html
      <div class="button button--disabled">Отключенная кнопка</div>
      \`\`\`
      - \`button--disabled\` — это модификатор, указывающий на состояние блока \`button\`.
      `,
    },
    {
      id: 100932,
      question: "Как избежать конфликтов стилей при использовании BEM?",
      answer: `
      **Способы избежать конфликтов:**
      1. **Уникальные классы:** Каждому блоку и элементу присваивается уникальный класс.
      2. **Отсутствие вложенности:** В CSS используется плоская структура без глубокой вложенности.
      3. **Избегание глобальных стилей:** Все стили определяются через классы BEM.

      **Пример:**
      - Вместо:
      \`\`\`css
      .card .title { color: red; }
      \`\`\`
      - Используйте:
      \`\`\`css
      .card__title { color: red; }
      \`\`\`
      `,
    },
    {
      id: 100933,
      question: "Как организовать файловую структуру в BEM?",
      answer: `
      **Файловая структура BEM:**
      1. **Flat structure (плоская):**
         - Все файлы хранятся в одной директории.
         - Пример: \`blocks/button.css\`, \`blocks/card.css\`.
      2. **Nested structure (вложенная):**
         - Файлы организованы по уровням вложенности.
         - Пример:
           \`\`\`
           blocks/
             button/
               button.css
               button.js
             card/
               card.css
               card.js
           \`\`\`

      **Выбор структуры:**
      - Плоская структура проще, но вложенная лучше масштабируется.
      `,
    },
    {
      id: 100934,
      question: "Как интегрировать BEM с CSS-препроцессорами?",
      answer: `
      **Интеграция BEM с препроцессорами:**
      - Препроцессоры (например, Sass) позволяют упростить работу с BEM за счет вложенных правил.

      **Пример с Sass:**
      \`\`\`scss
      .card {
        &__title {
          color: blue;
        }
        &__content {
          padding: 10px;
          &--highlighted {
            background-color: yellow;
          }
        }
      }
      \`\`\`
      - Преобразуется в:
      \`\`\`css
      .card__title { color: blue; }
      .card__content { padding: 10px; }
      .card__content--highlighted { background-color: yellow; }
      \`\`\`
      `,
    },
    {
      id: 100935,
      question: "Какие инструменты поддерживают BEM?",
      answer: `
      **Инструменты для работы с BEM:**
      1. **BEM Tools:** Утилиты для автоматизации создания и управления BEM-компонентами.
      2. **PostCSS:** Плагины для работы с BEM-классами.
      3. **Sass/Less/Stylus:** Препроцессоры, которые упрощают написание BEM-стилей.
      4. **React/Vue/Angular:** Компоненты можно организовывать по принципам BEM.

      **Пример:**
      - В React компонент \`Button\` может использовать BEM-классы:
      \`\`\`jsx
      import './Button.css';

      function Button() {
        return <button className="button button--primary">Click me</button>;
      }
      \`\`\`
      `,
    },
  ],
};
