export const testBOM = {
  id: 100250,
  title: "BOM (Browser Object Model)",
  questions: [
    {
      id: 100251,
      question: "Что такое BOM?",
      answer: `
      **BOM (Browser Object Model)** — это набор объектов, предоставляемых браузером для взаимодействия с окном, 
      документом, историей, расположением и другими аспектами браузера. Основной объект BOM — \`window\`, который 
      является глобальным объектом в браузере.

      **Основные объекты BOM:**
      - \`window\`: Представляет окно браузера.
      - \`navigator\`: Содержит информацию о браузере и устройстве пользователя.
      - \`location\`: Предоставляет доступ к URL текущей страницы.
      - \`history\`: Позволяет управлять историей браузера.
      - \`screen\`: Содержит информацию о экране пользователя.
      `,
    },
    {
      id: 100252,
      question: "Как использовать объект window в JavaScript?",
      answer: `
      **Объект \`window\`:**
      - Является глобальным объектом в браузере.
      - Содержит методы и свойства для управления окном браузера.

      **Примеры использования:**
      \`\`\`javascript
      // Открытие нового окна
      window.open('https://example.com'); 

      // Закрытие текущего окна
      window.close();

      // Установка таймера
      setTimeout(() => console.log('Hello!'), 1000);

      // Получение высоты окна
      console.log(window.innerHeight);
      \`\`\`
      `,
    },
    {
      id: 100253,
      question: "Как работать с объектом location?",
      answer: `
      **Объект \`location\`:**
      - Предоставляет доступ к URL текущей страницы.
      - Позволяет перенаправлять пользователя на другую страницу или изменять URL.

      **Свойства и методы:**
      - \`location.href\`: Полный URL текущей страницы.
      - \`location.pathname\`: Путь к текущему файлу.
      - \`location.search\`: Параметры запроса (query string).
      - \`location.reload()\`: Перезагружает страницу.
      - \`location.assign(url)\`: Перенаправляет на указанный URL.

      **Примеры:**
      \`\`\`javascript
      // Получение текущего URL
      console.log(location.href);

      // Перенаправление на другой сайт
      location.assign('https://example.com'); 

      // Перезагрузка страницы
      location.reload();
      \`\`\`
      `,
    },
    {
      id: 100254,
      question: "Как управлять историей браузера с помощью объекта history?",
      answer: `
      **Объект \`history\`:**
      - Позволяет управлять историей браузера (переходы вперед и назад).

      **Методы:**
      - \`history.back()\`: Переход назад.
      - \`history.forward()\`: Переход вперед.
      - \`history.go(n)\`: Переход на определенное количество страниц (положительное или отрицательное значение).

      **Примеры:**
      \`\`\`javascript
      // Переход назад
      history.back();

      // Переход вперед
      history.forward();

      // Переход на две страницы назад
      history.go(-2);
      \`\`\`
      `,
    },
    {
      id: 100255,
      question:
        "Как получить информацию о браузере с помощью объекта navigator?",
      answer: `
      **Объект \`navigator\`:**
      - Содержит информацию о браузере, устройстве и операционной системе пользователя.

      **Свойства:**
      - \`navigator.userAgent\`: Информация о браузере и устройстве.
      - \`navigator.language\`: Язык браузера.
      - \`navigator.geolocation\`: API для работы с геолокацией.
      - \`navigator.platform\`: Информация о платформе (например, Windows, Mac).

      **Примеры:**
      \`\`\`javascript
      // Получение информации о браузере
      console.log(navigator.userAgent);

      // Получение языка браузера
      console.log(navigator.language);

      // Получение геолокации
      navigator.geolocation.getCurrentPosition((position) => {
        console.log(position.coords.latitude, position.coords.longitude);
      });
      \`\`\`
      `,
    },
    {
      id: 100256,
      question: "Как использовать объект screen?",
      answer: `
      **Объект \`screen\`:**
      - Содержит информацию о экране пользователя, такую как разрешение, цветовая глубина и доступная область.

      **Свойства:**
      - \`screen.width\`: Ширина экрана в пикселях.
      - \`screen.height\`: Высота экрана в пикселях.
      - \`screen.availWidth\`: Доступная ширина экрана (без учета панелей задач).
      - \`screen.availHeight\`: Доступная высота экрана.
      - \`screen.colorDepth\`: Глубина цвета экрана.

      **Примеры:**
      \`\`\`javascript
      // Получение разрешения экрана
      console.log(screen.width, screen.height);

      // Получение доступной области экрана
      console.log(screen.availWidth, screen.availHeight);

      // Получение глубины цвета
      console.log(screen.colorDepth);
      \`\`\`
      `,
    },
    {
      id: 100257,
      question:
        "Как обрабатывать события окна, такие как загрузка страницы или изменение размера?",
      answer: `
      **Обработка событий окна:**
      - Браузер предоставляет события для управления состоянием окна.

      **Примеры событий:**
      - \`load\`: Срабатывает, когда страница полностью загружена.
      - \`resize\`: Срабатывает при изменении размера окна.
      - \`scroll\`: Срабатывает при прокрутке страницы.

      **Примеры:**
      \`\`\`javascript
      // Обработка загрузки страницы
      window.addEventListener('load', () => {
        console.log('Страница загружена');
      });

      // Обработка изменения размера окна
      window.addEventListener('resize', () => {
        console.log('Размер окна изменен:', window.innerWidth, window.innerHeight);
      });

      // Обработка прокрутки
      window.addEventListener('scroll', () => {
        console.log('Прокручено:', window.scrollY);
      });
      \`\`\`
      `,
    },
    {
      id: 100258,
      question:
        "Как использовать метод prompt() для взаимодействия с пользователем?",
      answer: `
      **Метод \`prompt()\`:**
      - Отображает диалоговое окно с полем для ввода текста.
      - Возвращает введенный текст или \`null\`, если пользователь отменил ввод.

      **Пример:**
      \`\`\`javascript
      const name = prompt('Введите ваше имя:');
      if (name) {
        console.log('Привет,', name);
      } else {
        console.log('Вы не ввели имя.');
      }
      \`\`\`
      `,
    },
    {
      id: 100259,
      question: "Как использовать метод alert() и confirm()?",
      answer: `
      **Методы \`alert()\` и \`confirm()\`:**
      - \`alert()\`: Отображает сообщение с кнопкой "OK".
      - \`confirm()\`: Отображает сообщение с кнопками "OK" и "Cancel". Возвращает \`true\` или \`false\`.

      **Примеры:**
      \`\`\`javascript
      // Отображение сообщения
      alert('Это важное сообщение!');

      // Подтверждение действия
      const isConfirmed = confirm('Вы уверены?');
      if (isConfirmed) {
        console.log('Пользователь согласился.');
      } else {
        console.log('Пользователь отменил.');
      }
      \`\`\`
      `,
    },
  ],
};
