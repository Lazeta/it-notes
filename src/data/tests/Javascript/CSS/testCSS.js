export const testCSS = {
  id: 101175,
  title: "CSS",
  questions: [
    {
      id: 101176,
      question: "Что такое CSS?",
      answer: `
      **CSS (Cascading Style Sheets):**
      - Это язык стилей, который используется для описания внешнего вида HTML-документа.
      - CSS определяет, как элементы будут отображаться на экране, бумаге или других устройствах.

      **Основные функции:**
      1. Оформление текста (шрифты, цвета, размеры).
      2. Расположение элементов на странице (позиционирование, сетки).
      3. Анимации и переходы.
      4. Адаптивный дизайн (медиа-запросы).

      **Пример:**
      \`\`\`css
      body {
        font-family: Arial, sans-serif;
        background-color: #f0f0f0;
      }
      \`\`\`
      `,
    },
    {
      id: 101177,
      question: "Что означает слово 'каскад' в CSS?",
      answer: `
      **Каскад:**
      - Это механизм, который определяет, какие стили применяются к элементу, если есть конфликты между правилами.
      - Приоритет определяется по следующим факторам:
        1. Важность (\`!important\`).
        2. Специфичность селекторов.
        3. Порядок объявления (последнее правило имеет приоритет).

      **Пример:**
      \`\`\`css
      p {
        color: blue; /* Применится */
      }
      p {
        color: red; /* Перезапишет предыдущее правило */
      }
      \`\`\`
      `,
    },
    {
      id: 101178,
      question: "Какая разница между margin и padding?",
      answer: `
      **Разница:**
      - **Margin:** Внешний отступ, который создает пространство между элементами.
      - **Padding:** Внутренний отступ, который создает пространство внутри элемента между его содержимым и границей.

      **Пример:**
      \`\`\`css
      .box {
        margin: 20px; /* Отступ снаружи */
        padding: 10px; /* Отступ внутри */
        border: 1px solid black;
      }
      \`\`\`
      `,
    },
    {
      id: 101179,
      question: "Свойство display - основное значение и как оно работает?",
      answer: `
      **Свойство display:**
      - Определяет, как элемент будет отображаться в документе.
      - Основные значения:
        1. \`block\`: Элемент занимает всю доступную ширину.
        2. \`inline\`: Элемент занимает только необходимую ширину.
        3. \`inline-block\`: Комбинация inline и block.
        4. \`flex\`: Создает гибкий контейнер для расположения элементов.
        5. \`grid\`: Создает сетку для расположения элементов.

      **Пример:**
      \`\`\`css
      .container {
        display: flex;
        justify-content: center;
        align-items: center;
      }
      \`\`\`
      `,
    },
    {
      id: 101180,
      question: "Как отцентрировать блок по горизонтали и по вертикали?",
      answer: `
      **Методы центрирования:**
      1. **Flexbox:**
         - Используйте \`display: flex\` с \`justify-content\` и \`align-items\`.
      2. **Grid:**
         - Используйте \`display: grid\` с \`place-items: center\`.
      3. **Position + Transform:**
         - Используйте абсолютное позиционирование и трансформацию.

      **Пример Flexbox:**
      \`\`\`css
      .container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
      }
      \`\`\`

      **Пример Position + Transform:**
      \`\`\`css
      .centered {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }
      \`\`\`
      `,
    },
    {
      id: 101181,
      question: "Что такое inline-стили, и какой они имеют приоритет?",
      answer: `
      **Inline-стили:**
      - Это стили, которые напрямую добавляются в HTML-элемент через атрибут \`style\`.
      - Inline-стили имеют высокий приоритет, но ниже, чем \`!important\`.

      **Пример:**
      \`\`\`html
      <div style="color: red;">Текст</div>
      \`\`\`
      `,
    },
    {
      id: 101182,
      question: "Что такое наследование в CSS?",
      answer: `
      **Наследование:**
      - Некоторые свойства CSS автоматически передаются дочерним элементам.
      - Например, \`font-family\`, \`color\` и \`text-align\` наследуются.

      **Пример:**
      \`\`\`css
      body {
        color: blue;
      }
      /* Все дочерние элементы будут иметь синий цвет текста */
      \`\`\`
      `,
    },
    {
      id: 101183,
      question: "Какими способами можно скрыть элемент?",
      answer: `
      **Способы скрытия элемента:**
      1. \`display: none;\`: Удаляет элемент из потока документа.
      2. \`visibility: hidden;\`: Скрывает элемент, но он остается в потоке.
      3. \`opacity: 0;\`: Делает элемент невидимым, но он остается интерактивным.
      4. \`position: absolute; left: -9999px;\`: Перемещает элемент за пределы экрана.

      **Пример:**
      \`\`\`css
      .hidden {
        display: none;
      }
      \`\`\`
      `,
    },
    {
      id: 101184,
      question: "Что необходимо указать в CSS для срабатывания медиа-запросов?",
      answer: `
      **Медиа-запросы:**
      - Это правила, которые применяются в зависимости от характеристик устройства (например, ширины экрана).
      - Для создания медиа-запроса используйте \`@media\`.

      **Пример:**
      \`\`\`css
      @media (max-width: 768px) {
        body {
          background-color: lightblue;
        }
      }
      \`\`\`
      `,
    },
    {
      id: 101185,
      question: "Что такое псевдоклассы и псевдоэлементы в CSS?",
      answer: `
      **Псевдоклассы:**
      - Определяют состояние элемента (например, \`hover\`, \`focus\`).
      - Пример: \`a:hover { color: red; }\`.

      **Псевдоэлементы:**
      - Позволяют стилизовать определенные части элемента (например, \`::before\`, \`::after\`).
      - Пример:
      \`\`\`css
      p::first-line {
        font-weight: bold;
      }
      \`\`\`
      `,
    },
  ],
};
