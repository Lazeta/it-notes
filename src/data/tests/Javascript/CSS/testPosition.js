export const testPosition = {
  id: 100800,
  title: "Позиционирование",
  questions: [
    {
      id: 100801,
      question: "Какие типы позиционирования существуют в CSS?",
      answer: `
**Типы позиционирования:**
1. **static (статическое):**
   - Значение по умолчанию.
   - Элементы располагаются в обычном потоке документа.
   - Свойства \`top\`, \`right\`, \`bottom\`, \`left\` и \`z-index\` не работают.

2. **relative (относительное):**
   - Элемент позиционируется относительно своего нормального положения.
   - Свойства \`top\`, \`right\`, \`bottom\`, \`left\` сдвигают элемент.

3. **absolute (абсолютное):**
   - Элемент позиционируется относительно ближайшего позиционированного родителя (\`position: relative\`, \`absolute\`, или \`fixed\`).
   - Если такого родителя нет, элемент позиционируется относительно документа.

4. **fixed (фиксированное):**
   - Элемент позиционируется относительно viewport и остается на месте при прокрутке.

5. **sticky (липкое):**
   - Комбинация \`relative\` и \`fixed\`.
   - Элемент ведет себя как \`relative\`, пока не достигнет определенной точки, затем фиксируется.

**Пример:**
\`\`\`css
.relative {
  position: relative;
  top: 10px;
}
.absolute {
  position: absolute;
  top: 50px;
}
.fixed {
  position: fixed;
  top: 0;
}
.sticky {
  position: sticky;
  top: 20px;
}
\`\`\`
`,
    },
    {
      id: 100802,
      question: "Что такое z-index и как он работает?",
      answer: `
**z-index:**
- Определяет порядок наложения элементов.
- Работает только для элементов с \`position: relative\`, \`absolute\`, \`fixed\`, или \`sticky\`.

**Правила:**
1. Чем выше значение \`z-index\`, тем «выше» элемент.
2. Если \`z-index\` не указан, элементы накладываются в порядке их появления в HTML.

**Пример:**
\`\`\`css
.box1 {
  position: absolute;
  z-index: 2;
}

.box2 {
  position: absolute;
  z-index: 1;
}
/* box1 будет выше box2 */
\`\`\`
`,
    },
    {
      id: 100803,
      question: "Как работает свойство position: sticky?",
      answer: `
**position: sticky:**
- Элемент ведет себя как \`relative\`, пока не достигнет определенной точки (например, верхней границы viewport), затем фиксируется.

**Пример:**
\`\`\`css
.sticky-header {
  position: sticky;
  top: 0;
  background-color: white;
}
/* Элемент фиксируется в верхней части экрана при прокрутке */
\`\`\`
`,
    },
    {
      id: 100804,
      question: "Как центрировать элемент с помощью position: absolute?",
      answer: `
**Центрирование с position: absolute:**
- Используйте комбинацию \`top: 50%\`, \`left: 50%\` и \`transform: translate(-50%, -50%)\`.

**Пример:**
\`\`\`css
.centered {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
/* Элемент будет точно по центру родительского контейнера */
\`\`\`
`,
    },
    {
      id: 100805,
      question: "В чем разница между position: relative и position: absolute?",
      answer: `
**Разница:**
1. **position: relative:**
   - Элемент позиционируется относительно своего нормального положения.
   - Не влияет на другие элементы.

2. **position: absolute:**
   - Элемент позиционируется относительно ближайшего позиционированного родителя.
   - Если такого родителя нет, элемент позиционируется относительно документа.

**Пример:**
\`\`\`css
.relative {
  position: relative;
  top: 10px; /* Сдвигается относительно своего места */
}

.absolute {
  position: absolute;
  top: 50px; /* Сдвигается относительно родителя */
}
\`\`\`
`,
    },
  ],
};
