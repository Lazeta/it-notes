export const testTernaryOperator = {
  id: 101300,
  title: "Тернарный оператор",
  questions: [
    {
      id: 101301,
      question: "Что такое тернарный оператор?",
      answer: `
**Тернарный оператор:**
- Это сокращенная форма условного оператора \`if...else\`.
- Синтаксис: \`условие ? выражение1 : выражение2\`.
- Если условие истинно, возвращается \`выражение1\`; если ложно — \`выражение2\`.

**Пример:**
\`\`\`javascript
const age = 18;
const message = age >= 18 ? 'Взрослый' : 'Несовершеннолетний';
console.log(message); // 'Взрослый'
\`\`\`
`,
    },
    {
      id: 101302,
      question: "Как использовать тернарный оператор для отображения JSX?",
      answer: `
**Использование в JSX:**
- Тернарный оператор часто используется в React для условного рендеринга.

**Пример:**
\`\`\`javascript
function Greeting({ isLoggedIn }) {
  return (
    <div>
      {isLoggedIn ? <p>Привет, пользователь!</p> : <p>Пожалуйста, войдите.</p>}
    </div>
  );
}
\`\`\`
`,
    },
    {
      id: 101303,
      question: "Как работает вложенный тернарный оператор?",
      answer: `
**Вложенный тернарный оператор:**
- Позволяет проверять несколько условий в одной строке.
- Рекомендуется использовать с осторожностью, чтобы не усложнять код.

**Пример:**
\`\`\`javascript
const score = 85;
const grade =
  score >= 90 ? 'A' :
  score >= 80 ? 'B' :
  score >= 70 ? 'C' :
  'D';

console.log(grade); // 'B'
\`\`\`
`,
    },
    {
      id: 101304,
      question: "В чем разница между if...else и тернарным оператором?",
      answer: `
**Разница:**
1. **Синтаксис:**
   - \`if...else\`: Более гибкий, но занимает больше строк.
   - Тернарный оператор: Компактный, но подходит только для простых условий.
2. **Возвращаемое значение:**
   - \`if...else\`: Не возвращает значение напрямую.
   - Тернарный оператор: Всегда возвращает значение.
3. **Читаемость:**
   - \`if...else\`: Лучше для сложных условий.
   - Тернарный оператор: Подходит для простых условий.

**Пример:**
\`\`\`javascript
// if...else:
let result;
if (score > 50) {
  result = 'Passed';
} else {
  result = 'Failed';
}

// Тернарный оператор:
const result = score > 50 ? 'Passed' : 'Failed';
\`\`\`
`,
    },
    {
      id: 101305,
      question: "Как избежать ошибок при использовании тернарного оператора?",
      answer: `
**Советы по использованию:**
1. **Избегайте глубокой вложенности:**
   - Вложенные тернарные операторы могут сделать код трудным для чтения.
2. **Используйте скобки для ясности:**
   - Добавляйте круглые скобки для улучшения читаемости.
3. **Ограничьте использование для простых условий:**
   - Для сложных условий лучше использовать \`if...else\`.

**Пример с скобками:**
\`\`\`javascript
const result = (score > 90) ? 'Отлично' : ((score > 70) ? 'Хорошо' : 'Удовлетворительно');
\`\`\`
`,
    },
  ],
};
