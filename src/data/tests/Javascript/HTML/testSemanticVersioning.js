export const testSemanticVersioning = {
  id: 100675,
  title: "Семантическое версионирование",
  questions: [
    {
      id: 100676,
      question:
        "Что такое семантическое версионирование (Semantic Versioning)?",
      answer: `
**Семантическое версионирование (SemVer):**
- Это стандарт управления версиями ПО, который помогает разработчикам четко обозначать изменения в программном обеспечении.
- Версии имеют формат \`MAJOR.MINOR.PATCH\`:
  - **MAJOR:** Основная версия. Увеличивается при внесении обратно несовместимых изменений.
  - **MINOR:** Второстепенная версия. Увеличивается при добавлении новой функциональности, совместимой с предыдущими версиями.
  - **PATCH:** Исправления. Увеличивается при выпуске исправлений ошибок, которые не влияют на API.

**Пример:**
\`\`\`
1.0.0 -> 1.1.0 (добавлена новая функциональность)
1.1.0 -> 1.1.1 (исправлен баг)
1.1.1 -> 2.0.0 (внесены обратно несовместимые изменения)
\`\`\`
`,
    },
    {
      id: 100677,
      question: "Какие правила увеличения номеров версий в SemVer?",
      answer: `
**Правила увеличения версий:**
1. **MAJOR:**
   - Увеличивается при внесении обратно несовместимых изменений.
   - Пример: \`1.0.0 -> 2.0.0\`.

2. **MINOR:**
   - Увеличивается при добавлении новой функциональности, которая совместима с предыдущими версиями.
   - Пример: \`1.0.0 -> 1.1.0\`.

3. **PATCH:**
   - Увеличивается при выпуске исправлений ошибок, которые не затрагивают API.
   - Пример: \`1.0.0 -> 1.0.1\`.

**Дополнительно:**
- Можно добавлять префиксы (например, \`alpha\`, \`beta\`, \`rc\`) для обозначения стадий разработки.
- Пример: \`1.0.0-alpha.1\`.
`,
    },
    {
      id: 100678,
      question: "Зачем нужно семантическое версионирование?",
      answer: `
**Цели семантического версионирования:**
1. **Четкость обновлений:**
   - Разработчики и пользователи понимают, какие изменения внесены в новую версию.

2. **Совместимость:**
   - MINOR и PATCH гарантируют, что новые версии совместимы с предыдущими.

3. **Управление зависимостями:**
   - Инструменты, такие как npm или yarn, используют SemVer для управления зависимостями.

4. **Прогнозируемость:**
   - Пользователи могут ожидать поведение новой версии на основе её номера.

**Пример использования:**
- Если вы используете библиотеку \`^1.2.3\`, это означает, что допустимы обновления до \`1.x.x\`, но не до \`2.0.0\`.
`,
    },
    {
      id: 100679,
      question: "Как указать диапазон версий в package.json?",
      answer: `
**Диапазоны версий в package.json:**
1. **Точная версия:**
   - \`"package-name": "1.2.3"\` — используется только версия \`1.2.3\`.

2. **Caret (\`^\`):**
   - \`"package-name": "^1.2.3"\` — разрешены обновления до \`1.x.x\`, но не до \`2.0.0\`.

3. **Tilde (\`~\`):**
   - \`"package-name": "~1.2.3"\` — разрешены обновления только до \`1.2.x\`.

4. **Диапазон версий:**
   - \`"package-name": ">=1.2.3 <2.0.0"\` — разрешены версии от \`1.2.3\` до \`2.0.0\`.

5. **Latest:**
   - \`"package-name": "*"\` — разрешены любые версии.

**Пример:**
\`\`\`json
{
  "dependencies": {
    "lodash": "^4.17.21"
  }
}
\`\`\`
`,
    },
    {
      id: 100680,
      question:
        "Какие есть дополнительные метки в семантическом версионировании?",
      answer: `
**Дополнительные метки:**
1. **Pre-release (предварительные релизы):**
   - Добавляются после основного номера через дефис.
   - Примеры: \`1.0.0-alpha\`, \`1.0.0-beta.1\`, \`1.0.0-rc.2\`.

2. **Build metadata (метаданные сборки):**
   - Добавляются после основного номера через \`+\`.
   - Пример: \`1.0.0+001\`, \`1.0.0-alpha+exp.sha.5114f85\`.

**Использование меток:**
- \`alpha\`: Ранняя версия, не готовая к использованию.
- \`beta\`: Тестовая версия с ограниченной функциональностью.
- \`rc\` (Release Candidate): Почти финальная версия, готовая к выпуску.
`,
    },
    {
      id: 100681,
      question: "Как работает сравнение версий в SemVer?",
      answer: `
**Сравнение версий:**
- Версии сравниваются по каждому компоненту (MAJOR, MINOR, PATCH) слева направо.
- Большая версия имеет более высокий приоритет.

**Примеры:**
1. \`1.2.3 < 1.2.4\` (PATCH больше).
2. \`1.2.3 < 1.3.0\` (MINOR больше).
3. \`1.2.3 < 2.0.0\` (MAJOR больше).
4. \`1.0.0-alpha < 1.0.0-beta\` (метка \`alpha\` ниже \`beta\`).

**Инструменты для сравнения:**
- \`semver\` (Node.js пакет):
  \`\`\`bash
  npx semver -r ">=1.2.3 <2.0.0" 1.5.0
  \`\`\`
`,
    },
    {
      id: 100682,
      question: "Какие инструменты поддерживают SemVer?",
      answer: `
**Инструменты, поддерживающие SemVer:**
1. **npm/yarn/pnpm:**
   - Управление зависимостями на основе SemVer.

2. **Git tags:**
   - Маркировка релизов с использованием SemVer.

3. **CI/CD pipelines:**
   - Автоматическое создание релизов с правильной версией.

4. **Пакетные менеджеры:**
   - Composer (PHP), Cargo (Rust), Pip (Python) и другие.

**Пример использования в npm:**
\`\`\`bash
npm version patch # Увеличивает PATCH
npm version minor # Увеличивает MINOR
npm version major # Увеличивает MAJOR
\`\`\`
`,
    },
  ],
};
