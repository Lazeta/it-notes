export const testJSX = {
  id: 101225,
  title: "JSX",
  questions: [
    {
      id: 101226,
      question: "Что такое JSX?",
      answer: `
      **JSX (JavaScript XML):**
      - Это синтаксическое расширение JavaScript, которое позволяет писать HTML-подобный код для создания элементов React.
      - JSX преобразуется в вызовы \`React.createElement\` при компиляции.

      **Пример:**
      \`\`\`javascript
      const element = <h1>Привет, мир!</h1>;
      \`\`\`

      **После компиляции:**
      \`\`\`javascript
      const element = React.createElement('h1', null, 'Привет, мир!');
      \`\`\`
      `,
    },
    {
      id: 101227,
      question: "Зачем нужен JSX?",
      answer: `
      **Цели использования JSX:**
      1. **Удобство написания:**
         - JSX делает код более читаемым и похожим на HTML.
      2. **Интеграция логики и разметки:**
         - Позволяет совмещать JavaScript и HTML в одном файле.
      3. **Создание деревьев элементов:**
         - Упрощает создание сложных структур UI.

      **Пример:**
      \`\`\`javascript
      const name = 'Алиса';
      const element = <h1>Привет, {name}!</h1>;
      \`\`\`
      `,
    },
    {
      id: 101228,
      question: "Как вставить JavaScript в JSX?",
      answer: `
      **Вставка JavaScript:**
      - Используйте фигурные скобки \`{ }\` для вставки JavaScript-выражений.

      **Пример:**
      \`\`\`javascript
      const user = { name: 'Алиса', age: 25 };

      function App() {
        return (
          <div>
            <p>Имя: {user.name}</p>
            <p>Возраст: {user.age}</p>
          </div>
        );
      }
      \`\`\`
      `,
    },
    {
      id: 101229,
      question: "Как использовать условия в JSX?",
      answer: `
      **Условия в JSX:**
      - Используйте тернарный оператор или логические выражения внутри фигурных скобок.

      **Пример:**
      \`\`\`javascript
      function Greeting({ isLoggedIn }) {
        return (
          <div>
            {isLoggedIn ? <p>Добро пожаловать!</p> : <p>Пожалуйста, войдите.</p>}
          </div>
        );
      }
      \`\`\`
      `,
    },
    {
      id: 101230,
      question: "Как передать атрибуты в JSX?",
      answer: `
      **Передача атрибутов:**
      - Атрибуты записываются как в HTML, но используют camelCase для названий (например, \`className\` вместо \`class\`).

      **Пример:**
      \`\`\`javascript
      const element = (
        <div className="container" style={{ color: 'red' }}>
          Текст
        </div>
      );
      \`\`\`
      `,
    },
    {
      id: 101231,
      question: "Как работают дочерние элементы в JSX?",
      answer: `
      **Дочерние элементы:**
      - Дочерние элементы помещаются между открывающим и закрывающим тегами.

      **Пример:**
      \`\`\`javascript
      const element = (
        <div>
          <h1>Заголовок</h1>
          <p>Текст</p>
        </div>
      );
      \`\`\`
      `,
    },
    {
      id: 101232,
      question: "Можно ли использовать массивы в JSX?",
      answer: `
      **Массивы в JSX:**
      - Да, массивы можно рендерить напрямую. Каждый элемент массива должен иметь уникальный \`key\`.

      **Пример:**
      \`\`\`javascript
      const items = ['Яблоко', 'Банан', 'Вишня'];

      function App() {
        return (
          <ul>
            {items.map((item, index) => (
              <li key={index}>{item}</li>
            ))}
          </ul>
        );
      }
      \`\`\`
      `,
    },
    {
      id: 101233,
      question: "Что такое key в JSX и зачем он нужен?",
      answer: `
      **Key:**
      - Атрибут \`key\` помогает React идентифицировать, какие элементы изменились, были добавлены или удалены.
      - Должен быть уникальным среди соседних элементов.

      **Пример:**
      \`\`\`javascript
      const items = ['Яблоко', 'Банан', 'Вишня'];

      function App() {
        return (
          <ul>
            {items.map((item) => (
              <li key={item}>{item}</li>
            ))}
          </ul>
        );
      }
      \`\`\`
      `,
    },
    {
      id: 101234,
      question: "Какие ограничения у JSX?",
      answer: `
      **Ограничения:**
      1. **Единый корневой элемент:**
         - JSX должен иметь один корневой элемент (например, \`<div>\` или \`<React.Fragment>\`).
      2. **Закрытие тегов:**
         - Все теги должны быть закрытыми (например, \`<img />\`).
      3. **Именование атрибутов:**
         - Используйте camelCase для атрибутов (например, \`className\`, \`onClick\`).

      **Пример:**
      \`\`\`javascript
      // Неверно:
      const element = (
        <div>
          <h1>Заголовок</h1>
          <input type="text">
        </div>
      );

      // Верно:
      const element = (
        <div>
          <h1>Заголовок</h1>
          <input type="text" />
        </div>
      );
      \`\`\`
      `,
    },
    {
      id: 101235,
      question: "Как использовать комментарии в JSX?",
      answer: `
      **Комментарии в JSX:**
      - Комментарии пишутся внутри фигурных скобок \`{/* ... */}\`.

      **Пример:**
      \`\`\`javascript
      const element = (
        <div>
          {/* Это комментарий */}
          <h1>Заголовок</h1>
        </div>
      );
      \`\`\`
      `,
    },
    {
      id: 101236,
      question: "Как работает React.Fragment?",
      answer: `
      **React.Fragment:**
      - Позволяет группировать дочерние элементы без добавления лишнего DOM-узла.
      - Может быть записан как \`<></>\` (сокращенная форма).

      **Пример:**
      \`\`\`javascript
      function App() {
        return (
          <>
            <h1>Заголовок</h1>
            <p>Текст</p>
          </>
        );
      }
      \`\`\`
      `,
    },
  ],
};
