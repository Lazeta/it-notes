export const testE2E = {
  id: 102075,
  title: "E2E тесты",
  questions: [
    {
      id: 102076,
      question: "Что такое E2E тесты?",
      answer: `
**E2E (End-to-End) тесты:**
- Это тестирование всего приложения целиком, симулируя действия реального пользователя.
- Проверяется работа системы от начала до конца, включая взаимодействие между компонентами, API и базами данных.

**Основные характеристики:**
1. **Полное покрытие:** Проверяется вся система, а не только отдельные модули.
2. **Имитация действий пользователя:** Тесты воспроизводят клики, ввод данных, навигацию и другие пользовательские действия.
3. **Автоматизация:** Используются инструменты для автоматизации тестов, чтобы ускорить выполнение и минимизировать ошибки.

**Пример (Cypress):**
\`\`\`javascript
describe('Login Flow', () => {
  it('logs in successfully', () => {
    cy.visit('/login');
    cy.get('input[name="username"]').type('user');
    cy.get('input[name="password"]').type('password');
    cy.get('button[type="submit"]').click();
    cy.url().should('include', '/dashboard');
  });
});
\`\`\`
`,
    },
    {
      id: 102077,
      question: "Какие инструменты используются для написания E2E тестов?",
      answer: `
**Популярные инструменты для E2E тестирования:**
1. **Cypress:**
   - Современный фреймворк для тестирования веб-приложений.
   - Простой в настройке и использовании.
2. **Selenium:**
   - Универсальный инструмент для автоматизации браузеров.
   - Поддерживает множество языков программирования.
3. **Playwright:**
   - Инструмент для автоматизации тестирования веб-приложений.
   - Поддерживает работу с несколькими браузерами (Chrome, Firefox, WebKit).
4. **Puppeteer:**
   - Библиотека для управления браузером Chrome через JavaScript.
   - Хорошо подходит для скриншотного тестирования и генерации PDF.
5. **TestCafe:**
   - Фреймворк для автоматизации тестирования веб-приложений.
   - Не требует дополнительных драйверов для работы с браузерами.

**Пример (Playwright):**
\`\`\`javascript
const { test, expect } = require('@playwright/test');

test('Login test', async ({ page }) => {
  await page.goto('https://example.com/login ');
  await page.fill('input[name="username"]', 'user');
  await page.fill('input[name="password"]', 'password');
  await page.click('button[type="submit"]');
  await expect(page).toHaveURL('https://example.com/dashboard ');
});
\`\`\`
`,
    },
    {
      id: 102078,
      question: "Зачем нужны E2E тесты?",
      answer: `
**Цели E2E тестирования:**
1. **Обеспечение качества:**
   - Проверка работоспособности приложения в реальных условиях.
2. **Раннее обнаружение ошибок:**
   - Выявление проблем, которые могут возникнуть при взаимодействии различных компонентов.
3. **Снижение рисков:**
   - Минимизация вероятности критических ошибок после релиза.
4. **Упрощение регрессионного тестирования:**
   - Автоматизация позволяет быстро проверять функциональность после изменений в коде.

**Пример использования:**
- Проверка логина пользователя, перехода по ссылкам, отправки форм и других ключевых сценариев.
`,
    },
    {
      id: 102079,
      question: "Какие этапы включает процесс E2E тестирования?",
      answer: `
**Этапы E2E тестирования:**
1. **Подготовка тестового окружения:**
   - Настройка среды (браузеры, базы данных, API).
2. **Определение тестовых сценариев:**
   - Описание ключевых пользовательских сценариев (например, регистрация, покупка товара).
3. **Написание тестов:**
   - Создание скриптов для автоматизации сценариев.
4. **Выполнение тестов:**
   - Запуск тестов в автоматическом режиме.
5. **Анализ результатов:**
   - Проверка отчетов и исправление выявленных ошибок.
6. **Поддержка тестов:**
   - Обновление тестов при изменении функциональности.

**Пример:**
- Тестирование формы регистрации:
  1. Открыть страницу регистрации.
  2. Ввести данные пользователя.
  3. Проверить успешное перенаправление на главную страницу.
`,
    },
    {
      id: 102080,
      question: "Какие отличия между E2E тестами и unit-тестами?",
      answer: `
**Отличия между E2E тестами и unit-тестами:**
| **Критерий**          | **Unit-тесты**                          | **E2E тесты**                          |
|-----------------------|-----------------------------------------|----------------------------------------|
| **Цель**              | Проверка отдельных функций или модулей | Проверка работы системы целиком         |
| **Уровень тестирования** | Низкий (модули, функции)               | Высокий (весь приложение)              |
| **Скорость выполнения** | Быстро                                 | Медленно                              |
| **Сложность настройки** | Просто                                  | Сложно                                |
| **Зависимости**        | Нет зависимостей                        | Зависят от браузера, API, базы данных  |
| **Пример**             | \`assert(add(2, 3) === 5)\`             | \`cy.visit('/login').type('user')\`     |

**Вывод:**
- Unit-тесты подходят для проверки изолированных частей кода.
- E2E тесты обеспечивают проверку приложения в реальных условиях.
`,
    },
    {
      id: 102081,
      question: "Как организовать структуру E2E тестов?",
      answer: `
**Структура E2E тестов:**
1. **Организация файлов:**
   - Разделите тесты по функциональным блокам (например, \`auth.spec.js\`, \`checkout.spec.js\`).
2. **Использование Page Object Model (POM):**
   - Создайте классы для описания элементов и действий на каждой странице.
   - Это упрощает поддержку и повторное использование кода.

**Пример (Page Object Model):**
\`\`\`javascript
// LoginPage.js
class LoginPage {
  constructor(page) {
    this.page = page;
    this.usernameInput = 'input[name="username"]';
    this.passwordInput = 'input[name="password"]';
    this.submitButton = 'button[type="submit"]';
  }

  async login(username, password) {
    await this.page.fill(this.usernameInput, username);
    await this.page.fill(this.passwordInput, password);
    await this.page.click(this.submitButton);
  }
}

module.exports = LoginPage;
\`\`\`

\`\`\`javascript
// auth.spec.js
const { test, expect } = require('@playwright/test');
const LoginPage = require('./LoginPage');

test('Login test', async ({ page }) => {
  const loginPage = new LoginPage(page);
  await page.goto('https://example.com/login ');
  await loginPage.login('user', 'password');
  await expect(page).toHaveURL('https://example.com/dashboard ');
});
\`\`\`
`,
    },
    {
      id: 102082,
      question: "Какие проблемы могут возникнуть при написании E2E тестов?",
      answer: `
**Проблемы при написании E2E тестов:**
1. **Скорость выполнения:**
   - E2E тесты медленнее, чем unit-тесты, из-за взаимодействия с браузерами и серверами.
2. **Неустойчивость тестов (flakiness):**
   - Тесты могут падать из-за сетевых задержек, изменений в UI или других факторов.
3. **Сложность отладки:**
   - Поиск причины ошибки может быть затруднен из-за большого количества взаимодействий.
4. **Зависимость от окружения:**
   - Тесты могут работать некорректно в разных браузерах или средах.
5. **Поддержка тестов:**
   - При изменении интерфейса тесты нужно обновлять.

**Решения:**
- Используйте таймауты и ожидания (\`waitFor\`) для стабильности.
- Применяйте Page Object Model для удобства поддержки.
- Регулярно обновляйте тесты и тестовое окружение.
`,
    },
    {
      id: 102083,
      question: "Как работает параллельное выполнение E2E тестов?",
      answer: `
**Параллельное выполнение E2E тестов:**
- Запуск нескольких тестов одновременно для ускорения выполнения.

**Преимущества:**
1. **Скорость:** Уменьшение общего времени выполнения тестов.
2. **Эффективность:** Использование ресурсов нескольких машин или контейнеров.

**Пример (Playwright):**
\`\`\`bash
npx playwright test --workers=4
\`\`\`

**Важно:**
- Убедитесь, что тесты не зависят друг от друга (например, через общее состояние).
- Используйте изолированные тестовые среды для каждого потока.
`,
    },
    {
      id: 102084,
      question: "Как использовать моки в E2E тестах?",
      answer: `
**Моки в E2E тестах:**
- Используются для имитации внешних зависимостей (API, базы данных).

**Пример (Cypress):**
\`\`\`javascript
cy.intercept('GET', '/api/users', { fixture: 'users.json' }).as('getUsers');
cy.visit('/users');
cy.wait('@getUsers');
\`\`\`

**Преимущества:**
1. **Изолированность:** Тесты не зависят от реальных данных.
2. **Стабильность:** Исключение влияния внешних сервисов на результаты тестов.

**Важно:**
- Используйте моки только там, где это необходимо (например, для сложных сценариев).
`,
    },
  ],
};