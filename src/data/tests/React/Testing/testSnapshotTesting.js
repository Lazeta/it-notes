export const testSnapshotTesting = {
  id: 102225,
  title: "Snapshot Testing (снапшот тестирование)",
  questions: [
    {
      id: 102226,
      question: "Что такое снапшот-тестирование?",
      answer: `
**Снапшот-тестирование:**
- Это метод тестирования, при котором сохраняется "снимок" (snapshot) вывода компонента или функции.
- При последующих запусках тестов вывод сравнивается с сохраненным снапшотом.
- Если вывод изменился, тест завершается с ошибкой, и разработчик решает, является ли изменение ожидаемым.

**Преимущества:**
1. Простота настройки.
2. Хорошо подходит для проверки UI-компонентов.
3. Позволяет быстро выявить незапланированные изменения.

**Пример (Jest):**
\`\`\`javascript
import renderer from 'react-test-renderer';
import MyComponent from './MyComponent';

test('renders correctly', () => {
  const tree = renderer.create(<MyComponent />).toJSON();
  expect(tree).toMatchSnapshot();
});
\`\`\`
`,
    },
    {
      id: 102227,
      question: "Как работает обновление снапшотов?",
      answer: `
**Обновление снапшотов:**
- Если изменения в выводе компонента являются ожидаемыми, снапшот можно обновить.
- Для этого используется флаг \`--updateSnapshot\` или \`-u\` при запуске тестов.

**Пример команды:**
\`\`\`bash
jest --updateSnapshot
# или
jest -u
\`\`\`

**Важно:**
- Перед обновлением убедитесь, что изменения действительно ожидаемы.
- Не обновляйте снапшоты автоматически без проверки, чтобы избежать ошибок.
`,
    },
    {
      id: 102228,
      question: "Какие инструменты используются для снапшот-тестирования?",
      answer: `
**Инструменты для снапшот-тестирования:**
1. **Jest:**
   - Встроенные возможности для создания и сравнения снапшотов.
2. **React Test Renderer:**
   - Используется для рендеринга React-компонентов в JSON-формат для снапшотов.
3. **Testing Library:**
   - Поддерживает снапшот-тестирование через Jest.
4. **Storybook:**
   - Инструмент для визуализации компонентов, который также может использоваться для снапшот-тестирования.

**Пример с Jest и React Test Renderer:**
\`\`\`javascript
import renderer from 'react-test-renderer';
import MyComponent from './MyComponent';

test('renders correctly', () => {
  const tree = renderer.create(<MyComponent />).toJSON();
  expect(tree).toMatchSnapshot();
});
\`\`\`
`,
    },
    {
      id: 102229,
      question: "Какие ограничения есть у снапшот-тестирования?",
      answer: `
**Ограничения снапшот-тестирования:**
1. **Не проверяет логику:**
   - Снапшоты проверяют только внешний вид компонента, но не его поведение.
2. **Чувствительность к изменениям:**
   - Малейшие изменения в выводе требуют обновления снапшотов.
3. **Размер снапшотов:**
   - Для больших компонентов снапшоты могут стать громоздкими и сложными для анализа.
4. **Ложное чувство безопасности:**
   - Успешное прохождение тестов не гарантирует корректность работы компонента.

**Рекомендации:**
- Используйте снапшоты для небольших, стабильных компонентов.
- Комбинируйте снапшот-тестирование с юнит-тестами для проверки логики.
`,
    },
    {
      id: 102230,
      question: "Как отлаживать ошибки при несоответствии снапшотов?",
      answer: `
**Отладка несоответствий:**
1. **Просмотр изменений:**
   - Jest показывает diff между текущим выводом и сохраненным снапшотом.
2. **Анализ изменений:**
   - Определите, являются ли изменения ожидаемыми.
3. **Обновление снапшотов:**
   - Если изменения корректны, обновите снапшоты с помощью \`jest -u\`.
4. **Исправление ошибок:**
   - Если изменения неожиданны, исправьте код или верните предыдущую версию.

**Пример diff:**
\`\`\`diff
- <div className="old-class">Hello</div>
+ <div className="new-class">Hello</div>
\`\`\`
`,
    },
    {
      id: 102231,
      question: "Как использовать снапшоты для тестирования API-ответов?",
      answer: `
**Тестирование API-ответов:**
- Снапшоты можно использовать для проверки структуры данных, возвращаемых API.

**Пример:**
\`\`\`javascript
test('API response snapshot', async () => {
  const response = await fetch('https://api.example.com/data ');
  const data = await response.json();
  expect(data).toMatchSnapshot();
});
\`\`\`

**Важно:**
- Убедитесь, что данные стабильны (например, замокайте API, если ответы динамические).
`,
    },
    {
      id: 102232,
      question: "Как организовать хранение снапшотов в проекте?",
      answer: `
**Хранение снапшотов:**
- Jest автоматически создает файлы снапшотов в папке \`__snapshots__\` рядом с тестами.
- Файлы снапшотов должны быть добавлены в систему контроля версий (например, Git).

**Структура проекта:**
\`\`\`plaintext
src/
  components/
    MyComponent/
      MyComponent.test.js
      __snapshots__/
        MyComponent.test.js.snap
\`\`\`

**Рекомендации:**
- Регулярно проверяйте изменения в снапшотах при code review.
- Удаляйте устаревшие снапшоты, если они больше не нужны.
`,
    },
    {
      id: 102233,
      question:
        "Можно ли использовать снапшоты для тестирования CSS или стилей?",
      answer: `
**Тестирование CSS/стилей:**
- Да, снапшоты могут использоваться для проверки стилей, если они включены в вывод компонента.

**Пример:**
\`\`\`javascript
test('renders styles correctly', () => {
  const tree = renderer.create(<StyledComponent />).toJSON();
  expect(tree).toMatchSnapshot();
});
\`\`\`

**Важно:**
- Избегайте тестирования часто меняющихся стилей (например, уникальных классов CSS-in-JS).
- Используйте снапшоты для проверки базовых структур стилей.
`,
    },
  ],
};
