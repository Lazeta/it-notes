export const testTesting = {
  id: 101500,
  title: "Тестирование",
  questions: [
    {
      id: 101501,
      question: "Что такое тестирование программного обеспечения?",
      answer: `
**Тестирование программного обеспечения:**
- Это процесс проверки и оценки работоспособности, надежности и корректности программного кода.
- Цель тестирования — выявить ошибки, дефекты или недочеты в приложении до его выпуска.

**Основные типы тестирования:**
1. **Модульное тестирование (Unit Testing):**
   - Тестирование отдельных компонентов или функций.
2. **Интеграционное тестирование (Integration Testing):**
   - Проверка взаимодействия между модулями.
3. **Функциональное тестирование (Functional Testing):**
   - Проверка, что система выполняет свои функции согласно требованиям.
4. **Регрессионное тестирование (Regression Testing):**
   - Убедиться, что новые изменения не сломали существующий функционал.
5. **Приемочное тестирование (Acceptance Testing):**
   - Проверка готовности продукта для конечных пользователей.

**Пример:**
\`\`\`javascript
function add(a, b) {
  return a + b;
}

// Unit Test
console.assert(add(2, 3) === 5, "Test failed: add(2, 3) should be 5");
\`\`\`
`,
    },
    {
      id: 101502,
      question: "Что такое unit-тесты?",
      answer: `
**Unit-тесты (модульные тесты):**
- Это тесты, которые проверяют отдельные части кода (функции, методы, классы) на предмет их корректной работы.
- Используются для проверки небольших изолированных частей программы.

**Преимущества:**
1. **Быстрота:** Тестируются только отдельные модули.
2. **Локализация ошибок:** Легко определить, где возникла проблема.
3. **Автоматизация:** Можно запускать автоматически с помощью инструментов.

**Пример (Jest):**
\`\`\`javascript
function multiply(a, b) {
  return a * b;
}

test('multiply 2 * 3 to equal 6', () => {
  expect(multiply(2, 3)).toBe(6);
});
\`\`\`
`,
    },
    {
      id: 101503,
      question: "Какие популярные инструменты используются для тестирования?",
      answer: `
**Популярные инструменты тестирования:**
1. **Jest:**
   - Популярный фреймворк для JavaScript/TypeScript.
   - Поддерживает unit-тесты, моки и snapshot-тесты.
2. **Mocha + Chai:**
   - Mocha — фреймворк для организации тестов.
   - Chai — библиотека для написания утверждений (assertions).
3. **Cypress:**
   - Инструмент для энд-ту-энд тестирования веб-приложений.
4. **Selenium:**
   - Инструмент для автоматизации тестирования веб-интерфейсов.
5. **Puppeteer:**
   - Библиотека для управления браузером Chrome через JavaScript.
6. **Postman:**
   - Инструмент для тестирования API.

**Пример Cypress:**
\`\`\`javascript
describe('My First Test', () => {
  it('Visits the Kitchen Sink', () => {
    cy.visit('https://example.cypress.io ');
    cy.contains('type').click();
    cy.url().should('include', '/commands/actions');
  });
});
\`\`\`
`,
    },
    {
      id: 101504,
      question: "Что такое TDD (Test-Driven Development)?",
      answer: `
**TDD (Test-Driven Development):**
- Методология разработки, при которой сначала пишутся тесты, а затем реализуется код, который удовлетворяет этим тестам.
- Процесс состоит из трех этапов:
  1. **Red (красный):** Написание теста, который заведомо не проходит.
  2. **Green (зеленый):** Реализация минимального кода, чтобы тест проходил.
  3. **Refactor (рефакторинг):** Оптимизация кода без изменения его поведения.

**Пример:**
\`\`\`javascript
// Step 1: Red
test('should return true for even numbers', () => {
  expect(isEven(2)).toBe(true);
});

// Step 2: Green
function isEven(num) {
  return num % 2 === 0;
}

// Step 3: Refactor (если необходимо)
\`\`\`
`,
    },
    {
      id: 101505,
      question: "Что такое BDD (Behavior-Driven Development)?",
      answer: `
**BDD (Behavior-Driven Development):**
- Расширение TDD, ориентированное на описание поведения системы с точки зрения пользователя.
- Тесты пишутся в виде сценариев, используя естественный язык (например, Gherkin).

**Пример (Cucumber):**
\`\`\`gherkin
Feature: Login functionality
  Scenario: Successful login with valid credentials
    Given I am on the login page
    When I enter valid username and password
    Then I should be redirected to the dashboard
\`\`\`

**Преимущества:**
1. **Понятность:** Тесты легко читаются и понимаются даже нетехническими специалистами.
2. **Коллаборация:** Упрощает взаимодействие между разработчиками, тестировщиками и бизнесом.
`,
    },
    {
      id: 101506,
      question: "Что такое Mocking (моки) в тестировании?",
      answer: `
**Mocking (моки):**
- Это создание поддельных объектов или функций, имитирующих поведение реальных зависимостей.
- Используется для изоляции тестируемого кода от внешних систем (например, баз данных, API).

**Пример (Jest):**
\`\`\`javascript
const mockFunction = jest.fn(() => "mocked response");

test('mock function returns mocked response', () => {
  expect(mockFunction()).toBe("mocked response");
});
\`\`\`
`,
    },
    {
      id: 101507,
      question: "Что такое Snapshot-тестирование?",
      answer: `
**Snapshot-тестирование:**
- Это метод тестирования, при котором сохраняется "снимок" состояния компонента или данных.
- При последующих запусках теста текущее состояние сравнивается с сохраненным снимком.

**Пример (Jest):**
\`\`\`javascript
test('renders correctly', () => {
  const tree = renderer.create(<MyComponent />).toJSON();
  expect(tree).toMatchSnapshot();
});
\`\`\`

**Преимущества:**
1. **Быстрота:** Легко проверять, что UI не изменяется случайным образом.
2. **Автоматизация:** Если изменения допустимы, можно обновить снимок.
`,
    },
    {
      id: 101508,
      question: "Что такое end-to-end (E2E) тестирование?",
      answer: `
**End-to-End (E2E) тестирование:**
- Это тестирование, которое проверяет работу всего приложения целиком, симулируя действия реального пользователя.
- Обычно используется для тестирования веб-интерфейсов и пользовательских сценариев.

**Пример (Cypress):**
\`\`\`javascript
describe('Login Flow', () => {
  it('logs in successfully', () => {
    cy.visit('/login');
    cy.get('input[name="username"]').type('user');
    cy.get('input[name="password"]').type('password');
    cy.get('button[type="submit"]').click();
    cy.url().should('include', '/dashboard');
  });
});
\`\`\`
`,
    },
    {
      id: 101509,
      question: "Что такое интеграционное тестирование?",
      answer: `
**Интеграционное тестирование:**
- Это тестирование взаимодействия между несколькими модулями или компонентами системы.
- Проверяет, как отдельные части программы работают вместе.

**Пример:**
\`\`\`javascript
function fetchData() {
  return fetch('https://api.example.com/data ').then((res) => res.json());
}

test('fetchData returns data', async () => {
  const data = await fetchData();
  expect(data).toEqual({ success: true });
});
\`\`\`
`,
    },
    {
      id: 101510,
      question: "Какие виды тестов относятся к регрессионному тестированию?",
      answer: `
**Регрессионное тестирование:**
- Это повторное выполнение ранее пройденных тестов для проверки, что новые изменения не сломали существующий функционал.

**Виды тестов:**
1. **Unit-тесты:** Проверка отдельных модулей.
2. **Интеграционные тесты:** Проверка взаимодействия между модулями.
3. **Функциональные тесты:** Проверка, что система работает по требованиям.
4. **E2E тесты:** Проверка работы приложения целиком.

**Пример:**
\`\`\`javascript
test('existing feature still works', () => {
  expect(existingFeature()).toBe(true);
});
\`\`\`
`,
    },
  ],
};
