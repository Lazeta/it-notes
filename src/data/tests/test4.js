export const test4 = {
  id: 4,
  title: "Тест по REST API",
  questions: [
    {
      id: 1,
      question: "Что такое rest api?",
      answer: `<strong>REST API</strong> — (Representational State Transfer Application Programming Interface) 
      — это архитектурный стиль взаимодействия компонентов распределенного приложения в сети. 
      В контексте веб-разработки, он позволяет веб-сервисам общаться друг с другом через HTTP, 
      используя стандартные методы HTTP (GET, POST, PUT, DELETE и т.д.) для выполнения операций над данными.
      `,
    },
    {
      id: 2,
      question: "Основные принципы REST",
      answer:
        `
        1. Без состояния (Stateless): Каждый запрос от клиента к серверу должен содержать всю информацию, необходимую для его выполнения. Сервер не сохраняет состояние клиента между запросами.
        2. Единообразие интерфейса (Uniform Interface): Определяет стандартный способ взаимодействия между клиентом и сервером, что облегчает и унифицирует разработку и взаимодействие компонентов системы.
        3. Кэширование (Cacheable): Ответы на запросы могут быть кэшируемыми или некэшируемыми, что позволяет улучшить производительность системы за счет уменьшения нагрузки на сервер.
        4. Клиент-сервер (Client-Server): Разделение обязанностей между клиентом (например, пользовательским интерфейсом) и сервером (хранилище данных), что упрощает разработку и масштабирование компонентов независимо друг от друга.
        5. Многоуровневая система (Layered System): Клиент не может обязательно знать, общается ли он напрямую с сервером или через посредников, что повышает безопасность системы и позволяет использовать балансировщики нагрузки, кэширующие сервера и т.д.
        6. Код по требованию (Code on Demand, необязательно): Сервер может временно расширять или настраивать функциональность клиента, передавая ему исполняемый код.
        `,
    },
    {
      id: 3,
      question: "Примеры использования REST API:",
      answer: `
      1. Веб-сервисы: Веб-сайты используют его для запроса данных с сервера (например, загрузка списка пользователей, публикации сообщений в блоге).
      2. Мобильные приложения: Мобильные приложения общаются с сервером для получения и отправки данных (например, проверка погоды, отправка сообщений).
      3. Интеграция с внешними сервисами: Приложения могут интегрироваться с внешними API для расширения своего функционала (например, использование карт Google Maps, интеграция с социальными сетями).
      `,
    },
    {
      id: 4,
      question: "Заключение",
      answer: `REST API — это набор принципов и ограничений для создания веб-сервисов, который обеспечивает гибкое и эффективное взаимодействие между компонентами распределенных систем через HTTP. 
      Благодаря своей простоте, масштабируемости и гибкости, REST стал доминирующим стилем для разработки API для веб-приложений.`,
    },
    {
      id: 5,
      question: "Форматы данных",
      answer: `
      JSON: Наиболее распространенный формат для передачи данных.
      XML: Используется реже, но все еще поддерживается.
      HTML: Может использоваться для возвращения веб-страниц.
      `
    },
    {
      id: 6,
      question: "HTTP-методы в REST",
      answer: `
      GET: Получение информации о ресурсе.
      POST: Создание нового ресурса.
      PUT: Обновление существующего ресурса.
      DELETE: Удаление ресурса.
      `
    }
  ],
};
