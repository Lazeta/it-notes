export const testCORS = {
  id: 100050,
  title: "Тест по CORS",
  questions: [
    {
      id: 100051,
      question: "Что такое CORS?",
      answer: `<strong>CORS (Cross-Origin Resource Sharing — «совместное использование ресурсов между разными источниками»)</strong> — 
      это механизм, который позволяет веб-страницам запрашивать ресурсы с другого домена, отличного от домена, 
      с которого была загружена сама страница. По умолчанию, в целях безопасности, веб-браузеры ограничивают 
      кросс-доменные запросы с использованием так называемой политики одного источника (Same-Origin Policy). 
      Он предоставляет веб-серверам возможность явно разрешить некоторые кросс-доменные запросы, сохраняя при этом безопасность.`,
    },
    {
      id: 100052,
      question: "Как работает CORS?",
      answer:
        `Когда веб-приложение пытается сделать запрос к ресурсу, который находится на другом домене (кросс-доменный запрос), 
      браузер автоматически добавляет к запросу заголовок \`Origin\`. Этот заголовок содержит домен, с которого был сделан запрос. 
      Веб-сервер, к которому направлен запрос, затем проверяет этот заголовок и решает, разрешить ли запрос. 
      Если сервер разрешает запросы из этого источника, он отвечает с соответствующими CORS заголовками, указывающими, какие действия разрешены. 
      Один из таких заголовков — \`Access-Control-Allow-Origin\`, который может быть установлен в \` * \` 
      (что означает разрешение для всех доменов) или в конкретный домен.`,
    },
    {
      id: 100053,
      question: "Основные CORS-заголовки?",
      answer: `Access-Control-Allow-Origin: Указывает, какие источники могут получать доступ к ресурсу (например, * для всех).
      Access-Control-Allow-Methods: Указывает, какие HTTP-методы разрешены для кросс-доменных запросов (например, GET, POST).
      Access-Control-Allow-Headers: Указывает, какие заголовки могут быть использованы в запросе.
      Access-Control-Allow-Credentials: Указывает, разрешено ли использование учетных данных (например, куки) в кросс-доменных запросах.`,
    },
    {
      id: 100054,
      question: "Проблемы с CORS",
      answer: `Хотя он повышает безопасность, неправильная настройка CORS может привести к уязвимостям. Например, слишком широкое использование 
      \`Access-Control-Allow-Origin: *\` может случайно разрешить небезопасные кросс-доменные запросы. Разработчики должны тщательно настраивать 
      политики CORS, чтобы избежать потенциальных проблем с безопасностью.`,
    },
  ],
};
