export const testCache = {
  id: 101600,
  title: "Cache (Кэширование)",
  questions: [
    {
      id: 101601,
      question: "Что такое кэширование?",
      answer: `
      **Кэширование** — это процесс хранения данных в более быстром, но меньшем по объему хранилище (кэше) 
      для ускорения доступа к ним в будущем. Кэш позволяет избежать повторных запросов к медленным ресурсам, 
      таким как сервер базы данных или внешние API.

      **Пример использования:**
      - Браузеры кэшируют изображения, скрипты и стили для ускорения загрузки страниц.
      - Серверы кэшируют результаты вычислений, чтобы не пересчитывать их при каждом запросе.
      `,
    },
    {
      id: 101602,
      question: "Зачем нужно кэширование?",
      answer: `
      **Цели кэширования:**
      1. **Ускорение работы приложения:** Сокращение времени ожидания за счет использования заранее сохраненных данных.
      2. **Снижение нагрузки на сервер:** Уменьшение количества запросов к базе данных или внешним API.
      3. **Оптимизация использования ресурсов:** Экономия трафика и вычислительной мощности.

      **Пример:**
      Если данные профиля пользователя не меняются часто, их можно закэшировать, чтобы избежать повторных запросов к серверу.
      `,
    },
    {
      id: 101603,
      question: "Какие существуют типы кэширования?",
      answer: `
      **Основные типы кэширования:**
      1. **Кэширование в браузере:**
         - Браузер сохраняет ресурсы (изображения, скрипты, стили) локально.
         - Управляется через HTTP-заголовки (например, \`Cache-Control\`).

      2. **Серверное кэширование:**
         - Сервер сохраняет результаты вычислений (например, данные из базы данных).
         - Используется для уменьшения нагрузки на сервер.

      3. **Кэширование в памяти:**
         - В приложении используются структуры данных (например, \`Map\`, \`Set\`) для хранения часто используемых данных.

      4. **Дистрибутивное кэширование:**
         - Используются системы вроде Redis или Memcached для распределенного хранения данных.

      **Пример:**
      \`\`\`javascript
      const cache = new Map();
      function getData(key) {
        if (cache.has(key)) {
          return cache.get(key);
        }
        const data = fetchDataFromDatabase(key); // Медленная операция
        cache.set(key, data);
        return data;
      }
      \`\`\`
      `,
    },
    {
      id: 101604,
      question: "Когда следует использовать кэширование?",
      answer: `
      **Когда использовать кэширование:**
      1. Данные редко меняются, но к ним часто обращаются (например, конфигурации, настройки).
      2. Выполняются сложные вычисления или запросы к базе данных.
      3. Необходимо ускорить загрузку статических ресурсов (скриптов, стилей, изображений).

      **Пример:**
      \`\`\`javascript
      const profileCache = {};
      function getProfile(userId) {
        if (profileCache[userId]) {
          return Promise.resolve(profileCache[userId]);
        }
        return fetchProfileFromServer(userId).then((data) => {
          profileCache[userId] = data;
          return data;
        });
      }
      \`\`\`
      `,
    },
    {
      id: 101605,
      question: "Как работает кэширование в браузере?",
      answer: `
      **Кэширование в браузере:**
      1. **HTTP-заголовки:**
         - \`Cache-Control\`: Определяет правила кэширования (например, \`max-age=3600\`).
         - \`ETag\`: Позволяет проверять актуальность ресурса.
         - \`Expires\`: Указывает дату истечения срока действия.

      2. **Проверка актуальности:**
         - Браузер отправляет запрос с заголовком \`If-None-Match\` или \`If-Modified-Since\`.
         - Сервер отвечает \`304 Not Modified\`, если ресурс не изменился.

      **Пример заголовков:**
      \`\`\`http
      Cache-Control: max-age=3600
      ETag: "abc123"
      \`\`\`
      `,
    },
    {
      id: 101606,
      question: "Как предотвратить кэширование?",
      answer: `
      **Методы предотвращения кэширования:**
      1. **Добавление уникального параметра:**
         - Добавьте версию файла или случайную строку к URL.
         \`\`\`javascript
         const url = '/script.js?v=1.0.1';
         \`\`\`

      2. **HTTP-заголовки:**
         - Используйте \`Cache-Control: no-store\` или \`Cache-Control: no-cache\`.

      **Пример:**
      \`\`\`html
      <script src="/script.js?version=2"></script>
      \`\`\`
      `,
    },
    {
      id: 101607,
      question: "Как очистить кэш браузера?",
      answer: `
      **Очистка кэша браузера:**
      1. **Вручную:**
         - Откройте настройки браузера.
         - Перейдите в раздел "Конфиденциальность" и очистите кэш.

      2. **Через разработческие инструменты:**
         - В Chrome: \`Ctrl + Shift + R\` (принудительная перезагрузка без кэша).
         - В Firefox: \`Ctrl + F5\`.

      **Программная очистка:**
      Напрямую очистить кэш программно невозможно, но можно обновить ресурсы, изменив их URL.
      `,
    },
    {
      id: 101608,
      question: "Как реализовать кэширование в JavaScript?",
      answer: `
      **Реализация кэширования:**
      1. **Использование \`Map\`:**
         \`\`\`javascript
         const cache = new Map();
         function getCachedData(key, fetchDataFn) {
           if (cache.has(key)) {
             return cache.get(key);
           }
           const data = fetchDataFn();
           cache.set(key, data);
           return data;
         }
         \`\`\`

      2. **Использование объекта:**
         \`\`\`javascript
         const cache = {};
         function getCachedData(key, fetchDataFn) {
           if (cache[key]) {
             return cache[key];
           }
           const data = fetchDataFn();
           cache[key] = data;
           return data;
         }
         \`\`\`
      `,
    },
    {
      id: 101609,
      question: "Как управлять сроком жизни кэша?",
      answer: `
      **Управление сроком жизни кэша:**
      1. **Использование таймеров:**
         \`\`\`javascript
         const cache = new Map();
         function setWithExpiry(key, value, ttl) {
           const item = { value, expiry: Date.now() + ttl };
           cache.set(key, item);
         }

         function getWithExpiry(key) {
           const item = cache.get(key);
           if (!item || Date.now() > item.expiry) {
             cache.delete(key);
             return null;
           }
           return item.value;
         }
         \`\`\`

      2. **Библиотеки:**
         - Используйте библиотеки, такие как \`lru-cache\` или \`cache-manager\`.
      `,
    },
    {
      id: 101610,
      question: "Как избежать проблем с неактуальным кэшем?",
      answer: `
      **Методы решения проблем:**
      1. **Обновление кэша при изменении данных:**
         - При изменении данных в базе обновляйте кэш автоматически.
         \`\`\`javascript
         function updateProfile(userId, newData) {
           profileCache[userId] = newData;
           return saveToDatabase(userId, newData);
         }
         \`\`\`

      2. **Использование версионирования:**
         - Добавляйте версию к URL ресурсов (например, \`style.css?v=2\`).

      3. **Настройка HTTP-заголовков:**
         - Используйте \`ETag\` или \`Cache-Control\` для управления актуальностью.
      `,
    },
    {
      id: 101611,
      question: "Какие есть библиотеки для кэширования в JavaScript?",
      answer: `
      **Популярные библиотеки:**
      1. **lru-cache:** Реализует кэш с ограничением по размеру (LRU — Least Recently Used).
      2. **cache-manager:** Предоставляет гибкие механизмы управления кэшем.
      3. **Redis/Memcached:** Распределенные системы кэширования.

      **Пример использования \`lru-cache\`:**
      \`\`\`javascript
      const LRU = require('lru-cache');
      const cache = new LRU({ max: 500, ttl: 1000 * 60 });

      cache.set('key', 'value');
      console.log(cache.get('key')); // "value"
      \`\`\`
      `,
    },
    {
      id: 101612,
      question: "Как кэширование влияет на производительность?",
      answer: `
      **Влияние кэширования:**
      1. **Положительное:**
         - Ускоряет загрузку страниц.
         - Снижает задержки при выполнении операций.
         - Уменьшает нагрузку на сервер.

      2. **Отрицательное:**
         - Может привести к использованию неактуальных данных.
         - Требует дополнительной памяти для хранения кэша.

      **Пример:**
      Кэширование результатов запросов к базе данных может сократить время отклика с 500 мс до 10 мс.
      `,
    },
    {
      id: 101613,
      question: "Как избежать проблем безопасности при кэшировании?",
      answer: `
      **Меры безопасности:**
      1. **Не кэшировать конфиденциальные данные:**
         - Избегайте кэширования токенов аутентификации или персональных данных.

      2. **Использование HTTP-заголовков:**
         - Настройте заголовки, такие как \`Cache-Control: private\`, чтобы данные были доступны только конкретному пользователю.

      3. **Шифрование:**
         - Шифруйте данные перед сохранением в кэш.

      **Пример:**
      \`\`\`http
      Cache-Control: private, no-store
      \`\`\`
      `,
    },
  ],
};
