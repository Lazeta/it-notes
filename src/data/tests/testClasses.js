export const testClasses = {
  id: 101625,
  title: "Classes",
  questions: [
    {
      id: 101626,
      question:
        "Как создать класс в JavaScript и какие ключевые слова используются для этого?",
      answer: `
Ключевые слова и особенности
class – объявление класса.
constructor() – специальный метод для инициализации объекта.
this – ссылка на текущий экземпляр класса.
new – создание объекта из класса.
extends – наследование (если нужно).
static – статические методы/поля (принадлежат классу, а не объекту).
      `,
    },
    {
      id: 101627,
      question:
        "Как реализовать наследование в JavaScript, используя классы, и как работает конструктор в дочернем классе?",
      answer: `
Наследование реализуется через ключевые слова extends и super().
extends – указывает, от какого класса наследоваться.
super() – вызывает конструктор родителя (обязателен в constructor дочернего класса).
super.method() – обращение к методу родителя.
Переопределение методов – просто объявить метод с тем же именем.
      `,
    },
    {
      id: 101628,
      question:
        "Что такое полиморфизм в контексте классов в JavaScript и как его можно достичь?",
      answer: `
Полиморфизм — это возможность объектов разных классов использовать методы с одинаковым именем, 
но разной реализацией. В JavaScript он достигается через:
Через наследование и переопределение методов (extends + перезапись метода).
Через утиную типизацию (проверка наличия метода у объекта).
В TypeScript — через интерфейсы (implements) и абстрактные классы.
      `,
    },
    {
      id: 101629,
      question: "Что такое класс в JavaScript?",
      answer: `Класс - это шаблон для создания объектов, определяющий их свойства и методы.`,
    },
    {
      id: 101630,
      question: "Что такое конструктор класса?",
      answer: `Конструктор - это специальный метод, который вызывается при создании нового 
      экземпляра класса, для инициализации его свойств.`,
    },
    {
      id: 101631,
      question: "Как создается класс?",
      answer: `Классы создаются с использованием ключевого слова class`,
    },
    {
      id: 101632,
      question: "Что такое наследование классов?",
      answer: `Наследование позволяет создавать новые классы на основе существующих, наследуя их 
      свойства и методы. `,
    },
    {
      id: 101633,
      question: "Что такое super() и когда он используется?",
      answer: `super() используется в дочерних классах для вызова конструктора родительского 
      класса или доступа к его методам и свойствам. `,
    },
    {
      id: 101634,
      question: "Как создать экземпляр класса?",
      answer: `Экземпляр класса создается с использованием оператора new`,
    },
    {
      id: 101635,
      question: "Что такое статические методы и свойства?",
      answer: `Статические методы и свойства принадлежат самому классу, а не его экземплярам. `,
    },
    {
      id: 101636,
      question: "В чем разница между классами и прототипным наследованием?",
      answer: `Классы в JavaScript - это синтаксический сахар для работы с 
      прототипным наследованием, они упрощают создание и использование прототипов, 
      но не отменяют их. `,
    },
    {
      id: 101637,
      question: "Что такое методы доступа (геттеры и сеттеры)?",
      answer: `Геттеры и сеттеры позволяют контролировать доступ к свойствам класса, 
      выполняя дополнительные действия при чтении или записи значения. `,
    },
    {
      id: 101638,
      question: "Как работают приватные свойства и методы?",
      answer: `Приватные свойства и методы начинаются с # и доступны только внутри класса. `,
    },
    {
      id: 101639,
      question: "Какие есть способы работы с классами в JavaScript?",
      answer: `Существуют различные способы работы с классами, включая создание, наследование, 
      использование геттеров/сеттеров и работу с приватными свойствами. `,
    },
    {
      id: 101640,
      question: "",
      answer: ``,
    },
  ],
};
