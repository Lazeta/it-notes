export const testClosure = {
  id: 100150,
  title: "Замыкания",
  questions: [
    {
      id: 100151, // [46%] Что такое замыкание 
      question: "Что такое замыкание?",
      answer: `Замыкание (closure) - это функция, которая имеет доступ к переменным своего лексического 
      окружения (lexical environment), даже после того, как внешняя функция, в которой она была 
      определена, завершила свое выполнение`,
    },
    {
      id: 100152, // [10%] Для чего замыкание нужно 
      question: "Для чего замыкание нужно?",
      answer: `Сохранение состояния - Замыкания позволяют сохранять состояние между вызовами функции, 
      даже если внешняя функция завершила работу. 
      Инкапсуляция - Замыкания могут использоваться для создания частных переменных, доступных только 
      из внутренней функции, что помогает защитить данные
      Асинхронное программирование - Замыкания часто используются в асинхронных операциях, таких как 
      setTimeout или обработчики событий, для сохранения контекста.
      Паттерны проектирования - Замыкания являются основой для многих паттернов проектирования, 
      таких как модули, каррирование и ленивые вычисления.`,
    },
    {
      id: 100153, // [3%]	В чём разница между видами замыкания
      question: "В чём разница между видами замыкания?",
      answer: `Глобальное замыкание предоставляет доступ к переменным в любом месте кода, что может 
      привести к проблемам с организацией кода и возможным конфликтам имен. 
      Функциональное замыкание обеспечивает более строгую организацию кода, позволяя создавать скрытые 
      переменные и функциональность, доступные только в рамках определенной функции. 
      Блочное замыкание обеспечивает более мелкий уровень контроля над областью видимости переменных, 
      позволяя создавать временные переменные, доступные только в конкретном блоке кода. `,
    },
    {
      id: 100154, // [3%]	Чем отличается замыкание от области видимости
      question: "Чем отличается замыкание от области видимости?",
      answer: `Область видимости определяет, где в коде переменная является доступной, в то время как 
      замыкание - это способность функции запоминать и получать доступ к переменным из своей лексической 
      области видимости (области, в которой она была определена), даже если функция выполняется вне этой 
      области.`,
    },
    {
      id: 100155, // [3%]	Какой смысл замыканий, если бы не было функций высшего порядка
      question: "Какой смысл замыканий, если бы не было функций высшего порядка?",
      answer: `Даже без функций высшего порядка, замыкания позволяют создавать инкапсулированный код, 
      приватные переменные и применять паттерны, такие как каррирование. Однако, функции высшего порядка 
      расширяют возможности замыканий, позволяя создавать более гибкие и сложные структуры, передавая 
      и возвращая функции.`,
    },
    // {
    //   id: 100156, 
    //   question: "",
    //   answer: ``,
    // },
  ],
};
