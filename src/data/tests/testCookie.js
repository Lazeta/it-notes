export const testCookie = {
  id: 101575,
  title: "Cookie",
  questions: [
    {
      id: 101576,
      question:
        "Что такое cookie и для чего они используются в веб-разработке?",
      answer: `
      <strong>Cookie (куки)</strong> — это небольшие текстовые файлы, которые веб-сайты сохраняют в браузере пользователя. 
      Они содержат пары ключ-значение и используются для хранения информации между сеансами.

      **Основные случаи использования:**
      - **Аутентификация:** Сохранение токенов (например, \`session_id\`), чтобы пользователь оставался авторизованным.
      - **Персонализация:** Запоминание предпочтений (язык, тема, регион).
      - **Отслеживание:** Аналитика поведения пользователей (Google Analytics, рекламные системы).
      - **Корзины покупок:** Временное хранение данных о выбранных товарах.
      - **Управление сессиями:** Связь между запросами (например, в банковских приложениях).
      `,
    },
    {
      id: 101577,
      question:
        "Какие атрибуты могут быть у cookies и как они влияют на поведение cookies?",
      answer: `
      **Основные атрибуты:**
      1. **Name (Имя):** Уникальное имя, используемое для идентификации cookie.
      2. **Value (Значение):** Данные, хранящиеся в cookie (например, информация о пользователе).
      3. **Expires / Max-Age:** Определяют срок жизни cookie. \`Expires\` задает конкретную дату, а \`Max-Age\` — время в секундах.
      4. **Domain:** Определяет, на какие домены и поддомены может быть отправлена cookie.
      5. **Path:** Указывает, к каким путям на сайте будет применяться cookie.
      6. **Secure:** Cookie будут отправляться только по HTTPS, защищая их от перехвата.
      7. **HttpOnly:** Защищает cookie от доступа через JavaScript (\`document.cookie\`), снижая риск XSS-атак.
      8. **SameSite:** Контролирует, когда cookie могут быть отправлены в межсайтовых запросах. Возможные значения: \`Strict\`, \`Lax\`, \`None\`.
      9. **Partitioned:** Новый атрибут для разделения cookie в Privacy Sandbox (Chrome).
      `,
    },
    {
      id: 101578,
      question:
        "Какие меры предосторожности необходимо соблюдать при работе с cookies с точки зрения безопасности?",
      answer: `
      **Меры предосторожности:**
      1. **HttpOnly:** Устанавливайте флаг \`HttpOnly\`, чтобы предотвратить доступ к cookie через JavaScript и уменьшить риск XSS-атак.
      2. **Secure:** Устанавливайте флаг \`Secure\`, чтобы cookie передавались только по HTTPS, защищая их от перехвата.
      3. **SameSite:** Используйте атрибут \`SameSite\` для ограничения отправки cookie вместе с кросс-доменные запросами (\`Lax\` или \`Strict\`)).
      4. **Минимизация данных:** Храните в cookie только необходимые данные и избегайте чувствительной информации.
      5. **Срок действия:** Устанавливайте срок действия cookie и регулярно обновляйте их для предотвращения злоупотреблений.
      6. **Шифрование:** Используйте подписи или шифрование для защиты содержимого cookie от подделки.
      7. **Защита от CSRF:** Реализуйте меры защиты от CSRF-атак, например, используя токены.
      `,
    },
    {
      id: 101579,
      question: "Как проверить что куки включены?",
      answer: `
      Чтобы проверить, включены ли куки в браузере:
      1. Откройте настройки браузера.
      2. Перейдите в раздел "Конфиденциальность и безопасность".
      3. Найдите настройки "Файлы cookie" или "Cookies".
      4. Убедитесь, что опция "Разрешить использование файлов cookie" включена.

      **Программная проверка:**
      \`\`\`javascript
      document.cookie = "test_cookie=enabled; path=/";
      if (document.cookie.includes("test_cookie")) {
        console.log("Cookies are enabled");
      } else {
        console.log("Cookies are disabled");
      }
      \`\`\`
      `,
    },
    {
      id: 101580,
      question: "Для чего используются куки?",
      answer: `
      Куки используются для:
      - **Аутентификации:** Сохранение токенов сессии для автоматического входа.
      - **Персонализации:** Запоминание настроек пользователя (язык, тема, регион).
      - **Отслеживания:** Анализ активности пользователей (например, Google Analytics).
      - **Хранения данных:** Корзины покупок, временные данные.
      `,
    },
    {
      id: 101581,
      question: "Как создать куки в JavaScript?",
      answer: `
      Куки создаются с помощью присвоения значения свойству \`document.cookie\`:
      \`\`\`javascript
      document.cookie = "username=JohnDoe; expires=Thu, 01 Jan 2025 00:00:00 UTC; path=/";
      \`\`\`

      **Параметры:**
      - \`expires\`: Дата истечения срока действия.
      - \`path\`: Путь, для которого действует куки.
      - \`domain\`: Домен, для которого действует куки.
      - \`secure\`: Куки будут отправляться только по HTTPS.
      - \`HttpOnly\`: Защита от доступа через JavaScript.
      `,
    },
    {
      id: 101582,
      question: "Как получить значение куки в JavaScript?",
      answer: `
      Значение куки можно получить из свойства \`document.cookie\`:
      \`\`\`javascript
      const cookies = document.cookie.split("; ").reduce((acc, cookie) => {
        const [name, value] = cookie.split("=");
        acc[name] = decodeURIComponent(value);
        return acc;
      }, {});
      console.log(cookies.username); // Получить значение конкретного куки
      \`\`\`
      `,
    },
    {
      id: 101583,
      question: "Как удалить куки в JavaScript?",
      answer: `
      Для удаления куки установите срок действия в прошлое:
      \`\`\`javascript
      document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/";
      \`\`\`
      `,
    },
    {
      id: 101584,
      question: "Какие бывают типы куки?",
      answer: `
      **Типы куки:**
      - **Сессионные (Session Cookies):** Действуют только пока открыт браузер.
      - **Постоянные (Persistent Cookies):** Хранятся на компьютере пользователя до истечения срока действия.
      `,
    },
    {
      id: 101585,
      question: "Какие ограничения на размер и количество куки?",
      answer: `
      **Ограничения:**
      - Размер одной куки: До 4 КБ.
      - Общее количество куки на домен: Обычно до 20–50 (зависит от браузера).
      `,
    },
    {
      id: 101586,
      question:
        "Объясните разницу между cookies, sessionStorage и localStorage?",
      answer: `
      **Различия:**
      - **Cookies:** Маленький объем данных (до 4 КБ), могут отправляться на сервер, имеют срок действия.
      - **sessionStorage:** Данные хранятся только в рамках текущей сессии (вкладки). Очищаются при закрытии вкладки.
      - **localStorage:** Данные хранятся долго (до ручного удаления), больший объем (до 5–10 МБ), не отправляются на сервер.
      `,
    },
    {
      id: 101587,
      question: "Как обеспечить безопасность куки?",
      answer: `
      **Методы защиты:**
      1. Используйте флаг \`Secure\` для передачи только по HTTPS.
      2. Установите флаг \`HttpOnly\`, чтобы защитить от XSS-атак.
      3. Настройте атрибут \`SameSite\` для защиты от CSRF-атак.
      4. Минимизируйте данные, хранящиеся в куки.
      `,
    },
    {
      id: 101588,
      question:
        "Как работать с куки, если они не отображаются в document.cookie?",
      answer: `
      Если куки не видны в \`document.cookie\`):
      - Проверьте, установлен ли атрибут \`HttpOnly\` (такие куки недоступны через JavaScript).
      - Убедитесь, что куки относятся к текущему домену и пути.
      - Проверьте настройки браузера (блокировка сторонних куки или повышенная конфиденциальность).
      `,
    },
    {
      id: 101589,
      question:
        "Кому видны данные, хранящиеся в local storage, session storage и cookies?",
      answer: `
      **Видимость данных:**
      - **localStorage:** Данные доступны только на клиенте, не отправляются на сервер.
      - **sessionStorage:** Данные доступны только в рамках текущей сессии (вкладки).
      - **Cookies:** Данные доступны как на клиенте, так и на сервере (если не установлен флаг \`HttpOnly\`).
      `,
    },
    {
      id: 101590,
      question: "Как работает атрибут SameSite?",
      answer: `
      Атрибут \`SameSite\` контролирует, когда cookie могут быть отправлены в межсайтовых запросах:
      - **Strict:** Cookie отправляются только на тот же сайт, который их установил.
      - **Lax:** Cookie отправляются только при переходах по ссылкам (GET-запросы).
      - **None:** Cookie отправляются на все сайты, но требуют флаг \`Secure\`.

      **Пример:**
      \`\`\`javascript
      document.cookie = "sessionId=abc123; SameSite=Lax; Secure";
      \`\`\`
      `,
    },
  ],
};
