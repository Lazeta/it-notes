export const testEventLoop = {
  id: 100025,
  title: "Eventloop",
  questions: [
    {
      id: 100026,
      question: "Что такое Eventloop?",
      answer: `Цикл событий (event loop) — это механизм, который позволяет JavaScript выполнять асинхронные 
      операции, не блокируя основной поток выполнения. Он обеспечивает обработку событий и выполнение 
      колбеков (callback functions) в ответ на события, такие как клики мыши, нажатия клавиш и завершение 
      асинхронных операций.`,
    },
    {
      id: 100027,
      question: "как работает цикл событий?",
      answer: `Работает Event Loop следующим образом:
      1. Call Stack (Стек вызовов): Содержит текущий стек выполнения функций. Когда функция вызывается, 
      она добавляется в стек вызовов, а когда выполнение функции заканчивается, она удаляется из стека.
      2. Callback Queue (Очередь обратных вызовов): Когда асинхронная операция завершается, её callback 
      (функция обратного вызова) помещается в очередь обратных вызовов.
      3. Event Loop: Цикл событий непрерывно проверяет стек вызовов на наличие функций для выполнения. 
      сли стек вызовов пуст, Event Loop извлекает первую функцию из очереди обратных вызовов и помещает её в 
      стек вызовов для выполнения.`,
    },
    {
      id: 100028,
      question: "Что такое макро и микро задачи?",
      answer: `Микро-задачи (Microtasks)
      Это задачи, которые запланированы для выполнения сразу после текущего выполненного скрипта, но до того, 
      как event loop продолжит обрабатывать следующую макро-задачу. Примеры:
      Обещания (Promises): 'then', 'catch', 'finally'

      Макро-задачи (Macrotasks)
      Это задачи, которые обрабатываются event loop, каждая макро-задача извлекается из очереди и 
      выполняется до конца, прежде чем event loop перейдет к следующей макро-задаче. Примеры:
      'setTimeout'
      'setInterval'
      'setImmediate' (Node.js)
      I/O операции
      Интерактивные действия, такие как клики мыши и нажатия клавиш
      `,
    },
    {
      id: 100029,
      question: "Для чего нужен eventloop в js?",
      answer: ``,
    },
    {
      id: 100030,
      question: "В чём разница между макро и микро задачами?",
      answer: ``,
    },
    {
      id: 100031,
      question: "В чём разница в работе eventloop на сервере и в браузере?",
      answer: ``,
    },
    {
      id: 100032,
      question: "Где находятся макро и микро таски в eventloop?",
      answer: ``,
    },
    {
      id: 100033,
      question: "Какие проблемы решает eventloop?",
      answer: ``,
    },
    {
      id: 100034,
      question: "Сколько в один кадр eventloop`а может войти reflow и repaint?",
      answer: ``,
    },
    {
      id: 100035,
      question: "Как работает eventloop в web api?",
      answer: ``,
    },
    {
      id: 100036,
      question: "Как взаимодействуешь с eventloop?",
      answer: ``,
    },
  ],
};
