export const testEventLoop = {
  id: 100025,
  title: "Eventloop",
  questions: [
    {
      id: 100026,
      question: "Что такое Eventloop?", // [66%] Расскажи про event loop
      answer: `Цикл событий (event loop) — это механизм, который позволяет JavaScript выполнять асинхронные 
      операции, не блокируя основной поток выполнения. Он обеспечивает обработку событий и выполнение 
      колбеков (callback functions) в ответ на события, такие как клики мыши, нажатия клавиш и завершение 
      асинхронных операций.`,
    },
    {
      id: 100027, // [50%] Как работает eventloop
      question: "как работает цикл событий?",
      answer: `Работает Event Loop следующим образом:
      1. Call Stack (Стек вызовов): Содержит текущий стек выполнения функций. Когда функция вызывается, 
      она добавляется в стек вызовов, а когда выполнение функции заканчивается, она удаляется из стека.
      2. Callback Queue (Очередь обратных вызовов): Когда асинхронная операция завершается, её callback 
      (функция обратного вызова) помещается в очередь обратных вызовов.
      3. Event Loop: Цикл событий непрерывно проверяет стек вызовов на наличие функций для выполнения. 
      сли стек вызовов пуст, Event Loop извлекает первую функцию из очереди обратных вызовов и помещает её в 
      стек вызовов для выполнения.`,
    },
    {
      id: 100028, // [20%] Что такое макро и микро задачи 
      question: "Что такое макро и микро задачи?", 
      answer: `Микро-задачи (Microtasks)
      Это задачи, которые запланированы для выполнения сразу после текущего выполненного скрипта, но до того, 
      как event loop продолжит обрабатывать следующую макро-задачу. Примеры:
      Обещания (Promises): 'then', 'catch', 'finally'

      Макро-задачи (Macrotasks)
      Это задачи, которые обрабатываются event loop, каждая макро-задача извлекается из очереди и 
      выполняется до конца, прежде чем event loop перейдет к следующей макро-задаче. Примеры:
      'setTimeout'
      'setInterval'
      'setImmediate' (Node.js)
      I/O операции
      Интерактивные действия, такие как клики мыши и нажатия клавиш
      `,
    },
    {
      id: 100029, // [16%] Для чего нужен eventloop в js 
      question: "Для чего нужен eventloop в js?",
      answer: `Event loop в JavaScript отвечает за обработку асинхронных операций и событий, позволяя 
      коду выполняться, не блокируя основной поток выполнения. Он обеспечивает отзывчивость приложения, 
      когда происходят операции, требующие времени, такие как сетевые запросы или таймеры`,
    },
    {
      id: 100030, // [10%] В чём разница между макро и микро задачами
      question: "В чём разница между макро и микро задачами?",
      answer: `Основные различия в приоритете и обработке:
      1. Приоритет:
      Микрозадачи имеют более высокий приоритет. Все микрозадачи в очереди будут выполнены до того, 
      как Event Loop перейдет к следующей макрозадаче.
      2. Циклы Event Loop:
      Макрозадачи обрабатываются в рамках отдельных циклов Event Loop, тогда как микрозадачи 
      выполняются между макрозадачами в одном цикле.
      3. Порядок выполнения:
      Если во время выполнения микрозадачи добавляются новые микрозадачи, они также будут выполнены 
      в текущем цикле, что может привести к «голоданию» макрозадач, если микрозадачи постоянно 
      генерируются. `,
    },
    {
      id: 100031, // [3%]	В чём разница в работе eventloop на сервере и в браузере
      question: "В чём разница в работе eventloop на сервере и в браузере?",
      answer: `В браузере event loop управляет асинхронными операциями, связанными с взаимодействием 
      пользователя, DOM и сетью, работая в однопоточной среде. В Node.js, хотя event loop также 
      является основой асинхронности, он имеет возможность использовать несколько потоков для 
      обработки операций ввода-вывода, что делает его более эффективным для серверных задач`,
    },
    {
      id: 100032, // [10%] Расскажи про call stack
      question: "Что такое Call stack?",
      answer: `Call Stack (Стек вызовов): Содержит текущий стек выполнения функций. Когда функция вызывается, 
      она добавляется в стек вызовов, а когда выполнение функции заканчивается, она удаляется из стека.`,
    },
    {
      id: 100033, // [3%]	Какие проблемы решает eventloop
      question: "Какие проблемы решает eventloop?",
      answer: `решает проблему одновременной обработки асинхронных операций и поддержания отзывчивости 
      пользовательского интерфейса в однопоточной среде. Он позволяет избежать блокировки основного 
      потока выполнения при выполнении длительных задач, таких как сетевые запросы или таймеры, 
      обеспечивая плавную работу приложения`,
    },
    {
      id: 100034, // [3%]	Сколько в один кадр eventloop`а может войти reflow и repaint
      question: "Сколько в один кадр eventloop`а может войти reflow и repaint?",
      answer: `
      В рамках одного кадра event loop'а может произойти несколько reflow и repaint операций, если в 
      ходе выполнения JavaScript кода, обработанного в текущем кадре, происходят изменения, требующие 
      пересчета макета (reflow) и/или перерисовки (repaint) страницы. Количество reflow и repaint 
      операций в одном кадре не ограничено, но их частое выполнение может негативно сказаться на 
      производительности
      Reflow и Repaint:
      Reflow (пересчет макета): Происходит, когда меняется геометрия элемента (например, ширина, высота, 
      позиция) или структура DOM, и браузеру необходимо пересчитать расположение всех элементов на странице. 
      Repaint (перерисовка): Происходит, когда изменяются визуальные свойства элемента (например, цвет, 
      фон), не влияющие на его размер или положение.`,
    },
    {
      id: 100035, // [3%]	Как работает eventloop в web api
      question: "Как работает eventloop в web api?",
      answer: `перемещает колбэк асинхронной функции в Web API, а сама асинхронная функция уходит из 
      стэка вызовов. То есть, пока колбэк асинхронной функции находится под управлением Web API, 
      движок js продолжает выполнять другие операции!`,
    },
  ],
};
