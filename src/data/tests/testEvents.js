export const testEvents = {
  id: 101350,
  title: "Events",
  questions: [
    {
      id: 101351,
      question: "Что такое DOM событие?",
      answer: `DOM-событие - это сигнал от браузера, сообщающий о том, что произошло какое-то 
      событие на веб-странице, например, клик мышью, ввод текста или загрузка страницы.`,
    },
    {
      id: 101352,
      question: "Как отлавливать DOM-события в JavaScript?",
      answer: `1. Использование event listeners:
      addEventListener(event, callback, [useCapture]): Метод, который добавляет слушатель события к элементу.
      event: Тип события (например, "click", "keydown", "load").
      callback: Функция, которая будет выполнена при возникновении события.
      [useCapture]: Логическое значение (true или false), указывающее, нужно ли отлавливать событие 
      на этапе захвата или на этапе пузырька (очень редко используется в реальной практике). `,
    },
    {
      id: 101353,
      question:
        "Как можно предотвратить стандартное поведение события в JavaScript?",
      answer: `
      Чтобы предотвратить стандартное поведение события в JavaScript, можно использовать метод 
      preventDefault() объекта события. Этот метод останавливает выполнение стандартного действия, 
      связанного с событием.`,
    },
    {
      id: 101354,
      question:
        "Объясните, что такое всплытие и перехват событий. Как вы можете использовать делегирование событий, чтобы оптимизировать обработку событий на веб-странице?",
      answer: `
      Всплытие событий (Event Bubbling) — это механизм, при котором событие, происходящее на элементе, 
      сначала обрабатывается этим элементом, а затем "всплывает" вверх по иерархии DOM, вызывая 
      обработчики на родительских элементах.

      Перехват событий (Event Capturing) — это обратный процесс. Событие сначала обрабатывается на 
      самом верхнем уровне (родительском элементе), а затем "спускается" вниз к целевому элементу.

      Делегирование событий — это техника, позволяющая устанавливать один обработчик события на 
      родительский элемент, который будет обрабатывать события для всех его дочерних элементов.
      Оптимизация производительности:
      Вместо того чтобы добавлять обработчики к каждому элементу, вы можете добавить один обработчик 
      к родителю. Это снижает количество обработчиков и уменьшает затраты на память.
      Динамическое добавление элементов:
      Если дочерние элементы добавляются или удаляются динамически, делегирование позволяет обработчику 
      работать с новыми элементами без необходимости пересоздавать обработчики.
      `,
    },
    {
      id: 101355,
      question: "e.preventDefault() и e.stopPropagation(), для чего нужны",
      answer: `e.preventDefault() -- Отменяет действие браузера по умолчанию, связанное с событием. 
      Например, для события клика по ссылке e.preventDefault() предотвратит переход по ссылке.
      
      e.stopPropagation() -- Останавливает всплытие события, то есть предотвращает его передачу 
      родительским элементам. Это означает, что обработчики событий, прикрепленные к родительским 
      элементам, не будут вызваны для этого события.`,
    },
    {
      id: 101356,
      question: "Когда использовать e.preventDefault()?",
      answer: `Когда нужно предотвратить стандартное поведение элемента, но при этом разрешить 
      дальнейшую обработку события другими обработчиками или на других уровнях DOM.`,
    },
    {
      id: 101356,
      question: "Когда использовать e.stopPropagation()?",
      answer: `Когда нужно, чтобы событие обрабатывалось только на текущем элементе и не 
      распространялось на родительские элементы.`,
    },
    {
      id: 101356,
      question: "Можно ли использовать вместе e.preventDefault() и e.stopPropagation()?",
      answer: `e.preventDefault() и e.stopPropagation() часто используются вместе для полного 
      контроля над поведением событий. Например, можно предотвратить стандартное поведение 
      ссылки, а затем остановить всплытие, чтобы избежать срабатывания обработчиков на 
      родительских элементах.`,
    },
  ],
};
