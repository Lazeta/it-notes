export const testFiber = {
  id: 100225,
  title: "Файбер дерево",
  questions: [
    {
      id: 100226,
      question: "Что такое fiber дерево?",
      answer: `
      **Fiber-дерево** — это механизм согласования (reconciliation) в React, появившийся в версии 16. 
      Он переосмысливает процесс рендеринга и обновления компонентов, делая его инкрементным и более отзывчивым.

      **Основные особенности:**
      - Разбивает работу на небольшие задачи ("unit of work").
      - Управляет приоритетами задач.
      - Позволяет приостанавливать, возобновлять или отменять обновления.

      **Пример использования:**
      \`\`\`javascript
      // React автоматически использует Fiber под капотом.
      function App() {
        const [count, setCount] = React.useState(0);

        return (
          <div>
            <p>Count: {count}</p>
            <button onClick={() => setCount(count + 1)}>Increment</button>
          </div>
        );
      }
      \`\`\`
      `,
    },
    {
      id: 100227,
      question: "Какие проблемы решает Fiber в React?",
      answer: `
      **Проблемы, решаемые Fiber:**
      1. **Блокировка основного потока браузера:** До Fiber React выполнял обновления синхронно, что могло привести к задержкам.
      2. **Низкая отзывчивость интерфейса:** Тяжелые операции рендеринга могли замедлять UI.
      3. **Отсутствие управления приоритетами:** Все обновления выполнялись с одинаковым приоритетом.

      **Решение:**
      Fiber разбивает работу на маленькие задачи, приостанавливает их и дает браузеру время на выполнение других задач (например, анимаций).
      `,
    },
    {
      id: 100228,
      question: "Что такое reconciliation в контексте Fiber?",
      answer: `
      **Reconciliation** — это процесс сравнения текущего и нового состояния виртуального DOM для определения минимального количества изменений.

      **Особенности Fiber:**
      - Reconciliation становится асинхронным.
      - Задачи делятся на части ("unit of work").
      - React может приостанавливать и возобновлять процесс.

      **Пример:**
      \`\`\`javascript
      // React автоматически управляет reconciliation через Fiber.
      function Counter() {
        const [value, setValue] = React.useState(0);
        return (
          <div>
            <p>{value}</p>
            <button onClick={() => setValue(value + 1)}>Increase</button>
          </div>
        );
      }
      \`\`\`
      `,
    },
    {
      id: 100229,
      question: "Как Fiber управляет приоритетами задач?",
      answer: `
      **Управление приоритетами:**
      1. **Высокий приоритет:** Пользовательские события (например, клики, ввод текста).
      2. **Средний приоритет:** Обновления интерфейса (например, переключение вкладок).
      3. **Низкий приоритет:** Фоновые задачи (например, загрузка данных).

      **Пример:**
      \`\`\`javascript
      // Высокоприоритетное обновление
      function handleClick() {
        setState(newState); // Это обновление будет выполнено немедленно.
      }

      // Низкоприоритетное обновление
      setTimeout(() => {
        setState(newState); // Это обновление может быть отложено.
      }, 0);
      \`\`\`
      `,
    },
    {
      id: 100230,
      question: "Что такое 'unit of work' в Fiber?",
      answer: `
      **"Unit of work":**
      - Минимальная единица работы, которую Fiber выполняет за один шаг.
      - Каждый Fiber-узел представляет собой часть работы (например, вызов функции рендера или обновление состояния).

      **Пример:**
      \`\`\`javascript
      // Каждый компонент создает свой Fiber-узел.
      function ChildComponent() {
        return <p>Child</p>;
      }

      function ParentComponent() {
        return (
          <div>
            <ChildComponent />
          </div>
        );
      }
      \`\`\`
      `,
    },
    {
      id: 100231,
      question: "Как Fiber помогает с анимациями?",
      answer: `
      **Помощь с анимациями:**
      - Fiber позволяет React приостанавливать менее важные задачи (например, обновление фоновых данных).
      - Браузер получает больше времени для отрисовки каждого кадра, что делает анимации плавными.

      **Пример:**
      \`\`\`javascript
      function AnimationExample() {
        const [position, setPosition] = React.useState(0);

        React.useEffect(() => {
          const interval = setInterval(() => {
            setPosition((pos) => pos + 1); // Высокоприоритетное обновление.
          }, 16); // ~60 FPS
          return () => clearInterval(interval);
        }, []);

        return <div style={{ transform: \`translateX(\${position}px)\` }}>Moving Box</div>;
      }
      \`\`\`
      `,
    },
    {
      id: 100232,
      question: "Что такое 'fiber node'?",
      answer: `
      **Fiber node:**
      - Это структура данных, представляющая единицу работы в Fiber-дереве.
      - Содержит информацию о компоненте, его состоянии, свойствах (props) и связях с дочерними/родительскими узлами.

      **Пример:**
      \`\`\`javascript
      // Каждый компонент создает свой Fiber-узел.
      function MyComponent() {
        return <div>Hello, World!</div>;
      }
      \`\`\`
      `,
    },
    {
      id: 100233,
      question: "Как Fiber влияет на производительность React?",
      answer: `
      **Влияние на производительность:**
      1. **Асинхронное выполнение задач:** Разбиение работы на маленькие части.
      2. **Управление приоритетами:** Выполнение высокоприоритетных задач в первую очередь.
      3. **Приостановка и возобновление:** Возможность приостановить выполнение задачи и продолжить позже.

      **Пример:**
      \`\`\`javascript
      // React автоматически использует Fiber для оптимизации.
      function HeavyComponent() {
        const data = Array.from({ length: 10000 }, (_, i) => i);
        return (
          <ul>
            {data.map((item) => (
              <li key={item}>{item}</li>
            ))}
          </ul>
        );
      }
      \`\`\`
      `,
    },
    {
      id: 100234,
      question: "Как работает жизненный цикл Fiber-узла?",
      answer: `
      **Жизненный цикл Fiber-узла:**
      1. **Создание:** React создает Fiber-узел для каждого компонента.
      2. **Работа:** Fiber выполняет "unit of work" (например, вызов функции рендера).
      3. **Приостановка:** Если необходимо, React приостанавливает выполнение задачи.
      4. **Завершение:** После завершения всех задач React обновляет реальный DOM.

      **Пример:**
      \`\`\`javascript
      // Жизненный цикл Fiber-узла автоматически управляется React.
      function LifecycleComponent() {
        React.useEffect(() => {
          console.log('Component mounted');
          return () => console.log('Component unmounted');
        }, []);
        return <p>Lifecycle Example</p>;
      }
      \`\`\`
      `,
    },
    {
      id: 100235,
      question: "Как Fiber отличается от старого механизма согласования?",
      answer: `
      **Разница между Fiber и старым механизмом:**
      1. **Старый механизм:**
         - Выполнял обновления синхронно.
         - Блокировал основной поток браузера.
      2. **Fiber:**
         - Выполняет обновления асинхронно.
         - Разбивает работу на маленькие задачи.
         - Управляет приоритетами задач.

      **Пример:**
      \`\`\`javascript
      // Старый механизм мог блокировать интерфейс:
      function HeavyTask() {
        const data = Array.from({ length: 1e6 }, (_, i) => i);
        return <ul>{data.map((item) => <li key={item}>{item}</li>)}</ul>;
      }
      \`\`\`
      `,
    },
  ],
};
