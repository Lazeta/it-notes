export const testFunctionalProgramming = {
  id: 100500,
  title: "Функциональное программирование",
  questions: [
    {
      id: 100501, // [20%] Что такое функциональное программирование
      question: "Что такое функциональное программирование?",
      answer: `это парадигма программирования, в которой основное внимание уделяется использованию 
      функций и избеганию изменения состояния и данных.`,
    },
    {
      id: 100502, // [20%] Концепция функционального программирования
      question: "Какие концепции в функциональном программировании?",
      answer: `Чистые функции: функции, которые всегда возвращают один и тот же результат для одинаковых 
      входных данных и не имеют побочных эффектов.
      Иммутабельность: состояние не изменяется, вместо этого создаются новые значения.
      Функции высшего порядка: Функции, которые могут принимать другие функции в качестве аргументов 
      или возвращать функции в качестве результата. Это позволяет создавать более гибкий и абстрактный код.
      Рекурсия: Механизм, при котором функция вызывает сама себя для решения подзадач. Рекурсия часто 
      используется вместо циклов в функциональном программировании.
      Ленивые вычисления: Стратегия вычислений, при которой вычисления выполняются только тогда, когда 
      их результат действительно нужен. Это может быть полезно для работы с бесконечными структурами 
      данных или для оптимизации.`,
    },
    {
      id: 100503, // [2%] Пример чистой функции
      question: "Пример чистой функции",
      answer: `Пример чистой функции, которая вычисляет сумму двух чисел: 
      function add(a, b) {
        return a + b;
      }`,
    },
    {
      id: 100504, // [2%] Пример функции высшего порядка
      question: "Функции высшего порядка", 
      answer: `Пример функции высшего порядка, которая принимает другую функцию в качестве аргумента:
      function applyFunction(fn, value) {
        return fn(value);
      }

      function double(x) {
        return x * 2;
      }

      const result = applyFunction(double, 5); // 10`,
    },
    {
      id: 100505,
      question: "Пример Рекурсии",
      answer: `Вот пример рекурсивной функции для вычисления факториала:
      function factorial(n) {
        if (n === 0) {
          return 1; // Базовый случай: факториал 0 равен 1
        } else {
          return n * factorial(n - 1); // Рекурсивный случай: n! = n * (n-1)!
        }
      }

      console.log(factorial(5)); // Вывод: 120`,
    },
    {
      id: 100506,
      question: "Пример ленивых вычислений",
      answer: `Пример с генератором:
      function* lazySquares(numbers) {
        for (const number of numbers) {
          yield number * number;
        }
      }

      const numbers = [1, 2, 3, 4, 5];
      const lazyCalc = lazySquares(numbers);

      // Вычисляем и печатаем только первое значение
      console.log(lazyCalc.next().value); // Вывод: 1

      // Вычисляем и печатаем второе значение
      console.log(lazyCalc.next().value); // Вывод: 4

      // Итерируем по оставшимся значениям и вычисляем их
      for (const square of lazyCalc) {
        console.log(square); // Вывод: 9, 16, 25
      }`,
    },
  ],
};
