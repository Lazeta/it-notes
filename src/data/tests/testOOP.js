export const testOOP = {
  id: 100350,
  title: "ООП",
  questions: [
    {
      id: 100351, // [6%]	Что такое ооп
      question: "Что такое ООП", 
      answer: `Объектно-ориентированное программирование (ООП) — это парадигма программирования, 
      основанная на концепции 'объектов', которые могут содержать данные и код. 
      Основные принципы ООП:
      Инкапсуляция, Наследование, Полиморфизм, Абстракция`,
    },
    {
      id: 100352, // [10] Принципы ооп
      question: "Что такое инкапсуляция?",
      answer: `Инкапсуляция: Сокрытие состояния объекта и управление доступом к нему через методы. Это 
    помогает защитить внутренние данные и предотвратить их неправильное использование.`,
    },
    {
      id: 100353, // [10] Принципы ооп
      question: "Что такое наследование?",
      answer: `Возможность создавать новые классы на основе существующих. Новый класс (потомок) 
      наследует свойства и методы родительского класса, что позволяет повторно использовать и 
      расширять код.`,
    },
    {
      id: 100354, // [10] Принципы ооп
      question: "Что такое полиморфизм?",
      answer: `Способность объектов разных классов обрабатывать данные через одинаковый 
      интерфейс. Это позволяет использовать один и тот же метод для объектов разных типов, 
      что увеличивает гибкость кода.`,
    },
    {
      id: 100355, // [10] Принципы ооп
      question: "Что такое абстракция?",
      answer: `Упрощение сложных систем путем определения общих интерфейсов и скрытия деталей 
      реализации. Это помогает сосредоточиться на взаимодействии между объектами, не вникая в их 
      внутренние механизмы.`,
    },
    {
      id: 100356, // [3%]	Что выбираешь ооп или функции
      question: "Что выбираешь ооп или функции?",
      answer: `ООП лучше подходит для моделирования сложных систем с множеством взаимосвязанных 
      сущностей, в то время как ФП лучше подходит для задач, связанных с чистыми вычислениями и 
      обработкой данных. `,
    },
    {
      id: 100357, // [3%]	Чем ооп в js отличается от ооп в других языках
      question: "Чем ооп в js отличается от ооп в других языках",
      answer: ``,
    },
    {
      id: 100358, // [3%]	Преимущества ООП
      question: "Преимущество ООП",
      answer: `Позволяет структурировать код, делая его более организованным и понятным, особенно в 
      больших проектах. 
      Обеспечивает повторное использование кода через механизмы наследования и полиморфизма. 
      Упрощает поддержку и расширение кода, так как изменения в одном объекте обычно не затрагивают другие 
      части системы. 
      Позволяет моделировать сложные реальные системы, разбивая их на объекты и определяя их взаимодействие`,
    },
    {
      id: 100359, // [3%]	недостатки ООП
      question: "Недостатки ООП",
      answer: `Может привести к избыточному усложнению кода при неаккуратном использовании, особенно в 
      небольших проектах. 
      Требует более глубокого понимания концепций ООП, таких как абстракция, инкапсуляция, 
      наследование и полиморфизм. 
      В некоторых случаях может приводить к увеличению потребления ресурсов (памяти)`,
    },
  ],
};
