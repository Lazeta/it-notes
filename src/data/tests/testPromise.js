export const testPromise = {
  id: 100175,
  title: "Промисы",
  questions: [
    {
      id: 100176, // [50%] Что такое promise и какие состояния у него есть
      question: "Что такое Promise?",
      answer: `Promise - это объект, представляющий результат асинхронной операции, который может быть 
      либо успешно завершен, либо завершен с ошибкой`,
    },
    {
      id: 100177, // [40%]
      question: "Какие есть состояния у Promise?",
      answer: `pending (ожидание): Начальное состояние, когда операция еще не завершена. 
      fulfilled (выполнено успешно): Состояние, когда операция успешно завершена и возвращено значение. 
      rejected (отклонено): Состояние, когда произошла ошибка при выполнении операции.`,
    },
    {
      id: 100178, // [25%]	Зачем появились promise	
      question: "Зачем появились promise?",
      answer: `Промисы помогают избежать "callback hell" и сделать код более читаемым и поддерживаемым, 
      особенно при работе с асинхронными операциями, такими как запросы к API или чтение файлов`,
    },
    {
      id: 100179, // [20%]	Какие методы есть у promise?
      question: "Какие методы есть у promise?",
      answer: `then() и catch():
      Методы, используемые для обработки результатов промиса.
      .then(onFulfilled, onRejected): Выполняется, когда промис разрешен (fulfilled). Принимает две 
      функции-обработчика: onFulfilled для обработки успешного результата и onRejected для обработки 
      ошибки (вместо onRejected лучше использовать .catch()). 
      .catch(onRejected): Выполняется, когда промис отклонен (rejected). 
      finally(): Метод, который выполняется независимо от исхода промиса (успешно или с ошибкой).`,
    },
    {
      id: 100180, // [3%]	Какими способами можно создать promise	
      question: "Какими способами можно создать promise?",
      answer: `Промисы создаются с помощью конструктора new Promise(), который принимает функцию 
      с двумя аргументами: resolve и reject. `,
    },
    {
      id: 100181, // [20%]	Какие статические методы promise знаешь?
      question: "Какие статические методы promise знаешь?",
      answer: `
      Promise.all(iterable):
      Принимает массив промисов и возвращает новый промис. Этот новый промис разрешается, когда все 
      промисы в массиве успешно выполнены, и отклоняется, если хотя бы один из них отклонен. 
      Результатом будет массив с результатами всех успешных промисов в том же порядке, что и в исходном 
      массиве. Если хотя бы один промис отклонен, возвращается отклоненный промис с причиной отклонения 
      первого промиса, который был отклонен. 
      Promise.allSettled(iterable):
      Принимает массив промисов и возвращает новый промис. Этот новый промис разрешается, когда все 
      промисы в массиве завершены (как успешно, так и с ошибкой). Результатом будет массив объектов, 
      каждый из которых описывает результат соответствующего промиса, содержащий статус (fulfilled или 
      rejected) и значение или причину отклонения. 
      Promise.race(iterable):
      Принимает массив промисов и возвращает новый промис. Этот новый промис разрешается или отклоняется, 
      как только первый из переданных промисов разрешается или отклоняется. Результатом будет значение 
      или причина отклонения этого первого промиса. 
      Promise.any(iterable):
      (добавлен в ES2020) Принимает массив промисов и возвращает новый промис. Этот новый промис разрешается, 
      как только первый промис в массиве успешно разрешается. Если все промисы отклонены, то возвращается 
      отклоненный промис с AggregateError в качестве причины отклонения, содержащий массив всех причин 
      отклонения. 
      Promise.resolve(value):
      Возвращает новый промис, который немедленно разрешается со значением value. Если value является 
      промисом, то возвращается сам value. 
      Promise.reject(reason):
      Возвращает новый промис, который немедленно отклоняется с причиной reason.`,
    },
    {
      id: 100182, // [3%]	Что произойдёт если я использую await вместо промиса	
      question: "Что произойдёт если я использую await вместо промиса?",
      answer: `Когда await используется с чем-то, что не является Promise, JavaScript "не дожидается" 
      ничего, а просто возвращает значение этого операнда.`,
    },
    {
      id: 100183,  // [3%]	Где используются promise
      question: "Где используются promise?",
      answer: `для работы с асинхронными операциями, такими как сетевые запросы, анимация, чтение 
      данных из localStorage и другие операции, которые могут занимать время`,
    },
    {
      id: 100184, // [3%]	В чем отличие async/await от promise
      question: "В чём отличие async/await от promise?",
      answer: `Async создает Promise. А await ждет выполнения промиса. Promise — обертка 
      (класс, для простоты понимания) для отложенных и асинхронных вычислений. 
      Ожидает выполнения колбэк функций`,
    },
    {
      id: 100185, // [3%]	Можно ли перезапустить остановленный promise
      question: "Можно ли перезапустить остановленный promise?",
      answer: `Нет, остановленный промис нельзя перезапустить. Promise, будучи объектом, представляющим 
      результат асинхронной операции, имеет конечное состояние: ожидание (pending), выполнено успешно 
      (resolved) или отклонено (rejected). Как только промис переходит в состояние "выполнено" или 
      "отклонено", его состояние фиксируется и не может быть изменено. `,
    },
    {
      id: 100186, // [3%]	Сходство и отличия observable от promise	
      question: "Сходство и отличия observable от promise?",
      answer: `Observable и Promise оба являются асинхронными паттернами, но у них есть существенные 
      различия. Observable представляет собой поток данных, который может выдавать несколько значений 
      во времени, в то время как Promise разрешается только один раз, представляя собой одно значение 
      или ошибку. Observable можно отменять и повторно использовать, в то время как Promise - нет`,
    },
    {
      id: 100187, // [3%]	Какая самая важная отличительная черта promise
      question: "Какая самая важная отличительная черта promise?",
      answer: `Самая важная отличительная черта Promise в JavaScript - это способ обработки асинхронных 
      операций как если бы они были синхронными, предоставляя единый интерфейс для работы с результатами, 
      которые могут быть доступны в будущем. Вместо того, чтобы передавать колбэки напрямую в асинхронную 
      функцию, Promise позволяет "обещать" результат и обрабатывать его позже, когда он станет доступен, 
      будь то успешно или с ошибкой`,
    },
    {
      id: 100188, // [3%]	Что использовали до promise
      question: "Что использовали до promise?",
      answer: `До появления промисов (Promises) в JavaScript, для обработки асинхронных операций, 
      таких как загрузка данных с сервера или выполнение операций, требующих времени, широко 
      использовались колбэки (callbacks). Колбэки представляют собой функции, которые передаются в 
      качестве аргументов в другие функции, и выполняются после завершения асинхронной операции.`,
    },
    {
      id: 100189, // [3%] К какой категории относятся промисы
      question: "К какой категории относятся промисы?",
      answer: `Промисы (Promises) в JavaScript относятся к асинхронному программированию и являются 
      частью объектов, используемых для обработки асинхронных операций`,
    },
  ],
};