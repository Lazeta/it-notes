export const testPureFunction = {
  id: 101550,
  title: "Чистая функция",
  questions: [
    {
      id: 101551,
      question: "Что такое чистая функция?",
      answer: `Чистая функция (pure function) – это функция, которая для одинаковых входных 
      данных всегда возвращает один и тот же результат и не имеет побочных эффектов, то есть 
      не изменяет состояние программы или переданные ей аргументы. `,
    },
    {
      id: 101552,
      question: "что такое PureComponent?",
      answer: `React.PureComponent - это базовый класс для компонентов React, который 
      автоматически реализует метод shouldComponentUpdate() с использованием поверхностного 
      сравнения props и state. Это означает, что если пропсы и состояние не изменились, то 
      компонент не будет перерисовываться, что может повысить производительность. В отличие от 
      React.Component, который требует ручной реализации shouldComponentUpdate(), PureComponent 
      делает это автоматически.`,
    },
    {
      id: 101553,
      question: "чем отличается PureComponent от обычной функции?",
      answer: `В React, PureComponent - это специальный тип классового компонента, который 
      автоматически выполняет поверхностное сравнение (shallow comparison) текущих и предыдущих 
      пропсов (свойств) и состояния при обновлении, пропуская перерисовку, если нет изменений. 
      Обычный же компонент, унаследованный от React.Component, перерисовывается при любом 
      изменении пропсов или состояния, даже если эти изменения не влияют на вывод. `,
    },
    {
      id: 101554,
      question: "чем отличается чистая функция от не чистой функции?",
      answer: `функция чистая, если в ней нет никакого внешнего кода. В противном случае, 
      если в ней есть один или несколько побочных эффектов, эта функция является нечистой.`,
    },
    {
      id: 101555,
      question: "Основные признаки чистой функции",
      answer: `Детерминированность:
      Если функция вызывается с одинаковыми аргументами, она всегда возвращает одинаковое значение. 
      Отсутствие побочных эффектов:
      Она не изменяет глобальные переменные, не обращается к внешним ресурсам (например, к файлам или сети), 
      не меняет переданные аргументы. 
      Зависимость только от входных данных:
      Результат функции определяется только её входными аргументами и самой функцией. 
      Упрощает тестирование и отладку:
      Из-за своей детерминированности чистые функции легко тестировать и отлаживать. 
      Повышает модульность и предсказуемость кода:
      Их легко использовать повторно в разных частях программы, что делает её более модульной и предсказуемой. `,
    },
    {
      id: 101556,
      question: "В каких случаях использовать PureComponent?",
      answer: `Для компонентов, которые отображают данные, полученные из пропсов или состояния, 
      и не ожидают значительных изменений.
      Когда производительность важна, и нужно избежать ненужных перерисовок.
      Вместо ручной реализации shouldComponentUpdate() с поверхностным сравнением. `,
    },
    {
      id: 101557,
      question: "В каких случаях не использовать PureComponent?",
      answer: `Для компонентов, которые содержат сложные вложенные структуры данных в пропсах или состоянии. 
      Когда необходимо глубокое сравнение пропсов и состояния. 
      Когда компонент изменяет свое состояние или пропсы в методе shouldComponentUpdate() 
      (это может привести к бесконечному циклу). `,
    },
    {
      id: 101558,
      question: "",
      answer: ``,
    },
  ],
};
