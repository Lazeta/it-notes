export const testRESTAPI = {
  id: 100075,
  title: "Тест по REST API",
  questions: [
    {
      id: 100076,
      question: "Что такое REST API?",
      answer: `
      <strong>REST API</strong> (Representational State Transfer Application Programming Interface) — это архитектурный стиль взаимодействия компонентов распределенного приложения в сети. 
      В контексте веб-разработки, он позволяет веб-сервисам общаться друг с другом через HTTP, используя стандартные методы HTTP (GET, POST, PUT, DELETE и т.д.) для выполнения операций над данными.
      `,
    },
    {
      id: 100077,
      question: "Основные принципы REST",
      answer: `
      **Основные принципы REST:**
      1. **Без состояния (Stateless):** Каждый запрос от клиента к серверу должен содержать всю информацию, необходимую для его выполнения. Сервер не сохраняет состояние клиента между запросами.
      2. **Единообразие интерфейса (Uniform Interface):** Определяет стандартный способ взаимодействия между клиентом и сервером, что облегчает разработку и унифицирует взаимодействие компонентов системы.
      3. **Кэширование (Cacheable):** Ответы на запросы могут быть кэшируемыми или некэшируемыми, что позволяет улучшить производительность системы за счет уменьшения нагрузки на сервер.
      4. **Клиент-сервер (Client-Server):** Разделение обязанностей между клиентом (например, пользовательским интерфейсом) и сервером (хранилище данных), что упрощает разработку и масштабирование компонентов независимо друг от друга.
      5. **Многоуровневая система (Layered System):** Клиент не может обязательно знать, общается ли он напрямую с сервером или через посредников, что повышает безопасность системы и позволяет использовать балансировщики нагрузки, кэширующие сервера и т.д.
      6. **Код по требованию (Code on Demand, необязательно):** Сервер может временно расширять или настраивать функциональность клиента, передавая ему исполняемый код.
      `,
    },
    {
      id: 100078,
      question: "Примеры использования REST API:",
      answer: `
      **Примеры использования:**
      1. **Веб-сервисы:** Веб-сайты используют REST API для запроса данных с сервера (например, загрузка списка пользователей, публикации сообщений в блоге).
      2. **Мобильные приложения:** Мобильные приложения общаются с сервером для получения и отправки данных (например, проверка погоды, отправка сообщений).
      3. **Интеграция с внешними сервисами:** Приложения могут интегрироваться с внешними API для расширения своего функционала (например, использование карт Google Maps, интеграция с социальными сетями).

      **Пример запроса:**
      \`\`\`http
      GET /users/1 HTTP/1.1
      Host: api.example.com
      Authorization: Bearer token
      \`\`\`
      `,
    },
    {
      id: 100079,
      question: "Заключение",
      answer: `
      <strong>REST API</strong> — это набор принципов и ограничений для создания веб-сервисов, который обеспечивает гибкое и эффективное взаимодействие между компонентами распределенных систем через HTTP. 
      Благодаря своей простоте, масштабируемости и гибкости, REST стал доминирующим стилем для разработки API для веб-приложений.
      `,
    },
    {
      id: 100080,
      question: "Форматы данных в REST API",
      answer: `
      **Основные форматы данных:**
      1. **JSON (JavaScript Object Notation):** Наиболее распространенный формат для передачи данных. Легко читается и используется как людьми, так и машинами.
         \`\`\`json
         {
           "id": 1,
           "name": "John Doe"
         }
         \`\`\`
      2. **XML (eXtensible Markup Language):** Используется реже, но все еще поддерживается некоторыми системами.
         \`\`\`xml
         <user>
           <id>1</id>
           <name>John Doe</name>
         </user>
         \`\`\`
      3. **HTML:** Может использоваться для возвращения веб-страниц.
      `,
    },
    {
      id: 100081,
      question: "HTTP-методы в REST API",
      answer: `
      **Основные HTTP-методы:**
      1. **GET:** Получение информации о ресурсе.
      2. **POST:** Создание нового ресурса.
      3. **PUT:** Обновление существующего ресурса.
      4. **DELETE:** Удаление ресурса.

      **Пример использования:**
      \`\`\`http
      POST /users HTTP/1.1
      Content-Type: application/json
      {
        "name": "Alice",
        "email": "alice@example.com"
      }
      \`\`\`
      `,
    },
    {
      id: 100082,
      question: "Статусные коды HTTP в REST API",
      answer: `
      **Основные статусные коды:**
      - **200 OK:** Запрос выполнен успешно.
      - **201 Created:** Ресурс успешно создан.
      - **400 Bad Request:** Некорректный запрос.
      - **401 Unauthorized:** Необходима авторизация.
      - **403 Forbidden:** Доступ запрещен.
      - **404 Not Found:** Ресурс не найден.
      - **500 Internal Server Error:** Ошибка на стороне сервера.

      **Пример:**
      \`\`\`http
      HTTP/1.1 404 Not Found
      Content-Type: application/json
      {
        "error": "User not found"
      }
      \`\`\`
      `,
    },
    {
      id: 100083,
      question: "Как организовать версионирование REST API?",
      answer: `
      **Способы версионирования:**
      1. **URI версионирование:** Включение номера версии в URL.
         \`\`\`http
         GET /api/v1/users
         \`\`\`
      2. **Заголовок версионирования:** Передача версии через HTTP-заголовок.
         \`\`\`http
         GET /api/users
         Accept: application/vnd.example.v1+json
         \`\`\`
      3. **Параметры запроса:** Передача версии через параметр.
         \`\`\`http
         GET /api/users?version=1
         \`\`\`

      **Рекомендация:** URI версионирование является наиболее распространенным и удобным подходом.
      `,
    },
    {
      id: 100084,
      question: "Как обрабатывать ошибки в REST API?",
      answer: `
      **Обработка ошибок:**
      1. Используйте соответствующие HTTP-статусы (например, 400, 404, 500).
      2. Возвращайте JSON-ответ с описанием ошибки.
      
      **Пример:**
      \`\`\`http
      HTTP/1.1 400 Bad Request
      Content-Type: application/json
      {
        "error": "Invalid input",
        "details": "The 'email' field is required."
      }
      \`\`\`
      `,
    },
  ],
};
