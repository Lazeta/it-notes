export const testSemantic = {
  id: 100900,
  title: "Semantic (Семантика)",
  questions: [
    {
      id: 100901,
      question: "Что такое семантика в программировании?",
      answer: `
      **Семантика** — это область, изучающая смысл и поведение кода.
      - Определяет, как интерпретируются различные конструкции языка.
      - Включает правила работы с типами данных, операторами, выражениями и функциями.

      **Пример:**
      \`\`\`javascript
      let a = 5;
      let b = '10';
      console.log(a + b); // '510' (строковая конкатенация)
      \`\`\`
      `,
    },
    {
      id: 100902,
      question: "Как работает неявное преобразование типов в JavaScript?",
      answer: `
      **Неявное преобразование типов:**
      - Происходит автоматически при выполнении операций с разными типами данных.
      - Примеры:
        - \`+': Если один из операндов строка, второй преобразуется в строку.
        - \`-'/\`*\`/\`/: Преобразуют операнды в числа.

      **Пример:**
      \`\`\`javascript
      console.log(5 + '5'); // '55'
      console.log(5 - '3'); // 2
      console.log('10' * 2); // 20
      console.log('abc' * 2); // NaN
      \`\`\`
      `,
    },
    {
      id: 100903,
      question: "Что такое оператор === и чем он отличается от ==?",
      answer: `
      **Операторы сравнения:**
      - \`===\`: Проверяет значения и их типы (строгое сравнение).
      - \`==\`: Проверяет только значения, выполняя неявное преобразование типов.

      **Пример:**
      \`\`\`javascript
      console.log(5 == '5');  // true (неявное преобразование)
      console.log(5 === '5'); // false (разные типы)
      \`\`\`
      `,
    },
    {
      id: 100904,
      question: "Что такое ложные значения (falsy values)?",
      answer: `
      **Ложные значения:**
      - Значения, которые становятся \`false\` при приведении к булевому типу.
      - Примеры: \`false\`, \`0\`, \`''\` (пустая строка), \`null\`, \`undefined\`, \`NaN\`.

      **Пример:**
      \`\`\`javascript
      if (0) {
        console.log('Это никогда не выполнится');
      }
      \`\`\`
      `,
    },
    {
      id: 100905,
      question: "Что такое замыкания (closures) с точки зрения семантики?",
      answer: `
      **Замыкания:**
      - Функция сохраняет доступ к переменным из своей внешней области видимости, даже после завершения работы родительской функции.
      - Это семантический механизм, который позволяет создавать "захваченные" состояния.

      **Пример:**
      \`\`\`javascript
      function createCounter() {
        let count = 0;
        return function () {
          count++;
          return count;
        };
      }

      const counter = createCounter();
      console.log(counter()); // 1
      console.log(counter()); // 2
      \`\`\`
      `,
    },
    {
      id: 100906,
      question: "Что такое this и как определяется его значение?",
      answer: `
      **this:**
      - Ключевое слово, которое указывает на текущий контекст выполнения.
      - Его значение зависит от способа вызова функции:
        - В методе объекта: ссылается на объект.
        - В глобальной области: \`window\` (в браузере) или \`global\` (в Node.js).
        - В стрелочной функции: берется из внешнего лексического окружения.

      **Пример:**
      \`\`\`javascript
      const obj = {
        value: 42,
        getValue: function () {
          return this.value;
        },
      };

      console.log(obj.getValue()); // 42
      \`\`\`
      `,
    },
    {
      id: 100907,
      question: "Что такое деструктуризация с точки зрения семантики?",
      answer: `
      **Деструктуризация:**
      - Механизм извлечения значений из массивов или объектов и присваивания их переменным.
      - Упрощает работу со сложными структурами данных.

      **Пример:**
      \`\`\`javascript
      const person = { name: 'Alice', age: 30 };
      const { name, age } = person;

      console.log(name); // Alice
      console.log(age);  // 30
      \`\`\`
      `,
    },
    {
      id: 100908,
      question: "Что такое семантика оператора spread (...)?",
      answer: `
      **Spread оператор:**
      - Используется для расширения массивов или объектов.
      - Позволяет создавать копии или объединять данные.

      **Пример:**
      \`\`\`javascript
      const arr1 = [1, 2];
      const arr2 = [...arr1, 3, 4]; // [1, 2, 3, 4]

      const obj1 = { a: 1 };
      const obj2 = { ...obj1, b: 2 }; // { a: 1, b: 2 }
      \`\`\`
      `,
    },
    {
      id: 100909,
      question: "Что такое семантика async/await?",
      answer: `
      **Async/await:**
      - Синтаксический сахар для работы с промисами.
      - \`async\`: Функция всегда возвращает промис.
      - \`await\`: Приостанавливает выполнение функции до разрешения промиса.

      **Пример:**
      \`\`\`javascript
      async function fetchData() {
        const response = await fetch('https://api.example.com/data'); 
        const data = await response.json();
        return data;
      }

      fetchData().then((data) => console.log(data));
      \`\`\`
      `,
    },
    {
      id: 100910,
      question: "Что такое семантика оператора ?? (nullish coalescing)?",
      answer: `
      **Nullish coalescing operator (\`??\`):**
      - Возвращает правый операнд, если левый равен \`null\` или \`undefined\`.
      - Отличие от \`||\`: Не реагирует на другие "ложные" значения (\`0\`, \`''\`, \`false\`).

      **Пример:**
      \`\`\`javascript
      const value = null ?? 'default';
      console.log(value); // 'default'

      const value2 = 0 ?? 'default';
      console.log(value2); // 0
      \`\`\`
      `,
    },
  ],
};
