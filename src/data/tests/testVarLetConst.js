export const testVarLetConst = {
  id: 100400,
  title: "Var Let Const",
  questions: [
    {
      id: 100401,
      question: "Что такое var, let и const?",
      answer: `
      **var, let, const** — это ключевые слова для объявления переменных в JavaScript.

      1. **var:**
         - Область видимости: функциональная или глобальная.
         - Может быть переопределена и повторно объявлена.
         - Подвержена **hoisting** (поднятие).

      2. **let:**
         - Область видимости: блочная (\`{ }\`).
         - Может быть переопределена, но не может быть повторно объявлена в одной области видимости.
         - Не подвержена hoisting в том же виде, как \`var\`.

      3. **const:**
         - Область видимости: блочная (\`{ }\`).
         - Не может быть переопределена или повторно объявлена.
         - Должна быть инициализирована при объявлении.

      **Пример:**
      \`\`\`javascript
      var a = 10;
      let b = 20;
      const c = 30;

      console.log(a); // 10
      console.log(b); // 20
      console.log(c); // 30
      \`\`\`
      `,
    },
    {
      id: 100402,
      question: "Какова разница между var и let?",
      answer: `
      **Разница между var и let:**

      1. **Область видимости:**
         - \`var\`: Функциональная или глобальная область видимости.
         - \`let\`: Блочная область видимости (\`{ }\`).

      2. **Hoisting:**
         - \`var\`: Поднимается (hoisting), но значение становится \`undefined\`.
         - \`let\`: Поднимается, но находится в "временной мертвой зоне" (TDZ) до инициализации.

      3. **Повторное объявление:**
         - \`var\`: Позволяет повторное объявление.
         - \`let\`: Не позволяет повторное объявление в одной области видимости.

      **Пример:**
      \`\`\`javascript
      function example() {
        if (true) {
          var x = 10; // Глобально доступна внутри функции
          let y = 20; // Доступна только внутри блока
        }
        console.log(x); // 10
        console.log(y); // ReferenceError: y is not defined
      }

      example();
      \`\`\`
      `,
    },
    {
      id: 100403,
      question: "Какова разница между let и const?",
      answer: `
      **Разница между let и const:**

      1. **Изменяемость:**
         - \`let\`: Может быть переопределена.
         - \`const\`: Не может быть переопределена после инициализации.

      2. **Инициализация:**
         - \`let\`: Может быть объявлена без инициализации.
         - \`const\`: Должна быть инициализирована при объявлении.

      3. **Объекты и массивы:**
         - \`const\`: Защищает только ссылку на объект или массив, но не их содержимое.

      **Пример:**
      \`\`\`javascript
      let a = 10;
      a = 20; // Можно переопределить

      const b = 30;
      b = 40; // TypeError: Assignment to constant variable

      const obj = { name: 'Alice' };
      obj.name = 'Bob'; // Можно изменить свойство
      console.log(obj.name); // Bob
      \`\`\`
      `,
    },
    {
      id: 100404,
      question: "Что такое hoisting и как он работает с var, let и const?",
      answer: `
      **Hoisting (поднятие):**
      - Это механизм, при котором объявления переменных и функций "поднимаются" в начало своей области видимости.

      1. **var:**
         - Поднимается, но значение становится \`undefined\`.
         \`\`\`javascript
         console.log(a); // undefined
         var a = 10;
         \`\`\`

      2. **let и const:**
         - Поднимаются, но находятся в "временной мертвой зоне" (TDZ) до инициализации.
         \`\`\`javascript
         console.log(b); // ReferenceError: Cannot access 'b' before initialization
         let b = 20;

         console.log(c); // ReferenceError: Cannot access 'c' before initialization
         const c = 30;
         \`\`\`
      `,
    },
    {
      id: 100405,
      question: "Какие ошибки могут возникнуть при использовании var?",
      answer: `
      **Ошибки при использовании var:**

      1. **Глобальное загрязнение:**
         - \`var\` может случайно создать глобальную переменную, если используется вне функции.

      2. **Переопределение:**
         - \`var\` позволяет повторное объявление, что может привести к непредсказуемым результатам.

      3. **Hoisting:**
         - Из-за hoisting переменные могут быть доступны до их объявления, что усложняет отладку.

      **Пример:**
      \`\`\`javascript
      var x = 10;
      var x = 20; // Нет ошибки, но это может быть нежелательно

      function example() {
        console.log(y); // undefined (из-за hoisting)
        var y = 30;
      }
      example();
      \`\`\`
      `,
    },
    {
      id: 100406,
      question: "Почему рекомендуется использовать let и const вместо var?",
      answer: `
      **Почему let и const лучше var:**

      1. **Блочная область видимости:**
         - \`let\` и \`const\` ограничивают переменные блоком (\`{ }\`), что делает код более предсказуемым.

      2. **Защита от переопределения:**
         - \`const\` защищает от случайного изменения значений.

      3. **Отсутствие глобального загрязнения:**
         - \`let\` и \`const\` не создают глобальных переменных случайно.

      4. **Меньше ошибок из-за hoisting:**
         - \`let\` и \`const\` находятся в TDZ, что помогает избежать использования переменных до их объявления.

      **Пример:**
      \`\`\`javascript
      if (true) {
        var a = 10; // Глобально доступна
        let b = 20; // Доступна только внутри блока
      }
      console.log(a); // 10
      console.log(b); // ReferenceError: b is not defined
      \`\`\`
      `,
    },
    {
      id: 100407,
      question: "Можно ли изменить значение const?",
      answer: `
      **Изменение значения const:**
      - Нет, значение \`const\` нельзя переопределить после инициализации.
      - Однако, если \`const\` ссылается на объект или массив, их содержимое можно изменить.

      **Пример:**
      \`\`\`javascript
      const number = 10;
      number = 20; // TypeError: Assignment to constant variable

      const obj = { name: 'Alice' };
      obj.name = 'Bob'; // Можно изменить свойство
      console.log(obj.name); // Bob

      const arr = [1, 2, 3];
      arr.push(4); // Можно изменить массив
      console.log(arr); // [1, 2, 3, 4]
      \`\`\`
      `,
    },
    {
      id: 100408,
      question: "Как работает временная мертвая зона (TDZ)?",
      answer: `
      **Временная мертвая зона (TDZ):**
      - Это состояние, при котором переменные \`let\` и \`const\` недоступны до их объявления.
      - Они "поднимаются", но находятся в TDZ до инициализации.

      **Пример:**
      \`\`\`javascript
      console.log(a); // ReferenceError: Cannot access 'a' before initialization
      let a = 10;

      console.log(b); // ReferenceError: Cannot access 'b' before initialization
      const b = 20;
      \`\`\`
      `,
    },
    {
      id: 100409,
      question: "Как выбрать между let и const?",
      answer: `
      **Выбор между let и const:**

      1. **Используйте const по умолчанию:**
         - Если значение не будет меняться, используйте \`const\`.

      2. **Используйте let, если значение может измениться:**
         - Если значение переменной должно быть переопределено, используйте \`let\`.

      3. **Избегайте var:**
         - \`var\` устарел и может привести к ошибкам.

      **Пример:**
      \`\`\`javascript
      const pi = 3.14; // Значение не меняется
      let count = 0;   // Значение может меняться
      count++;
      console.log(count); // 1
      \`\`\`
      `,
    },
  ],
};
