export const testWorkWithBackend = {
  id: 101025,
  title: "Work with backend",
  questions: [
    {
      id: 101026,
      question:
        "Что такое протокол HTTPS и чем он отличается от HTTP? Как он защищает данные при передаче?",
      answer: `
Основные характеристики HTTP:
Протокол передачи: HTTP работает по принципу клиент-сервер, где клиент (например, веб-браузер) отправляет запросы, а сервер отвечает на них.
Не защищенный: Данные передаются в открытом виде, что делает их уязвимыми для перехвата и атак.
Методы: Включает методы, такие как GET, POST, PUT, DELETE и другие для взаимодействия с ресурсами.
Основные характеристики HTTPS:
Шифрование: HTTPS использует протокол SSL/TLS для шифрования данных, что обеспечивает защиту от перехвата.
Безопасность: Защищает конфиденциальность информации, передаваемой между клиентом и сервером.
Аутентификация: HTTPS позволяет проверить подлинность сервера, что помогает предотвратить атаки типа "человек посередине".
      `,
    },
    {
      id: 101027,
      question: "Опишите принципы REST и как они применяются при работе с API",
      answer: `
REST API (Representational State Transfer Application Programming Interface) — это архитектурный стиль взаимодействия компонентов распределенного приложения в сети. В контексте веб-разработки, он позволяет веб-сервисам общаться друг с другом через HTTP, используя стандартные методы HTTP (GET, POST, PUT, DELETE и т.д.) для выполнения операций над данными.
Принципы REST:
Без состояния (Stateless): Каждый запрос от клиента к серверу должен содержать всю информацию, необходимую для его выполнения. Сервер не сохраняет состояние клиента между запросами.
Единообразие интерфейса (Uniform Interface): Определяет стандартный способ взаимодействия между клиентом и сервером, что облегчает и унифицирует разработку и взаимодействие компонентов системы.
Кэширование (Cacheable): Ответы на запросы могут быть кэшируемыми или некэшируемыми, что позволяет улучшить производительность системы за счет уменьшения нагрузки на сервер.
Клиент-сервер (Client-Server): Разделение обязанностей между клиентом (например, пользовательским интерфейсом) и сервером (хранилище данных), что упрощает разработку и масштабирование компонентов независимо друг от друга.
Многоуровневая система (Layered System): Клиент не может обязательно знать, общается ли он напрямую с сервером или через посредников, что повышает безопасность системы и позволяет использовать балансировщики нагрузки (Nginx, AWS ALB), кэширующие прокси (Varnish, CDN), фаерволы/API-шлюзы(Cloudflare, Kong) и прокси сервера.
Код по требованию (Code on Demand, необязательно): Сервер может временно расширять или настраивать функциональность клиента, передавая ему исполняемый код.
Примеры использования REST API:
Веб-сервисы: Веб-сайты используют его для запроса данных с сервера (например, загрузка списка пользователей, публикации сообщений в блоге).
Мобильные приложения: Мобильные приложения общаются с сервером для получения и отправки данных (например, проверка погоды, отправка сообщений).
Интеграция с внешними сервисами: Приложения могут интегрироваться с внешними API для расширения своего функционала (например, использование карт Google Maps, интеграция с социальными сетями).
      `,
    },
    {
      id: 101028,
      question:
        "Какие существуют способы обхода ограничений CORS и в каких ситуациях их применяют?",
      answer: `
CORS (Cross-Origin Resource Sharing — это механизм безопасности браузеров, который блокирует междоменные запросы, если сервер явно не разрешил их. Однако в некоторых случаях (разработка, интеграция со сторонними API) требуется обойти эти ограничения. 
Основные методы:
Прокси-сервер
Запросы отправляются не напрямую к целевому API, а через ваш сервер, который добавляет нужные CORS-заголовки.
Когда применять: Для доступа к API, которое не поддерживает CORS. В продакшене, если нельзя изменить API.


JSONP (только для GET)
API возвращает данные в виде JavaScript-функции (callback(data)), которую браузер выполняет.
Когда применять: Для старых API, которые поддерживают JSONP. Только для GET-запросов.


Настройка CORS на сервере
Сервер API добавляет заголовки:
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET, POST, PUT
Access-Control-Allow-Headers: Content-Type
Когда применять: Если вы контролируете API.

Отключение CORS в браузере (только для разработки)
Запуск браузера с отключенной политикой безопасности.
Когда применять: Для локальной разработки.

Использование WebSockets
WebSockets не подчиняются CORS.
Когда применять: Для реального времени (чаты, уведомления).

Chrome-расширение (CORS Unblock)
Расширение добавляет заголовки Access-Control-Allow-Origin: * к запросам.
Когда применять: Для тестирования API без своего прокси.

iframe + postMessage
Загрузка данных через iframe с другого домена и обмен сообщениями через postMessage.
Когда применять: Для встраивания виджетов с других доменов.      
      `,
    },
  ],
};
