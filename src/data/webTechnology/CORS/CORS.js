export const CORS = {
  id: 117,
  title: "CORS",
  children: [
    {
      title: "Определение",
      type: "text",
      description: `
            <p><strong>CORS</strong> (Cross-Origin Resource Sharing — «совместное использование ресурсов между разными источниками») — это механизм, который позволяет веб-страницам запрашивать ресурсы с другого домена, отличного от домена, с которого была загружена сама страница. По умолчанию, в целях безопасности, веб-браузеры ограничивают кросс-доменные запросы с использованием так называемой политики одного источника (Same-Origin Policy). Он предоставляет веб-серверам возможность явно разрешить некоторые кросс-доменные запросы, сохраняя при этом безопасность.</p>`,
    },
    {
      title: "Как работает CORS",
      type: "text",
      description: `<p>Когда веб-приложение пытается сделать запрос к ресурсу, который находится на другом домене (кросс-доменный запрос), браузер автоматически добавляет к запросу заголовок \`Origin\`. Этот заголовок содержит домен, с которого был сделан запрос. Веб-сервер, к которому направлен запрос, затем проверяет этот заголовок и решает, разрешить ли запрос. Если сервер разрешает запросы из этого источника, он отвечает с соответствующими CORS заголовками, указывающими, какие действия разрешены. Один из таких заголовков — \`Access-Control-Allow-Origin\`, который может быть установлен в \` * \` (что означает разрешение для всех доменов) или в конкретный домен.</p>`,
    },
    {
      title: "Основные CORS-заголовки",
      type: "text",
      description: `
            <p>Некоторые ключевые заголовки, связанные с CORS:</p>
            <ul>
              <li><strong>Access-Control-Allow-Origin:</strong> Указывает, какие источники могут получать доступ к ресурсу (например, <code>*</code> для всех).</li>
              <li><strong>Access-Control-Allow-Methods:</strong> Указывает, какие HTTP-методы разрешены для кросс-доменных запросов (например, GET, POST).</li>
              <li><strong>Access-Control-Allow-Headers:</strong> Указывает, какие заголовки могут быть использованы в запросе.</li>
              <li><strong>Access-Control-Allow-Credentials:</strong> Указывает, разрешено ли использование учетных данных (например, куки) в кросс-доменных запросах.</li>
            </ul>
          `,
    },
    {
      title: "Проблемы с CORS",
      type: "text",
      description: `
            <p>Хотя он повышает безопасность, неправильная настройка CORS может привести к уязвимостям. Например, слишком широкое использование \`Access-Control-Allow-Origin: *\` может случайно разрешить небезопасные кросс-доменные запросы. Разработчики должны тщательно настраивать политики CORS, чтобы избежать потенциальных проблем с безопасностью.</p>
          `,
    },
    {
      title: "Предварительные запросы",
      type: "text",
      description: `
            <p>В некоторых случаях браузеры отправляют предварительный запрос (preflight request) с методом OPTIONS, чтобы проверить, разрешены ли кросс-доменные запросы с указанным методом и заголовками.</p>
          `,
    },
    {
      title: "Почему CORS важен",
      type: "text",
      description: `<p>Решает важную проблему безопасности, позволяя контролировать, какие веб-сайты могут использовать ресурсы вашего веб-сайта. Это предотвращает множество видов атак, таких как CSRF (Cross-Site Request Forgery — подделка межсайтовых запросов), позволяя при этом легитимным сайтам запрашивать данные через браузер.</p>`,
    },
  ],
};
