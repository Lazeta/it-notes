export const Cache = {
  id: 218,
  title: "Cache (Кэширование)",
  children: [
    {
      title: "Что такое кэш?",
      type: "text",
      description: `
        <p><strong>Кэш</strong> — это механизм временного хранения данных, который позволяет быстро получать доступ к часто используемым данным, избегая повторных запросов к основному источнику (например, базе данных или серверу). Кэширование используется для улучшения производительности веб-приложений и снижения нагрузки на сервер.</p>
        <p>Кэш обычно размещается в быстродействующей памяти (RAM) и организован в виде пар "ключ-значение". Каждая запись в кэше имеет ограниченное время жизни (TTL — Time To Live), по истечении которого она удаляется.</p>
      `,
    },
    {
      title: "Для чего нужно кэширование?",
      type: "text",
      description: `
        <p>Кэширование решает несколько ключевых задач:</p>
        <ul>
          <li><strong>Ускорение работы приложения:</strong> Данные извлекаются быстрее, чем из основного хранилища.</li>
          <li><strong>Снижение нагрузки на сервер:</strong> Уменьшается количество запросов к базе данных или внешним сервисам.</li>
          <li><strong>Оптимизация сетевого обмена:</strong> Меньше данных передается по сети.</li>
        </ul>
        <p>Однако важно помнить, что кэширование — это не универсальное решение. Если система простая или нагрузка низкая, то кэширование может быть избыточным и только добавит сложности.</p>
      `,
    },
    {
      title: "Типы кэша",
      type: "text",
      description: `
        <p>Кэши можно разделить на два основных типа:</p>
        <ul>
          <li><strong>Встроенный кэш (inline):</strong> Хранится в том же процессе, что и приложение. Примеры: map в Go, LRU-кэш.</li>
          <li><strong>Отдельный кэш (sidecar):</strong> Представляет собой отдельный процесс или сервис. Примеры: Redis, Memcached.</li>
        </ul>
        <p>Выбор типа кэша зависит от требований к производительности, масштабируемости и изолированности данных.</p>
      `,
    },
    {
      title: "Стратегии кэширования",
      type: "text",
      description: `
        <p>Основные стратегии кэширования:</p>
        <ul>
          <li><strong>Read Through:</strong> Запросы проходят через кэш, который самостоятельно обращается к источнику данных при промахе.</li>
          <li><strong>Write Through:</strong> Данные записываются одновременно в кэш и основное хранилище.</li>
          <li><strong>Cache Aside:</strong> Приложение само управляет взаимодействием с кэшем и источником данных.</li>
          <li><strong>Cache Ahead:</strong> Данные предварительно загружаются в кэш из источника с определенной периодичностью.</li>
        </ul>
      `,
    },
    {
      title: "Использование Cache API",
      type: "text",
      description: `
        <p><strong>Пример использования Cache API для кэширования ресурсов:</strong></p>
      `,
      code: `
if ('caches' in window) {
  caches.open('my-cache').then(cache => {
    cache.addAll([
      '/index.html',
      '/styles.css',
      '/script.js',
    ]);
  });
}
      `,
    },
    {
      title: "Получение данных из кэша",
      type: "text",
      description: `
        <p><strong>Пример получения данных из кэша:</strong></p>
      `,
      code: `
caches.match('/index.html').then(response => {
  if (response) {
    return response.text();
  }
});
      `,
    },
    {
      title: "Очистка кэша",
      type: "text",
      description: `
        <p><strong>Пример очистки кэша:</strong></p>
      `,
      code: `
caches.delete('my-cache').then(success => {
  console.log(success ? 'Кэш удален' : 'Кэш не найден');
});
      `,
    },
    {
      title: "Преимущества кэширования",
      type: "text",
      description: `
        <ul>
          <li><strong>Ускорение загрузки:</strong> Быстрый доступ к закэшированным данным.</li>
          <li><strong>Снижение нагрузки на сервер:</strong> Меньше запросов к серверу для получения одних и тех же данных.</li>
          <li><strong>Поддержка офлайн-режима:</strong> Возможность работы с приложением без подключения к интернету.</li>
        </ul>
      `,
    },
    {
      title: "Недостатки кэширования",
      type: "text",
      description: `
        <ul>
          <li><strong>Устаревание данных:</strong> Кэшированные данные могут стать устаревшими, если TTL слишком длинный.</li>
          <li><strong>Дополнительная сложность:</strong> Необходимо управлять кэшом и его очисткой.</li>
          <li><strong>Безопасность:</strong> Личные данные могут быть доступны из кэша, если не реализована правильная политика кэширования.</li>
        </ul>
      `,
      url: "https://habr.com/ru/articles/734660/",
      link: "habr.com",
    },
    {
      title: "Стратегии инвалидации кэша",
      type: "text",
      description: `
        <p>Основные стратегии инвалидации данных в кэше:</p>
        <ul>
          <li><strong>По TTL:</strong> Данные автоматически удаляются через заданное время.</li>
          <li><strong>По событию:</strong> Данные инвалидируются при изменении в источнике.</li>
          <li><strong>Jitter:</strong> Случайное значение добавляется к TTL для сглаживания нагрузки.</li>
        </ul>
      `,
    },
    {
      title: "Стратегии вытеснения данных",
      type: "text",
      description: `
        <p>Когда кэш заполняется, используются следующие стратегии вытеснения:</p>
        <ul>
          <li><strong>LRU (Least Recently Used):</strong> Удаляются данные, которые использовались давно.</li>
          <li><strong>LFU (Least Frequently Used):</strong> Удаляются данные, которые использовались реже всего.</li>
          <li><strong>Random:</strong> Удаляются случайные записи.</li>
        </ul>
      `,
    },
    {
      title: "Кэширование ошибок",
      type: "text",
      description: `
        <p>Кэширование ошибок помогает защитить систему от атак через промахи кэша (cache miss attack). Например, если злоумышленник запрашивает несуществующие данные, сервер может быть перегружен. Кэширование ошибок позволяет избежать этой проблемы, сохраняя ответ об отсутствии данных в кэше на короткое время.</p>
      `,
    },
  ],
};
