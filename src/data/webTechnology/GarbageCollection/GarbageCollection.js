export const GarbageCollection = {
  id: 123,
  title: "GC (сборщик мусора)",
  children: [
    {
      title: "Определение",
      type: "text",
      description: `
              <p>Сборка мусора (GC) — это автоматический процесс освобождения памяти, занятой объектами, которые больше не используются программой. JavaScript (как и другие высокоуровневые языки) использует алгоритмы GC, чтобы избежать утечек памяти.</p>
              <ul>
                <strong>Что удаляет сборщик мусора?</strong>
                <ul>
                    <li>1.Объекты, которые становятся недостижимыми (на них нет ссылок из активного кода).</li>
                    <li>2.Локальные переменные функции</li>
                    <li>3.Переприсваивание ссылок</li>
                    <li>4.Удаление элементов массива/объекта</li>
                    <li>5.Завершение работы генераторов</li>
                </ul>
              </ul>
            <ul>
                <strong>Когда GC запускается?</strong>
                <li>Автоматически когда движок решает что пора.</li>
                <li>При нехватке памяти(например, когда выделено много временных объектов).</li>
                <li>В фоновом режиме(не блокирует основной поток).</li>
            </ul>
        `,
      code: `
// пример 1 присвоили переменной 'ни-что'
let user = { name: "Alex" }; // Объект { name: "Alex" } достижим (есть ссылка \`user\`)
user = null;                 // Теперь объект недостижим → GC удалит его.

// пример 2 локальные переменные функции
function createTempData() {
    const temp = { data: "Временные данные" }; // Создаётся объект
    console.log(temp.data);
} // Функция завершилась → \`temp\` становится недостижимым → GC удалит объект.

// пример 3 Переприсваивание ссылок
let obj = { value: 1 };
obj = { value: 2 }; // Старый объект { value: 1 } больше не достижим - GC удалит его.

// пример 4 Удаление элементов массива/объекта
const arr = [1, 2, 3];
arr.length = 0; // Старые элементы становятся недостижимы - GC удалит их.
const user = { name: "Alex", age: 30};
delete user.age; // \`age\` удалено - GC может очистить его память.

// пример 5 Завершение работы генераторов
function* generateData() {
    const data = "big data";
    yield data;
}
const gen = generateData();
gen.next(); // получаем данные
gen.return(); // принудительно завершаем генератор - \`data\` может быть удалена.
        `,
    },
  ],
};
