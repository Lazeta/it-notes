{"version":3,"file":"static/js/main.0719aaf1.js","mappings":"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,EAAMs5C,QAAUjyB,EAAaiyB,OAASt5C,EAAMs5C,OAAUhyB,GAAiBD,EAAaiyB,KAC9F,CCPA,IAwIAj2C,GAAe,IAAIvE,IAxIF,CACf,IACA,OACA,UACA,OACA,UACA,QACA,QACA,IACA,OACA,MACA,MACA,MACA,aACA,OACA,KACA,SACA,SACA,UACA,OACA,OACA,MACA,WACA,OACA,WACA,KACA,MACA,UACA,MACA,SACA,MACA,KACA,KACA,KACA,QACA,WACA,aACA,SACA,SACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,SACA,SACA,KACA,OACA,IACA,SACA,MACA,QACA,MACA,MACA,SACA,QACA,SACA,KACA,OACA,OACA,MACA,OACA,OACA,WACA,OACA,QACA,MACA,WACA,SACA,KACA,WACA,SACA,SACA,IACA,QACA,UACA,MACA,WACA,IACA,KACA,KACA,OACA,IACA,OACA,SACA,UACA,SACA,QACA,SACA,OACA,SACA,QACA,MACA,UACA,MACA,QACA,QACA,KACA,WACA,QACA,KACA,QACA,OACA,KACA,QACA,IACA,KACA,MACA,MACA,QACA,MACA,SACA,WACA,OACA,UACA,gBACA,IACA,QACA,OACA,iBACA,SACA,OACA,OACA,UACA,UACA,WACA,iBACA,OACA,OACA,MACA,OACA,UCrIIk1B,GAAc,wCAEdtN,GAAe,WAMG,SAAAqR,GAAO/3B,GAC7B,OAAOA,EACJ8B,QAAQkyB,GAAa,KACrBlyB,QAAQ4kB,GAAc,GAC3B,CCdA,IAAM2Z,GAAgB,WAOhB0S,GAAoB,SAAC/yC,GAAiB,OAAA2c,OAAOC,aAAa5c,GAAQA,EAAO,GAAK,GAAK,IAA7C,EAGpB,SAAAwnB,GAAuBxnB,GAC7C,IACIsnB,EADAD,EAAO,GAIX,IAAKC,EAAIhV,KAAKsiC,IAAI50C,GAAOsnB,EAXP,GAWwBA,EAAKA,EAX7B,GAWgD,EAChED,EAAO0rB,GAAkBzrB,EAZT,IAY4BD,EAG9C,OAAQ0rB,GAAkBzrB,EAfR,IAe2BD,GAAMvlB,QAAQu+B,GAAe,QAC5E,CCpBO,IAAAQ,GAKM/M,GAAQ,SAAC9zB,EAAWsnB,GAG/B,IAFA,IAAID,EAAIC,EAAE3oB,OAEH0oB,GACLrnB,EAAS,GAAJA,EAAUsnB,EAAE6tB,aAAa9tB,GAGhC,OAAOrnB,CACT,EAGaY,GAAO,SAACZ,GACnB,OAAO8zB,GAjBW,KAiBC9zB,EACrB,ECfwB,SAAAu5C,GAAoBv5C,GAC1C,OAAOwnB,GAAuB5mB,GAAKZ,KAAS,EAC9C,CCHwB,SAAAqR,GAAiBrR,GACvC,OAEGA,EAA8CsE,aAC9CtE,EAAoBwE,MACrB,WAEJ,CCPwB,SAAA4uB,GAAMpzB,GAC5B,MACoB,iBAAXA,IACmB,CAI9B,CCNA,IAAM2qB,GAA8B,mBAAXxoB,QAAyBA,OAAOC,IAGnDmhC,GAAkB5Y,GAAYxoB,OAAOC,IAAI,cAAgB,MACzD2+B,GAAyBpW,GAAYxoB,OAAOC,IAAI,qBAAuB,MAKvEmtB,GAAgB,CACpBlE,mBAAA,EACA4O,aAAA,EACAhP,cAAA,EACAoO,cAAA,EACA/0B,aAAA,EACAk1C,iBAAA,EACA9d,0BAAA,EACAlB,0BAAA,EACAif,QAAA,EACAC,WAAA,EACAj5C,MAAA,GAGIoqB,GAAgB,CACpBrmB,MAAA,EACA7F,QAAA,EACAc,WAAA,EACAk6C,QAAA,EACAC,QAAA,EACAl7C,WAAA,EACAm7C,OAAA,GAWInZ,GAAe,CACnB77B,UAAA,EACA63B,SAAA,EACArD,cAAA,EACA/0B,aAAA,EACAo1C,WAAA,EACAj5C,MAAA,GAGI8mB,KAAYsZ,GAAG,CAAC,GACnBE,IAlByB,CAC1Bl8B,UAAA,EACAF,QAAA,EACA00B,cAAA,EACA/0B,aAAA,EACAo1C,WAAA,GAcA7Y,GAAC0C,IAAkB7C,GAAAG,IAcrB,SAASe,GAAW5hC,GAElB,OAPqB,SAFrBsnB,EASWtnB,IAP8BsnB,EAAO7mB,KAAKoE,YAE7B0+B,GAMf7C,GAIF,aAAc1gC,EACjBunB,GAAavnB,EAAoB6E,UACjC0qB,GAjBN,IACEjI,CAiBF,CAEA,IAAMkc,GAAiBhkC,OAAOuE,eACxBquB,GAAsB5yB,OAAOs6C,oBAC7B7jB,GAAwBz2B,OAAOu6C,sBAC/B96B,GAA2Bzf,OAAO+F,yBAClCub,GAAiBthB,OAAOw6C,eACxB15B,GAAkB9gB,OAAOC,UAiBP,SAAA8gB,GAItBvgB,EAAoBsnB,EAAoBD,GACxC,GAA+B,iBAApBC,EAA8B,CAGvC,GAAIhH,GAAiB,CACnB,IAAM4wB,EAAqBpwB,GAAewG,GACtC4pB,GAAsBA,IAAuB5wB,IAC/CC,GAAqBvgB,EAAiBkxC,EAAoB7pB,EAE7D,CAED,IAAImI,EAA4B4C,GAAoB9K,GAEhD2O,KACFzG,EAAOA,EAAKnJ,OAAO4P,GAAsB3O,KAM3C,IAHA,IAAM2qB,EAAgBrQ,GAAW5hC,GAC3BgyC,EAAgBpQ,GAAWta,GAExB/oB,EAAI,EAAGA,EAAIixB,EAAK7wB,SAAUJ,EAAG,CACpC,IAAME,EAAM+wB,EAAKjxB,GACjB,KACIE,KAAOosB,IACPxD,GAAeA,EAAY5oB,IAC3BuzC,GAAiBvzC,KAAOuzC,GACxBC,GAAiBxzC,KAAOwzC,GAC1B,CACA,IAAM9tC,EAAa8a,GAAyBqI,EAAiB7oB,GAE7D,IAEE+kC,GAAexjC,EAAiBvB,EAAK0F,EACtC,CAAC,MAAOnE,GAER,CACF,CACF,CACF,CAED,OAAOA,CACT,CCpJwB,SAAA4gB,GAAW5gB,GACjC,MAAuB,mBAATA,CAChB,CCAwB,SAAA6gB,GAAkB7gB,GACxC,MAAyB,iBAAXA,GAAuB,sBAAuBA,CAC9D,CCDgB,SAAAqf,GAAYrf,EAAwBsnB,GAClD,OAAOtnB,GAAKsnB,EAAI,GAAAjB,OAAGrmB,EAAC,KAAAqmB,OAAIiB,GAAMtnB,GAAKsnB,GAAK,EAC1C,CAEgB,SAAA1I,GAAgB5e,EAAesnB,GAC7C,GAAmB,IAAftnB,EAAIrB,OACN,MAAO,GAIT,IADA,IAAI0oB,EAASrnB,EAAI,GACRkxC,EAAI,EAAGA,EAAIlxC,EAAIrB,OAAQuyC,IAC9B7pB,GAAUC,EAAMA,EAAMtnB,EAAIkxC,GAAKlxC,EAAIkxC,GAErC,OAAO7pB,CACT,CCjBwB,SAAAtI,GAAc/e,GACpC,OACQ,OAANA,GACa,iBAANA,GACPA,EAAEwF,YAAYhB,OAAShF,OAAOgF,QAE5B,UAAWxE,GAAKA,EAAE6E,SAExB,CCNA,SAASya,GAAiBtf,EAAasnB,EAAaD,GAGlD,QAAI,IAH8CA,IAAAA,GAAA,IAG7CA,IAAetI,GAAc/e,KAAYoH,MAAMC,QAAQrH,GAC1D,OAAOsnB,EAGT,GAAIlgB,MAAMC,QAAQigB,GAChB,IAAK,IAAI4pB,EAAM,EAAGA,EAAM5pB,EAAO3oB,OAAQuyC,IACrClxC,EAAOkxC,GAAO5xB,GAAiBtf,EAAOkxC,GAAM5pB,EAAO4pB,SAEhD,GAAInyB,GAAcuI,GACvB,IAAK,IAAM4pB,KAAO5pB,EAChBtnB,EAAOkxC,GAAO5xB,GAAiBtf,EAAOkxC,GAAM5pB,EAAO4pB,IAIvD,OAAOlxC,CACT,CCJgB,SAAA+gB,GAAY/gB,EAAgBsnB,GAC1C9nB,OAAOuE,eAAe/D,EAAQ,WAAY,CAAEkG,MAAOohB,GACrD,CCSwB,SAAAlI,GACtBkI,GAAA,IACA,IAAwBD,EAAA,GAAA6pB,EAAA,EAAxBA,EAAwBxyC,UAAAC,OAAxBuyC,IAAA7pB,EAAwB6pB,EAAA,GAAAxyC,UAAAwyC,GAExB,OACS,IAAI1tC,MACT,0IAAA6iB,OAA0IiB,EAAI,0BAAAjB,OAC5IgB,EAAe1oB,OAAS,EAAI,UAAU0nB,OAAAgB,EAAeuH,KAAK,OAAU,IAM5E,CCnCO,IAMD1P,GAAiB,WAKrB,SAAAlf,EAAYA,GACVG,KAAK85C,WAAa,IAAIC,YARR,KASd/5C,KAAKxB,OATS,IAUdwB,KAAKuE,IAAM1E,CACZ,CAyEH,OAvEEA,EAAYP,UAAA06C,aAAZ,SAAan6C,GAEX,IADA,IAAIsnB,EAAQ,EACHD,EAAI,EAAGA,EAAIrnB,EAAOqnB,IACzBC,GAASnnB,KAAK85C,WAAW5yB,GAG3B,OAAOC,CAAA,EAGTtnB,EAAAP,UAAA26C,YAAA,SAAYp6C,EAAesnB,GACzB,GAAItnB,GAASG,KAAK85C,WAAWt7C,OAAQ,CAKnC,IAJA,IAAM0oB,EAAYlnB,KAAK85C,WACjB/I,EAAU7pB,EAAU1oB,OAEtB6wB,EAAU0hB,EACPlxC,GAASwvB,GAEd,IADAA,IAAY,GACE,EACZ,MAAMpQ,GAAY,GAAI,GAAAiH,OAAGrmB,IAI7BG,KAAK85C,WAAa,IAAIC,YAAY1qB,GAClCrvB,KAAK85C,WAAWj2C,IAAIqjB,GACpBlnB,KAAKxB,OAAS6wB,EAEd,IAAK,IAAIyiB,EAAIf,EAASe,EAAIziB,EAASyiB,IACjC9xC,KAAK85C,WAAWhI,GAAK,CAExB,CAID,IAFA,IAAID,EAAY7xC,KAAKg6C,aAAan6C,EAAQ,GAE1BzB,GAAP0zC,EAAI,EAAO3qB,EAAM3oB,QAAQszC,EAAI1zC,EAAG0zC,IACnC9xC,KAAKuE,IAAI21C,WAAWrI,EAAW1qB,EAAM2qB,MACvC9xC,KAAK85C,WAAWj6C,KAChBgyC,IAAA,EAKNhyC,EAAUP,UAAA66C,WAAV,SAAWt6C,GACT,GAAIA,EAAQG,KAAKxB,OAAQ,CACvB,IAAM2oB,EAASnnB,KAAK85C,WAAWj6C,GACzBqnB,EAAalnB,KAAKg6C,aAAan6C,GAC/BkxC,EAAW7pB,EAAaC,EAE9BnnB,KAAK85C,WAAWj6C,GAAS,EAEzB,IAAK,IAAIwvB,EAAInI,EAAYmI,EAAI0hB,EAAU1hB,IACrCrvB,KAAKuE,IAAI61C,WAAWlzB,EAEvB,GAGHrnB,EAAQP,UAAA+6C,SAAR,SAASx6C,GACP,IAAIsnB,EAAM,GACV,GAAItnB,GAASG,KAAKxB,QAAqC,IAA3BwB,KAAK85C,WAAWj6C,GAC1C,OAAOsnB,EAOT,IAJA,IAAMD,EAASlnB,KAAK85C,WAAWj6C,GACzBkxC,EAAa/wC,KAAKg6C,aAAan6C,GAC/BwvB,EAAW0hB,EAAa7pB,EAErB4qB,EAAIf,EAAYe,EAAIziB,EAAUyiB,IACrC3qB,GAAO,GAAAjB,OAAGlmB,KAAKuE,IAAI+1C,QAAQxI,IAAK5rB,OAAAnmB,IAGlC,OAAOonB,CAAA,EAEVtnB,CAAD,CAlFuB,GCPnBmhB,GAAuC,IAAI1M,IAC3CuM,GAAuC,IAAIvM,IAC3C0K,GAAgB,EAQP0F,GAAgB,SAAC7kB,GAC5B,GAAImhB,GAAgByF,IAAI5mB,GACtB,OAAOmhB,GAAgB1b,IAAIzF,GAG7B,KAAOghB,GAAgB4F,IAAIzH,KACzBA,KAGF,IAAMmI,EAAQnI,KAQd,OAFAgC,GAAgBnd,IAAIhE,EAAIsnB,GACxBtG,GAAgBhd,IAAIsjB,EAAOtnB,GACpBsnB,CACT,EAMarG,GAAgB,SAACjhB,EAAYsnB,GAExCnI,GAAgBmI,EAAQ,EAExBnG,GAAgBnd,IAAIhE,EAAIsnB,GACxBtG,GAAgBhd,IAAIsjB,EAAOtnB,EAC7B,ECxCM6e,GAAW,SAASwH,OAAApmB,GAAA,MAAAomB,OAAYoJ,GAAe,MAAApJ,OAAKvmB,GAAU,MAC9D8hB,GAAY,IAAI84B,OAAO,IAAIr0B,OAAApmB,GAAqD,iDAkChF2iB,GAA4B,SAAC5iB,EAAcsnB,EAAYD,GAI3D,IAHA,IACI6pB,EADE1hB,EAAQnI,EAAQxmB,MAAM,KAGnBoxC,EAAI,EAAGD,EAAIxiB,EAAM7wB,OAAQszC,EAAID,EAAGC,KAClCf,EAAO1hB,EAAMyiB,KAChBjyC,EAAM26C,aAAarzB,EAAI4pB,EAG7B,EAEMxsB,GAAwB,SAAC1kB,EAAcsnB,GAI3C,IAAK,IAALD,EAHM6pB,GAA8B,QAArB7pB,EAAAC,EAAMrf,mBAAA,IAAeof,EAAAA,EAAA,IAAIxmB,MAAMX,IACxCsvB,EAAkB,GAEfyiB,EAAI,EAAGD,EAAId,EAAMvyC,OAAQszC,EAAID,EAAGC,IAAK,CAC5C,IAAM1zC,EAAO2yC,EAAMe,GAAGvuC,OACtB,GAAKnF,EAAL,CAEA,IAAME,EAASF,EAAKoF,MAAMie,IAE1B,GAAInjB,EAAQ,CACV,IAAM0F,EAAkC,EAA1By2C,SAASn8C,EAAO,GAAI,IAC5BgpB,EAAKhpB,EAAO,GAEJ,IAAV0F,IAEF8c,GAAcwG,EAAItjB,GAGlBye,GAA0B5iB,EAAOynB,EAAIhpB,EAAO,IAC5CuB,EAAM66C,SAAST,YAAYj2C,EAAOqrB,IAGpCA,EAAM7wB,OAAS,CAChB,MACC6wB,EAAM9gB,KAAKnQ,EAnBO,CAqBrB,CACH,EAEau8C,GAAiB,SAAC96C,GAG7B,IAFA,IAAMsnB,EAAQjoB,SAASqpC,iBAAiB7pB,IAE/BwI,EAAI,EAAG6pB,EAAI5pB,EAAM3oB,OAAQ0oB,EAAI6pB,EAAG7pB,IAAK,CAC5C,IAAMmI,EAAOlI,EAAMD,GACfmI,GAAQA,EAAK0iB,aAAajyC,MAAasP,KACzCmV,GAAsB1kB,EAAOwvB,GAEzBA,EAAKvhB,YACPuhB,EAAKvhB,WAAWtF,YAAY6mB,GAGjC,CACH,EC3Fc,SAAU/N,KACtB,OAAkDs5B,EAAAA,EACpD,CCEA,IAOah5B,GAAe,SAAC/hB,GAC3B,IAAMsnB,EAAOjoB,SAASuzC,KAChBvrB,EAASrnB,GAAUsnB,EACnB4pB,EAAQ7xC,SAASC,cAAc,SAC/BkwB,EAXiB,SAACxvB,GACxB,IAAMsnB,EAAMlgB,MAAM6sC,KAAKj0C,EAAO0oC,iBAAmC,SAASriB,OAAApmB,GAAU,OAEpF,OAAOqnB,EAAIA,EAAI3oB,OAAS,EAC1B,CAJyB,CAWY0oB,GAC7B4qB,OAAA,IAAcziB,EAA0BA,EAAUpN,YAAc,KAEtE8uB,EAAMtvC,aAAa3B,GAASsP,IAC5B2hC,EAAMtvC,aAAa6tB,GAAiB3vB,IAEpC,IAAMkyC,EAAQvwB,KAMd,OAJIuwB,GAAOd,EAAMtvC,aAAa,QAASowC,GAEvC3qB,EAAOoa,aAAayP,EAAOe,GAEpBf,CACT,ECfa5vB,GAAQ,WAOnB,SAAAthB,EAAYA,GACVG,KAAKikB,QAAUrC,GAAa/hB,GAG5BG,KAAKikB,QAAQxb,YAAYvJ,SAAS+gC,eAAe,KAEjDjgC,KAAK66C,MDKe,SAACh7C,GACvB,GAAIA,EAAIg7C,MACN,OAAOh7C,EAAIg7C,MAKb,IADQ,IAAA1zB,EAAgBjoB,SAAQ47C,YACvB5zB,EAAI,EAAG6pB,EAAI5pB,EAAY3oB,OAAQ0oB,EAAI6pB,EAAG7pB,IAAK,CAClD,IAAMmI,EAAQlI,EAAYD,GAC1B,GAAImI,EAAM0rB,YAAcl7C,EACtB,OAAOwvB,CAEV,CAED,MAAMpQ,GAAY,GACpB,CAfwB,CCLEjf,KAAKikB,SAC3BjkB,KAAKxB,OAAS,CACf,CA2BH,OAzBEqB,EAAAP,UAAA46C,WAAA,SAAWr6C,EAAesnB,GACxB,IAGE,OAFAnnB,KAAK66C,MAAMX,WAAW/yB,EAAMtnB,GAC5BG,KAAKxB,UAAA,CAEN,CAAC,MAAOqB,GACP,OAAO,CACR,GAGHA,EAAUP,UAAA86C,WAAV,SAAWv6C,GACTG,KAAK66C,MAAMT,WAAWv6C,GACtBG,KAAKxB,QAAA,EAGPqB,EAAOP,UAAAg7C,QAAP,SAAQz6C,GACN,IAAMsnB,EAAOnnB,KAAK66C,MAAMG,SAASn7C,GAGjC,OAAIsnB,GAAQA,EAAK8zB,QACR9zB,EAAK8zB,QAEL,IAGZp7C,CAAD,CA1CqB,GA6CR8iB,GAAO,WAKlB,SAAA9iB,EAAYA,GACVG,KAAKikB,QAAUrC,GAAa/hB,GAC5BG,KAAKk7C,MAAQl7C,KAAKikB,QAAQk3B,WAC1Bn7C,KAAKxB,OAAS,CACf,CA0BH,OAxBEqB,EAAAP,UAAA46C,WAAA,SAAWr6C,EAAesnB,GACxB,GAAItnB,GAASG,KAAKxB,QAAUqB,GAAS,EAAG,CACtC,IAAMqnB,EAAOhoB,SAAS+gC,eAAe9Y,GAIrC,OAFAnnB,KAAKikB,QAAQqd,aAAapa,EADVlnB,KAAKk7C,MAAMr7C,IACgB,MAC3CG,KAAKxB,UAAA,CAEN,CACC,OAAO,GAIXqB,EAAUP,UAAA86C,WAAV,SAAWv6C,GACTG,KAAKikB,QAAQzb,YAAYxI,KAAKk7C,MAAMr7C,IACpCG,KAAKxB,QAAA,EAGPqB,EAAOP,UAAAg7C,QAAP,SAAQz6C,GACN,OAAIA,EAAQG,KAAKxB,OACRwB,KAAKk7C,MAAMr7C,GAAOiI,YAElB,IAGZjI,CAAD,CAnCoB,GAsCP2hB,GAAU,WAKrB,SAAA3hB,EAAYA,GACVG,KAAKs3C,MAAQ,GACbt3C,KAAKxB,OAAS,CACf,CAwBH,OAtBEqB,EAAAP,UAAA46C,WAAA,SAAWr6C,EAAesnB,GACxB,OAAItnB,GAASG,KAAKxB,SAChBwB,KAAKs3C,MAAMhP,OAAOzoC,EAAO,EAAGsnB,GAC5BnnB,KAAKxB,UAAA,EACE,EAMXqB,EAAUP,UAAA86C,WAAV,SAAWv6C,GACTG,KAAKs3C,MAAMhP,OAAOzoC,EAAO,GACzBG,KAAKxB,QAAA,EAGPqB,EAAOP,UAAAg7C,QAAP,SAAQz6C,GACN,OAAIA,EAAQG,KAAKxB,OACRwB,KAAKs3C,MAAMz3C,GAEX,IAGZA,CAAD,CAhCuB,GCxFnB4kB,GAAmB6a,GAajB3a,GAA+B,CACnCy2B,UAAW9b,GACX+b,mBAAoB9zB,IAItBa,GAAA,WAYE,SAAAvoB,EACEA,EACAqnB,EACA6pB,QAAA,IAFAlxC,IAAAA,EAAgC4T,SAAA,IAChCyT,IAAAA,EAA4C,IAF9C,IAqBCmI,EAAA,KAhBCrvB,KAAKoH,QAAO+f,EAAAA,EAAA,GACPxC,IACA9kB,GAGLG,KAAKs7C,GAAKp0B,EACVlnB,KAAKu7C,MAAQ,IAAIjnC,IAAIy8B,GACrB/wC,KAAKw7C,SAAW37C,EAAQu7C,UAGnBp7C,KAAKw7C,QAAUlc,IAAc7a,KAChCA,IAAA,EACAk2B,GAAe36C,OAGjB4gB,GAAY5gB,MAAM,WAAM,OJtDD,SAACH,GAK1B,IAJA,IAAMsnB,EAAMtnB,EAAM66C,SACVxzB,EAAWC,EAAG3oB,OAElBuyC,EAAM,GAAA1hB,EAAA,SACDnI,GACP,IAAMmI,EDqBmB,SAACxvB,GAC5B,OAAOghB,GAAgBvb,IAAIzF,EAC7B,CAF6B,CCrBAqnB,GACzB,QAAI,IAAAmI,EAA2B,iBAE/B,IAAMyiB,EAAQjyC,EAAM07C,MAAMj2C,IAAI+pB,GACxBwiB,EAAQ1qB,EAAIkzB,SAASnzB,GAC3B,QAAI,IAAA4qB,IAAwBA,EAAMhS,MAAyB,IAAjB+R,EAAMrzC,OAAuB,iBAEvE,IAAMJ,EAAW,GAAG8nB,OAAApmB,GAAA,MAAAomB,OAAYgB,EAAK,SAAAhB,OAAQmJ,EAAE,MAE3C/wB,EAAU,YACVwzC,GACFA,EAAMnxC,SAAQ,SAAAd,GACRA,EAAKrB,OAAS,IAChBF,GAAW,GAAA4nB,OAAGrmB,EAAI,KAEtB,IAKFkxC,GAAO,GAAG7qB,OAAA2rB,GAAQ3rB,OAAA9nB,EAAA,cAAA8nB,OAAqB5nB,EAAO,MAAA4nB,OAAKnmB,GAAA,EArB5C+xC,EAAQ,EAAGA,EAAQ5qB,EAAQ4qB,IAAAziB,EAA3ByiB,GAwBT,OAAOf,CACT,CA9B2B,CIsDa1hB,EAAK,GAC1C,CAoEH,OA7FSxvB,EAAU47C,WAAjB,SAAkB57C,GAChB,OAAO6kB,GAAc7kB,EAAA,EA0BvBA,EAAAP,UAAAo8C,UAAA,YACO17C,KAAKw7C,QAAUlc,IAClBqb,GAAe36C,KAAA,EAInBH,EAAAP,UAAAq8C,uBAAA,SAAuBz0B,EAA+B6pB,GACpD,YAAO,IAD6CA,IAAAA,GAAA,GAC7C,IAAIlxC,EACJsnB,EAAAA,EAAA,GAAAnnB,KAAKoH,SAAY8f,GACtBlnB,KAAKs7C,GACJvK,GAAa/wC,KAAKu7C,YAAA,EAAU,EAIjC17C,EAAkBP,UAAAs8C,mBAAlB,SAAmB/7C,GACjB,OAAQG,KAAKs7C,GAAGz7C,IAAOG,KAAKs7C,GAAGz7C,IAAO,GAAK,GAI7CA,EAAAP,UAAAo7C,OAAA,WACE,OAAO16C,KAAKuE,MAAQvE,KAAKuE,KN/EE1E,EKAR,SAACA,GAAE,IAAUsnB,EAAiBtnB,EAAAw7C,kBAAEn0B,EAAMrnB,EAAA8N,OAC3D,OAAA9N,EAAAu7C,SACS,IAAI55B,GAAW0F,GACbC,EACF,IAAIhG,GAAS+F,GAEb,IAAIvE,GAAQuE,EAEvB,CARuB,CC+EmClnB,KAAKoH,SN9EtD,IAAI2X,GAAkBlf,KADD,IAACA,CAAA,EMmF7BA,EAAAP,UAAAu8C,aAAA,SAAah8C,EAAYsnB,GACvB,OAAOnnB,KAAKu7C,MAAM90B,IAAI5mB,IAAQG,KAAKu7C,MAAMj2C,IAAIzF,GAAY4mB,IAAIU,EAAA,EAI/DtnB,EAAAP,UAAAk7C,aAAA,SAAa36C,EAAYsnB,GAGvB,GAFAzC,GAAc7kB,GAETG,KAAKu7C,MAAM90B,IAAI5mB,GAKjBG,KAAKu7C,MAAMj2C,IAAIzF,GAAYd,IAAIooB,OALT,CACvB,IAAMD,EAAa,IAAIvoB,IACvBuoB,EAAWnoB,IAAIooB,GACfnnB,KAAKu7C,MAAM13C,IAAIhE,EAAIqnB,EACpB,GAMHrnB,EAAAP,UAAA26C,YAAA,SAAYp6C,EAAYsnB,EAAcD,GACpClnB,KAAKw6C,aAAa36C,EAAIsnB,GACtBnnB,KAAK06C,SAAST,YAAYv1B,GAAc7kB,GAAKqnB,EAAA,EAI/CrnB,EAAUP,UAAAw8C,WAAV,SAAWj8C,GACLG,KAAKu7C,MAAM90B,IAAI5mB,IAChBG,KAAKu7C,MAAMj2C,IAAIzF,GAAYk8C,OAAA,EAKhCl8C,EAAUP,UAAA08C,WAAV,SAAWn8C,GACTG,KAAK06C,SAASP,WAAWz1B,GAAc7kB,IACvCG,KAAK87C,WAAWj8C,EAAA,EAIlBA,EAAAP,UAAA28C,SAAA,WAGEj8C,KAAKuE,SAAA,CAAM,EAEd1E,CAAD,CArGA,GCvBMqoB,GAAY,KACZnH,GAAgB,gBAWtB,SAAS8D,GAAuBhlB,EAA4BsnB,GAC1D,OAAOtnB,EAAS2sC,KAAI,SAAA3sC,GAclB,MAbkB,SAAdA,EAAKS,OAEPT,EAAKkG,MAAQ,GAAGmgB,OAAAiB,EAAA,KAAAjB,OAAarmB,EAAKkG,OAElClG,EAAKkG,MAAQlG,EAAKkG,MAAMm2C,WAAW,IAAK,IAAAh2B,OAAIiB,EAAS,MACrDtnB,EAAKkvB,MAASlvB,EAAKkvB,MAAmByd,KAAI,SAAA3sC,GACxC,MAAO,GAAGqmB,OAAAiB,EAAa,KAAAjB,OAAArmB,EACzB,KAGEoH,MAAMC,QAAQrH,EAAK6H,WAA2B,eAAd7H,EAAKS,OACvCT,EAAK6H,SAAWmd,GAAuBhlB,EAAK6H,SAAUyf,IAEjDtnB,CACT,GACF,CAEwB,SAAA6hB,GACtB7hB,GAAA,IAKIsnB,EACAD,EACA6pB,EAPJ1hB,OAAA,IAAAxvB,EAG2B4T,GAAsB5T,EAF/CiyC,EAAAziB,EAAAjoB,QAAAyqC,OAAA,IAAOC,EAAGr+B,GAAsBq+B,EAChC1zC,EAAuDixB,EAAA8sB,QAAvD79C,OAAA,IAAOF,EAAG44C,GAA6C54C,EAOnD4F,EAAwB,SAACnE,EAAekxC,EAAgB1hB,GAC5D,OAKEA,EAAO+sB,WAAWl1B,IAClBmI,EAAOgtB,SAASn1B,IAChBmI,EAAO6sB,WAAWh1B,EAAW,IAAI1oB,OAAS,EAEnC,IAAA0nB,OAAIiB,GAGNtnB,CACT,EAuBMynB,EAAchpB,EAAQ2C,QAE5BqmB,EAAY/Y,MAX8C,SAAA1O,GACpDA,EAAQS,OAASV,GAAkBC,EAAQkG,MAAM3B,SAAS,OAC3DvE,EAAQkvB,MAAmB,GAAKlvB,EAAQkvB,MAAM,GAE5CptB,QAAQumB,GAAWhB,GACnBvlB,QAAQovC,EAAiB/sC,GAEhC,IASI6tC,EAAQiF,QACVxvB,EAAY/Y,KAAK3O,GAGnB0nB,EAAY/Y,KAAK3O,GAEjB,IAAMzB,EAA8B,SAClC0B,EACAwvB,EAIAyiB,EACA1zC,QAAA,IALAixB,IAAAA,EAAa,aAIbyiB,IAAAA,EAAW,aACX1zC,IAAAA,EAAiB,KAKjB+oB,EAAe/oB,EACf8oB,EAAYmI,EACZ0hB,EAAkB,IAAIwJ,OAAO,KAAAr0B,OAAKgB,EAAc,OAAE,KAElD,IAAM5oB,EAAUuB,EAAI8B,QAAQof,GAAe,IACvC/c,EAAWpE,GACbkyC,GAAUziB,EAAW,GAAAnJ,OAAG4rB,EAAM,KAAA5rB,OAAImJ,EAAQ,OAAAnJ,OAAM5nB,EAAO,MAAOA,GAG5DuzC,EAAQyK,YACVt4C,EAAW6gB,GAAuB7gB,EAAU6tC,EAAQyK,YAGtD,I7B/FuBvqB,E6B+FjB5zB,EAAkB,GAOxB,OALAyB,EACEoE,E7BnHC,SAAqBu4C,GAC3B,IAAI/9C,EAAS42C,EAAOmH,GAEpB,OAAO,SAAUt4B,EAAS2K,EAAOlnB,EAAUqqB,GAG1C,IAFA,IAAI8kB,EAAS,GAEJhF,EAAI,EAAGA,EAAIrzC,EAAQqzC,IAC3BgF,GAAU0F,EAAW1K,GAAG5tB,EAAS2K,EAAOlnB,EAAUqqB,IAAa,GAEhE,OAAO8kB,CACR,CACD,C6ByGMj3C,CAAkB0nB,EAAYpB,Q7BnGT6L,E6BmGiC,SAAAlyB,GAAS,OAAA1B,EAAMoQ,KAAK1O,EAAM,E7BlG9E,SAAUokB,GACXA,EAAQ2xB,OACR3xB,EAAUA,EAAQnU,SACrBiiB,EAAS9N,EACZ,M6BiGU9lB,CACT,EAcA,OAZAA,EAAe44C,KAAOz4C,EAAQE,OAC1BF,EACG4yC,QAAO,SAACrxC,EAAKsnB,GAKZ,OAJKA,EAAO9iB,MACV4a,GAAiB,IAGZ0U,GAAM9zB,EAAKsnB,EAAO9iB,KAC1B,GnB5IW,MmB6IXiE,WACH,GAEGnK,CACT,CC1IO,IAAMkkB,GAAwB,IAAI+F,GAC5BnH,GAA0BS,KAQ1B6D,GAAoBwrB,EAAAA,cAAwC,CACvEyL,uBAAA,EACAC,WAAYp6B,GACZq6B,OAAQz7B,KAMGiB,IAHqBqD,GAAkBioB,SAGvBuD,EAAAA,mBAAM,IAA8B,SAGjD4L,KACd,OAAOr+C,EAAAA,EAAAA,YAAWinB,GACpB,CAkDM,SAAUH,GAAkBvlB,GAC1B,IAAAsnB,GAAwB2qB,EAAAA,EAAAA,UAASjyC,EAAM+8C,eAAtC11B,EAAOC,EAAA,GAAEkI,EAAAlI,EAAA,GACR7oB,EAAeq+C,KAAAF,WAEjBz4C,GAAqB6tC,EAAAA,EAAAA,UAAQ,WACjC,IAAI1qB,EAAQ7oB,EAYZ,OAVIuB,EAAMg7C,MACR1zB,EAAQtnB,EAAMg7C,MACLh7C,EAAM8N,SACfwZ,EAAQA,EAAMw0B,uBAAuB,CAAEhuC,OAAQ9N,EAAM8N,SAAA,IAGnD9N,EAAMg9C,wBACR11B,EAAQA,EAAMw0B,uBAAuB,CAAEN,mBAAA,KAGlCl0B,CACT,GAAG,CAACtnB,EAAMg9C,sBAAuBh9C,EAAMg7C,MAAOh7C,EAAM8N,OAAQrP,IAEtDgpB,GAASuqB,EAAAA,EAAAA,UACb,WACE,OAAAnwB,GAAqB,CACnBta,QAAS,CAAEk1C,UAAWz8C,EAAMy8C,UAAWxF,OAAQj3C,EAAMi9C,sBACrDX,QAAOj1B,GAFT,GAIF,CAACrnB,EAAMi9C,qBAAsBj9C,EAAMy8C,UAAWp1B,KAGhD9oB,EAAAA,EAAAA,YAAU,WACHD,IAAa+oB,EAASrnB,EAAM+8C,gBAAgBvtB,EAAWxvB,EAAM+8C,cACpE,GAAG,CAAC/8C,EAAM+8C,gBAEV,IAAMh9C,GAAyBiyC,EAAAA,EAAAA,UAC7B,WAAM,MAAC,CACL2K,kBAAmB38C,EAAM28C,kBACzBC,WAAYz4C,EACZ04C,OAAMp1B,EAHF,GAKN,CAACznB,EAAM28C,kBAAmBx4C,EAAoBsjB,IAGhD,OACEypB,EAAAA,cAACxrB,GAAkBgoB,SAAS,CAAAxnC,MAAOnG,GACjCmxC,EAAAA,cAAC7uB,GAAcqrB,SAAQ,CAACxnC,MAAOuhB,GAASznB,EAAM6H,UAGpD,CCzHA,IAAAod,GAAA,WAKE,SAAYjlB,EAAAA,EAAcsnB,GAA1B,IAQCD,EAAA,KAED,KAAAwjB,OAAS,SAAC7qC,EAAwBsnB,QAAA,IAAAA,IAAAA,EAAwClG,IACxE,IAAM8vB,EAAe7pB,EAAK7iB,KAAO8iB,EAAe4vB,KAE3Cl3C,EAAWg8C,aAAa30B,EAAK1Q,GAAIu6B,IACpClxC,EAAWo6C,YACT/yB,EAAK1Q,GACLu6B,EACA5pB,EAAeD,EAAKowB,MAAOvG,EAAc,cAG/C,EAnBE/wC,KAAKqE,KAAOxE,EACZG,KAAKwW,GAAK,gBAAgB0P,OAAArmB,GAC1BG,KAAKs3C,MAAQnwB,EAEbvG,GAAY5gB,MAAM,WAChB,MAAMif,GAAY,GAAIzC,OAAO0K,EAAK7iB,MACpC,GACD,CAiBH,OAHExE,EAAOP,UAAAy9C,QAAP,SAAQl9C,GACN,YAAO,IADDA,IAAAA,EAAwCohB,IACvCjhB,KAAKqE,KAAOxE,EAAek3C,IAAA,EAErCl3C,CAAD,CA9BA,GCNM2gB,GAAU,SAAC3gB,GAAc,OAAAA,GAAK,KAAOA,GAAK,KAexB,SAAA8hB,GAAmB9hB,GAGzC,IAFA,IAAIsnB,EAAS,GAEJD,EAAI,EAAGA,EAAIrnB,EAAOrB,OAAQ0oB,IAAK,CACtC,IAAM6pB,EAAIlxC,EAAOqnB,GAEjB,GAAU,IAANA,GAAiB,MAAN6pB,GAA2B,MAAdlxC,EAAO,GACjC,OAAOA,EAGL2gB,GAAQuwB,GACV5pB,GAAU,IAAM4pB,EAAEnwC,cAElBumB,GAAU4pB,CAEb,CAED,OAAO5pB,EAAOi1B,WAAW,OAAS,IAAMj1B,EAASA,CACnD,CCTA,IAAMvC,GAAY,SAAC/kB,GACjB,aAAAA,IAAA,IAAyCA,GAA6B,KAAVA,CAA5D,EAEWgiB,GAAgB,SAACsF,GAC5B,ICzBsCD,EAAc6pB,EDyB9C1hB,EAAQ,GAEd,IAAK,IAAMyiB,KAAO3qB,EAAK,CACrB,IAAM0qB,EAAM1qB,EAAI2qB,GACX3qB,EAAI5nB,eAAeuyC,KAAQltB,GAAUitB,KAGrC5qC,MAAMC,QAAQ2qC,IAAQA,EAAImL,OAAUv8B,GAAWoxB,GAClDxiB,EAAM9gB,KAAK,GAAA2X,OAAGvE,GAAUmwB,GAAI,KAAKD,EAAK,KAC7BjzB,GAAcizB,GACvBxiB,EAAM9gB,KAANY,MAAAkgB,EAAAxvB,EAAAA,EAAA,CAAW,GAAGqmB,OAAA4rB,EAAO,OAAKjwB,GAAcgwB,IAAA,GAAI,CAAE,UAE9CxiB,EAAM9gB,KAAK,GAAG2X,OAAAvE,GAAUmwB,GAAS,MAAA5rB,QCrCCgB,EDqCe4qB,ECnCxC,OAFuCf,EDqCMc,ICnCpB,kBAAVd,GAAiC,KAAVA,EAC1C,GAGY,iBAAVA,GAAgC,IAAVA,GAAiB7pB,KAAQjjB,IAAcijB,EAAKk1B,WAAW,MAIjF5/B,OAAOu0B,GAAOxtC,OAHZ,GAAG2iB,OAAA6qB,EAAS,OD8ByC,MAE7D,CAED,OAAO1hB,CACT,EAEc,SAAUlK,GACtBtlB,EACAsnB,EACAD,EACA6pB,GAEA,OAAInsB,GAAU/kB,GACL,GAIL6gB,GAAkB7gB,GACb,CAAC,IAAKqmB,OAAArmB,EAAkDo9C,oBAI7Dx8B,GAAW5gB,IE5DR4gB,GADmCqxB,EF8DhBjyC,IE7DGiyC,EAAKxyC,WAAawyC,EAAKxyC,UAAUqnC,mBF6D1Bxf,EAoBzB,CAACtnB,GAFDslB,GAjBQtlB,EAAMsnB,GAiBSA,EAAkBD,EAAY6pB,GAM5DlxC,aAAiBilB,GACfoC,GACFrnB,EAAM6qC,OAAOxjB,EAAY6pB,GAClB,CAAClxC,EAAMk9C,QAAQhM,KAEf,CAAClxC,GAKR+e,GAAc/e,GACTgiB,GAAchiB,GAGlBoH,MAAMC,QAAQrH,GAUZoH,MAAM3H,UAAU4mB,OAAO/W,MAAM6nC,GANrBn3C,EAMwC2sC,KANjC,SAAA3sC,GACpB,OAAAslB,GAAetlB,EAAUsnB,EAAkBD,EAAY6pB,EAAvD,KAJO,CAAClxC,EAAMyI,YAtCZ,IE/DsCwpC,CF2G5C,CGzGwB,SAAAzsB,GAAoCxlB,GAC1D,IAAK,IAAIsnB,EAAI,EAAGA,EAAItnB,EAAMrB,OAAQ2oB,GAAK,EAAG,CACxC,IAAMD,EAAOrnB,EAAMsnB,GAEnB,GAAI1G,GAAWyG,KAAUxG,GAAkBwG,GAGzC,OAAO,CAEV,CAED,OAAO,CACT,CCPA,IAAMpF,GAAOrhB,GAAKd,IAKlB6kB,GAAA,WAQE,SAAA3kB,EAAYA,EAAqBsnB,EAAqBD,GACpDlnB,KAAKs3C,MAAQz3C,EACbG,KAAKk9C,cAAgB,GACrBl9C,KAAKm9C,eACS,IACXj2B,GAA2BA,EAAUi2B,WACtC93B,GAAcxlB,GAChBG,KAAKo9C,YAAcj2B,EACnBnnB,KAAKq9C,SAAW1pB,GAAM7R,GAAMqF,GAC5BnnB,KAAKs9C,UAAYp2B,EAIjBkB,GAAWqzB,WAAWt0B,EACvB,CAmEH,OAjEEtnB,EAAAP,UAAAi+C,wBAAA,SACE19C,EACAsnB,EACAD,GAEA,IAAI6pB,EAAQ/wC,KAAKs9C,UACbt9C,KAAKs9C,UAAUC,wBAAwB19C,EAAkBsnB,EAAYD,GACrE,GAGJ,GAAIlnB,KAAKm9C,WAAaj2B,EAAO6vB,KAC3B,GAAI/2C,KAAKk9C,eAAiB/1B,EAAW00B,aAAa77C,KAAKo9C,YAAap9C,KAAKk9C,eACvEnM,EAAQ7xB,GAAY6xB,EAAO/wC,KAAKk9C,mBAC3B,CACL,IAAM7tB,EAAY5Q,GAChB0G,GAAQnlB,KAAKs3C,MAAOz3C,EAAkBsnB,EAAYD,IAE9C4qB,EAAOzqB,GAAasM,GAAM3zB,KAAKq9C,SAAUhuB,KAAe,GAE9D,IAAKlI,EAAW00B,aAAa77C,KAAKo9C,YAAatL,GAAO,CACpD,IAAMD,EAAqB3qB,EAAOmI,EAAW,IAAInJ,OAAA4rB,QAAA,EAAmB9xC,KAAKo9C,aACzEj2B,EAAW8yB,YAAYj6C,KAAKo9C,YAAatL,EAAMD,EAChD,CAEDd,EAAQ7xB,GAAY6xB,EAAOe,GAC3B9xC,KAAKk9C,cAAgBpL,CACtB,KACI,CAIL,IAHA,IAAI1zC,EAAcu1B,GAAM3zB,KAAKq9C,SAAUn2B,EAAO6vB,MAC1Cz4C,EAAM,GAED0F,EAAI,EAAGA,EAAIhE,KAAKs3C,MAAM94C,OAAQwF,IAAK,CAC1C,IAAMsjB,EAAWtnB,KAAKs3C,MAAMtzC,GAE5B,GAAwB,iBAAbsjB,EACThpB,GAAOgpB,OAGF,GAAIA,EAAU,CACnB,IAAMnpB,EAAasgB,GACjB0G,GAAQmC,EAAUznB,EAAkBsnB,EAAYD,IAGlD9oB,EAAcu1B,GAAMv1B,EAAaD,EAAa6F,GAC9C1F,GAAOH,CACR,CACF,CAED,GAAIG,EAAK,CACP,IAAMsB,EAAOynB,GAAajpB,IAAgB,GAErC+oB,EAAW00B,aAAa77C,KAAKo9C,YAAax9C,IAC7CunB,EAAW8yB,YACTj6C,KAAKo9C,YACLx9C,EACAsnB,EAAO5oB,EAAK,IAAI4nB,OAAAtmB,QAAA,EAAmBI,KAAKo9C,cAI5CrM,EAAQ7xB,GAAY6xB,EAAOnxC,EAC5B,CACF,CAED,OAAOmxC,CAAA,EAEVlxC,CAAD,CAzFA,GCwBa29C,GAAezM,EAAAA,mBAAM,GAELyM,GAAahQ,SCH1C,IAAMiQ,GAAyC,CAAC,EAyEzB,IAAI9+C,IA0F3B,SAAS++C,GAKP79C,EACAwvB,EACAyiB,GAEA,IAAMD,EAAqBnxB,GAAkB7gB,GACvCzB,EAAwByB,EACxBvB,GAAwB20B,GAAMpzB,GAGlC1B,EAGEkxB,EAAOsuB,MAHT/9C,OAAA,IAAAzB,EAAQ64C,GAAW74C,EACnB8F,EAEEorB,EAFsE+tB,YAAxEt9C,OAAA,IAAcmE,EA/KlB,SACEpE,EACAsnB,GAEA,IAAMD,EAA8B,iBAAhBrnB,EAA2B,KAAO+3B,GAAO/3B,GAE7D49C,GAAYv2B,IAASu2B,GAAYv2B,IAAS,GAAK,EAE/C,IAAM6pB,EAAc,GAAG7qB,OAAAgB,EAAA,KAAAhB,OAAQkzB,GAG7Bz5C,GAAaunB,EAAOu2B,GAAYv2B,KAGlC,OAAOC,EAAoB,GAAGjB,OAAAiB,EAAqB,KAAAjB,OAAA6qB,GAAgBA,CACrE,CAfA,CA+K6B1hB,EAAQlrB,YAAakrB,EAAQuuB,mBAAkB35C,EACxEmL,EACEigB,EADuClrB,YAAzCmrB,OAAA,IAAclgB,ECpNM,SAAoBvP,GAC1C,OAAOozB,GAAMpzB,GAAU,UAAUqmB,OAAArmB,GAAW,UAAUqmB,OAAAhV,GAAiBrR,GAAA,IACzE,CAFwB,CDoNcA,GAAAuP,EAG9BrP,EACJsvB,EAAQlrB,aAAekrB,EAAQ+tB,YAC3B,GAAAl3B,OAAG0R,GAAOvI,EAAQlrB,aAAgB,KAAA+hB,OAAAmJ,EAAQ+tB,aAC1C/tB,EAAQ+tB,aAAet9C,EAGvBw/B,EACJuS,GAAsBzzC,EAAsBu/C,MACxCv/C,EAAsBu/C,MAAMz3B,OAAOtmB,GAAyC21C,OAAOwD,SAClFn5C,EAED2nB,EAAsB8H,EAAOmtB,kBAEnC,GAAI3K,GAAsBzzC,EAAsBo+C,kBAAmB,CACjE,IAAMn+C,EAAsBD,EAAsBo+C,kBAElD,GAAIntB,EAAQmtB,kBAAmB,CAC7B,IAAMjyB,EAA4B8E,EAAQmtB,kBAG1Cj1B,EAAoB,SAAC1nB,EAAMsnB,GACzB,OAAA9oB,EAAoBwB,EAAMsnB,IAC1BoD,EAA0B1qB,EAAMsnB,EADhC,CAEH,MACCI,EAAoBlpB,CAEvB,CAED,IAAMu1B,EAAiB,IAAIpP,GACzBstB,EACA/xC,EACA8xC,EAAsBzzC,EAAsBy/C,oBAAA,GAG9C,SAAShqB,EAAiBh0B,EAAoCwvB,GAC5D,OA9IJ,SACExvB,EACAwvB,EACAyiB,GAGE,IAAOD,EAMLhyC,EAAkB89C,MALpBv/C,EAKEyB,EALYg+C,eACdv/C,EAIEuB,EAAkBq5B,aAHpB/6B,EAGE0B,EAHgBi+C,mBAClBl+C,EAEEC,EAAkBo9C,kBADpBh5C,EACEpE,EAAA8N,OAEE7N,EAAeixC,EAAAA,WAAiByM,IAChCpuC,EAAMutC,KACNrtB,EAAoBzvB,EAAmB28C,mBAAqBptC,EAAIotC,kBAOhE78C,EAAQmtB,GAAeuC,EAAOvvB,EAAcxB,IAAiBmV,GAE7D1T,EA/DR,SACEF,EACAqnB,EACA6pB,GAYA,IAVA,IAQI1hB,EAREyiB,EAAA3qB,EAAAA,EAAA,GAGDD,GAAK,CAER62B,eAAA,EACA5E,MAAKpI,IAIEc,EAAI,EAAGA,EAAIhyC,EAAMrB,OAAQqzC,GAAK,EAAG,CAExC,IAAMzzC,EAAkBqiB,GADxB4O,EAAUxvB,EAAMgyC,IAC8BxiB,EAAQyiB,GAAWziB,EAEjE,IAAK,IAAM/wB,KAAOF,EAChB0zC,EAAQxzC,GACE,cAARA,EACI4gB,GAAY4yB,EAAQxzC,GAA4BF,EAAgBE,IACxD,UAARA,EAAA6oB,EAAAA,EAAA,GACO2qB,EAAQxzC,IAASF,EAAgBE,IACtCF,EAAgBE,EAE3B,CAMD,OAJI4oB,EAAM62B,YACRjM,EAAQiM,UAAY7+B,GAAY4yB,EAAQiM,UAAW72B,EAAM62B,YAGpDjM,CACT,CAlCA,CA+DwCD,EAAgBxiB,EAAO1vB,GACvD2/B,EAAgCv/B,EAAQi+C,IAAM/5C,EAC9CsjB,EAA6B,CAAC,EAEpC,IAAK,IAAMlpB,KAAO0B,OAAA,IACZA,EAAQ1B,IAGU,MAAXA,EAAI,IAAsB,OAARA,GAAyB,UAARA,GAAmB0B,EAAQo5C,QAAUx5C,IAEhE,gBAARtB,EACTkpB,EAAgBy2B,GAAKj+C,EAAQk+C,YACnB3uB,IAAqBA,EAAkBjxB,EAAKihC,KACtD/X,EAAgBlpB,GAAO0B,EAAQ1B,KAkBnC,IAAMksB,EA/GR,SACE1qB,EACAsnB,GAEA,IAAMD,EAAMy1B,KAUZ,OARkB98C,EAAe09C,wBAC/Bp2B,EACAD,EAAIu1B,WACJv1B,EAAIw1B,OAMR,CAfA,CA+G8Ct+C,EAAgB2B,GAMxD6zB,EAAc1U,GAAY/gB,EAAoByB,GAuBlD,OAtBI2qB,IACFqJ,GAAe,IAAMrJ,GAEnBxqB,EAAQg+C,YACVnqB,GAAe,IAAM7zB,EAAQg+C,WAG/Bx2B,EAEE0L,GAAMqM,KACLp8B,GAAYujB,IAAI6Y,GACb,QACA,aACF1L,EAKAke,IACFvqB,EAAgB6G,IAAM0jB,IAGjBxqB,EAAAA,EAAAA,eAAcgY,EAAoB/X,EAC3C,CAtFA,CA8I8ChB,EAAwB1mB,EAAOwvB,EAC1E,CAEDwE,EAAiB1vB,YAAcmrB,EAM/B,IAAI/I,EAAyBwqB,EAAAA,WAAiBld,GA+D9C,OA1DAtN,EAAuBo3B,MAAQre,EAC/B/Y,EAAuBs3B,eAAiBjqB,EACxCrN,EAAuBpiB,YAAcmrB,EACrC/I,EAAuBi2B,kBAAoBj1B,EAI3ChB,EAAuBu3B,mBAAqBjM,EACxC3yB,GAAY9gB,EAAsB0/C,mBAAoB1/C,EAAsB6+C,mBAC5E,GAEJ12B,EAAuB02B,kBAAoBl9C,EAG3CwmB,EAAuB5Y,OAASkkC,EAAqBzzC,EAAsBuP,OAAS9N,EAEpFR,OAAOuE,eAAe2iB,EAAwB,eAAgB,CAC5DjhB,IAAG,WACD,OAAOtF,KAAKk+C,mBACb,EAEDr6C,IAAA,SAAIhE,GACFG,KAAKk+C,oBAAsBrM,EpBvQT,SAAUhyC,GAAA,IAAa,IAAiBsnB,EAAA,GAAAD,EAAA,EAAjBA,EAAiB3oB,UAAAC,OAAjB0oB,IAAAC,EAAiBD,EAAA,GAAA3oB,UAAA2oB,GAC9D,IAAqB,IAAA6pB,EAAA,EAAA1hB,EAAOlI,EAAP4pB,EAAA1hB,EAAA7wB,OAAAuyC,IACnB5xB,GAAiBtf,EADFwvB,EAAA0hB,IAAA,GAIjB,OAAOlxC,CACT,CANwB,CoBwQR,CAAE,EAAEzB,EAAsB86B,aAAcr5B,GAC9CA,CACL,IAYH+gB,GAAY2F,GAAwB,WAAM,UAAAL,OAAIK,EAAuB02B,kBAA3B,IAEtC3+C,GAGF8hB,GACEmG,EAH+B1mB,EAK/B,CAEE89C,OAAA,EACAE,gBAAA,EACA15C,aAAA,EACA25C,oBAAA,EACAtB,mBAAA,EACAS,mBAAA,EACAtvC,QAAA,IAKC4Y,CACT,CErUc,SAAU43B,GACtBt+C,EACAsnB,GAIA,IAFA,IAAMD,EAAiC,CAACrnB,EAAQ,IAEvCkxC,EAAI,EAAG1hB,EAAMlI,EAAe3oB,OAAQuyC,EAAI1hB,EAAK0hB,GAAK,EACzD7pB,EAAO3Y,KAAK4Y,EAAe4pB,GAAIlxC,EAAQkxC,EAAI,IAG7C,OAAO7pB,CACT,CCMA,IAAMk3B,GAAS,SAAyBv+C,GACtC,OAAAR,OAAO8D,OAAOtD,EAAK,CAAEm9C,OAAA,GAArB,EAOF,SAASqB,GACPl3B,GAAA,IACA,IAAkDD,EAAA,GAAA6pB,EAAA,EAAlDA,EAAkDxyC,UAAAC,OAAlDuyC,IAAA7pB,EAAkD6pB,EAAA,GAAAxyC,UAAAwyC,GAElD,GAAItwB,GAAW0G,IAAWvI,GAAcuI,GAGtC,OAAOi3B,GACLj5B,GACEg5B,GAAkBnH,GAAWn3C,EAAA,CAJHsnB,GAMrBD,GAAA,MAMX,IAAMmI,EAAmBlI,EAEzB,OAC4B,IAA1BD,EAAe1oB,QACa,IAA5B6wB,EAAiB7wB,QACc,iBAAxB6wB,EAAiB,GAEjBlK,GAAekK,GAGjB+uB,GACLj5B,GAAeg5B,GAAkB9uB,EAAkBnI,IAEvD,CC0BwB,SAAAo3B,GAQtBp3B,EACA6pB,EACA1hB,GASA,QAAI,IATJA,IAAAA,EAAoD5b,KAS/Cs9B,EACH,MAAM9xB,GAAY,EAAG8xB,GAIvB,IAAMe,EAAmB,SACvB3qB,GAAA,IACA,IAAiE2qB,EAAA,GAAAD,EAAA,EAAjEA,EAAiEtzC,UAAAC,OAAjEqzC,IAAAC,EAAiED,EAAA,GAAAtzC,UAAAszC,GAEjE,OAAA3qB,EACE6pB,EACA1hB,EACAgvB,GAAmClvC,WAAA,EAAAtP,EAAA,CAAAsnB,GAAkB2qB,GAAA,IAHvD,EA6CF,OAjCAA,EAAiB6L,MAAQ,SAMvB99C,GAEA,OAAAy+C,GAUEp3B,EAAsB6pB,EACnB5pB,EAAAA,EAAA,GAAAkI,GACH,CAAAsuB,MAAO12C,MAAM3H,UAAU4mB,OAAOmJ,EAAQsuB,MAAO99C,GAAO01C,OAAOwD,WAZ7D,EAmBFjH,EAAiByM,WAAa,SAAC1+C,GAC7B,OAAAy+C,GAA0Dp3B,EAAsB6pB,EAC3E5pB,EAAAA,EAAA,GAAAkI,GACAxvB,GAFL,EAKKiyC,CACT,CCvJA,IAAM0M,GAAa,SACjB3+C,GAEA,OAAAy+C,GAIEZ,GAAuB79C,EAJzB,EAMI4+C,GAASD,GAKft7C,GAAYvC,SAAQ,SAAAd,GAElB4+C,GAAO5+C,GAAc2+C,GAA8B3+C,EACrD,KCjBA,WAKE,SAAYA,EAAAA,EAAuBsnB,GACjCnnB,KAAKs3C,MAAQz3C,EACbG,KAAKo9C,YAAcj2B,EACnBnnB,KAAKm9C,SAAW93B,GAAcxlB,GAI9BuoB,GAAWqzB,WAAWz7C,KAAKo9C,YAAc,EAC1C,CAEDv9C,EAAYP,UAAAo/C,aAAZ,SACE7+C,EACAsnB,EACAD,EACA6pB,GAEA,IAGM1hB,EAAM0hB,EAHItyB,GACd0G,GAAQnlB,KAAKs3C,MAA0BnwB,EAAkBD,EAAY6pB,IAE3C,IACtBe,EAAK9xC,KAAKo9C,YAAcv9C,EAG9BqnB,EAAW+yB,YAAYnI,EAAIA,EAAIziB,EAAA,EAGjCxvB,EAAAP,UAAAq/C,aAAA,SAAa9+C,EAAkBsnB,GAC7BA,EAAW60B,WAAWh8C,KAAKo9C,YAAcv9C,EAAA,EAG3CA,EAAYP,UAAAs/C,aAAZ,SACE/+C,EACAsnB,EACAD,EACA6pB,GAEIlxC,EAAW,GAAGuoB,GAAWqzB,WAAWz7C,KAAKo9C,YAAcv9C,GAG3DG,KAAK2+C,aAAa9+C,EAAUqnB,GAC5BlnB,KAAK0+C,aAAa7+C,EAAUsnB,EAAkBD,EAAY6pB,EAAA,CAE9D,CA/CA,ICQA,WAIE,SAAAlxC,IAAA,IAGCA,EAAA,KAED,KAAAg/C,cAAgB,WACd,IAAM13B,EAAMtnB,EAAKwmB,SAAS/d,WAC1B,IAAK6e,EAAK,MAAO,GACjB,IAAMD,EAAQ5F,KAMRyvB,EAAWtyB,GALH,CACZyI,GAAS,UAAUhB,OAAAgB,EAAQ,KAC3B,GAAAhB,OAAGpmB,GAAgB,WACnB,GAAGomB,OAAAoJ,GAAoB,MAAApJ,OAAAvmB,GAAa,MAEC41C,OAAOwD,SAAsB,KAEpE,MAAO,UAAU7yB,OAAA6qB,EAAY,KAAA7qB,OAAAiB,EAAA,WAC/B,EAUA,KAAA23B,aAAe,WACb,GAAIj/C,EAAKk/C,OACP,MAAM9/B,GAAY,GAGpB,OAAOpf,EAAKg/C,eACd,EAEA,KAAAG,gBAAkB,eAAA93B,EAChB,GAAIrnB,EAAKk/C,OACP,MAAM9/B,GAAY,GAGpB,IAAMoQ,EAAMxvB,EAAKwmB,SAAS/d,WAC1B,IAAK+mB,EAAK,MAAO,GAEjB,IAAMyiB,IAAK5qB,EAAG,CAAC,GACZpnB,IAAU,GACXonB,EAACoI,IAAkB3vB,GACnBunB,EAAAzf,wBAAyB,CACvBqhB,OAAQuG,GAAAnI,GAIN2qB,EAAQvwB,KAMd,OALIuwB,IACDC,EAAcmN,MAAQpN,GAIlB,CAACd,EAAAA,cAAA,QAAA5pB,EAAA,GAAW2qB,EAAK,CAAEv1B,IAAI,YAChC,EAyDA,KAAA2iC,KAAO,WACLr/C,EAAKk/C,QAAA,CACP,EApHE/+C,KAAKqmB,SAAW,IAAI+B,GAAW,CAAEgzB,UAAA,IACjCp7C,KAAK++C,QAAA,CACN,CAgBDl/C,EAAaP,UAAA6/C,cAAb,SAAct/C,GACZ,GAAIG,KAAK++C,OACP,MAAM9/B,GAAY,GAGpB,OAAO8xB,EAAAA,cAAC3rB,GAAiB,CAACy1B,MAAO76C,KAAKqmB,UAAWxmB,EAAA,EAqCnDA,EAAwBP,UAAA8/C,yBAAxB,SAAyBv/C,GAErB,MAAMof,GAAY,GAuDxB,EA1HA,GCkBwB,QAAQiH,OAAApmB,GAAA,MC9BhC,MAwBaw/B,GAAI,CACf+f,OAzBaC,GAAOxlC,MAAM;;;;;;;;;;;;;;;;;;;;;;iBCA5B,MAQA,GAReylC,IAA0C,IAAzC,KAAEj/C,EAAI,MAAEk/C,EAAK,QAAE5f,EAAO,UAAEme,GAAWwB,EACjD,OACEE,EAAAA,GAAAA,KAACngB,GAAE+f,OAAM,CAACtB,UAAWA,EAAWne,QAASA,EAASt/B,KAAMA,EAAKoH,SAC1D83C,GACQ,ECJTE,GAAOJ,GAAO5W,IAAI;;;;;;;;;;;;;;;;;EAmBXpJ,GAAI,CACfogB,SClBWC,GAAWJ,IAAkB,IAAjB,QAAEK,GAASL,EAClC,MAAOC,EAAOK,IAAYrnB,EAAAA,EAAAA,UAAS,KAC5BsnB,EAASC,IAAcvnB,EAAAA,EAAAA,UAAS,KAChCwnB,EAAUC,IAAeznB,EAAAA,EAAAA,UAAS,KAClCl4B,EAAM4/C,IAAW1nB,EAAAA,EAAAA,UAAS,SAiBjC,OACE2nB,EAAAA,GAAAA,MAAC7gB,GAAEogB,KAAI,CAACU,SAhBYvgD,IACpBA,EAAEgY,iBACF,MAAMwoC,EAAU,CACd7pC,GAAIiC,KAAKC,MACT8mC,QACAM,UACAE,WACA1/C,QAEFs/C,EAAQS,GACRR,EAAS,IACTE,EAAW,IACXE,EAAY,GAAG,EAIgBv4C,SAAA,EAC7B+3C,EAAAA,GAAAA,KAAA,OAAA/3C,UACE+3C,EAAAA,GAAAA,KAAA,SACEn/C,KAAK,OACLggD,YAAY,QACZv6C,MAAOy5C,EACPe,UAAQ,EACRC,SAAW3gD,GAAMggD,EAAShgD,EAAE8N,OAAO5H,YAGvC05C,EAAAA,GAAAA,KAAA,OAAA/3C,UACE+3C,EAAAA,GAAAA,KAAA,YACEa,YAAY,UACZv6C,MAAO+5C,EACPS,UAAQ,EACRC,SAAW3gD,GAAMkgD,EAAWlgD,EAAE8N,OAAO5H,YAGzC05C,EAAAA,GAAAA,KAAA,OAAA/3C,UACE+3C,EAAAA,GAAAA,KAAA,SACEn/C,KAAK,OACLggD,YAAY,WACZv6C,MAAOi6C,EACPO,UAAQ,EACRC,SAAW3gD,GAAMogD,EAAYpgD,EAAE8N,OAAO5H,YAG1C05C,EAAAA,GAAAA,KAAA,OAAA/3C,UACEy4C,EAAAA,GAAAA,MAAA,UAAQp6C,MAAOzF,EAAMkgD,SAAW3gD,GAAMqgD,EAAQrgD,EAAE8N,OAAO5H,OAAO2B,SAAA,EAC5D+3C,EAAAA,GAAAA,KAAA,UAAQ15C,MAAM,QAAO2B,SAAC,WACtB+3C,EAAAA,GAAAA,KAAA,UAAQ15C,MAAM,UAAS2B,SAAC,aACxB+3C,EAAAA,GAAAA,KAAA,UAAQ15C,MAAM,OAAM2B,SAAC,UACrB+3C,EAAAA,GAAAA,KAAA,UAAQ15C,MAAM,OAAM2B,SAAC,WACrB+3C,EAAAA,GAAAA,KAAA,UAAQ15C,MAAM,OAAM2B,SAAC,UACrB+3C,EAAAA,GAAAA,KAAA,UAAQ15C,MAAM,QAAO2B,SAAC,WACtB+3C,EAAAA,GAAAA,KAAA,UAAQ15C,MAAM,QAAO2B,SAAC,gBAG1B+3C,EAAAA,GAAAA,KAAA,OAAA/3C,UACE+3C,EAAAA,GAAAA,KAACJ,GAAM,CAAC/+C,KAAK,SAASk/C,MAAM,iBAEvB,ECjEPiB,GAASnB,GAAOoB,MAAM;;;;;;;;;EAWfphB,GAAI,CACfmhB,WCVWA,GAASA,KACpB,MAAOE,EAAOC,IAAYpoB,EAAAA,EAAAA,UAAS,KAGnCP,EAAAA,EAAAA,YAAU,KACR,MAAM4oB,EAAcC,aAAaC,QAAQ,SACrCF,GACFD,EAASpY,KAAK4O,MAAMyJ,GACtB,GACC,KAGH5oB,EAAAA,EAAAA,YAAU,KACR6oB,aAAaE,QAAQ,QAASxY,KAAKC,UAAUkY,GAAO,GACnD,CAACA,IAMJ,OACER,EAAAA,GAAAA,MAAC7gB,GAAEmhB,OAAM,CAAA/4C,SAAA,EACP+3C,EAAAA,GAAAA,KAAA,MAAA/3C,SAAI,uBACJ+3C,EAAAA,GAAAA,KAACE,GAAQ,CAACC,QAPGqB,IACfL,EAAS,IAAID,EAAOM,GAAM,MAOf,EC1BTC,GAAO5B,GAAO6B,GAAG;;;;EAMV7hB,GAAI,CACb4hB,SCPSA,GAAOA,KAEhBf,EAAAA,GAAAA,MAAC7gB,GAAE4hB,KAAI,CAAAx5C,SAAA,EACL+3C,EAAAA,GAAAA,KAAA,UACAA,EAAAA,GAAAA,KAAA,YCNO2B,GAAa,CACxB5qC,GAAI,IACJgpC,MAAO,qBACP93C,SAAU,CACR,CACE83C,MAAO,uJACPl/C,KAAM,OACN+gD,YAAa,mRAGb3kC,KAAM,+PAWR,CACE8iC,MAAO,6JACPl/C,KAAM,OACNoc,KAAM,+PAWR,CACE8iC,MAAO,GACPl/C,KAAM,OACNoc,KAAM,+PAWR,CACE8iC,MACE,6XACFl/C,KAAM,OACN+gD,YAAa,q7BAUb3kC,KAAM,k3BAyBR,CACE8iC,MAAO,0RACPl/C,KAAM,OACNoc,KAAM,8PAUN1P,KAAM,uCACNgT,IAAK,8CAEP,CACEw/B,MAAO,wRACPl/C,KAAM,OACNoc,KAAM,gLAKN1P,KAAM,uCACNgT,IAAK,SAEP,CACEw/B,MAAO,oPACPl/C,KAAM,OACNoc,KAAM,gLAKN1P,KAAM,uCACNgT,IAAK,MC5HEshC,GAAa,CACxB9qC,GAAI,IACJgpC,MAAO,uCACP93C,SAAU,CACR,CACE83C,MAAO,yKACPl/C,KAAM,OACN+gD,YAAa,o4CASf,CACE7B,MAAO,qNACPl/C,KAAM,OACN+gD,YAAa,m4CAQbrhC,IAAK,WACLhT,KAAM,wCAER,CACEwyC,MAAO,8RACPl/C,KAAM,OACN+gD,YAAa,m4CAQbrhC,IAAK,UACLhT,KAAM,wCAER,CACEwyC,MAAO,0PACPl/C,KAAM,OACN+gD,YAAa,m4CAQbrhC,IAAK,GACLhT,KAAM,wCAER,CACEwyC,MAAO,yKACPl/C,KAAM,OACN+gD,YAAa,6+EAcf,CACE7B,MAAO,kPACPl/C,KAAM,OACN+gD,YAAa,++EC9ENE,GAAa,CACxB/qC,GAAI,IACJgpC,MAAO,iCACP93C,SAAU,CACR,CACE83C,MAAO,4JACPl/C,KAAM,OACN+gD,YAAa,ulCAIf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,sWAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,4WACbr0C,KAAM,uCACNgT,IAAK,8CAEP,CACEw/B,MAAO,8FACPl/C,KAAM,OACN+gD,YAAa,ojBAGbr0C,KAAM,uCACNgT,IAAK,8CAEP,CACEw/B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,6ZACbr0C,KAAM,uCACNgT,IAAK,WC9BEwhC,GAAO,CAClBhrC,GAAI,GACJgpC,MAAO,WACP93C,SAAU,CCVc,CACxB8O,GAAI,IACJgpC,MAAO,uCACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN0M,KAAM,kFACNgT,IAAK,+BAEP,CACEw/B,MAAO,GACPl/C,KAAM,OACN0M,KAAM,4EACNgT,IAAK,IAEP,CACEw/B,MAAO,GACPl/C,KAAM,OACN0M,KAAM,mGACNgT,IAAK,gCCpBgB,CACzBxJ,GAAI,IACJgpC,MAAO,mDACP93C,SAAU,CACR,CACE83C,MAAO,0GACPl/C,KAAM,QACN0f,IAAK,sFAEP,CACEw/B,MAAO,GACPl/C,KAAM,QACN0f,IAAK,sFAEP,CACEw/B,MAAO,0GACPl/C,KAAM,QACN0f,IAAK,MCjBgB,CACzBxJ,GAAI,IACJgpC,MAAO,iCACP93C,SAAU,CACR,CACE83C,MAAO,wFACPl/C,KAAM,QACN0f,IAAK,6CAEP,CACEw/B,MAAO,GACPl/C,KAAM,QACN0f,IAAK,6CAEP,CACEw/B,MAAO,wFACPl/C,KAAM,QACN+gD,YAAa,kFACbrhC,IAAK,6CAEP,CACEw/B,MAAO,wFACPl/C,KAAM,QACN0f,IAAK,MHTPuhC,GACAD,GACAF,KIXSK,GAAM,CACjBjrC,GAAI,GACJgpC,MAAO,MACP93C,SAAU,CCRW,CACrB8O,GAAI,IACJgpC,MAAO,UACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN0M,KAAM,8JACNgT,IAAK,+DCRiB,CAC1BxJ,GAAI,IACJgpC,MAAO,iBACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN0M,KAAM,qKACNgT,IAAK,sECRW,CACpBxJ,GAAI,IACJgpC,MAAO,UACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN0M,KAAM,yKACNgT,IAAK,8DCRa,CACtBxJ,GAAI,IACJgpC,MAAO,WACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN0M,KAAM,+JACNgT,IAAK,kECRE0hC,GAAc,CACzBlrC,GAAI,IACJgpC,MAAO,cACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,8cAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,+hBAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,utBAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,4vBAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,42BAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,2TAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,iQAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,geAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,2SAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,mZAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,4fAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,4eAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,0YAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,qJAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,+JAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,mMAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,kQAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,+EAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,mbAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,wQAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,sZAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,oWAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,qcAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,8TAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,0ZAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,4SAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,yRAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,uQAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,mTAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,iaAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,mWAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,2eAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,yqBAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,otBAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,+yBAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,sqBAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,0+BAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,0rBAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,sxBAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,m9BAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,+uBAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,wiCAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAY,skBAGd,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAY,m7CCrQLM,GAAc,CACzBnrC,GAAI,IACJgpC,MAAO,eACP93C,SAAU,CACR,CACE83C,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,0iCAcf,CACE7B,MAAO,6CACPl/C,KAAM,OACN+gD,YAAa,0uFAkBf,CACE7B,MAAO,yIACPl/C,KAAM,OACN+gD,YAAa,+mCASf,CACE7B,MAAO,4DACPl/C,KAAM,OACN+gD,YAAa,0fASf,CACE7B,MAAO,8FACPl/C,KAAM,OACN+gD,YAAa,6qBASf,CACE7B,MAAO,kGACPl/C,KAAM,OACN+gD,YAAa,+7BASf,CACE7B,MAAO,qGACPl/C,KAAM,OACN+gD,YAAa,+1DAWf,CACE7B,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,geAQf,CACE7B,MAAO,kFACPl/C,KAAM,OACN+gD,YAAa,kxEAkBf,CACE7B,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,ouBC3INO,GAAsB,CACjCpC,MAAO,4EACPhpC,GAAI,IACJ9O,SAAU,CACR,CACE83C,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,gjBAUf,CACE7B,MAAO,4JACPl/C,KAAM,OACN+gD,YAAa,giCAQf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,qaAQf,CACE7B,MAAO,6KACPl/C,KAAM,OACN+gD,YAAa,67BC1CNQ,GAAU,CACrBrrC,GAAI,IACJgpC,MAAO,WACP93C,SAAU,CACR,CACE83C,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,2gCAUf,CACE7B,MAAO,MACPl/C,KAAM,OACN+gD,YAAa,2gDAaf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,0wBAQf,CACE7B,MAAO,uCACPl/C,KAAM,OACN+gD,YAAa,0jCC/CNS,GAAU,CACrBtrC,GAAI,IACJgpC,MAAO,UACP93C,SAAU,CACR,CACE83C,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,2fASf,CACE7B,MAAO,4CACPl/C,KAAM,OACN+gD,YAAa,mjBAYf,CACE7B,MAAO,yFACPl/C,KAAM,OACN+gD,YAAa,mPAQf,CACE7B,MAAO,oJACPl/C,KAAM,OACN+gD,YAAa,+eAaf,CACE7B,MAAO,uHACPl/C,KAAM,OACN+gD,YAAa,sIAMf,CACE7B,MAAO,kFACPl/C,KAAM,OACN+gD,YAAa,y1CAYf,CACE7B,MAAO,sMACPl/C,KAAM,OACN+gD,YAAa,m2BCrFNU,GAAiB,CAC5BvrC,GAAI,IACJgpC,MAAO,QACP93C,SAAU,CACR,CACE83C,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,wzBAWf,CACE7B,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,+6EAcf,CACE7B,MAAO,2BACPl/C,KAAM,OACN+gD,YAAa,+xDAaf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,0gFAmBf,CACE7B,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,i7CAUf,CACE7B,MAAO,kFACPl/C,KAAM,OACN+gD,YAAa,ixDAaf,CACE7B,MAAO,kFACPl/C,KAAM,OACN+gD,YAAa,ovBCzGNW,GAAa,CACxBxrC,GAAI,IACJgpC,MAAO,aACP93C,SAAU,CACR,CACE83C,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,4rCAUf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,sgCAUf,CACE7B,MAAO,2GACPl/C,KAAM,OACN+gD,YAAa,qpCAUf,CACE7B,MAAO,2GACPl/C,KAAM,OACN+gD,YAAa,8nCASf,CACE7B,MAAO,iFACPl/C,KAAM,OACN+gD,YAAa,2xBAQf,CACE7B,MAAO,qJACPl/C,KAAM,OACN+gD,YAAa,4vBAQf,CACE7B,MAAO,kFACPl/C,KAAM,OACN+gD,YAAa,+1BCxENY,GAAgB,CAC3BzrC,GAAI,IACJgpC,MAAO,iBACP93C,SAAU,CACRg6C,GACAE,GACAE,GACAD,GACAF,GACAK,GACAD,KCfSG,GAAY,CACvB1rC,GAAI,GACJgpC,MAAO,YACP93C,SAAU,CCNgB,CAC1B8O,GAAI,IACJgpC,MAAO,gBACP93C,SAAU,IDKRu6C,KERSE,GAA2B,CACtC3rC,GAAI,IACJgpC,MAAO,sCACP93C,SAAU,CACR,CACE83C,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,sZAIf,CACE7B,MAAO,aACPl/C,KAAM,OACN+gD,YAAa,woBAIf,CACE7B,MAAO,aACPl/C,KAAM,OACN+gD,YAAa,gmDAaf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,mRAGb3kC,KAAM,iQCxCC0lC,GAAmB,CAC9B5rC,GAAI,IACJgpC,MAAO,eACP93C,SAAU,CACR,CACE83C,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,ghCAaf,CACE7B,MAAO,8FACPl/C,KAAM,OACN+gD,YAAa,4gDAkBf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,29GAyCf,CACE7B,MAAO,2GACPl/C,KAAM,OACN+gD,YAAa,68DA2Bf,CACE7B,MAAO,oJACPl/C,KAAM,OACN+gD,YAAa,m5DAwBf,CACE7B,MAAO,0DACPl/C,KAAM,OACN+gD,YAAa,iqDAsBf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,yjDAqBf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,8sBClMNgB,GAA0B,CACrC7rC,GAAI,IACJgpC,MAAO,2BACP93C,SAAU,CACR,CACE83C,MAAO,8BACPl/C,KAAM,OACN+gD,YAAa,8yCAIf,CACE7B,MAAO,eACPl/C,KAAM,OACN+gD,YAAa,myEASf,CACE7B,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,yMAGb3kC,KAAM,mLAYR,CACE8iC,MAAO,UACPl/C,KAAM,OACN+gD,YAAa,yMAGb3kC,KAAM,iOAcR,CACE8iC,MAAO,cACPl/C,KAAM,OACN+gD,YAAa,oKAGb3kC,KAAM,kRAiBR,CACE8iC,MAAO,uCACPl/C,KAAM,OACN+gD,YAAa,8+DCvFNiB,GAAsB,CACjC9rC,GAAI,IACJgpC,MAAO,qLACP93C,SAAU,CACR,CACE83C,MAAO,iGACPl/C,KAAM,OACN+gD,YAAa,g8BAKf,CACE7B,MAAO,6GACPl/C,KAAM,OACN+gD,YAAa,2gCAKf,CACE7B,MAAO,2FACPl/C,KAAM,OACN+gD,YAAa,8uBAKf,CACE7B,MAAO,uGACPl/C,KAAM,OACN+gD,YAAa,unCAKf,CACE7B,MAAO,6HACPl/C,KAAM,OACN+gD,YAAa,0MAGb3kC,KAAM,wcC1CC6lC,GAAmC,CAC9C/rC,GAAI,IACJgpC,MAAO,2TACP93C,SAAU,CACR,CACE83C,MAAO,6MACPl/C,KAAM,OACN+gD,YAAa,koHAWf,CACE7B,MAAO,qGACPl/C,KAAM,OACN+gD,YAAa,u4BAGb3kC,KAAM,y2BAeR,CACE8iC,MAAO,mJACPl/C,KAAM,OACN+gD,YAAa,wpCAGb3kC,KAAM,6kBAcN8lC,YAAa,kdAGbC,gBAAiB,6qBAmBnB,CACEjD,MAAO,wGACPl/C,KAAM,OACN+gD,YAAa,2hCAGb3kC,KAAM,m1BAoBR,CACE8iC,MAAO,iKACPl/C,KAAM,OACN+gD,YAAa,y2BAGb3kC,KAAM,wtCAoBR,CACE8iC,MAAO,6MACPl/C,KAAM,OACN+gD,YAAa,4rCAOb3kC,KAAM,mwBC7ICgmC,GAAU,CACrBlsC,GAAI,IACJgpC,MAAO,mEACP93C,SAAU,CACR,CACE83C,MAAO,4HACPl/C,KAAM,OACN+gD,YAAa,gkCAIf,CACE7B,MAAO,8HACPl/C,KAAM,OACN+gD,YAAa,k4DAKf,CACE7B,MAAO,4GACPl/C,KAAM,OACN+gD,YAAa,q4GAWf,CACE7B,MAAO,8FACPl/C,KAAM,OACN+gD,YAAa,gIAGb3kC,KAAM,2VAeR,CACE8iC,MAAO,oTACPl/C,KAAM,OACN+gD,YAAa,8OAGb3kC,KAAM,kpBA0BR,CACE8iC,MAAO,6KACPl/C,KAAM,OACN+gD,YAAa,61DAQf,CACE7B,MAAO,iSACPl/C,KAAM,OACN+gD,YAAa,4rDAQf,CACE7B,MAAO,4LACPl/C,KAAM,OACN+gD,YAAa,+TAGb3kC,KAAM,yJAON8lC,YAAa,09BAIbG,UAAW,0JAQbJ,KCvISK,GAAS,CACpBpD,MAAO,SACPhpC,GAAI,IACJ9O,SAAU,CACR,CACE83C,MAAO,4BACPl/C,KAAM,OACN+gD,YAAa,gVAQb3kC,KAAM,gSCfCmmC,GAAU,CACrBrD,MAAO,UACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,qCAGb3kC,KAAM,0CCVComC,GAAU,CACrBtD,MAAO,UACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,qCAGb3kC,KAAM,0CCVCqmC,GAAU,CACrBvD,MAAO,UACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,qCAGb3kC,KAAM,0CCVCsmC,GAAU,CACrBxD,MAAO,UACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,qCAGb3kC,KAAM,0CCVCumC,GAAU,CACrBzD,MAAO,UACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,qCAGb3kC,KAAM,0CCVCwmC,GAAU,CACrB1D,MAAO,UACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,qCAGb3kC,KAAM,0CCVCymC,GAAS,CACpB3D,MAAO,SACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,4BACPl/C,KAAM,OACN+gD,YAAa,26CAOb3kC,KAAM,61BCdC0mC,GAAS,CACpB5D,MAAO,SACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,wBACPl/C,KAAM,OACN+gD,YAAa,miBAMb3kC,KAAM,gdCbC2mC,GAAS,CACpB7D,MAAO,SACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,kBACPl/C,KAAM,OACN+gD,YAAa,0kBAgBb3kC,KAAM,4qDCvBC4mC,GAAS,CACpB9D,MAAO,SACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,oCACPl/C,KAAM,OACN+gD,YAAa,+4BAIb3kC,KAAM,0PCXC6mC,GAAS,CACpB/D,MAAO,SACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,qBACPl/C,KAAM,OACN+gD,YAAa,mgBAWb3kC,KAAM,8YClBC8mC,GAAS,CACpBhE,MAAO,SACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,qBACPl/C,KAAM,OACN+gD,YAAa,qqBAoBb3kC,KAAM,q3BC3BC+mC,GAAS,CACpBjE,MAAO,SACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,qCAGb3kC,KAAM,0CCVCgnC,GAAS,CACpBlE,MAAO,SACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,qCAGb3kC,KAAM,0CCMCinC,GAAW,CACtBntC,GAAI,IACJgpC,MAAO,WACP93C,SAAU,CACRk7C,GACAO,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAb,GACAC,GACAC,GACAC,GACAC,GACAC,KClCSU,GAAuB,CAClCptC,GAAI,IACJgpC,MAAO,kHACP93C,SAAU,CACR,CACE83C,MAAO,4CACPl/C,KAAM,OACN+gD,YAAa,gwCASf,CACE7B,MAAO,wCACPl/C,KAAM,OACN+gD,YAAa,6pBAIb3kC,KAAM,opBAuBR,CACE8iC,MAAO,yCACPl/C,KAAM,OACN+gD,YAAa,gsBAIb3kC,KAAM,2lBAiBR,CACE8iC,MAAO,wCACPl/C,KAAM,OACN+gD,YAAa,w1BAIb3kC,KAAM,mdAmBR,CACE8iC,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,20CA6Bf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,itCAgCf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,83BAIb3kC,KAAM,2tBAsBR,CACE8iC,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,6hDCjMNwC,GAAc,CACzBrtC,GAAI,IACJgpC,MAAO,uEACP93C,SAAU,CACR,CACE83C,MAAO,mDACPl/C,KAAM,OACN+gD,YAAa,ytDAKf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,uhGAUb3kC,KAAM,k+BAcR,CACE8iC,MAAO,gHACPl/C,KAAM,OACN+gD,YAAa,gxBAGb3kC,KAAM,2MAQR,CACE8iC,MAAO,mDACPl/C,KAAM,OACN+gD,YAAa,6uBAGb3kC,KAAM,4MAcR,CACE8iC,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,09BAGb3kC,KAAM,kMAcR,CACE8iC,MAAO,mGACPl/C,KAAM,OACN+gD,YAAa,y6CAQb3kC,KAAM,6NAYR,CACE8iC,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,+rBAGb3kC,KAAM,m5BAyBR,CACE8iC,MAAO,iCACPl/C,KAAM,OACN+gD,YAAa,snCAIfuC,KC5JSE,GAAY,CACvBttC,GAAI,IACJgpC,MAAO,6EACP93C,SAAU,CACR,CACE83C,MAAO,6CACPl/C,KAAM,OACN+gD,YAAa,02CAaf,CACE7B,MAAO,mDACPl/C,KAAM,OACN+gD,YAAa,8iEAgBf,CACE7B,MAAO,6HACPl/C,KAAM,OACN+gD,YAAa,k7CAcf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,+hDAcf,CACE7B,MAAO,wDACPl/C,KAAM,OACN+gD,YAAa,s4DAef,CACE7B,MAAO,yHACPl/C,KAAM,OACN+gD,YAAa,unDAUf,CACE7B,MAAO,+JACPl/C,KAAM,OACN+gD,YAAa,2hCASf,CACE7B,MAAO,0HACPl/C,KAAM,OACN+gD,YAAa,uvCAQb3kC,KAAM,8IC/HCqnC,GAAc,CACzBvtC,GAAI,IACJgpC,MAAO,oCACP93C,SAAU,CACR,CACE83C,MAAO,8IACPl/C,KAAM,OACN+gD,YAAa,gwDAKf,CACE7B,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,mmCAQf,CACE7B,MAAO,6CACPl/C,KAAM,OACN+gD,YAAa,muBAIf,CACE7B,MAAO,kFACPl/C,KAAM,OACN+gD,YAAa,qPAGb3kC,KAAM,4LAYR,CACE8iC,MAAO,6CACPl/C,KAAM,OACN+gD,YAAa,muBAIf,CACE7B,MAAO,kFACPl/C,KAAM,OACN+gD,YAAa,qPAGb3kC,KAAM,4QAcR,CACE8iC,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,q0BAGbr0C,KAAM,0FACNgT,IAAK,6DClFEgkC,GAAoB,CAC/BxtC,GAAI,IACJgpC,MAAO,6MACP93C,SAAU,CACR,CACE83C,MAAO,qOACPl/C,KAAM,OACN+gD,YAAa,moCAIf,CACE7B,MAAO,qGACPl/C,KAAM,OACN+gD,YAAa,8NAGb3kC,KAAM,uQAUR,CACE8iC,MAAO,qGACPl/C,KAAM,OACN+gD,YAAa,8NAGb3kC,KAAM,2RAaR,CACE8iC,MAAO,iQACPl/C,KAAM,OACN+gD,YAAa,yrCAQf,CACE7B,MAAO,uHACPl/C,KAAM,OACN+gD,YAAa,uMAGb3kC,KAAM,qYC/DCunC,GAAoC,CAC/CztC,GAAI,IACJgpC,MACE,wCACF93C,SAAU,CACR,CACE83C,MAAO,yEACPl/C,KAAM,OACN+gD,YAAa,6tEAOb3kC,KAAM,+nBAaR,CACE8iC,MAAO,+EACPl/C,KAAM,OACN+gD,YAAa,mXAGb3kC,KAAM,0TClCCwnC,GAAc,CACzB1tC,GAAI,IACJgpC,MAAO,uGACP93C,SAAU,CACR,CACE83C,MAAO,qDACPl/C,KAAM,OACN+gD,YAAa,ysCAIf,CACE7B,MAAO,iEACPl/C,KAAM,OACN+gD,YAAa,4hCASf,CACE7B,MAAO,gKACPl/C,KAAM,OACN+gD,YAAa,msBAIf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,o9CAQf,CACE7B,MAAO,gEACPl/C,KAAM,OACN+gD,YAAa,0JAGb3kC,KAAM,+XASN1P,KAAM,sBACNgT,IAAK,qDCzDEmkC,GAAY,CACvB3tC,GAAI,IACJgpC,MAAO,mFACP93C,SAAU,CACR,CACE83C,MAAO,mFACPl/C,KAAM,OACN+gD,YAAa,4hSA8Cf,CACE7B,MAAO,mIACPl/C,KAAM,OACN+gD,YAAa,i+CAOb3kC,KAAM,yhBAgBR,CACE8iC,MAAO,2HACPl/C,KAAM,OACN+gD,YAAa,wtCAUbrhC,IAAK,2BACLhT,KAAM,sKAER,CACEwyC,MAAO,oLACPl/C,KAAM,OACN+gD,YAAa,qmEClGN+C,GAAiB,CAC5B5tC,GAAI,IACJgpC,MAAO,kBACP93C,SAAU,CACR,CACE83C,MAAO,4DACPl/C,KAAM,OACN+gD,YAAa,ifAGb3kC,KAAM,4EAKR,CACE8iC,MAAO,8HACPl/C,KAAM,OACN+gD,YAAa,smBAGb3kC,KAAM,ieAaR,CACE8iC,MAAO,uHACPl/C,KAAM,OACN+gD,YAAa,inBAGb3kC,KAAM,gHAKR,CACE8iC,MAAO,+OACPl/C,KAAM,OACN+gD,YAAa,+WAGb3kC,KAAM,2IAKR,CACE8iC,MAAO,4GACPl/C,KAAM,OACN+gD,YAAa,+iBAGb3kC,KAAM,6FAKR,CACE8iC,MAAO,iGACPl/C,KAAM,OACN+gD,YAAa,wlBAGb3kC,KAAM,6ECzEC2nC,GAAY,CACvB7tC,GAAI,IACJgpC,MAAO,yDACP93C,SAAU,CACR,CACE83C,MAAO,gGACPl/C,KAAM,OACN+gD,YAAa,w9CAIb3kC,KAAM,qHAQR,CACE8iC,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,+nCAQb3kC,KAAM,uUAmBR,CACE8iC,MAAO,uHACPl/C,KAAM,OACN+gD,YAAa,uhCAIb3kC,KAAM,ifAiBR,CACE8iC,MAAO,8FACPl/C,KAAM,OACN+gD,YAAa,imBAGb3kC,KAAM,sLAaR,CACE8iC,MAAO,2GACPl/C,KAAM,OACN+gD,YAAa,ohCAQb3kC,KAAM,2sBAuBR,CACE8iC,MAAO,kKACPl/C,KAAM,OACN+gD,YAAa,6gDAIb3kC,KAAM,yPAeR,CACE8iC,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,mnCAOb3kC,KAAM,yuBAyBR,CACE8iC,MAAO,mDACPl/C,KAAM,OACN+gD,YAAa,wrBAGb3kC,KAAM,+VAYR,CACE8iC,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,osCC5MNiD,GAAsB,CACjC9tC,GAAI,IACJgpC,MAAO,uIACP93C,SAAU,CACR,CACE83C,MAAO,+CACPl/C,KAAM,OACN+gD,YAAa,gsIAgBb3kC,KAAM,0iBCvBC6nC,GAAoB,CAC/B/tC,GAAI,IACJgpC,MAAO,qBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,sqHAmBb3kC,KAAM,s6GC1BC8nC,GAAqB,CAChChuC,GAAI,IACJgpC,MAAO,uBACP93C,SAAU,CACR,CACE83C,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,whCAKf,CACE7B,MAAO,wGACPl/C,KAAM,OACN+gD,YAAa,qjCAUf,CACE7B,MAAO,4FACPl/C,KAAM,OACN+gD,YAAa,g5CAUf,CACE7B,MAAO,2KACPl/C,KAAM,OACN+gD,YAAa,oWAGb3kC,KAAM,4FAIR,CACE8iC,MAAO,0HACPl/C,KAAM,OACN+gD,YAAa,i3CCnDNoD,GAAe,CACxBjuC,GAAI,IACJgpC,MAAO,WACP93C,SAAU,CACR,CACE83C,MAAO,iFACPl/C,KAAM,OACN+gD,YAAa,2zBAIf,CACE7B,MAAO,mFACPl/C,KAAM,OACN+gD,YAAa,gkCAIf,CACE7B,MAAO,iHACPl/C,KAAM,OACN+gD,YAAa,qKAGb3kC,KAAM,0LAQR,CACE8iC,MAAO,6HACPl/C,KAAM,OACN+gD,YAAa,uLAGb3kC,KAAM,8FAOR,CACE8iC,MAAO,2JACPl/C,KAAM,OACN+gD,YAAa,61BASf,CACE7B,MAAO,sCACPl/C,KAAM,OACN+gD,YAAa,ukBAIf,CACE7B,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,2HAGb3kC,KAAM,sMAQR,CACE8iC,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,kmCCjFRqD,GAA6B,CACxCluC,GAAI,IACJgpC,MAAO,gCACP93C,SAAU,CACR,CACE83C,MAAO,sMACPl/C,KAAM,OACN+gD,YAAa,83CAOb3kC,KAAM,sLAUR,CACE8iC,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,8hDAOb3kC,KAAM,mNAUR,CACE8iC,MAAO,kIACPl/C,KAAM,OACN+gD,YAAa,wQAGb3kC,KAAM,iWAcR,CACE8iC,MAAO,8IACPl/C,KAAM,OACN+gD,YAAa,62BAQb3kC,KAAM,+UAKR,CACE8iC,MAAO,iCACPl/C,KAAM,OACN+gD,YAAa,u0BAGb3kC,KAAM,ucCtFCioC,GAAO,CAClBnuC,GAAI,IACJgpC,MAAO,iDACP93C,SAAU,CACR,CACE83C,MAAO,wDACPl/C,KAAM,OACN+gD,YAAa,gpDAQb3kC,KAAM,iNASR,CACE8iC,MAAO,8DACPl/C,KAAM,OACN+gD,YAAa,02BAGb3kC,KAAM,gYAWR,CACE8iC,MAAO,+JACPl/C,KAAM,OACN+gD,YAAa,i0CAUb3kC,KAAM,gXCtDCkoC,GAAc,CACzBpuC,GAAI,IACJgpC,MAAO,yFACP93C,SAAU,CACR,CACE83C,MAAO,8IACPl/C,KAAM,OACN+gD,YAAa,29DAIb3kC,KAAM,+fAaR,CACE8iC,MAAO,2CACPl/C,KAAM,OACN+gD,YAAa,0pCAGb3kC,KAAM,2XAoBR,CACE8iC,MAAO,6LACPl/C,KAAM,OACN+gD,YAAa,qxCAGb3kC,KAAM,0MAYR,CACE8iC,MAAO,0OACPl/C,KAAM,OACN+gD,YAAa,q8DAQb3kC,KAAM,sPAOR,CACE8iC,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,g+CAOb3kC,KAAM,uYAcR,CACE8iC,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,q2CAgBf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,28BCpINwD,GAAqB,CAChCruC,GAAI,IACJgpC,MAAO,sBACP93C,SAAU,CACR,CACE83C,MAAO,wMACPl/C,KAAM,OACN+gD,YAAa,yxCAIf,CACE7B,MAAO,8MACPl/C,KAAM,OACN+gD,YAAa,8yDAQf,CACE7B,MAAO,0KACPl/C,KAAM,OACN+gD,YAAa,yRAGb3kC,KAAM,igBAeR,CACE8iC,MAAO,wQACPl/C,KAAM,OACN+gD,YAAa,yxCAIf,CACE7B,MAAO,sTACPl/C,KAAM,OACN+gD,YAAa,05BCrDNyD,GAAiB,CAC5BtuC,GAAI,IACJgpC,MAAO,kBACP93C,SAAU,CACR,CACE83C,MAAO,sLACPl/C,KAAM,OACN+gD,YAAa,koCAMf,CACE7B,MAAO,uJACPl/C,KAAM,OACN+gD,YAAa,2+BAIf,CACE7B,MAAO,wJACPl/C,KAAM,OACN+gD,YAAa,gSAGb3kC,KAAM,6BAIR,CACE8iC,MAAO,iQACPl/C,KAAM,OACN+gD,YAAa,gaAGb3kC,KAAM,wCAIR,CACE8iC,MAAO,+OACPl/C,KAAM,OACN+gD,YAAa,mTAGb3kC,KAAM,6VAcR,CACE8iC,MAAO,0KACPl/C,KAAM,OACN+gD,YAAa,uiCC/DN0D,GAAgC,CAC3CvuC,GAAI,IACJgpC,MAAO,6KACP93C,SAAU,CACR,CACE83C,MAAO,8HACPl/C,KAAM,OACN+gD,YAAa,s9CAKf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,wvCAWf,CACE7B,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,mzCAUf,CACE7B,MAAO,2LACPl/C,KAAM,OACN+gD,YAAa,sOAGb3kC,KAAM,81BAYR,CACE8iC,MAAO,uMACPl/C,KAAM,OACN+gD,YAAa,kPAGb3kC,KAAM,+1BAYR,CACE8iC,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,k8DAOb3kC,KAAM,m2BAYR,CACE8iC,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,8lEAwBf,CACE7B,MAAO,8IACPl/C,KAAM,OACN+gD,YAAa,oqBC/HN2D,GAAoB,CAC/BxuC,GAAI,KACJgpC,MAAO,uGACP93C,SAAU,CACR,CACE83C,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,sgBAIb3kC,KAAM,qIAOR,CACE8iC,MAAO,UACPl/C,KAAM,OACN+gD,YAAa,sfAIb3kC,KAAM,yIAOR,CACE8iC,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,usBAIb3kC,KAAM,+FAMR,CACE8iC,MAAO,YACPl/C,KAAM,OACN+gD,YAAa,gtBAIb3kC,KAAM,4FAMR,CACE8iC,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,shBAIb3kC,KAAM,iVAMR,CACE8iC,MAAO,YACPl/C,KAAM,OACN+gD,YAAa,2eAIb3kC,KAAM,wFAMR,CACE8iC,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,okBAIb3kC,KAAM,2NAMR,CACE8iC,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,kkBAIb3kC,KAAM,wVAMR,CACE8iC,MAAO,eACPl/C,KAAM,OACN+gD,YAAa,mpBAIb3kC,KAAM,+WCrHCuoC,GAAmB,CAC9BzuC,GAAI,KACJgpC,MAAO,2FACP93C,SAAU,CACR,CACE83C,MAAO,YACPl/C,KAAM,OACN+gD,YAAa,k7BAIb3kC,KAAM,uNAUR,CACE8iC,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,+tBAIb3kC,KAAM,8HAMR,CACE8iC,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,6fAGb3kC,KAAM,mIAMR,CACE8iC,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,wcAGb3kC,KAAM,iIAMR,CACE8iC,MAAO,gBACPl/C,KAAM,OACN+gD,YAAa,sUAGb3kC,KAAM,gKAMR,CACE8iC,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,oYAGb3kC,KAAM,sHAMR,CACE8iC,MAAO,cACPl/C,KAAM,OACN+gD,YAAa,gcAGb3kC,KAAM,2HAMR,CACE8iC,MAAO,aACPl/C,KAAM,OACN+gD,YAAa,maAGb3kC,KAAM,0HAMR,CACE8iC,MAAO,kBACPl/C,KAAM,OACN+gD,YAAa,+dAGb3kC,KAAM,+HAMR,CACE8iC,MAAO,YACPl/C,KAAM,OACN+gD,YAAa,0RAGb3kC,KAAM,iKAUR,CACE8iC,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,uQAGb3kC,KAAM,yHAUR,CACE8iC,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,yQAGb3kC,KAAM,+HAUR,CACE8iC,MAAO,OACPl/C,KAAM,OACN+gD,YAAa,qaAGb3kC,KAAM,uGC5KCwoC,GAAuB,CAClC1uC,GAAI,KACJgpC,MAAO,mHACP93C,SAAU,CACR,CACE83C,MAAO,UACPl/C,KAAM,OACN+gD,YAAa,+mBAIb3kC,KAAM,mTAOR,CACE8iC,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,qtBAIb3kC,KAAM,8TAQR,CACE8iC,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,qoBAIb3kC,KAAM,wVAOR,CACE8iC,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,u6BAKb3kC,KAAM,6TAOR,CACE8iC,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,qsBAIb3kC,KAAM,qUAOR,CACE8iC,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,ulBAIb3kC,KAAM,sTAOR,CACE8iC,MAAO,YACPl/C,KAAM,OACN+gD,YAAa,ssBAIb3kC,KAAM,mUAOR,CACE8iC,MAAO,aACPl/C,KAAM,OACN+gD,YAAa,mgBAIb3kC,KAAM,8TAOR,CACE8iC,MAAO,eACPl/C,KAAM,OACN+gD,YAAa,8fAIb3kC,KAAM,4SAOR,CACE8iC,MAAO,cACPl/C,KAAM,OACN+gD,YAAa,6fAIb3kC,KAAM,sUAOR,CACE8iC,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,4hBAIb3kC,KAAM,0SAOR,CACE8iC,MAAO,qCACPl/C,KAAM,OACN+gD,YAAa,yiCAKb3kC,KAAM,4ZCxKCyoC,GAAsB,CACjC3uC,GAAI,KACJgpC,MAAO,6GACP93C,SAAU,CACR,CACE83C,MAAO,aACPl/C,KAAM,OACN+gD,YAAa,oQAGb3kC,KAAM,6JAMR,CACE8iC,MAAO,YACPl/C,KAAM,OACN+gD,YAAa,0eAGb3kC,KAAM,0HAMR,CACE8iC,MAAO,gBACPl/C,KAAM,OACN+gD,YAAa,ggBAGb3kC,KAAM,kIAMR,CACE8iC,MAAO,UACPl/C,KAAM,OACN+gD,YAAa,4WAGb3kC,KAAM,6HAMR,CACE8iC,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,iZAGb3kC,KAAM,4HAMR,CACE8iC,MAAO,YACPl/C,KAAM,OACN+gD,YAAa,gXAGb3kC,KAAM,iJCjEC0oC,GAAe,CAC1B5uC,GAAI,IACJgpC,MAAO,kGACP93C,SAAU,CACRs9C,GACAE,GACAD,GACAE,GACA,CACE3uC,GAAI,KACJgpC,MAAO,2FACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN0f,IAAK,4CACLhT,KAAM,kCAER,CACEwyC,MAAO,GACPl/C,KAAM,OACN0f,IAAK,gFACLhT,KAAM,8CC3BHq4C,GAA0B,CACrC7uC,GAAI,KACJgpC,MAAO,+HACP93C,SAAU,CACR,CACE83C,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,uSAGb3kC,KAAM,gFAKR,CACE8iC,MAAO,aACPl/C,KAAM,OACN+gD,YAAa,kaAGb3kC,KAAM,+EAKR,CACE8iC,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,0ZAGb3kC,KAAM,6EAKR,CACE8iC,MAAO,OACPl/C,KAAM,OACN+gD,YAAa,omBAGb3kC,KAAM,iHC3CC4oC,GAAgB,CAC3B9F,MAAO,8CACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,44BAIf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,kSAGb3kC,KAAM,iDAIR,CACE8iC,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,6+BAQf,CACE7B,MAAO,4HACPl/C,KAAM,OACN+gD,YAAa,kSAGb3kC,KAAM,umDAwBR,CACE8iC,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,y6EASb3kC,KAAM,kZAOR,CACE8iC,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,s+BCpFNkE,GAAoB,CAC/B/uC,GAAI,KACJgpC,MAAO,oJACP93C,SAAU,CACR,CACE83C,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,2RAGb3kC,KAAM,0EAKR,CACE8iC,MAAO,eACPl/C,KAAM,OACN+gD,YAAa,gUAGb3kC,KAAM,2ECrBC8oC,GAAsB,CACjChvC,GAAI,KACJgpC,MAAO,+EACP93C,SAAU,CACR,CACE83C,MAAO,aACPl/C,KAAM,OACN+gD,YAAa,qaAGb3kC,KAAM,yIAMR,CACE8iC,MAAO,eACPl/C,KAAM,OACN+gD,YAAa,wWAGb3kC,KAAM,6IAMR,CACE8iC,MAAO,aACPl/C,KAAM,OACN+gD,YAAa,8XAGb3kC,KAAM,0IAMR,CACE8iC,MAAO,YACPl/C,KAAM,OACN+gD,YAAa,2hBAGb3kC,KAAM,iIAMR,CACE8iC,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,ueAGb3kC,KAAM,iIC1DC+oC,GAAqB,CAChCjvC,GAAI,KACJgpC,MAAO,iLACP93C,SAAU,CACR,CACE83C,MAAO,UACPl/C,KAAM,OACN+gD,YAAa,shBAGb3kC,KAAM,iIAMR,CACE8iC,MAAO,cACPl/C,KAAM,OACN+gD,YAAa,4dAGb3kC,KAAM,wIAMR,CACE8iC,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,4cAGb3kC,KAAM,sIClCCgpC,GAAyB,CACpClvC,GAAI,KACJgpC,MAAO,2KACP93C,SAAU,CACR,CACE83C,MAAO,UACPl/C,KAAM,OACN+gD,YAAa,mZAGb3kC,KAAM,2IAMR,CACE8iC,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,sQAGb3kC,KAAM,+ICtBCipC,GAA+B,CAC1CnvC,GAAI,KACJgpC,MAAO,+HACP93C,SAAU,CACR,CACE83C,MAAO,gBACPl/C,KAAM,OACN+gD,YAAa,yQAGb3kC,KAAM,kFAKR,CACE8iC,MAAO,gBACPl/C,KAAM,OACN+gD,YAAa,mQAGb3kC,KAAM,kFAKR,CACE8iC,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,0QAGb3kC,KAAM,iFAKR,CACE8iC,MAAO,cACPl/C,KAAM,OACN+gD,YAAa,8QAGb3kC,KAAM,yFAKR,CACE8iC,MAAO,YACPl/C,KAAM,OACN+gD,YAAa,sQAGb3kC,KAAM,yFC9CCkpC,GAAgB,CAC3BpvC,GAAI,IACJgpC,MAAO,kBACP93C,SAAU,CACRi+C,GACAH,GACAE,GACAD,GACAJ,GACAC,GACAC,GACA,CACE/uC,GAAI,KACJgpC,MAAO,2FACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN0f,IAAK,0FACLhT,KAAM,mCAER,CACEwyC,MAAO,GACPl/C,KAAM,OACN0f,IAAK,iCACLhT,KAAM,8CCjCH64C,GAAa,CACxBrvC,GAAI,IACJgpC,MAAO,oJACP93C,SAAU,CACR,CACE83C,MAAO,aACPl/C,KAAM,OACN+gD,YAAa,mXAGb3kC,KAAM,gGAKR,CACE8iC,MAAO,aACPl/C,KAAM,OACN+gD,YAAa,mXAGb3kC,KAAM,iGAKR,CACE8iC,MAAO,aACPl/C,KAAM,OACN+gD,YAAa,kTAGb3kC,KAAM,iFAKR,CACE8iC,MAAO,2BACPl/C,KAAM,OACN+gD,YAAa,wVAGb3kC,KAAM,yGC3CCopC,GAAY,CACvBtvC,GAAI,MACJgpC,MAAO,mQACP93C,SAAU,CACR,CACE83C,MAAO,cACPl/C,KAAM,OACN+gD,YAAa,gQAGb3kC,KAAM,oFAKR,CACE8iC,MAAO,cACPl/C,KAAM,OACN+gD,YAAa,gQAGb3kC,KAAM,qFAKR,CACE8iC,MAAO,gBACPl/C,KAAM,OACN+gD,YAAa,wZAGb3kC,KAAM,gRChCCqpC,GAAe,CAC1BvvC,GAAI,MACJgpC,MAAO,uGACP93C,SAAU,CACR,CACE83C,MAAO,eACPl/C,KAAM,OACN+gD,YAAa,wQAGb3kC,KAAM,wFAKR,CACE8iC,MAAO,eACPl/C,KAAM,OACN+gD,YAAa,iSAGb3kC,KAAM,0FAKR,CACE8iC,MAAO,cACPl/C,KAAM,OACN+gD,YAAa,sSAGb3kC,KAAM,0FC5BCspC,GAAc,CACzBxvC,GAAI,KACJgpC,MAAO,8IACP93C,SAAU,CACRm+C,GACAE,GACAD,GACA,CACEtvC,GAAI,MACJgpC,MAAO,2FACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN0f,IAAK,wFACLhT,KAAM,iCAER,CACEwyC,MAAO,GACPl/C,KAAM,OACN0f,IAAK,6CACLhT,KAAM,4CCzBHi5C,GAAkB,CAC7BzvC,GAAI,KACJgpC,MAAO,yHACP93C,SAAU,CACR,CACE83C,MAAO,kBACPl/C,KAAM,OACN+gD,YAAa,mhBAGb3kC,KAAM,kHAMR,CACE8iC,MAAO,gCACPl/C,KAAM,OACN+gD,YAAa,gsBAGb3kC,KAAM,wIAMR,CACE8iC,MAAO,yBACPl/C,KAAM,OACN+gD,YAAa,04BAGb3kC,KAAM,iLClCCwpC,GAA4B,CACvC1vC,GAAI,KACJgpC,MAAO,yHACP93C,SAAU,CACR,CACE83C,MAAO,gBACPl/C,KAAM,OACN+gD,YAAa,miBAGb3kC,KAAM,mMAQR,CACE8iC,MAAO,qBACPl/C,KAAM,OACN+gD,YAAa,mkBAGb3kC,KAAM,wJAMR,CACE8iC,MAAO,0BACPl/C,KAAM,OACN+gD,YAAa,mmBAGb3kC,KAAM,iqBChCCypC,GAAgB,CAC3B3vC,GAAI,IACJgpC,MAAO,kBACP93C,SAAU,CACRu+C,GACAC,GACAF,GACA,CACExvC,GAAI,KACJgpC,MAAO,2FACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN0f,IAAK,0FACLhT,KAAM,mCAER,CACEwyC,MAAO,GACPl/C,KAAM,OACN0f,IAAK,iCACLhT,KAAM,8CCzBHo5C,GAA0B,CACrC5vC,GAAI,KACJgpC,MAAO,4IACP93C,SAAU,CACR,CACE83C,MAAO,oCACPl/C,KAAM,OACN+gD,YAAa,2nBAGb3kC,KAAM,sJCVC2pC,GAAiB,CAC5B7vC,GAAI,KACJgpC,MAAO,mMACP93C,SAAU,CACR,CACE83C,MAAO,oCACPl/C,KAAM,OACN+gD,YAAa,+tBAGb3kC,KAAM,yLCVC4pC,GAAuB,CAClC9vC,GAAI,KACJgpC,MAAO,qKACP93C,SAAU,CACR,CACE83C,MAAO,yCACPl/C,KAAM,OACN+gD,YAAa,2YAGb3kC,KAAM,oIAMR,CACE8iC,MAAO,4BACPl/C,KAAM,OACN+gD,YAAa,ypBAGb3kC,KAAM,wMCtBC6pC,GAAmB,CAC9B/vC,GAAI,KACJgpC,MAAO,yJACP93C,SAAU,CACR,CACE83C,MAAO,qBACPl/C,KAAM,OACN+gD,YAAa,+iBAGb3kC,KAAM,kMAOR,CACE8iC,MAAO,mBACPl/C,KAAM,OACN+gD,YAAa,yjBAGb3kC,KAAM,8QCvBC8pC,GAAoB,CAC/BhwC,GAAI,KACJgpC,MAAO,8GACP93C,SAAU,CACR,CACE83C,MAAO,mBACPl/C,KAAM,OACN+gD,YAAa,6gBAGb3kC,KAAM,kHAKR,CACE8iC,MAAO,qBACPl/C,KAAM,OACN+gD,YAAa,ocAGb3kC,KAAM,kHAKR,CACE8iC,MAAO,sBACPl/C,KAAM,OACN+gD,YAAa,ugBAGb3kC,KAAM,wIC1BC+pC,GAAgB,CAC3BjwC,GAAI,IACJgpC,MAAO,mGACP93C,SAAU,CACR8+C,GACAH,GACAE,GACAD,GACAF,GACA,CACE5vC,GAAI,KACJgpC,MAAO,2FACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN0f,IAAK,0FACLhT,KAAM,mCAER,CACEwyC,MAAO,GACPl/C,KAAM,OACN0f,IAAK,yCACLhT,KAAM,8CC7BH05C,GAAgB,CAC3BlwC,GAAI,KACJgpC,MAAO,iHACP93C,SAAU,CACR,CACE83C,MAAO,MACPl/C,KAAM,OACN+gD,YAAa,4TAGb3kC,KAAM,oQAOR,CACE8iC,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,gWAGb3kC,KAAM,4QASR,CACE8iC,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,uhBAGb3kC,KAAM,mRASR,CACE8iC,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,qfAGb3kC,KAAM,+OAQR,CACE8iC,MAAO,YACPl/C,KAAM,OACN+gD,YAAa,4TAGb3kC,KAAM,oYAQR,CACE8iC,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,yUAGb3kC,KAAM,6QAQR,CACE8iC,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,+MAGb3kC,KAAM,uRAQR,CACE8iC,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,6WAGb3kC,KAAM,2RC7GCiqC,GAAkB,CAC7BnwC,GAAI,KACJgpC,MAAO,uBACP93C,SAAU,CACR,CACE83C,MAAO,2IACPl/C,KAAM,OACN+gD,YAAa,2vEAQb3kC,KAAM,qwBCZCkqC,GAAc,CACzBpwC,GAAI,IACJgpC,MAAO,QACP93C,SAAU,CACRi/C,GACAD,KCRSG,GAAO,CAClBrwC,GAAI,IACJgpC,MAAO,iBACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN+gD,YACE,iNAEJ,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YACE,sMCdKyF,GAAe,CAC1BtwC,GAAI,KACJgpC,MAAO,yCACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,k8BAIf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,gSAGb3kC,KAAM,gCAIR,CACE8iC,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,miBAOf,CACE7B,MAAO,4HACPl/C,KAAM,OACN+gD,YAAa,gSAGb3kC,KAAM,uqDA2BR,CACE8iC,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,i6CCnEN0F,GAAqC,CAChDvwC,GAAI,KACJgpC,MAAO,8SACP93C,SAAU,CACR,CACE83C,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,miBAGb3kC,KAAM,kJAMR,CACE8iC,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,u3BAGb3kC,KAAM,kQAOR,CACE8iC,MAAO,yJACPl/C,KAAM,OACN+gD,YAAa,6gBAGb3kC,KAAM,oMChCCsqC,GAAoB,CAC/BxwC,GAAI,IACJgpC,MAAO,sBACP93C,SAAU,CACRo/C,GACAC,KCASE,GAAU,CACrBzwC,GAAI,IACJgpC,MAAO,UACP93C,SAAU,CACR09C,GACAQ,GACAO,GACAM,GACAG,GACAC,GACAG,KClBSE,GAAoB,CAC/B1wC,GAAI,IACJgpC,MAAO,yDACP93C,SAAU,CACR,CACE83C,MAAO,0FACPl/C,KAAM,OACN+gD,YAAa,q0EAmBf,CACE7B,MAAO,uGACPl/C,KAAM,OACN+gD,YAAa,+3CAoBf,CACE7B,MAAO,mHACPl/C,KAAM,OACN+gD,YAAa,ghDAaf,CACE7B,MAAO,0DACPl/C,KAAM,OACN+gD,YAAa,ulDAyBf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,wlCA6Bf,CACE7B,MAAO,wIACPl/C,KAAM,OACN+gD,YAAa,i+CAoBf,CACE7B,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,wsCCvJN8F,GAAmB,CAC9B3wC,GAAI,IACJgpC,MAAO,gBACP93C,SAAU,CACR,CACE83C,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,k0CA2Bf,CACE7B,MAAO,0HACPl/C,KAAM,OACN+gD,YAAa,qtDAoBf,CACE7B,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,msCAiBf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,60FAsCf,CACE7B,MAAO,gHACPl/C,KAAM,OACN+gD,YAAa,wnEA2Bf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,q0CAkBf,CACE7B,MAAO,wIACPl/C,KAAM,OACN+gD,YAAa,k/BA8Bf,CACE7B,MAAO,yIACPl/C,KAAM,OACN+gD,YAAa,ixDAwBf,CACE7B,MAAO,oJACPl/C,KAAM,OACN+gD,YAAa,gkCCxON+F,GAA0B,CACrC5wC,GAAI,IACJgpC,MAAO,yOACP93C,SAAU,CACR,CACE83C,MAAO,0KACPl/C,KAAM,OACN+gD,YAAa,wwDAWf,CACE7B,MAAO,4LACPl/C,KAAM,OACN+gD,YAAa,+iCAKf,CACE7B,MAAO,iMACPl/C,KAAM,OACN+gD,YAAa,yMAGb3kC,KAAM,4YASR,CACE8iC,MAAO,qQACPl/C,KAAM,OACN+gD,YAAa,mpEASf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,gzDAQf,CACE7B,MAAO,gHACPl/C,KAAM,OACN+gD,YAAa,uwDA2Bf,CACE7B,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,ymDAyBf,CACE7B,MAAO,8IACPl/C,KAAM,OACN+gD,YAAa,ooBC7HNgG,GAAoB,CAC/B7wC,GAAI,IACJgpC,MAAO,sKACP93C,SAAU,CACR,CACE83C,MAAO,yEACPl/C,KAAM,OACN+gD,YAAa,+gEAUf,CACE7B,MAAO,kKACPl/C,KAAM,OACN+gD,YAAa,4pBAGb3kC,KAAM,+cAYR,CACE8iC,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,mmDAUf,CACE7B,MAAO,mJACPl/C,KAAM,OACN+gD,YAAa,gUAGb3kC,KAAM,kjBAeR,CACE8iC,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,+rDAOb3kC,KAAM,gUAQR,CACE8iC,MAAO,8IACPl/C,KAAM,OACN+gD,YAAa,yhBC1FNiG,GAAW,CACtB9wC,GAAI,IACJgpC,MAAO,uDACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,ytFAUf,CACE7B,MAAO,2DACPl/C,KAAM,OACN+gD,YAAa,+kCAKb3kC,KAAM,uxBAaR,CACE8iC,MAAO,mGACPl/C,KAAM,OACN+gD,YAAa,y2DAMb3kC,KAAM,szBAaR,CACE8iC,MAAO,8HACPl/C,KAAM,OACN+gD,YAAa,seAGb3kC,KAAM,8/CAyBR,CACE8iC,MAAO,mKACPl/C,KAAM,OACN+gD,YAAa,sjHAYf,CACE7B,MAAO,kIACPl/C,KAAM,OACN+gD,YAAa,ygBAGb3kC,KAAM,+uBAgBR,CACE8iC,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,k2CCnINkG,GAAY,CACvB/wC,GAAI,IACJgpC,MAAO,YACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,o7BAIf,CACE7B,MAAO,uKACPl/C,KAAM,OACN+gD,YAAa,20CAOb3kC,KAAM,yUAUR,CACE8iC,MAAO,4HACPl/C,KAAM,OACN+gD,YAAa,4hDAUf,CACE7B,MAAO,+IACPl/C,KAAM,OACN+gD,YAAa,gvDC/CNmG,GAAW,CACtBhxC,GAAI,IACJgpC,MAAO,WACP93C,SAAU,CACR,CACE83C,MAAO,4HACPl/C,KAAM,OACN+gD,YAAa,wlBAIf,CACE7B,MAAO,gHACPl/C,KAAM,OACN+gD,YAAa,2lBAQf,CACE7B,MAAO,8FACPl/C,KAAM,OACN+gD,YAAa,kTAGb3kC,KAAM,uXAkBR,CACE8iC,MAAO,wIACPl/C,KAAM,OACN+gD,YAAa,kdAIf,CACE7B,MAAO,8IACPl/C,KAAM,OACN+gD,YAAa,6LAGb3kC,KAAM,6kBA6BR,CACE8iC,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,kiBC3FNoG,GAAqB,CAChCjxC,GAAI,IACJgpC,MAAO,sBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,qzCAIf,CACE7B,MAAO,8NACPl/C,KAAM,OACN+gD,YAAa,8YAIf,CACE7B,MAAO,4HACPl/C,KAAM,OACN+gD,YAAa,iiBAIb3kC,KAAM,sCAIR,CACE8iC,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,y0BAIb3kC,KAAM,kDAIR,CACE8iC,MAAO,4HACPl/C,KAAM,OACN+gD,YAAa,mWAIf,CACE7B,MAAO,8FACPl/C,KAAM,OACN+gD,YAAa,obAGb3kC,KAAM,2KAOR,CACE8iC,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,6VAGb3kC,KAAM,kKAMR,CACE8iC,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,olBAGb3kC,KAAM,wSAMR,CACE8iC,MAAO,iPACPl/C,KAAM,OACN+gD,YAAa,i3CAQf,CACE7B,MAAO,GACPl/C,KAAM,OACN0M,KAAM,4CACNgT,IAAK,kFAEP,CACEw/B,MAAO,GACPl/C,KAAM,OACN0M,KAAM,YACNgT,IAAK,wBAEP,CACEw/B,MAAO,GACPl/C,KAAM,OACN0M,KAAM,4BACNgT,IAAK,wCAEP,CACEw/B,MAAO,GACPl/C,KAAM,OACN0M,KAAM,kEACNgT,IAAK,qFAEP,CACEw/B,MAAO,GACPl/C,KAAM,OACN0M,KAAM,qBACNgT,IAAK,+EC3HE0nC,GAAQ,CACnBlxC,GAAI,IACJgpC,MAAO,4GACP93C,SAAU,CACR,CACE83C,MAAO,8EACPl/C,KAAM,OACN+gD,YAAa,o4BAIf,CACE7B,MAAO,gIACPl/C,KAAM,OACN+gD,YAAa,0tEASf,CACE7B,MAAO,oNACPl/C,KAAM,OACN+gD,YAAa,w2BAGb3kC,KAAM,4MAQR,CACE8iC,MAAO,yMACPl/C,KAAM,OACN+gD,YAAa,ioBAGb3kC,KAAM,sPAUR,CACE8iC,MAAO,mMACPl/C,KAAM,OACN+gD,YAAa,2oBAGb3kC,KAAM,0OASR,CACE8iC,MAAO,kJACPl/C,KAAM,OACN+gD,YAAa,wtBAGb3kC,KAAM,4MAQR,CACE8iC,MAAO,wJACPl/C,KAAM,OACN+gD,YAAa,m8BAIf,CACE7B,MAAO,6LACPl/C,KAAM,OACN+gD,YAAa,oNAGb3kC,KAAM,yOAYR,CACE8iC,MAAO,iEACPl/C,KAAM,OACN+gD,YAAa,q7BAGb3kC,KAAM,uWAQR,CACE8iC,MAAO,mEACPl/C,KAAM,OACN+gD,YAAa,84BC5HNsG,GAAO,CAClBnxC,GAAI,IACJgpC,MAAO,MACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,skCAIf,CACE7B,MAAO,uDACPl/C,KAAM,OACN+gD,YAAa,8WAGb3kC,KAAM,0CAIR,CACE8iC,MAAO,gHACPl/C,KAAM,OACN+gD,YAAa,wTAGb3kC,KAAM,mRAOR,CACE8iC,MAAO,4FACPl/C,KAAM,OACN+gD,YAAa,k9DAWf,CACE7B,MAAO,0HACPl/C,KAAM,OACN+gD,YAAa,uOAGb3kC,KAAM,koCAyBR,CACE8iC,MAAO,8JACPl/C,KAAM,OACN+gD,YAAa,q3CClFNuG,GAAgB,CAC3BpxC,GAAI,IACJgpC,MAAO,iBACP93C,SAAU,CACR,CACE83C,MAAO,0OACPl/C,KAAM,OACN+gD,YAAa,woCAKb3kC,KAAM,iNAUR,CACE8iC,MAAO,2IACPl/C,KAAM,OACN+gD,YAAa,o/CAMb3kC,KAAM,qUC/BCmrC,GAAmB,CAC9BrxC,GAAI,IACJgpC,MAAO,oBACP93C,SAAU,CACR,CACE83C,MAAO,2MACPl/C,KAAM,OACN+gD,YAAa,81CAQb3kC,KAAM,ytBCfCorC,GAA6B,CACxCtxC,GAAI,IACJgpC,MAAO,8BACP93C,SAAU,CACR,CACE83C,MAAO,4JACPl/C,KAAM,OACN+gD,YAAa,k/BAef,CACE7B,MAAO,sEACPl/C,KAAM,OACN+gD,YAAa,q+BAoBf,CACE7B,MAAO,8HACPl/C,KAAM,OACN+gD,YAAa,4yCAiBf,CACE7B,MAAO,yIACPl/C,KAAM,OACN+gD,YAAa,k6EAwBf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,g4BAcf,CACE7B,MAAO,mFACPl/C,KAAM,OACN+gD,YAAa,w/BAgBf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,kwCCnIN0G,GAAS,CACpBvxC,GAAI,IACJgpC,MAAO,SACP93C,SAAU,CACR,CACE83C,MAAO,uOACPl/C,KAAM,OACN+gD,YAAa,snDAQb3kC,KAAM,6gFCfCsrC,GAAmB,CAC9BxxC,GAAI,IACJgpC,MAAO,qBACP93C,SAAU,CACR,CACE83C,MAAO,2FACPl/C,KAAM,OACN+gD,YAAa,omCAKf,CACE7B,MAAO,6FACPl/C,KAAM,OACN+gD,YAAa,0qBAIf,CACE7B,MAAO,6DACPl/C,KAAM,OACN+gD,YAAa,yKAGb3kC,KAAM,wGAKR,CACE8iC,MAAO,iHACPl/C,KAAM,OACN+gD,YAAa,+mCAQf,CACE7B,MAAO,uEACPl/C,KAAM,OACN+gD,YAAa,28BAIf,CACE7B,MAAO,qDACPl/C,KAAM,OACN+gD,YAAa,2NAGb3kC,KAAM,6DCtDCurC,GAAqC,CAChDzxC,GAAI,IACJgpC,MAAO,yCACP93C,SAAU,CACR,CACE83C,MAAO,sUACPl/C,KAAM,OACN+gD,YAAa,w/EAQb3kC,KAAM,w4DCfCwrC,GAAqB,CAChC1xC,GAAI,IACJgpC,MAAO,gCACP93C,SAAU,CACR,CACE83C,MAAO,kIACPl/C,KAAM,OACN+gD,YAAa,otIA2Gf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,+9BAqBf,CACE7B,MAAO,qMACPl/C,KAAM,OACN+gD,YAAa,0oDC7IN8G,GAAiB,CAC5B3xC,GAAI,IACJgpC,MAAO,mBACP93C,SAAU,CACR,CACE83C,MAAO,iHACPl/C,KAAM,OACN+gD,YAAa,g9BAMb3kC,KAAM,+oBAWR,CACE8iC,MAAO,wIACPl/C,KAAM,OACN+gD,YAAa,ufAGb3kC,KAAM,6aAcR,CACE8iC,MAAO,mIACPl/C,KAAM,OACN+gD,YAAa,4pCAQb3kC,KAAM,uMAOR,CACE8iC,MAAO,iCACPl/C,KAAM,OACN+gD,YAAa,osBAGb3kC,KAAM,iFCpEC0rC,GAAgB,CAC3B5xC,GAAI,IACJgpC,MAAO,+GACP93C,SAAU,CACR,CACE83C,MAAO,gHACPl/C,KAAM,OACN+gD,YAAa,y9DAsBf,CACE7B,MAAO,kFACPl/C,KAAM,OACN+gD,YAAa,0wGAgCf,CACE7B,MAAO,uHACPl/C,KAAM,OACN+gD,YAAa,w3CA8Bf,CACE7B,MAAO,iKACPl/C,KAAM,OACN+gD,YAAa,0wCAwBf,CACE7B,MAAO,2JACPl/C,KAAM,OACN+gD,YAAa,2zCAuBf,CACE7B,MAAO,+IACPl/C,KAAM,OACN+gD,YAAa,mqCAgCf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,wjFC5LNgH,GAAU,CACrB7xC,GAAI,IACJgpC,MAAO,qBACP93C,SAAU,CACR,CACE83C,MAAO,uGACPl/C,KAAM,OACN+gD,YAAa,kiDAQb3kC,KAAM,utBCfC4rC,GAAU,CACrB9xC,GAAI,IACJgpC,MAAO,iDACP93C,SAAU,CACR,CACE83C,MAAO,4GACPl/C,KAAM,OACN+gD,YAAa,qwDAKf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,wKAGb3kC,KAAM,4TAgBR,CACE8iC,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,ozDAQb3kC,KAAM,0HAUR,CACE8iC,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,6xBAGb3kC,KAAM,8SAqBR,CACE8iC,MAAO,+FACPl/C,KAAM,OACN+gD,YAAa,41BAGb3kC,KAAM,kbAwBR,CACE8iC,MAAO,kFACPl/C,KAAM,OACN+gD,YAAa,mlBAGb3kC,KAAM,ijBA4BR,CACE8iC,MAAO,qMACPl/C,KAAM,OACN+gD,YAAa,22DASf,CACE7B,MAAO,yLACPl/C,KAAM,OACN+gD,YAAa,q6DAQf,CACE7B,MAAO,uKACPl/C,KAAM,OACN+gD,YAAa,q6FAcf,CACE7B,MAAO,GACPl/C,KAAM,OACN0f,IAAK,yEACLhT,KAAM,gBAER,CACEwyC,MAAO,GACPl/C,KAAM,OACN0f,IAAK,gCACLhT,KAAM,8BCpMCu7C,GAAkB,CAC7B/xC,GAAI,IACJgpC,MAAO,qEACP93C,SAAU,CACR,CACE83C,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,+9BAkBf,CACE7B,MAAO,8KACPl/C,KAAM,OACN+gD,YAAa,wYAUf,CACE7B,MAAO,gHACPl/C,KAAM,OACN+gD,YAAa,gzBAaf,CACE7B,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,0hBAWf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,ycAUf,CACE7B,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,koBAcf,CACE7B,MAAO,qHACPl/C,KAAM,OACN+gD,YAAa,4gCAkBf,CACE7B,MAAO,GACPl/C,KAAM,OACN0f,IAAK,sEACLhT,KAAM,cC3HCw7C,GAAY,CACvBhyC,GAAI,IACJgpC,MAAO,2EACP93C,SAAU,CACR,CACE83C,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,08CAQb3kC,KAAM,qrBAeR,CACE8iC,MAAO,qJACPl/C,KAAM,OACN+gD,YAAa,urDAQb3kC,KAAM,4IAUR,CACE8iC,MAAO,+GACPl/C,KAAM,OACN+gD,YAAa,0zCAOb3kC,KAAM,gbAWR,CACE8iC,MAAO,mLACPl/C,KAAM,OACN+gD,YAAa,gdAGb3kC,KAAM,4EAKR,CACE8iC,MAAO,uKACPl/C,KAAM,OACN+gD,YAAa,u1BAGb3kC,KAAM,+ZAQR,CACE8iC,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,kzBCpGNoH,GAAoB,CAC/BjyC,GAAI,IACJgpC,MAAO,0BACP93C,SAAU,CACR,CACE83C,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,kyCAIb3kC,KAAM,2VAcR,CACE8iC,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,w3CAIb3kC,KAAM,sYAQR,CACE8iC,MAAO,2FACPl/C,KAAM,OACN+gD,YAAa,4sCAQb3kC,KAAM,2YAgBR,CACE8iC,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,6/BAGb3kC,KAAM,gXAUR,CACE8iC,MAAO,2HACPl/C,KAAM,OACN+gD,YAAa,gsBAGb3kC,KAAM,2VAiBR,CACE8iC,MAAO,mEACPl/C,KAAM,OACN+gD,YAAa,kZAGb3kC,KAAM,+UAeR,CACE8iC,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,ivCAOb3kC,KAAM,kXAQR,CACE8iC,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,k3CAgBf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,4+CCvKNqH,GAAa,CACxBlyC,GAAI,IACJgpC,MAAO,8GACP93C,SAAU,CACR,CACE83C,MAAO,gEACPl/C,KAAM,OACN+gD,YAAa,urDAKf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,2ZAkBf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,+KAGb3kC,KAAM,m8BAkCR,CACE8iC,MAAO,2GACPl/C,KAAM,OACN+gD,YAAa,+rDAQf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,qqDAQf,CACE7B,MAAO,+BACPl/C,KAAM,OACN+gD,YAAa,smBAsBf,CACE7B,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,uvCAsBf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,ihDCpJNsH,GAAe,CAC1BnyC,GAAI,IACJgpC,MAAO,iGACP93C,SAAU,CACR,CACE83C,MAAO,qIACPl/C,KAAM,OACN+gD,YAAa,uoDASf,CACE7B,MAAO,uHACPl/C,KAAM,OACN+gD,YAAa,4LAGb3kC,KAAM,wLAQR,CACE8iC,MAAO,mIACPl/C,KAAM,OACN+gD,YAAa,oRAGb3kC,KAAM,oTAYR,CACE8iC,MAAO,mIACPl/C,KAAM,OACN+gD,YAAa,q2DASf,CACE7B,MAAO,2JACPl/C,KAAM,OACN+gD,YAAa,0tDASf,CACE7B,MAAO,+FACPl/C,KAAM,OACN+gD,YAAa,y9CAQb3kC,KAAM,+ZAWR,CACE8iC,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,4+CA+Bf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,olCAiCf,CACE7B,MAAO,8IACPl/C,KAAM,OACN+gD,YAAa,w5BChHNuH,GAAa,CACxBpyC,GAAI,GACJgpC,MAAO,aACP93C,SAAU,CACRy6C,GACAiC,GACAhC,GACAC,GACAsB,GACA2E,GACA5F,GACAmB,GACAvB,GACAwB,GACAC,GACAE,GACAsE,GACArE,GACAF,GCzEe,CACjBxtC,GAAI,IACJgpC,MAAO,MACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,4BAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,4BAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,0BAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,2CAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,WAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,kDAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,sBAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,WAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,wBAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,sBAEf,CACE7B,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,oIDkBf+G,GACAjE,GACAE,GACAC,GACAoE,GACAnE,GACAC,GACAE,GACAD,GACAE,GACAC,GACAC,GACAE,GACAD,GACAmC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAmB,GACAE,GACApB,GACAC,GACAC,GACAE,GACAD,GACAE,GEtG0B,CAC5BpxC,GAAI,IACJgpC,MAAO,kBACP93C,SAAU,IFqGRmgD,GACAC,GACAC,GACAC,GACAC,GACAC,GACAG,GACAF,GACAK,KG7GSK,GAAS,CACpBryC,GAAI,GACJgpC,MAAO,UACP93C,SAAU,CCNwB,CAClC8O,GAAI,IACJgpC,MAAO,gCACP93C,SAAU,CACR,CACE83C,MAAO,mCACPl/C,KAAM,QACN0f,IAAK,uFAEP,CACEw/B,MAAO,wCACPl/C,KAAM,QACN0f,IAAK,+FAEP,CACEw/B,MAAO,sBACPl/C,KAAM,QACN0f,IAAK,+FAEP,CACEw/B,MAAO,uBACPl/C,KAAM,QACN0f,IAAK,+FAEP,CACEw/B,MAAO,8BACPl/C,KAAM,QACN0f,IAAK,+FAEP,CACEw/B,MAAO,oCACPl/C,KAAM,QACN0f,IAAK,+FAEP,CACEw/B,MAAO,iCACPl/C,KAAM,QACN0f,IAAK,+FAEP,CACEw/B,MAAO,wBACPl/C,KAAM,QACN0f,IAAK,+FAEP,CACEw/B,MAAO,uBACPl/C,KAAM,QACN0f,IAAK,+FAEP,CACEw/B,MAAO,8BACPl/C,KAAM,QACN0f,IAAK,gGAEP,CACEw/B,MAAO,8BACPl/C,KAAM,QACN0f,IAAK,gGAEP,CACEw/B,MAAO,yBACPl/C,KAAM,QACN0f,IAAK,kGC9DY,CACrBxJ,GAAI,IACJgpC,MAAO,UACP93C,SAAU,CACR,CACE83C,MAAO,GACP6B,YACE,sKACF/gD,KAAM,OACN0M,KAAM,2BACNgT,IAAK,iFCVE8oC,GAAW,CACtBtyC,GAAI,IACJgpC,MAAO,uEACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,kyBAIf,CACE7B,MAAO,8BACPl/C,KAAM,OACN+gD,YAAa,8yDAQf,CACE7B,MAAO,6BACPl/C,KAAM,OACN+gD,YAAa,4/DAQf,CACE7B,MAAO,oBACPl/C,KAAM,OACN+gD,YAAa,wpEAQf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,61CC/CN0H,GAAY,CACvBvyC,GAAI,IACJgpC,MAAO,aACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,giCAIf,CACE7B,MAAO,wKACPl/C,KAAM,OACN+gD,YAAa,wlFAWf,CACE7B,MAAO,uHACPl/C,KAAM,OACN+gD,YAAa,8QAGb3kC,KAAM,0FAMR,CACE8iC,MAAO,iHACPl/C,KAAM,OACN+gD,YAAa,oRAGb3kC,KAAM,4DAMR,CACE8iC,MAAO,mNACPl/C,KAAM,OACN+gD,YAAa,wtFAWf,CACE7B,MAAO,+IACPl/C,KAAM,OACN+gD,YAAa,4iDClEN2H,GAAiB,CAC5BxyC,GAAI,IACJgpC,MAAO,oJACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,+tCAIf,CACE7B,MAAO,iKACPl/C,KAAM,OACN+gD,YAAa,woEASf,CACE7B,MAAO,8FACPl/C,KAAM,OACN+gD,YAAa,44FAUf,CACE7B,MAAO,gSACPl/C,KAAM,OACN+gD,YAAa,wqDASf,CACE7B,MAAO,qJACPl/C,KAAM,OACN+gD,YAAa,uhECnDN4H,GAAuB,CAClCzyC,GAAI,IACJgpC,MAAO,yBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,ugEAWf,CACE7B,MAAO,wIACPl/C,KAAM,OACN+gD,YAAa,qtDASf,CACE7B,MAAO,2GACPl/C,KAAM,OACN+gD,YAAa,ipDASf,CACE7B,MAAO,4HACPl/C,KAAM,OACN+gD,YAAa,g5DASf,CACE7B,MAAO,sEACPl/C,KAAM,OACN+gD,YAAa,26CAwBf,CACE7B,MAAO,yIACPl/C,KAAM,OACN+gD,YAAa,4wBCpFN6H,GAAkB,CAC7B1yC,GAAI,IACJgpC,MAAO,4HACP93C,SAAU,CACR,CACE83C,MAAO,kLACPl/C,KAAM,OACN+gD,YAAa,ivCAKf,CACE7B,MAAO,wMACPl/C,KAAM,OACN+gD,YAAa,48CAQf,CACE7B,MAAO,oKACPl/C,KAAM,OACN+gD,YAAa,4SAGb3kC,KAAM,kWAUR,CACE8iC,MAAO,wOACPl/C,KAAM,OACN+gD,YAAa,86CC1CN8H,GAAwB,CACnC3yC,GAAI,IACJgpC,MAAO,iNACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,+7DAKf,CACE7B,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,4wJAaf,CACE7B,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,miFAUf,CACE7B,MAAO,uHACPl/C,KAAM,OACN+gD,YAAa,g9BAGb3kC,KAAM,+QASR,CACE8iC,MAAO,mIACPl/C,KAAM,OACN+gD,YAAa,0vBAGb3kC,KAAM,6LAaR,CACE8iC,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,q1BAGb3kC,KAAM,2cAYR,CACE8iC,MAAO,+IACPl/C,KAAM,OACN+gD,YAAa,s1BAGb3kC,KAAM,miCAsBR,CACE8iC,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,6qBAGb3kC,KAAM,oNAcR,CACE8iC,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,++CChJN+H,GAAsC,CACjD5yC,GAAI,IACJgpC,MAAO,yCACP93C,SAAU,CACR,CACE83C,MAAO,qPACPl/C,KAAM,OACN+gD,YAAa,+iCAIf,CACE7B,MAAO,6NACPl/C,KAAM,OACN+gD,YAAa,2NAGb3kC,KAAM,qGAQR,CACE8iC,MAAO,2PACPl/C,KAAM,OACN+gD,YAAa,q+BAIf,CACE7B,MAAO,mOACPl/C,KAAM,OACN+gD,YAAa,iOAGb3kC,KAAM,4GAKR,CACE8iC,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,yyCAIf,CACE7B,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,6rBCrDNgI,GAAmB,CAC9B7yC,GAAI,IACJgpC,MAAO,oBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,i6CAIf,CACE7B,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,w1FAUf,CACE7B,MAAO,6CACPl/C,KAAM,OACN+gD,YAAa,i1FASf,CACE7B,MAAO,iFACPl/C,KAAM,OACN+gD,YAAa,kyFAUf,CACE7B,MAAO,qJACPl/C,KAAM,OACN+gD,YAAa,gkFCpDNiI,GAAiB,CAC5B9yC,GAAI,IACJgpC,MAAO,kBACP93C,SAAU,CACR,CACE83C,MAAO,uCACPl/C,KAAM,OACN+gD,YAAa,qwBAQf,CACE7B,MAAO,2DACPl/C,KAAM,OACN+gD,YAAa,g+BAQf,CACE7B,MAAO,oFACPl/C,KAAM,OACN+gD,YAAa,8nCAQf,CACE7B,MAAO,+EACPl/C,KAAM,OACN+gD,YAAa,q4CCxCNkI,GAAoB,CAC/B/yC,GAAI,IACJgpC,MAAO,qBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,wsCAIf,CACE7B,MAAO,2GACPl/C,KAAM,OACN+gD,YAAa,gtFAUf,CACE7B,MAAO,sEACPl/C,KAAM,OACN+gD,YAAa,y0DASf,CACE7B,MAAO,kFACPl/C,KAAM,OACN+gD,YAAa,44EAUf,CACE7B,MAAO,sJACPl/C,KAAM,OACN+gD,YAAa,ijFCpDNmI,GAAmB,CAC9BhzC,GAAI,IACJgpC,MAAO,oBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,6hCAIf,CACE7B,MAAO,yFACPl/C,KAAM,OACN+gD,YAAa,soEASf,CACE7B,MAAO,gHACPl/C,KAAM,OACN+gD,YAAa,+vDASf,CACE7B,MAAO,mDACPl/C,KAAM,OACN+gD,YAAa,ypGAWf,CACE7B,MAAO,iFACPl/C,KAAM,OACN+gD,YAAa,4pEAUf,CACE7B,MAAO,qJACPl/C,KAAM,OACN+gD,YAAa,+yECjENoI,GAAM,CACjBjzC,GAAI,IACJgpC,MAAO,qPACP93C,SAAU,CACR,CACE83C,MACE,m6BACFl/C,KAAM,OACN+gD,YAAa,y7CASb3kC,KAAM,gaAwBR,CACE8iC,MAAO,8EACPl/C,KAAM,OACN+gD,YAAa,w7CAQb3kC,KAAM,4NAiBR,CACE8iC,MAAO,wEACPl/C,KAAM,OACN+gD,YAAa,svCAQb3kC,KAAM,qmBAwCR,CACE8iC,MAAO,kEACPl/C,KAAM,OACN+gD,YAAa,q4CAQb3kC,KAAM,2SAqBR,CACE8iC,MAAO,2IACPl/C,KAAM,OACN+gD,YAAa,0kDAQb3kC,KAAM,mWA0BR,CACE8iC,MAAO,oLACPl/C,KAAM,OACN+gD,YAAa,gnEChMNqI,GAAQ,CACnBlzC,GAAI,IACJgpC,MAAO,QACP93C,SAAU,CACR,CACE83C,MAAO,sCACPl/C,KAAM,OACN+gD,YAAa,m/BAQf,CACE7B,MAAO,4BACPl/C,KAAM,OACN+gD,YAAa,kqCAQf,CACE7B,MAAO,oCACPl/C,KAAM,OACN+gD,YAAa,w3DASf,CACE7B,MAAO,sCACPl/C,KAAM,OACN+gD,YAAa,6qCAQf,CACE7B,MAAO,qCACPl/C,KAAM,OACN+gD,YAAa,qvCCnCNsI,GAAW,CACtBnzC,GAAI,GACJgpC,MAAO,sCACP93C,SAAU,CACRqhD,GACAD,GACAE,GACAC,GCxBe,CACjBzyC,GAAI,IACJgpC,MAAO,MACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN+gD,YACE,stBDkBJ6H,GACAC,GACAC,GE5BgB,CAClB5yC,GAAI,IACJgpC,MAAO,OACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN+gD,YACE,2qBFsBJgI,GACAC,GACAC,GACAC,GACAC,GACAC,GGnCiB,CACnBlzC,GAAI,IACJgpC,MAAO,QACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN+gD,YACE,mzBCRKuI,GAAa,CACxBpzC,GAAI,IACJgpC,MAAO,4HACP93C,SAAU,CACR,CACE83C,MAAO,qIACPl/C,KAAM,OACN+gD,YAAa,s7DAUf,CACE7B,MAAO,qJACPl/C,KAAM,OACN+gD,YAAa,09CAUf,CACE7B,MAAO,UACPl/C,KAAM,OACN+gD,YAAa,40BAGb3kC,KAAM,ogBAaR,CACE8iC,MAAO,cACPl/C,KAAM,OACN+gD,YAAa,uzBAGb3kC,KAAM,mbAiBR,CACE8iC,MAAO,aACPl/C,KAAM,OACN+gD,YAAa,sjCAGb3kC,KAAM,4YAmBR,CACE8iC,MAAO,8BACPl/C,KAAM,OACN+gD,YAAa,spBAGb3kC,KAAM,4ZAiBR,CACE8iC,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,6uDAQf,CACE7B,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,u6CAkBf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,g5CAyCf,CACE7B,MAAO,8IACPl/C,KAAM,OACN+gD,YAAa,srBCvMNwI,GAAqB,CAChCrzC,GAAI,IACJgpC,MAAO,sMACP93C,SAAU,CACR,CACE83C,MAAO,gJACPl/C,KAAM,OACN+gD,YAAa,sqEAWf,CACE7B,MAAO,uMACPl/C,KAAM,OACN+gD,YAAa,imEAqBf,CACE7B,MAAO,qJACPl/C,KAAM,OACN+gD,YAAa,wzBAUf,CACE7B,MAAO,mIACPl/C,KAAM,OACN+gD,YAAa,+6BAQf,CACE7B,MAAO,wNACPl/C,KAAM,OACN+gD,YAAa,q7CCrENyI,GAAY,CACvBtzC,GAAI,IACJgpC,MAAO,QACP93C,SAAU,CACR,CACE83C,MAAO,2DACPl/C,KAAM,OACN+gD,YAAa,y7DAKf,CACE7B,MAAO,0IACPl/C,KAAM,OACN+gD,YAAa,ghFASf,CACE7B,MAAO,4HACPl/C,KAAM,OACN+gD,YAAa,y2FASf,CACE7B,MAAO,6EACPl/C,KAAM,OACN+gD,YAAa,yxFAUf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,q+CAYf,CACE7B,MAAO,4HACPl/C,KAAM,OACN+gD,YAAa,itBAGb3kC,KAAM,4LAcR,CACE8iC,MAAO,sBACPl/C,KAAM,OACN+gD,YAAa,08CAIb3kC,KAAM,0SAOR,CACE8iC,MAAO,wBACPl/C,KAAM,OACN+gD,YAAa,w/CAIb3kC,KAAM,oRAOR,CACE8iC,MAAO,iFACPl/C,KAAM,OACN+gD,YAAa,+pFASf,CACE7B,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,ypCAMbrhC,IAAK,gJACLhT,KAAM,yECtIC+qB,GAAc,CACzBvhB,GAAI,KACJgpC,MAAO,cACP93C,SAAU,CACR,CACE83C,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,0hCAqBf,CACE7B,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,o6DAqCf,CACE7B,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,4qCAwBf,CACE7B,MAAO,kLACPl/C,KAAM,OACN+gD,YAAa,m1DA4Bf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,m4DA8Cf,CACE7B,MAAO,wIACPl/C,KAAM,OACN+gD,YAAa,ugDAuBf,CACE7B,MAAO,wEACPl/C,KAAM,OACN+gD,YAAa,+mCAyBf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,ooFCxONrpB,GAAa,CACxBxhB,GAAI,KACJgpC,MAAO,aACP93C,SAAU,CACR,CACE83C,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,y/DA+Bf,CACE7B,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,ojCAmCf,CACE7B,MAAO,kLACPl/C,KAAM,OACN+gD,YAAa,w7DAqCf,CACE7B,MAAO,kIACPl/C,KAAM,OACN+gD,YAAa,gqDAuDf,CACE7B,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,u6EA6Bf,CACE7B,MAAO,gHACPl/C,KAAM,OACN+gD,YAAa,smDAsDf,CACE7B,MAAO,yIACPl/C,KAAM,OACN+gD,YAAa,mwFC1QNppB,GAAY,CACvBzhB,GAAI,KACJgpC,MAAO,YACP93C,SAAU,CACR,CACE83C,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,inDA6Bf,CACE7B,MAAO,kIACPl/C,KAAM,OACN+gD,YAAa,06DA2Bf,CACE7B,MAAO,iKACPl/C,KAAM,OACN+gD,YAAa,2rCAwCf,CACE7B,MAAO,kLACPl/C,KAAM,OACN+gD,YAAa,siEA0Cf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,06CA4Bf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,wwEAqDf,CACE7B,MAAO,8BACPl/C,KAAM,OACN+gD,YAAa,m3CCpPNhpB,GAAU,CACrB7hB,GAAI,KACJgpC,MAAO,UACP93C,SAAU,CACR,CACE83C,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,o+CAqBf,CACE7B,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,25DAyBf,CACE7B,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,o5BAwBf,CACE7B,MAAO,kLACPl/C,KAAM,OACN+gD,YAAa,s2DAsBf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,grCA2Bf,CACE7B,MAAO,wIACPl/C,KAAM,OACN+gD,YAAa,owDAgCf,CACE7B,MAAO,gJACPl/C,KAAM,OACN+gD,YAAa,gmEA8Bf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,o2DCjNN/oB,GAAa,CACxB9hB,GAAI,KACJgpC,MAAO,aACP93C,SAAU,CACR,CACE83C,MAAO,gEACPl/C,KAAM,OACN+gD,YAAa,g5EAUf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,8LAGb3kC,KAAM,0EAIR,CACE8iC,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,2RAGb3kC,KAAM,88BAkCR,CACE8iC,MAAO,sFACPl/C,KAAM,OACN+gD,YAAa,+9EASf,CACE7B,MAAO,qJACPl/C,KAAM,OACN+gD,YAAa,m4BAIb3kC,KAAM,yxCAsCR,CACE8iC,MAAO,kLACPl/C,KAAM,OACN+gD,YAAa,s/CA4Cf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,iwDAkCf,CACE7B,MAAO,+BACPl/C,KAAM,OACN+gD,YAAa,uxBCnNN9oB,GAAS,CACpB/hB,GAAI,KACJgpC,MAAO,4BACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,4jDAUf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,yiBAYf,CACE7B,MAAO,0FACPl/C,KAAM,OACN+gD,YAAa,wdAiBf,CACE7B,MAAO,2JACPl/C,KAAM,OACN+gD,YAAa,+xCAoBf,CACE7B,MAAO,6DACPl/C,KAAM,OACN+gD,YAAa,4wCASf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,s1CAkBf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,69CAmCf,CACE7B,MAAO,2BACPl/C,KAAM,OACN+gD,YAAa,kuBCrJN7oB,GAAW,CACtBhiB,GAAI,KACJgpC,MAAO,WACP93C,SAAU,CACR,CACE83C,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,okDA2Bf,CACE7B,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,wpEA8Bf,CACE7B,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,i+BA2Bf,CACE7B,MAAO,mKACPl/C,KAAM,OACN+gD,YAAa,koCAuBf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,wpCAkCf,CACE7B,MAAO,kLACPl/C,KAAM,OACN+gD,YAAa,wnDA4Bf,CACE7B,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,ypEClMNnpB,GAAsB,CACjC1hB,GAAI,KACJgpC,MAAO,sBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,ypEAUf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,q4BAkCf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,sTAGb3kC,KAAM,s1CA0CR,CACE8iC,MAAO,+FACPl/C,KAAM,OACN+gD,YAAa,usDAQf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,omDAQf,CACE7B,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,qpBAuBf,CACE7B,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,qnDAiBf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,g1CC7KNjpB,GAAkB,CAC7B5hB,GAAI,KACJgpC,MAAO,kBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,8oEASf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,0hBAaf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,sOAGb3kC,KAAM,uyBA4BR,CACE8iC,MAAO,2GACPl/C,KAAM,OACN+gD,YAAa,yrCAqBf,CACE7B,MAAO,8DACPl/C,KAAM,OACN+gD,YAAa,60CAoBf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,+3DAQf,CACE7B,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,ukDAqBf,CACE7B,MAAO,oCACPl/C,KAAM,OACN+gD,YAAa,6aCvJN5oB,GAAgB,CAC3BjiB,GAAI,KACJgpC,MAAO,gBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,w8DAUf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,uXAaf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,mXAGb3kC,KAAM,ghCAqCR,CACE8iC,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,wuDAQf,CACE7B,MAAO,uKACPl/C,KAAM,OACN+gD,YAAa,84BAqBf,CACE7B,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,i4CAaf,CACE7B,MAAO,kCACPl/C,KAAM,OACN+gD,YAAa,udAYf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,86CCtIN0I,GAAQ,CACnBvzC,GAAI,IACJgpC,MAAO,mCACP93C,SAAU,CACR8wB,GACAP,GACAK,GACAC,GACAP,GACAK,GACAN,GACAG,GACAE,GACAK,KCxBSuxB,GAAc,CACzBxzC,GAAI,IACJgpC,MAAO,+DACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,spDASf,CACE7B,MAAO,+FACPl/C,KAAM,OACN+gD,YAAa,klBAkBf,CACE7B,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,sQAGb35C,SAAU,CACR,CACE83C,MAAO,aACPl/C,KAAM,OACN+gD,YAAa,+QAKf,CACE7B,MAAO,UACPl/C,KAAM,OACN+gD,YAAa,2RAKf,CACE7B,MAAO,cACPl/C,KAAM,OACN+gD,YAAa,wRAOnB,CACE7B,MAAO,2GACPl/C,KAAM,OACN+gD,YAAa,+oDASf,CACE7B,MAAO,mIACPl/C,KAAM,OACN+gD,YAAa,kwBCrFN4I,GAAsB,CACjCzzC,GAAI,IACJgpC,MAAO,kFACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,0nDAYf,CACE7B,MAAO,+LACPl/C,KAAM,OACN+gD,YAAa,o4BAWf,CACE7B,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,ypBAiBf,CACE7B,MAAO,eACPl/C,KAAM,OACN+gD,YAAa,ouBAmBf,CACE7B,MAAO,2JACPl/C,KAAM,OACN+gD,YAAa,muBAef,CACE7B,MAAO,wIACPl/C,KAAM,OACN+gD,YAAa,kiBAcf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,g5CCjHN6I,GAAe,CAC1B1zC,GAAI,IACJgpC,MAAO,uBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,iiEAUf,CACE7B,MAAO,2GACPl/C,KAAM,OACN+gD,YAAa,gpDAQf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,2kCAaf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,uwCA0Bf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,unDASf,CACE7B,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,00CCxFN8I,GAAQ,CACnB3zC,GAAI,IACJgpC,MAAO,+CACP93C,SAAU,CACR,CACE83C,MAAO,2DACPl/C,KAAM,OACN+gD,YAAa,m+DAUf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,igBAiBf,CACE7B,MAAO,yGACPl/C,KAAM,OACN+gD,YAAa,kiBAGb3kC,KAAM,ghBAsBR,CACE8iC,MAAO,mIACPl/C,KAAM,OACN+gD,YAAa,ioBAGb3kC,KAAM,igBAgBR,CACE8iC,MAAO,gBACPl/C,KAAM,OACN+gD,YAAa,8ZAGb3kC,KAAM,0dAoBR,CACE8iC,MAAO,YACPl/C,KAAM,OACN+gD,YAAa,8tBAGb3kC,KAAM,sqBAuBR,CACE8iC,MAAO,sCACPl/C,KAAM,OACN+gD,YAAa,ipBAGb3kC,KAAM,+TAgBR,CACE8iC,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,g7CASf,CACE7B,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,m1CAyBf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,gxBClMNpmC,GAAO,CAClBzE,GAAI,EACJgpC,MAAO,WACP93C,SAAU,CCIW,CACrB8O,GAAI,GACJgpC,MAAO,UACP93C,SAAU,CCvBO,CACjB8O,GAAI,IACJgpC,MAAO,6BACP93C,SAAU,CACR,CACE83C,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,8sDAKf,CACE7B,MAAO,8CACPl/C,KAAM,OACN+gD,YAAa,0xEAWb3kC,KAAM,sZAYR,CACE8iC,MAAO,iDACPl/C,KAAM,OACN+gD,YAAa,mmDASb3kC,KAAM,gnBAaR,CACE8iC,MAAO,gDACPl/C,KAAM,OACN+gD,YAAa,orEAab3kC,KAAM,grBAaR,CACE8iC,MAAO,+CACPl/C,KAAM,OACN+gD,YAAa,ijEAUb3kC,KAAM,qwBAUR,CACE8iC,MAAO,8CACPl/C,KAAM,OACN+gD,YAAa,06CASb3kC,KAAM,miBAOR,CACE8iC,MAAO,6CACPl/C,KAAM,OACN+gD,YAAa,86CASb3kC,KAAM,8hBAeR,CACE8iC,MAAO,mJACPl/C,KAAM,OACN+gD,YAAa,qrEAcf,CACE7B,MAAO,GACPl/C,KAAM,OACN0f,IAAK,uDACLhT,KAAM,eAER,CACEwyC,MAAO,GACPl/C,KAAM,OACN0f,IAAK,0DACLhT,KAAM,oBC5LS,CACnBwJ,GAAI,IACJgpC,MAAO,6EACP93C,SAAU,CACR,CACE83C,MAAO,wEACPl/C,KAAM,OACN+gD,YAAa,klFAKf,CACE7B,MAAO,iJACPl/C,KAAM,OACN+gD,YAAa,6jFAUf,CACE7B,MAAO,oDACPl/C,KAAM,OACN+gD,YAAa,srDASf,CACE7B,MAAO,4HACPl/C,KAAM,OACN+gD,YAAa,whEAUf,CACE7B,MAAO,2FACPl/C,KAAM,OACN+gD,YAAa,kTAGb3kC,KAAM,0LAYR,CACE8iC,MAAO,oIACPl/C,KAAM,OACN+gD,YAAa,oNAGb3kC,KAAM,sHAQR,CACE8iC,MAAO,sEACPl/C,KAAM,OACN+gD,YAAa,sJAGb3kC,KAAM,4NAMR,CACE8iC,MAAO,8IACPl/C,KAAM,OACN+gD,YAAa,+2CAQf,CACE7B,MAAO,kIACPl/C,KAAM,OACN+gD,YAAa,+gDAObrhC,IAAK,uCACLhT,KAAM,YAER,CACEwyC,MAAO,qJACPl/C,KAAM,OACN+gD,YAAa,w0CASf,CACE7B,MAAO,2JACPl/C,KAAM,OACN+gD,YAAa,0vCASf,CACE7B,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,4/CCjJC,CAClB7qC,GAAI,IACJgpC,MAAO,sLACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,2jFAGf,CACE7B,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,+iGAEf,CACE7B,MAAO,+GACPl/C,KAAM,OACN+gD,YAAa,+qEAUf,CACE7B,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,ymDAIf,CACE7B,MAAO,wIACPl/C,KAAM,OACN+gD,YAAa,o5BAIf,CACE7B,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,y9CC7CA,CACjB7qC,GAAI,IACJgpC,MAAO,MACP93C,SAAU,CACR,CACE83C,MAAO,4DACPl/C,KAAM,OACN+gD,YAAa,8qCAKf,CACE7B,MAAO,kGACPl/C,KAAM,OACN+gD,YAAa,8oDASf,CACE7B,MAAO,8EACPl/C,KAAM,OACN+gD,YAAa,0tCASf,CACE7B,MAAO,6HACPl/C,KAAM,OACN+gD,YAAa,sTAGb3kC,KAAM,oFAIR,CACE8iC,MAAO,kHACPl/C,KAAM,OACN+gD,YAAa,+yCCjDG,CACpB7qC,GAAI,IACJgpC,MAAO,oCACP93C,SAAU,CACR,CACE83C,MAAO,8EACPl/C,KAAM,OACN+gD,YAAa,02CAMf,CACE7B,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,yaAIb3kC,KAAM,2HAIR,CACE8iC,MAAO,gEACPl/C,KAAM,OACN+gD,YAAa,gJAGb3kC,KAAM,sRAUR,CACE8iC,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,i+BAIb3kC,KAAM,uFAIR,CACE8iC,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,s+HAkBf,CACE7B,MAAO,4MACPl/C,KAAM,OACN+gD,YAAa,ySAGb3kC,KAAM,0JAIR,CACE8iC,MAAO,sDACPl/C,KAAM,OACN+gD,YAAa,u6CAUf,CACE7B,MAAO,GACPl/C,KAAM,OACN0f,IAAK,qCACLhT,KAAM,sBCnGiB,CAC3BwJ,GAAI,IACJgpC,MAAO,gHACP93C,SAAU,CACR,CACE83C,MAAO,iJACPl/C,KAAM,OACN+gD,YAAa,q1DASf,CACE7B,MAAO,+CACPl/C,KAAM,OACN+gD,YAAa,8kDAab3kC,KAAM,wHAOR,CACE8iC,MAAO,mCACPl/C,KAAM,OACN+gD,YAAa,8/CAYb3kC,KAAM,0WAuBR,CACE8iC,MAAO,qDACPl/C,KAAM,OACN+gD,YAAa,09CAYb3kC,KAAM,4WAuBR,CACE8iC,MAAO,4GACPl/C,KAAM,OACN+gD,YAAa,i0DAYb3kC,KAAM,8uBAwCR,CACE8iC,MAAO,6EACPl/C,KAAM,OACN+gD,YAAa,k0DAiBb3kC,KAAM,quBAmCR,CACE8iC,MAAO,8CACPl/C,KAAM,OACN+gD,YAAa,w7DAYb3kC,KAAM,k3BA6CR,CACE8iC,MAAO,mCACPl/C,KAAM,OACN+gD,YAAa,+qDAiBb3kC,KAAM,8eAuBR,CACE8iC,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,0jCC3UA,CACjB7qC,GAAI,IACJgpC,MAAO,mIACP93C,SAAU,CACR,CACE83C,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,yiDAKf,CACE7B,MAAO,6DACPl/C,KAAM,OACN+gD,YAAa,uuDAgBf,CACE7B,MAAO,wDACPl/C,KAAM,OACN+gD,YAAa,q6DAiBf,CACE7B,MAAO,+GACPl/C,KAAM,OACN+gD,YAAa,y1DAWf,CACE7B,MAAO,mJACPl/C,KAAM,OACN+gD,YAAa,6sDAcf,CACE7B,MAAO,GACPl/C,KAAM,OACN0f,IAAK,sEACLhT,KAAM,cC1EgB,CAC1BwJ,GAAI,IACJgpC,MAAO,oBACP93C,SAAU,CCfY,CACtB8O,GAAI,MACJ9O,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,+6BAIf,CACE7B,MAAO,OACPl/C,KAAM,OACN+gD,YAAa,k4DASf,CACE7B,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,86DASf,CACE7B,MAAO,iFACPl/C,KAAM,OACN+gD,YAAa,inDASf,CACE7B,MAAO,yIACPl/C,KAAM,OACN+gD,YAAa,4pCAQf,CACE7B,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,6yDC5DQ,CACzB7qC,GAAI,MACJgpC,MAAO,8DACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,0iCAIf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,suEAUf,CACE7B,MAAO,0GACPl/C,KAAM,OACN+gD,YAAa,64EAYf,CACE7B,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,o1DASf,CACE7B,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,swCCtDO,CACxB7qC,GAAI,MACJgpC,MAAO,kBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,krBAIf,CACE7B,MAAO,MACPl/C,KAAM,OACN+gD,YAAa,y7FAWf,CACE7B,MAAO,OACPl/C,KAAM,OACN+gD,YAAa,moGAWf,CACE7B,MAAO,yEACPl/C,KAAM,OACN+gD,YAAa,ytDAUf,CACE7B,MAAO,uKACPl/C,KAAM,OACN+gD,YAAa,owCCvDQ,CACzB7qC,GAAI,MACJgpC,MAAO,mBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,+jBAIf,CACE7B,MAAO,MACPl/C,KAAM,OACN+gD,YAAa,6gFAUf,CACE7B,MAAO,QACPl/C,KAAM,OACN+gD,YAAa,muFAUf,CACE7B,MAAO,0EACPl/C,KAAM,OACN+gD,YAAa,uiDASf,CACE7B,MAAO,uKACPl/C,KAAM,OACN+gD,YAAa,s4CCpDI,CACnB7qC,GAAI,MACNgpC,MAAO,UACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,20BAIf,CACE7B,MAAO,uFACPl/C,KAAM,OACN+gD,YAAa,ouFAUf,CACE7B,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,gvDASf,CACE7B,MAAO,kFACPl/C,KAAM,OACN+gD,YAAa,+fCvCU,CAC3B7qC,GAAI,MACJgpC,MAAO,0CACP93C,SAAU,CACR,CACE83C,MAAO,mDACPl/C,KAAM,OACN+gD,YAAa,w5EAUf,CACE7B,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,6iGAgBf,CACE7B,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,+rHAiBf,CACE7B,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,okHAgBf,CACE7B,MAAO,sFACPl/C,KAAM,OACN+gD,YAAa,m9EA+Cf,CACE7B,MAAO,0KACPl/C,KAAM,OACN+gD,YAAa,yyCASf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,oqBC5IkB,CACnC7qC,GAAI,MACJgpC,MAAO,2HACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,i5CAIf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,m2GAUf,CACE7B,MAAO,kIACPl/C,KAAM,OACN+gD,YAAa,o8BAOf,CACE7B,MAAO,sKACPl/C,KAAM,OACN+gD,YAAa,6pEASf,CACE7B,MAAO,yLACPl/C,KAAM,OACN+gD,YAAa,u6DCjDc,CAC/B7qC,GAAI,MACJgpC,MAAO,kEACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,+nBAIf,CACE7B,MAAO,sCACPl/C,KAAM,OACN+gD,YAAa,myFAUf,CACE7B,MAAO,+BACPl/C,KAAM,OACN+gD,YAAa,6zFAUf,CACE7B,MAAO,wEACPl/C,KAAM,OACN+gD,YAAa,kmDASf,CACE7B,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,q1CCpDU,CAC3B7qC,GAAI,MACJgpC,MAAO,yCACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,0xCAIf,CACE7B,MAAO,uFACPl/C,KAAM,OACN+gD,YAAa,6+EAUf,CACE7B,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,opEASf,CACE7B,MAAO,kFACPl/C,KAAM,OACN+gD,YAAa,0iBCvCY,CAC7B7qC,GAAI,MACJgpC,MAAO,mBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,0lCAIf,CACE7B,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,i3DAWf,CACE7B,MAAO,8FACPl/C,KAAM,OACN+gD,YAAa,imEAWf,CACE7B,MAAO,kIACPl/C,KAAM,OACN+gD,YAAa,i8DAWf,CACE7B,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,oxDCxDU,CAC3B7qC,GAAI,MACJgpC,MAAO,iBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,m7BAIf,CACE7B,MAAO,6HACPl/C,KAAM,OACN+gD,YAAa,+gGAWf,CACE7B,MAAO,iHACPl/C,KAAM,OACN+gD,YAAa,4/GAef,CACE7B,MAAO,+FACPl/C,KAAM,OACN+gD,YAAa,klEASf,CACE7B,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,0mCC1DA,CACjB7qC,GAAI,IACJgpC,MAAO,uBACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,4uCAIf,CACE7B,MAAO,6DACPl/C,KAAM,OACN+gD,YAAa,6kEASf,CACE7B,MAAO,+EACPl/C,KAAM,OACN+gD,YAAa,44EASf,CACE7B,MAAO,mEACPl/C,KAAM,OACN+gD,YAAa,0hFASf,CACE7B,MAAO,qFACPl/C,KAAM,OACN+gD,YAAa,izEClDe,CAChC7qC,GAAI,IACJgpC,MAAO,0IACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,8+CAIf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,+5CASf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,+1EAUf,CACE7B,MAAO,+IACPl/C,KAAM,OACN+gD,YAAa,4jEAkBf,CACE7B,MAAO,4HACPl/C,KAAM,OACN+gD,YAAa,qoCC5DS,CAC1B7qC,GAAI,IACJgpC,MAAO,+HACP93C,SAAU,CACR,CACE83C,MAAO,kEACPl/C,KAAM,OACN+gD,YAAa,ohCAIf,CACE7B,MAAO,oIACPl/C,KAAM,OACN+gD,YAAa,gLAGb3kC,KAAM,0DAIR,CACE8iC,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,sLAGb3kC,KAAM,mGAKR,CACE8iC,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,kMAGb3kC,KAAM,kDAIR,CACE8iC,MAAO,0DACPl/C,KAAM,OACN+gD,YAAa,+KAGb3kC,KAAM,mCAIR,CACE8iC,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,sfAGb3kC,KAAM,qSASR,CACE8iC,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,yqCAQf,CACE7B,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,20CAQf,CACE7B,MAAO,oQACPl/C,KAAM,OACN+gD,YAAa,ozDASf,CACE7B,MAAO,uKACPl/C,KAAM,OACN+gD,YAAa,g+EAcf,CACE7B,MAAO,2OACPl/C,KAAM,OACN+gD,YAAa,iwDASf,CACE7B,MAAO,GACPl/C,KAAM,OACN0f,IAAK,oEACLhT,KAAM,qBAER,CACEwyC,MAAO,GACPl/C,KAAM,OACN0f,IAAK,uCACLhT,KAAM,mCC5I8B,CACxCwJ,GAAI,IACJgpC,MAAO,oCACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,ymBAIf,CACE7B,MAAO,gBACPl/C,KAAM,OACN+gD,YAAa,2rEAUf,CACE7B,MAAO,eACPl/C,KAAM,OACN+gD,YAAa,i2FAUf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,4iEASf,CACE7B,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,+gDCpDK,CACtB7qC,GAAI,IACJgpC,MAAO,2CACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,irCAIf,CACE7B,MAAO,gFACPl/C,KAAM,OACN+gD,YAAa,kxJAaf,CACE7B,MAAO,wGACPl/C,KAAM,OACN+gD,YAAa,+0DASf,CACE7B,MAAO,kHACPl/C,KAAM,OACN+gD,YAAa,wnDC1CI,CACrB7qC,GAAI,IACJgpC,MAAO,iDACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,27CAMf,CACE7B,MAAO,wDACPl/C,KAAM,OACN+gD,YAAa,0nMAWf,CACE7B,MAAO,wDACPl/C,KAAM,OACN+gD,YAAa,q+CAUb3kC,KAAM,uNAWR,CACE8iC,MAAO,uFACPl/C,KAAM,OACN+gD,YAAa,grDAaf,CACE7B,MAAO,wDACPl/C,KAAM,OACN+gD,YAAa,yhDAUf,CACE7B,MAAO,kFACPl/C,KAAM,OACN+gD,YAAa,84CASf,CACE7B,MAAO,qIACPl/C,KAAM,OACN+gD,YAAa,upDASf,CACE7B,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,2iDAOf,CACE7B,MAAO,GACPl/C,KAAM,OACN0f,IAAK,0BACLhT,KAAM,4BAER,CACEwyC,MAAO,GACPl/C,KAAM,OACN0f,IAAK,wDACLhT,KAAM,4BC5HkB,CAC5BwJ,GAAI,IACJgpC,MAAO,iBACP93C,SAAU,CACR,CACE83C,MAAO,oEACPl/C,KAAM,OACN+gD,YAAa,6jCAIf,CACE7B,MAAO,oIACPl/C,KAAM,OACN+gD,YAAa,kLAGb3kC,KAAM,+DAIR,CACE8iC,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,wLAGb3kC,KAAM,8GAKR,CACE8iC,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,oMAGb3kC,KAAM,uDAIR,CACE8iC,MAAO,4DACPl/C,KAAM,OACN+gD,YAAa,iLAGb3kC,KAAM,qCAIR,CACE8iC,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,wfAGb3kC,KAAM,mVASR,CACE8iC,MAAO,0FACPl/C,KAAM,OACN+gD,YAAa,oxDASf,CACE7B,MAAO,8EACPl/C,KAAM,OACN+gD,YAAa,0sCAQf,CACE7B,MAAO,6EACPl/C,KAAM,OACN+gD,YAAa,sgEASf,CACE7B,MAAO,uKACPl/C,KAAM,OACN+gD,YAAa,kjFAcf,CACE7B,MAAO,2OACPl/C,KAAM,OACN+gD,YAAa,yjEASf,CACE7B,MAAO,GACPl/C,KAAM,OACN0f,IAAK,sEACLhT,KAAM,uBAER,CACEwyC,MAAO,GACPl/C,KAAM,OACN0f,IAAK,uCACLhT,KAAM,8HC7IoB,CAC9BwJ,GAAI,IACJgpC,MAAO,2BACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,yvBAIf,CACE7B,MAAO,wIACPl/C,KAAM,OACN+gD,YAAa,69EAUf,CACE7B,MAAO,0EACPl/C,KAAM,OACN+gD,YAAa,6+DAUf,CACE7B,MAAO,+EACPl/C,KAAM,OACN+gD,YAAa,+3DASf,CACE7B,MAAO,mEACPl/C,KAAM,OACN+gD,YAAa,syDASf,CACE7B,MAAO,mEACPl/C,KAAM,OACN+gD,YAAa,8+CChEO,CACxB7qC,GAAI,IACJgpC,MAAO,2CACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,klCAIf,CACE7B,MAAO,8DACPl/C,KAAM,OACN+gD,YAAa,giIAYf,CACE7B,MAAO,gFACPl/C,KAAM,OACN+gD,YAAa,qnEASf,CACE7B,MAAO,uFACPl/C,KAAM,OACN+gD,YAAa,2wFAWf,CACE7B,MAAO,+DACPl/C,KAAM,OACN+gD,YAAa,mgCCvDgC,CACjD7qC,GAAI,IACJgpC,MAAO,qKACP93C,SAAU,CACR,CACE83C,MAAO,+EACPl/C,KAAM,OACN+gD,YAAa,woCAIf,CACE7B,MAAO,oJACPl/C,KAAM,OACN+gD,YAAa,s4IA6Bf,CACE7B,MAAO,qFACPl/C,KAAM,OACN+gD,YAAa,swEASf,CACE7B,MAAO,yEACPl/C,KAAM,OACN+gD,YAAa,0lEC1Dc,CAC/B7qC,GAAI,IACJgpC,MAAO,oQACP93C,SAAU,CACR,CACE83C,MAAO,gFACPl/C,KAAM,OACN+gD,YAAa,07BAOf,CACE7B,MAAO,2IACPl/C,KAAM,OACN+gD,YAAa,qwBAOf,CACE7B,MAAO,sGACPl/C,KAAM,OACN+gD,YAAa,4fAMf,CACE7B,MAAO,yJACPl/C,KAAM,OACN+gD,YAAa,2jBAMf,CACE7B,MAAO,iGACPl/C,KAAM,OACN+gD,YAAa,2kCAOf,CACE7B,MAAO,kFACPl/C,KAAM,OACN+gD,YAAa,yyBAOf,CACE7B,MAAO,mHACPl/C,KAAM,OACN+gD,YAAa,41BAOf,CACE7B,MAAO,mHACPl/C,KAAM,OACN+gD,YAAa,w2CAQf,CACE7B,MAAO,gLACPl/C,KAAM,OACN+gD,YAAa,+pBC7EK,CACtB7qC,GAAI,GACJgpC,MAAO,WACP93C,SAAU,CCZ8B,CACxC8O,GAAI,IACJgpC,MAAO,+GACP93C,SAAU,CACR,CACE83C,MAAO,kKACPl/C,KAAM,OACN+gD,YAAa,uiDAoBb3kC,KAAM,kGAIR,CACE8iC,MAAO,iKACPl/C,KAAM,OACN+gD,YAAa,y3CAgBb3kC,KAAM,6YAQR,CACE8iC,MAAO,yIACPl/C,KAAM,OACN+gD,YAAa,6gBAMf,CACE7B,MAAO,sIACPl/C,KAAM,OACN+gD,YAAa,8sBAMb3kC,KAAM,mmBC5EqC,CAC/ClG,GAAI,IACJgpC,MAAO,uWACP93C,SAAU,CACR,CACE83C,MAAO,6RACPl/C,KAAM,OACN+gD,YAAa,ktCAQb3kC,KAAM,gFCfwC,CAClDlG,GAAI,IACJgpC,MAAO,qHACP93C,SAAU,CACR,CACE83C,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,s8CASb3kC,KAAM,gJChBgB,CAC1BlG,GAAI,IACJgpC,MAAO,iDACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN+gD,YAAa,w8CAMb3kC,KAAM,4JCbyB,CACnClG,GAAI,IACJgpC,MAAO,qHACP93C,SAAU,CACR,CACE83C,MAAO,kBACPl/C,KAAM,OACN+gD,YAAa,kaAOf,CACE7B,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,shBAOf,CACE7B,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,0pDAWf,CACE7B,MAAO,SACPl/C,KAAM,OACN+gD,YAAa,85BCzCsB,CACvC7qC,GAAI,IACJgpC,MAAO,6IACP93C,SAAU,CACR,CACE83C,MAAO,uGACPl/C,KAAM,OACN+gD,YAAa,sqCAWf,CACE7B,MAAO,yHACPl/C,KAAM,OACN+gD,YAAa,qjCAWf,CACE7B,MAAO,qFACPl/C,KAAM,OACN+gD,YAAa,k3FCnCY,CAC7B7qC,GAAI,IACJgpC,MAAO,0LACP93C,SAAU,CACR,CACE83C,MACE,2oBACFl/C,KAAM,OACN+gD,YAAa,4hBAOb3kC,KAAM,8bCVS,CACnBlG,GAAI,IACJgpC,MAAO,QACP93C,SAAU,CCRa,CACvB8O,GAAI,IACJgpC,MAAO,MACP93C,SAAU,CACR,CACE83C,MAAO,iKACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,8FACPl/C,KAAM,OACN+gD,YAAa,osCAWf,CACE7B,MAAO,gHACPl/C,KAAM,OACN+gD,YAAa,mnCAWf,CACE7B,MAAO,8GACPl/C,KAAM,OACN+gD,YAAa,qxCAanB,CACE7B,MAAO,2OACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MACE,4xBACFl/C,KAAM,OACN+gD,YAAa,q7BAUb3kC,KAAM,o3BA2BZ,CACE8iC,MAAO,uKACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MACE,ugBACFl/C,KAAM,OACN+gD,YAAa,2eAOb3kC,KAAM,wPAcZ,CACE8iC,MAAO,iHACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MACE,yVACFl/C,KAAM,OACN+gD,YAAa,ghCAUb3kC,KAAM,iIASR,CACE8iC,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,qiFAKf,CACE7B,MAAO,iIACPl/C,KAAM,OACN+gD,YAAa,+MAGb3kC,KAAM,kSAeZ,CACE8iC,MAAO,mPACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MACE,sUACFl/C,KAAM,OACN+gD,YAAa,qnCAOb3kC,KAAM,uTAYZ,CACE8iC,MAAO,mNACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MACE,8VACFl/C,KAAM,OACN+gD,YAAa,gsEAUb3kC,KAAM,8JAiBR,CACE8iC,MAAO,sFACPl/C,KAAM,OACN+gD,YAAa,sxEAUf,CACE7B,MAAO,+HACPl/C,KAAM,OACN+gD,YAAa,gPAGb3kC,KAAM,4OAQR,CACE8iC,MAAO,mDACPl/C,KAAM,OACN+gD,YAAa,shFASf,CACE7B,MAAO,8HACPl/C,KAAM,OACN+gD,YAAa,+OAGb3kC,KAAM,4RAcZ,CACE8iC,MAAO,yDACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MACE,4jBACFl/C,KAAM,OACN+gD,YAAa,k2CASb3kC,KAAM,+IAWZ,CACE8iC,MAAO,iCACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,WACPl/C,KAAM,OACN+gD,YAAa,wvCASb3kC,KAAM,8TAUZ,CACE8iC,MAAO,kBACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,kBACPl/C,KAAM,QACN0f,IAAK,sFAEP,CACEw/B,MAAO,qzBAGPl/C,KAAM,OACNoc,KAAM,ikCAqBZ,CACE8iC,MAAO,wPACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,8FACPl/C,KAAM,OACN+gD,YAAa,iqDASf,CACE7B,MAAO,oGACPl/C,KAAM,OACN+gD,YAAa,gwDASf,CACE7B,MAAO,yIACPl/C,KAAM,OACN+gD,YAAa,0nDAWnB,CACE7B,MAAO,sBACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,QACN0f,IAAK,+CAIX,CACEw/B,MAAO,6KACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,+NACPl/C,KAAM,OACN+gD,YAAa,m+BAQb3kC,KAAM,iYAYZ,CACE8iC,MAAO,2LACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MACE,oZACFl/C,KAAM,OACN+gD,YAAa,i4BASnB,CACE7B,MAAO,sPACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,2PACPl/C,KAAM,OACN+gD,YAAa,snCAUnB,CACE7B,MAAO,yIACPhpC,GAAI,KACJ9O,SAAU,CACR,CACE83C,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,ujCAQb3kC,KAAM,q0CCzgBU,CACxBlG,GAAI,IACJgpC,MAAO,OACP93C,SAAU,CACR,CACE83C,MAAO,mBACPl/C,KAAM,QACN0f,IAAK,6GCPe,CACxBxJ,GAAI,IACJgpC,MAAO,OACP93C,SAAU,CACR,CACE83C,MAAO,mBACPl/C,KAAM,QACN0f,IAAK,mFCP2B,CACpCxJ,GAAI,IACJgpC,MAAO,oBACP93C,SAAU,CACR,CACE83C,MAAO,gCACPl/C,KAAM,QACN0f,IAAK,gG5CYP4oC,G6CfiB,CACnBpyC,GAAI,GACJgpC,MAAO,QACP93C,SAAU,CCKW,CACrB8O,GAAI,IACJgpC,MAAO,WACP93C,SAAU,CACRwiD,GACAC,GACAF,GClByB,CAC3BzzC,GAAI,IACJgpC,MAAO,gBACP93C,SAAU,CACR,CACE83C,MAAO,mEACPl/C,KAAM,OACN+gD,YAAa,ygFAWf,CACE7B,MAAO,yDACPl/C,KAAM,OACN+gD,YAAa,yVAef,CACE7B,MAAO,6MACPl/C,KAAM,OACN+gD,YAAa,ukDAQb3kC,KAAM,gLAOR,CACE8iC,MAAO,yHACPl/C,KAAM,OACN+gD,YAAa,4nEAcf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,mZAGb3kC,KAAM,+wBAwBR,CACE8iC,MAAO,2GACPl/C,KAAM,OACN+gD,YAAa,ypEAqBf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,uxDAQf,CACE7B,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,+9CAwBf,CACE7B,MAAO,yFACPl/C,KAAM,OACN+gD,YAAa,0nBAGb3kC,KAAM,ieDrJRqtC,GACAC,GACAH,GACAC,GEvBsB,CACxBtzC,GAAI,IACJgpC,MAAO,sGACP93C,SAAU,CACR,CACE83C,MAAO,iEACPl/C,KAAM,OACN+gD,YAAa,ygEAKf,CACE7B,MAAO,6EACPl/C,KAAM,OACN+gD,YAAa,svEASf,CACE7B,MAAO,mFACPl/C,KAAM,OACN+gD,YAAa,8gEAUf,CACE7B,MAAO,gHACPl/C,KAAM,OACN+gD,YAAa,iQAGb3kC,KAAM,kOAYN8lC,YAAa,k/CAUf,CACEhD,MAAO,uFACPl/C,KAAM,OACN+gD,YAAa,wtDAQf,CACE7B,MAAO,2EACPl/C,KAAM,OACN+gD,YAAa,y1CAOf,CACE7B,MAAO,2BACPl/C,KAAM,OACN+gD,YAAa,40CAKf,CACE7B,MAAO,uFACPl/C,KAAM,OACN+gD,YAAa,kqDFxEfuI,GGzByB,CAC3BpzC,GAAI,IACJgpC,MAAO,0JACP93C,SAAU,CACR,CACE83C,MAAO,2LACPl/C,KAAM,OACN+gD,YAAa,0zDAUf,CACE7B,MAAO,mLACPl/C,KAAM,OACN+gD,YAAa,yXAGb3kC,KAAM,y+BAyBR,CACE8iC,MAAO,0FACPl/C,KAAM,OACN+gD,YAAa,wgFAUf,CACE7B,MAAO,uNACPl/C,KAAM,OACN+gD,YAAa,owCAQf,CACE7B,MAAO,2MACPl/C,KAAM,OACN+gD,YAAa,4/BAOf,CACE7B,MAAO,0OACPl/C,KAAM,OACN+gD,YAAa,ujDAKf,CACE7B,MAAO,wFACPl/C,KAAM,OACN+gD,YAAa,ooDAQf,CACE7B,MAAO,4EACPl/C,KAAM,OACN+gD,YAAa,0rCAkBf,CACE7B,MAAO,sHACPl/C,KAAM,OACN+gD,YAAa,kwDAoDf,CACE7B,MAAO,8IACPl/C,KAAM,OACN+gD,YAAa,+1BHzJf,CACE7B,MAAO,GACPl/C,KAAM,OACN0M,KAAM,0BACNgT,IAAK,wDI/BY,CACrBxJ,GAAI,IACJgpC,MAAO,WACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN0M,KAAM,mCACNgT,IAAK,sDAEP,CACEw/B,MAAO,GACPl/C,KAAM,OACN0M,KAAM,4BACNgT,IAAK,8CCdgB,CACzBxJ,GAAI,IACJgpC,MAAO,eACP93C,SAAU,CACR,CACE83C,MAAO,GACPl/C,KAAM,OACN0M,KAAM,+BACNgT,IAAK,kDAEP,CACEw/B,MAAO,GACPl/C,KAAM,OACN0M,KAAM,wBACNgT,IAAK,gCnDOP6oC,GoDlByB,CACzBryC,GAAI,GACJgpC,MAAO,iBACP93C,SAAU,CCHO,CACjB8O,GAAI,IACJgpC,MAAO,QACP93C,SAAU,CCNW,CACrB8O,GAAI,IACJgpC,MAAO,sEACP93C,SAAU,CACN,CACI83C,MAAO,kHACPl/C,KAAM,OACN+gD,YAAa,qSAGb3kC,KAAM,gGAQV,CACI8iC,MAAO,iJACPl/C,KAAM,OACN+gD,YAAa,wUAGb3kC,KAAM,uNAYV,CACI8iC,MAAO,mLACPl/C,KAAM,OACN+gD,YAAa,kTAGb3kC,KAAM,8SAgBV,CACI8iC,MAAO,kLACPl/C,KAAM,OACN+gD,YAAa,6QAGb3kC,KAAM,8VAiBV,CACI8iC,MAAO,uJACPl/C,KAAM,OACN+gD,YAAa,kMAGb3kC,KAAM,sFAOV,CACI8iC,MAAO,+FACPl/C,KAAM,OACN+gD,YAAa,8LAGb3kC,KAAM,iQAUV,CACI8iC,MAAO,mKACPl/C,KAAM,OACN+gD,YAAa,yMAGb3kC,KAAM,oTASV,CACI8iC,MAAO,oIACPl/C,KAAM,OACN+gD,YAAa,mlBAIjB,CACI7B,MAAO,0EACPl/C,KAAM,OACN+gD,YAAa,mhBCvIC,CACxB7qC,GAAI,IACJgpC,MAAO,aACP93C,SAAU,CACR,CACE83C,MAAO,qEACPl/C,KAAM,OACN+gD,YAAa,y0CCLS,CAC1B7qC,GAAI,IACJgpC,MAAO,gBACP93C,SAAU,CCL2B,CACrC8O,GAAI,IACJgpC,MAAO,kJACP93C,SAAU,CACR,CACE83C,MAAO,iEACPl/C,KAAM,OACN+gD,YAAa,+5DAcf,CACE7B,MAAO,8GACPl/C,KAAM,OACN+gD,YAAa,4JAGb3kC,KAAM,+0BAoBR,CACE8iC,MAAO,yFACPl/C,KAAM,OACN+gD,YAAa,+vBAOf,CACE7B,MAAO,qFACPl/C,KAAM,OACN+gD,YAAa,+JAGb3kC,KAAM,iWAcR,CACE8iC,MAAO,iLACPl/C,KAAM,OACN+gD,YAAa,gbAGb3kC,KAAM,msBAsBR,CACE8iC,MAAO,oJACPl/C,KAAM,OACN+gD,YAAa,g9BAIb3kC,KAAM,wZAeR,CACE8iC,MAAO,8HACPl/C,KAAM,OACN+gD,YAAa,mpBAIb3kC,KAAM,m9BAiCR,CACE8iC,MAAO,yFACPl/C,KAAM,OACN+gD,YAAa,urCAYf,CACE7B,MAAO,6KACPl/C,KAAM,OACN+gD,YAAa,6ZAIb3kC,KAAM,8SzDtKRitC,GACAzH,G0DpBqB,CACrB1rC,GAAI,GACJgpC,MAAO,MACP93C,SAAU,CCPK,CACjB8O,GAAI,IACJgpC,MAAO,wDACP93C,SAAU,CACR,CACE83C,MAAO,kGACPl/C,KAAM,OACN+gD,YAAa,ipCCPQ,CACzB7qC,GAAI,IACJgpC,MAAO,2CACP93C,SAAU,CACR,CACE83C,MAAO,kGACPl/C,KAAM,OACN+gD,YAAa,06EAcbr0C,KAAM,+GACNgT,IAAK,wGAEP,CACEw/B,MAAO,oEACPl/C,KAAM,OACN+gD,YAAa,+0CASf,CACE7B,MAAO,0LACPl/C,KAAM,OACN+gD,YAAa,6jDASf,CACE7B,MAAO,0IACPl/C,KAAM,OACN+gD,YAAa,09CAQf,CACE7B,MAAO,wIACPl/C,KAAM,OACN+gD,YAAa,4rCC9DI,CACrB7qC,GAAI,IACJgpC,MAAO,WACP93C,SAAU,CACR,CACE83C,MAAO,uGACPl/C,KAAM,OACN+gD,YAAa,syDAQf,CACE7B,MAAO,kGACPl/C,KAAM,OACN+gD,YAAa,6pEAUf,CACE7B,MAAO,kGACPl/C,KAAM,OACN+gD,YAAa,gkFAwBf,CACE7B,MAAO,oFACPl/C,KAAM,OACN+gD,YAAa,ymCAQf,CACE7B,MAAO,wEACPl/C,KAAM,OACN+gD,YAAa,0kCAQf,CACE7B,MAAO,oFACPl/C,KAAM,OACN+gD,YAAa,urC7DtDfI,GACAD,K8D0GSlgD,GAAO,CCrIoB,CACtCkV,GAAI,OACJgpC,MAAO,sMACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,6MACVC,OAAQ,mtFAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,+NACVC,OAAQ,gyCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,uTACVC,OAAQ,+qFA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,2OACVC,OAAQ,yjDAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,qOACVC,OAAQ,41CAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,mNACVC,OAAQ,okDAoBV,CACE9zC,GAAI,OACJ6zC,SACE,6WACFC,OAAQ,mkDAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,kJACVC,OAAQ,s8DA6BV,CACE9zC,GAAI,OACJ6zC,SACE,yZACFC,OAAQ,mmCAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,8SACVC,OAAQ,qqDChO2B,CACvC9zC,GAAI,OACJgpC,MAAO,iNACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,2OACVC,OAAQ,gmDAeV,CACE9zC,GAAI,OACJ6zC,SAAU,sRACVC,OAAQ,o0GAoDV,CACE9zC,GAAI,OACJ6zC,SAAU,uHACVC,OAAQ,qzBAeV,CACE9zC,GAAI,OACJ6zC,SAAU,mIACVC,OAAQ,snBAeV,CACE9zC,GAAI,OACJ6zC,SAAU,wFACVC,OAAQ,syBAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,+IACVC,OAAQ,izBAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,szCA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,6JACVC,OAAQ,s+BAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,mGACVC,OAAQ,8oCA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,iHACVC,OAAQ,06BChPsB,CAClC9zC,GAAI,OACJgpC,MAAO,kFACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,uJACVC,OAAQ,syEAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,oKACVC,OAAQ,yvDAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,6IACVC,OAAQ,kxDAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,uNACVC,OAAQ,2iGA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,0QACVC,OAAQ,qpCAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,gOACVC,OAAQ,2uDAqCV,CACE9zC,GAAI,OACJ6zC,SAAU,yPACVC,OAAQ,oiDA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,gOACVC,OAAQ,qzCAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,gOACVC,OAAQ,kxDC/Oe,CAC3B9zC,GAAI,OACJgpC,MAAO,YACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,+DACVC,OAAQ,k7CAKV,CACE9zC,GAAI,OACJ6zC,SAAU,2IACVC,OAAQ,gyFAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,+JACVC,OAAQ,s1CAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,kGACVC,OAAQ,wpCAIV,CACE9zC,GAAI,OACJ6zC,SAAU,6NACVC,OAAQ,qvCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,qPACVC,OAAQ,m1CAIV,CACE9zC,GAAI,OACJ6zC,SAAU,gEACVC,OAAQ,onCAIV,CACE9zC,GAAI,OACJ6zC,SAAU,kIACVC,OAAQ,o9CAIV,CACE9zC,GAAI,OACJ6zC,SAAU,4MACVC,OAAQ,6yDAOV,CACE9zC,GAAI,OACJ6zC,SAAU,gGACVC,OAAQ,qtCCrHS,CACrB9zC,GAAI,OACJgpC,MAAO,qBACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,wEACVC,OAAQ,45EAQV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,4sDAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,g7CAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,wHACVC,OAAQ,gqDA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,kHACVC,OAAQ,ikDAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,0SACVC,OAAQ,0nDAOV,CACE9zC,GAAI,OACJ6zC,SAAU,iOACVC,OAAQ,+0DAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,+FACVC,OAAQ,4kDAMV,CACE9zC,GAAI,OACJ6zC,SAAU,mFACVC,OAAQ,u5CAKV,CACE9zC,GAAI,OACJ6zC,SAAU,4GACVC,OAAQ,0tEC1Ka,CACzB9zC,GAAI,OACJgpC,MAAO,mEACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,4GACVC,OAAQ,koDAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,qIACVC,OAAQ,+hHAuDV,CACE9zC,GAAI,OACJ6zC,SAAU,mMACVC,OAAQ,4zGAyCV,CACE9zC,GAAI,OACJ6zC,SAAU,yPACVC,OAAQ,kjEAwBV,CACE9zC,GAAI,OACJ6zC,SACE,sUACFC,OAAQ,q7EA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,+PACVC,OAAQ,qnFAgDV,CACE9zC,GAAI,OACJ6zC,SAAU,ySACVC,OAAQ,4tDCtPa,CACzB9zC,GAAI,OACJgpC,MAAO,uDACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,6DACVC,OAAQ,4gDAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,iIACVC,OAAQ,m+CAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,iGACVC,OAAQ,g4DA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,+GACVC,OAAQ,qnCAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,iLACVC,OAAQ,y6BAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,uLACVC,OAAQ,k9EAyCV,CACE9zC,GAAI,OACJ6zC,SAAU,8NACVC,OAAQ,y1BAeV,CACE9zC,GAAI,OACJ6zC,SAAU,uGACVC,OAAQ,u9BAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,yGACVC,OAAQ,+yDAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,qNACVC,OAAQ,o5CAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,sIACVC,OAAQ,iqDA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,4NACVC,OAAQ,yuCAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,oHACVC,OAAQ,i/BAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,+JACVC,OAAQ,i9BAYV,CACE9zC,GAAI,OACJ6zC,SAAU,uIACVC,OAAQ,wiCAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,6JACVC,OAAQ,oxBCvXS,CACrB9zC,GAAI,OACJgpC,MAAO,MACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,kKACVC,OAAQ,6hEAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,8RACVC,OAAQ,giFA0BV,CACE9zC,GAAI,OACJ6zC,SACE,iZACFC,OAAQ,igGA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,0OACVC,OAAQ,yhGA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,sOACVC,OAAQ,ytEAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,6HACVC,OAAQ,m1EC5IS,CACrB9zC,GAAI,OACJgpC,MAAO,6BACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,yDACVC,OAAQ,k8EAaV,CACE9zC,GAAI,OACJ6zC,SAAU,6JACVC,OAAQ,u5CAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,wIACVC,OAAQ,irEAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,oRACVC,OAAQ,uoDAsBV,CACE9zC,GAAI,OACJ6zC,SACE,mSACFC,OAAQ,4gEAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,2IACVC,OAAQ,oxEAwBV,CACE9zC,GAAI,OACJ6zC,SACE,6aACFC,OAAQ,+4EA4BV,CACE9zC,GAAI,OACJ6zC,SACE,qUACFC,OAAQ,2lCAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,uJACVC,OAAQ,qgDChNW,CACvB9zC,GAAI,OACJgpC,MAAO,4EACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,gGACVC,OAAQ,26EAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,2IACVC,OAAQ,mzEAUV,CACE9zC,GAAI,OACJ6zC,SAAU,wIACVC,OAAQ,00DAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,2LACVC,OAAQ,8uEAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,iFACVC,OAAQ,u4CAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,iJACVC,OAAQ,ouDAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,kEACVC,OAAQ,ywCAcV,CACE9zC,GAAI,OACJ6zC,SAAU,iMACVC,OAAQ,8jEAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,sLACVC,OAAQ,q+DAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,iRACVC,OAAQ,yvDCpNU,CACtB9zC,GAAI,OACJgpC,MAAO,iHACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,8EACVC,OAAQ,+lCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,uJACVC,OAAQ,uwFA4CV,CACE9zC,GAAI,OACJ6zC,SAAU,yMACVC,OAAQ,ygEAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,yOACVC,OAAQ,wvGAsDV,CACE9zC,GAAI,OACJ6zC,SAAU,mMACVC,OAAQ,ytCAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,gIACVC,OAAQ,w5CA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,yMACVC,OAAQ,uiDCtOgB,CAC5B9zC,GAAI,OACJgpC,MAAO,sGACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,iEACVC,OAAQ,4sEA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,mFACVC,OAAQ,u0EAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,6EACVC,OAAQ,s7EAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,uKACVC,OAAQ,olFA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,2MACVC,OAAQ,ytEAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,2GACVC,OAAQ,kgEAcV,CACE9zC,GAAI,OACJ6zC,SAAU,gGACVC,OAAQ,4vCAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,8IACVC,OAAQ,0zCAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,4KACVC,OAAQ,4oCAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,gJACVC,OAAQ,itCChOc,CAC1B9zC,GAAI,OACJgpC,MAAO,4EACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,+KACVC,OAAQ,yrEA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,sLACVC,OAAQ,w8BAcV,CACE9zC,GAAI,OACJ6zC,SAAU,0KACVC,OAAQ,24BAcV,CACE9zC,GAAI,OACJ6zC,SAAU,mPACVC,OAAQ,o9DA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,oJACVC,OAAQ,m+CAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,6JACVC,OAAQ,4mCAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,8IACVC,OAAQ,+0BAYV,CACE9zC,GAAI,OACJ6zC,SAAU,kLACVC,OAAQ,ioCAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,2EACVC,OAAQ,89CAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,qLACVC,OAAQ,kqDC9MW,CACvB9zC,GAAI,OACJgpC,MAAO,aACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,gEACVC,OAAQ,sjEAWV,CACE9zC,GAAI,OACJ6zC,SAAU,2FACVC,OAAQ,wpFA6CV,CACE9zC,GAAI,OACJ6zC,SAAU,iFACVC,OAAQ,yhGAyDV,CACE9zC,GAAI,OACJ6zC,SAAU,yFACVC,OAAQ,8qEAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,2FACVC,OAAQ,q7DAyCV,CACE9zC,GAAI,OACJ6zC,SAAU,0FACVC,OAAQ,o3FAuDV,CACE9zC,GAAI,OACJ6zC,SAAU,gMACVC,OAAQ,u0DC7Qa,CACzB9zC,GAAI,OACJgpC,MAAO,iDACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,8DACVC,OAAQ,u5CAKV,CACE9zC,GAAI,OACJ6zC,SAAU,yGACVC,OAAQ,w1LAUV,CACE9zC,GAAI,OACJ6zC,SAAU,sIACVC,OAAQ,6uFAcV,CACE9zC,GAAI,OACJ6zC,SAAU,+DACVC,OAAQ,6hDAKV,CACE9zC,GAAI,OACJ6zC,SAAU,kGACVC,OAAQ,oqDAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,4DACVC,OAAQ,ijCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,uGACVC,OAAQ,20CAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,mMACVC,OAAQ,2sDAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,oJACVC,OAAQ,22BC7IU,CACtB9zC,GAAI,OACJgpC,MAAO,6CACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,0DACVC,OAAQ,8jFAMV,CACE9zC,GAAI,OACJ6zC,SAAU,4EACVC,OAAQ,4tGAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,gHACVC,OAAQ,grEAOV,CACE9zC,GAAI,OACJ6zC,SAAU,+DACVC,OAAQ,62EAUV,CACE9zC,GAAI,OACJ6zC,SAAU,iMACVC,OAAQ,8rEAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,6OACVC,OAAQ,qhDAUV,CACE9zC,GAAI,OACJ6zC,SAAU,0IACVC,OAAQ,ilCCnGiB,CAC7B9zC,GAAI,OACJgpC,MAAO,gBACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,2EACVC,OAAQ,4vFA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,iIACVC,OAAQ,olFA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,mIACVC,OAAQ,8sEA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,mLACVC,OAAQ,gnDAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,yQACVC,OAAQ,4rEAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,0PACVC,OAAQ,ikFA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,uJACVC,OAAQ,g8CAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,wMACVC,OAAQ,mkCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,iHACVC,OAAQ,mzDCnOc,CAC1B9zC,GAAI,OACJgpC,MAAO,oEACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,oNACVC,OAAQ,+8BAYV,CACE9zC,GAAI,OACJ6zC,SAAU,+NACVC,OAAQ,iyCAYV,CACE9zC,GAAI,OACJ6zC,SAAU,gHACVC,OAAQ,25BAeV,CACE9zC,GAAI,OACJ6zC,SAAU,2IACVC,OAAQ,k9CAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,wNACVC,OAAQ,6mCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,iMACVC,OAAQ,m8CAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,yMACVC,OAAQ,msCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,8MACVC,OAAQ,y8CAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,sLACVC,OAAQ,6hCAeV,CACE9zC,GAAI,OACJ6zC,SACE,gTACFC,OAAQ,i0BClMe,CAC3B9zC,GAAI,OACJgpC,MAAO,yDACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,kHACVC,OAAQ,01DAeV,CACE9zC,GAAI,OACJ6zC,SAAU,kPACVC,OAAQ,4qEAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,qNACVC,OAAQ,i+BAeV,CACE9zC,GAAI,OACJ6zC,SAAU,0NACVC,OAAQ,8/BAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,uHACVC,OAAQ,u8CAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,sGACVC,OAAQ,8qCAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,sLACVC,OAAQ,0jCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,mPACVC,OAAQ,+5DAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,oGACVC,OAAQ,+7BAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,wzCCpOU,CACtB9zC,GAAI,OACJgpC,MAAO,OACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,0DACVC,OAAQ,k/CAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,sEACVC,OAAQ,8qEAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,0IACVC,OAAQ,0yBAaV,CACE9zC,GAAI,OACJ6zC,SAAU,oIACVC,OAAQ,2xBAcV,CACE9zC,GAAI,OACJ6zC,SAAU,6MACVC,OAAQ,ipBAcV,CACE9zC,GAAI,OACJ6zC,SAAU,kQACVC,OAAQ,y/EAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,sJACVC,OAAQ,g4BA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,0PACVC,OAAQ,sxCC9KkB,CAC9B9zC,GAAI,OACJgpC,MAAO,qBACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,wFACVC,OAAQ,8uCAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,4FACVC,OAAQ,iqCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,+HACVC,OAAQ,wlFA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,+GACVC,OAAQ,2iCAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,mHACVC,OAAQ,0vCAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,yHACVC,OAAQ,y0CAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,qNACVC,OAAQ,ozDCpJW,CACvB9zC,GAAI,OACJgpC,MAAO,4GACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,2DACVC,OAAQ,izCAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,6JACVC,OAAQ,u0EAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,2IACVC,OAAQ,q3DAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,6HACVC,OAAQ,irCAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,6KACVC,OAAQ,6pCAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,q5CAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,8EACVC,OAAQ,m7BC3KmB,CAC/B9zC,GAAI,OACJgpC,MAAO,sDACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,4GACVC,OAAQ,mjCAaV,CACE9zC,GAAI,OACJ6zC,SAAU,sGACVC,OAAQ,uhCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,qLACVC,OAAQ,wsHAqCV,CACE9zC,GAAI,OACJ6zC,SAAU,iMACVC,OAAQ,g7BAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,6GACVC,OAAQ,0lCAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,kOACVC,OAAQ,kfAcV,CACE9zC,GAAI,OACJ6zC,SAAU,iLACVC,OAAQ,grBAcV,CACE9zC,GAAI,OACJ6zC,SAAU,0IACVC,OAAQ,glCAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,mKACVC,OAAQ,+lBCxLoB,CAChC9zC,GAAI,OACJgpC,MAAO,uGACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SACE,+WACFC,OAAQ,osBAWV,CACE9zC,GAAI,OACJ6zC,SACE,6bACFC,OAAQ,onDAUV,CACE9zC,GAAI,OACJ6zC,SACE,kjBACFC,OAAQ,gzHAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,qNACVC,OAAQ,isBAIV,CACE9zC,GAAI,OACJ6zC,SAAU,kDACVC,OAAQ,grCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,4OACVC,OAAQ,4/NA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,uRACVC,OAAQ,gkNA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,qJACVC,OAAQ,gtCAKV,CACE9zC,GAAI,OACJ6zC,SAAU,+HACVC,OAAQ,m1BAIV,CACE9zC,GAAI,OACJ6zC,SAAU,oKACVC,OAAQ,ugBAGV,CACE9zC,GAAI,OACJ6zC,SAAU,2IACVC,OAAQ,6eAGV,CACE9zC,GAAI,OACJ6zC,SAAU,gNACVC,OAAQ,+kCAKV,CACE9zC,GAAI,OACJ6zC,SAAU,+MACVC,OAAQ,ysBAIV,CACE9zC,GAAI,OACJ6zC,SAAU,qNACVC,OAAQ,y1BAGV,CACE9zC,GAAI,OACJ6zC,SAAU,sLACVC,OAAQ,shCAIV,CACE9zC,GAAI,OACJ6zC,SAAU,oKACVC,OAAQ,unBAIV,CACE9zC,GAAI,OACJ6zC,SAAU,uMACVC,OAAQ,wjGCrNqB,CACjC9zC,GAAI,OACJgpC,MAAO,wBACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,6FACVC,OAAQ,6sDAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,6HACVC,OAAQ,k3DAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,+NACVC,OAAQ,6qCA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,gJACVC,OAAQ,84BAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,6KACVC,OAAQ,qtBCrGU,CACtB9zC,GAAI,OACJgpC,MAAO,6EACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,kHACVC,OAAQ,ooEAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,gxEAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,0zDAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,yKACVC,OAAQ,2oEAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,yKACVC,OAAQ,4gEA+BV,CACE9zC,GAAI,OACJ6zC,SACE,iYACFC,OAAQ,0iDCrKW,CACvB9zC,GAAI,OACJgpC,MAAO,mCACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,2FACVC,OAAQ,wpDAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,yKACVC,OAAQ,o2GAoDV,CACE9zC,GAAI,OACJ6zC,SAAU,6FACVC,OAAQ,4mCAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,oGACVC,OAAQ,w4CA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,mFACVC,OAAQ,0tCA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,uJACVC,OAAQ,m4CAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,2LACVC,OAAQ,itDAUV,CACE9zC,GAAI,OACJ6zC,SAAU,oHACVC,OAAQ,20BAeV,CACE9zC,GAAI,OACJ6zC,SAAU,kJACVC,OAAQ,mzCC/OmB,CAC/B9zC,GAAI,OACJgpC,MAAO,8GACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,mEACVC,OAAQ,iwDAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,kOACVC,OAAQ,k/DAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,wHACVC,OAAQ,ghFA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,2KACVC,OAAQ,4uDAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,wLACVC,OAAQ,24EA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,0HACVC,OAAQ,6vEAcV,CACE9zC,GAAI,OACJ6zC,SACE,+RACFC,OAAQ,2qCAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,oPACVC,OAAQ,kyEA+BV,CACE9zC,GAAI,OACJ6zC,SACE,4KACFC,OAAQ,gqDCnNa,CACzB9zC,GAAI,OACJgpC,MAAO,6DACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,0EACVC,OAAQ,y3DA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,+HACVC,OAAQ,6lCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,+SACVC,OAAQ,k+BAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,iRACVC,OAAQ,sxCAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,yEACVC,OAAQ,q5EAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,+KACVC,OAAQ,iwCAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,oHACVC,OAAQ,0/EAcV,CACE9zC,GAAI,OACJ6zC,SAAU,4OACVC,OAAQ,i+CAwCV,CACE9zC,GAAI,OACJ6zC,SAAU,4HACVC,OAAQ,o/BAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,4HACVC,OAAQ,kqCCrRkB,CAC9B9zC,GAAI,OACJgpC,MAAO,iEACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,8EACVC,OAAQ,+mDAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,+HACVC,OAAQ,ozCA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,6EACVC,OAAQ,wgEA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,sOACVC,OAAQ,+xBAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,0NACVC,OAAQ,sxCAuCV,CACE9zC,GAAI,OACJ6zC,SAAU,gJACVC,OAAQ,00DA0CV,CACE9zC,GAAI,OACJ6zC,SACE,6RACFC,OAAQ,6qEAwCV,CACE9zC,GAAI,OACJ6zC,SAAU,sTACVC,OAAQ,+qCAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,yKACVC,OAAQ,mhCA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,mGACVC,OAAQ,u8BCtUiB,CAC7B9zC,GAAI,OACJgpC,MAAO,yFACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,iMACVC,OAAQ,0kEAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,mPACVC,OAAQ,46CA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,+KACVC,OAAQ,yyDAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,oFACVC,OAAQ,8rDA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,8JACVC,OAAQ,8zCAoBV,CACE9zC,GAAI,OACJ6zC,SACE,0RACFC,OAAQ,o4CA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,kTACVC,OAAQ,qlBAcV,CACE9zC,GAAI,OACJ6zC,SAAU,+EACVC,OAAQ,gsCA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,+RACVC,OAAQ,07BAeV,CACE9zC,GAAI,OACJ6zC,SAAU,oMACVC,OAAQ,k/BC1Oc,CAC1B9zC,GAAI,OACJgpC,MAAO,6DACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,uHACVC,OAAQ,m3CAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,wHACVC,OAAQ,w3DAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,8MACVC,OAAQ,0rCAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,wMACVC,OAAQ,mwCA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,gLACVC,OAAQ,6iCAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,6JACVC,OAAQ,81BAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,gTACVC,OAAQ,kxBAeV,CACE9zC,GAAI,OACJ6zC,SAAU,2MACVC,OAAQ,k+DAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,oNACVC,OAAQ,qrBAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,qKACVC,OAAQ,orBC1MgB,CAC5B9zC,GAAI,OACJgpC,MAAO,aACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,gEACVC,OAAQ,m/CAaV,CACE9zC,GAAI,OACJ6zC,SAAU,gKACVC,OAAQ,4lFA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,oIACVC,OAAQ,0nCAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,mKACVC,OAAQ,+4DAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,0xCAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,oIACVC,OAAQ,g1DA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,uHACVC,OAAQ,kqBAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,2FACVC,OAAQ,0zBAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,uGACVC,OAAQ,ohDA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,sJACVC,OAAQ,gvCCrPU,CACtB9zC,GAAI,OACJgpC,MAAO,0DACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,0DACVC,OAAQ,wyEAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,2DACVC,OAAQ,omEAcV,CACE9zC,GAAI,OACJ6zC,SAAU,qLACVC,OAAQ,6wEAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,4FACVC,OAAQ,g6EAeV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,moDAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,0IACVC,OAAQ,84EAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,oIACVC,OAAQ,mvDAeV,CACE9zC,GAAI,OACJ6zC,SAAU,kJACVC,OAAQ,+9CAeV,CACE9zC,GAAI,OACJ6zC,SAAU,kJACVC,OAAQ,uvDAaV,CACE9zC,GAAI,OACJ6zC,SAAU,gJACVC,OAAQ,6vBCtLY,CACxB9zC,GAAI,OACJgpC,MAAO,iBACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,2EACVC,OAAQ,0iDAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,8KACVC,OAAQ,2qCAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,6HACVC,OAAQ,6xBAeV,CACE9zC,GAAI,OACJ6zC,SAAU,2EACVC,OAAQ,qoCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,8KACVC,OAAQ,sxCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,oLACVC,OAAQ,+cAYV,CACE9zC,GAAI,OACJ6zC,SAAU,6HACVC,OAAQ,8iBAaV,CACE9zC,GAAI,OACJ6zC,SAAU,yIACVC,OAAQ,ypBAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,yIACVC,OAAQ,+fAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,mKACVC,OAAQ,++EA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,mKACVC,OAAQ,mlDAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,kGACVC,OAAQ,muBAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,qJACVC,OAAQ,kjBAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,qJACVC,OAAQ,4eCnSY,CACxB9zC,GAAI,OACJgpC,MAAO,SACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SACE,kSACFC,OAAQ,wmGAYV,CACE9zC,GAAI,OACJ6zC,SACE,wTACFC,OAAQ,mnGAaV,CACE9zC,GAAI,OACJ6zC,SACE,2eACFC,OAAQ,+6GAWV,CACE9zC,GAAI,OACJ6zC,SAAU,0KACVC,OAAQ,2lDAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,iJACVC,OAAQ,y+CAQV,CACE9zC,GAAI,OACJ6zC,SAAU,4GACVC,OAAQ,+6CAcV,CACE9zC,GAAI,OACJ6zC,SAAU,mKACVC,OAAQ,wtBAYV,CACE9zC,GAAI,OACJ6zC,SAAU,4GACVC,OAAQ,+ZAOV,CACE9zC,GAAI,OACJ6zC,SAAU,yHACVC,OAAQ,syBAMV,CACE9zC,GAAI,OACJ6zC,SAAU,oPACVC,OAAQ,mjBAMV,CACE9zC,GAAI,OACJ6zC,SACE,gLACFC,OAAQ,69CAOV,CACE9zC,GAAI,OACJ6zC,SAAU,qLACVC,OAAQ,6+BAQV,CACE9zC,GAAI,OACJ6zC,SACE,iQACFC,OAAQ,swCAOV,CACE9zC,GAAI,OACJ6zC,SACE,mNACFC,OAAQ,kqCAOV,CACE9zC,GAAI,OACJ6zC,SAAU,2HACVC,OAAQ,47CC/LW,CACvB9zC,GAAI,OACJgpC,MAAO,6EACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,wHACVC,OAAQ,qvEAUV,CACE9zC,GAAI,OACJ6zC,SAAU,oIACVC,OAAQ,2vEAUV,CACE9zC,GAAI,OACJ6zC,SAAU,2LACVC,OAAQ,swGA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,yNACVC,OAAQ,uwDAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,kMACVC,OAAQ,4yDAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,ilCAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,2IACVC,OAAQ,4rDAcV,CACE9zC,GAAI,OACJ6zC,SAAU,8KACVC,OAAQ,y/BA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,0KACVC,OAAQ,omCAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,iOACVC,OAAQ,qrDAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,gOACVC,OAAQ,ixCAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,wPACVC,OAAQ,26DAeV,CACE9zC,GAAI,OACJ6zC,SAAU,iRACVC,OAAQ,8yDCzQW,CACvB9zC,GAAI,OACJgpC,MAAO,QACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,2DACVC,OAAQ,4iGAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,yHACVC,OAAQ,m7DAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,iIACVC,OAAQ,moCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,kGACVC,OAAQ,wgCAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,mGACVC,OAAQ,42DA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,yJACVC,OAAQ,6zDAWV,CACE9zC,GAAI,OACJ6zC,SAAU,wGACVC,OAAQ,wrCAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,oNACVC,OAAQ,6nEAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,oJACVC,OAAQ,88DAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,6HACVC,OAAQ,ysCCxPW,CACvB9zC,GAAI,OACJgpC,MAAO,+CACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,wEACVC,OAAQ,8yCAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,0KACVC,OAAQ,2oBAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,4LACVC,OAAQ,s/BAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,kEACVC,OAAQ,mxCAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,iJACVC,OAAQ,g7BAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,2EACVC,OAAQ,ioCAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,sMACVC,OAAQ,k5BAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,4LACVC,OAAQ,26BAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,kMACVC,OAAQ,22CAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,6MACVC,OAAQ,0vCCvN8B,CAC1C9zC,GAAI,OACJgpC,MAAO,+BACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SACE,yPACFC,OAAQ,0qFAyBV,CACE9zC,GAAI,OACJ6zC,SACE,oZACFC,OAAQ,uqDAkBV,CACE9zC,GAAI,OACJ6zC,SACE,2eACFC,OAAQ,mxDAyCV,CACE9zC,GAAI,OACJ6zC,SAAU,yNACVC,OAAQ,45EAiBV,CACE9zC,GAAI,OACJ6zC,SACE,gNACFC,OAAQ,y/EAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,u7DAQV,CACE9zC,GAAI,OACJ6zC,SACE,2OACFC,OAAQ,26EAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,sJACVC,OAAQ,o1BC7LS,CACrB9zC,GAAI,OACJgpC,MAAO,MACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,yDACVC,OAAQ,qtCAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,qEACVC,OAAQ,s6CAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,6FACVC,OAAQ,svBAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,qJACVC,OAAQ,g8BAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,mIACVC,OAAQ,yxBAcV,CACE9zC,GAAI,OACJ6zC,SAAU,oLACVC,OAAQ,qwBAeV,CACE9zC,GAAI,OACJ6zC,SAAU,8KACVC,OAAQ,07BAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,sJACVC,OAAQ,+qCAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,gHACVC,OAAQ,muDA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,6KACVC,OAAQ,grBAeV,CACE9zC,GAAI,OACJ6zC,SAAU,sFACVC,OAAQ,w8BC1Nc,CAC1B9zC,GAAI,OACJgpC,MAAO,oEACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,oNACVC,OAAQ,y1CAaV,CACE9zC,GAAI,OACJ6zC,SAAU,wPACVC,OAAQ,k2CAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,8NACVC,OAAQ,kmCAYV,CACE9zC,GAAI,OACJ6zC,SAAU,0JACVC,OAAQ,y3BAaV,CACE9zC,GAAI,OACJ6zC,SAAU,yPACVC,OAAQ,8/CAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,iOACVC,OAAQ,4pDAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,wRACVC,OAAQ,mjCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,gLACVC,OAAQ,i3BAeV,CACE9zC,GAAI,OACJ6zC,SAAU,wHACVC,OAAQ,inCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,2LACVC,OAAQ,22BClLmC,CAC/C9zC,GAAI,OACJgpC,MAAO,2DACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,6aACVC,OAAQ,8xCAYV,CACE9zC,GAAI,OACJ6zC,SAAU,2VACVC,OAAQ,6qFAcV,CACE9zC,GAAI,OACJ6zC,SAAU,+WACVC,OAAQ,44OCvCa,CACzB9zC,GAAI,OACJgpC,MAAO,UACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SACE,mWACFC,OAAQ,kiEAyBV,CACE9zC,GAAI,OACJ6zC,SACE,6fACFC,OAAQ,4mDAuBV,CACE9zC,GAAI,OACJ6zC,SACE,0WACFC,OAAQ,kjDAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,sGACVC,OAAQ,qpCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,6JACVC,OAAQ,olCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,4GACVC,OAAQ,o4BAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,yKACVC,OAAQ,mzCAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,yLACVC,OAAQ,qvDAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,6JACVC,OAAQ,ohBAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,qNACVC,OAAQ,63BAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,iTACVC,OAAQ,yjDAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,oOACVC,OAAQ,m3CA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,2NACVC,OAAQ,khCAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,qNACVC,OAAQ,i1CASV,CACE9zC,GAAI,OACJ6zC,SAAU,sJACVC,OAAQ,6rCCrWY,CACxB9zC,GAAI,OACJgpC,MAAO,SACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,oGACVC,OAAQ,05BAMV,CACE9zC,GAAI,OACJ6zC,SAAU,0JACVC,OAAQ,yiDAmBV,CACE9zC,GAAI,OACJ6zC,SACE,2TACFC,OAAQ,0zCAeV,CACE9zC,GAAI,OACJ6zC,SACE,kzBACFC,OAAQ,6zHAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,6HACVC,OAAQ,2oEAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,mpDAeV,CACE9zC,GAAI,OACJ6zC,SAAU,+HACVC,OAAQ,+jDAeV,CACE9zC,GAAI,OACJ6zC,SACE,2MACFC,OAAQ,wsCC/IkB,CAC9B9zC,GAAI,OACJgpC,MAAO,iGACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,qIACVC,OAAQ,0oEA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,mEACVC,OAAQ,88EAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,oMACVC,OAAQ,ogEA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,4QACVC,OAAQ,6vFA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,oLACVC,OAAQ,4gGAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,2KACVC,OAAQ,4uDAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,wLACVC,OAAQ,24EA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,4NACVC,OAAQ,+0DAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,iJACVC,OAAQ,wjFChOiB,CAC7B9zC,GAAI,OACJgpC,MAAO,4DACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,kEACVC,OAAQ,sjHAyCV,CACE9zC,GAAI,OACJ6zC,SAAU,gLACVC,OAAQ,ssDAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,2NACVC,OAAQ,ksCA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,uOACVC,OAAQ,0+BAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,4JACVC,OAAQ,81BAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,6KACVC,OAAQ,ioCA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,moBAeV,CACE9zC,GAAI,OACJ6zC,SAAU,2IACVC,OAAQ,yqCAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,oIACVC,OAAQ,wjCC7QoB,CAChC9zC,GAAI,OACJgpC,MAAO,mBACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,sEACVC,OAAQ,y8JA8CV,CACE9zC,GAAI,OACJ6zC,SAAU,qFACVC,OAAQ,61BAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,oFACVC,OAAQ,4wBAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,4HACVC,OAAQ,m3BAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,moBAeV,CACE9zC,GAAI,OACJ6zC,SAAU,kLACVC,OAAQ,gmCAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,mLACVC,OAAQ,o6CAqCV,CACE9zC,GAAI,OACJ6zC,SAAU,gHACVC,OAAQ,sjCA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,4HACVC,OAAQ,81BAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,+KACVC,OAAQ,23CC1RW,CACvB9zC,GAAI,OACJgpC,MAAO,yLACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,4LACVC,OAAQ,otFA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,wPACVC,OAAQ,q+CAyCV,CACE9zC,GAAI,OACJ6zC,SAAU,oNACVC,OAAQ,20FAwDV,CACE9zC,GAAI,OACJ6zC,SAAU,8KACVC,OAAQ,8tEAsCV,CACE9zC,GAAI,OACJ6zC,SAAU,2QACVC,OAAQ,i/FCxL0B,CACtC9zC,GAAI,OACJgpC,MAAO,0GACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,0IACVC,OAAQ,mrGAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,4HACVC,OAAQ,6rCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,uHACVC,OAAQ,svCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,iIACVC,OAAQ,knEAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,wJACVC,OAAQ,09EAqCV,CACE9zC,GAAI,OACJ6zC,SAAU,6EACVC,OAAQ,itCAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,2QACVC,OAAQ,8lDAuCV,CACE9zC,GAAI,OACJ6zC,SAAU,qJACVC,OAAQ,ojEC3OoB,CAChC9zC,GAAI,OACJgpC,MAAO,qEACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,yHACVC,OAAQ,8+EAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,wHACVC,OAAQ,ygFAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,wQACVC,OAAQ,slDAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,gJACVC,OAAQ,kxEA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,+KACVC,OAAQ,qzEAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,yKACVC,OAAQ,+1BAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,wMACVC,OAAQ,g/CAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,2QACVC,OAAQ,g9CAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,6IACVC,OAAQ,4iDCpMmB,CAC/B9zC,GAAI,OACJgpC,MAAO,wBACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,0EACVC,OAAQ,wwFA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,2OACVC,OAAQ,qzDA8CV,CACE9zC,GAAI,OACJ6zC,SACE,qQACFC,OAAQ,uhEA6CV,CACE9zC,GAAI,OACJ6zC,SACE,sSACFC,OAAQ,wwEAwDV,CACE9zC,GAAI,OACJ6zC,SAAU,wUACVC,OAAQ,45DCnMe,CAC3B9zC,GAAI,OACJgpC,MAAO,+BACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,kFACVC,OAAQ,6tFA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,sMACVC,OAAQ,srFAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,iLACVC,OAAQ,2lDAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,0LACVC,OAAQ,81CAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,gMACVC,OAAQ,uxFC5IgB,CAC5B9zC,GAAI,OACJgpC,MAAO,gEACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,gEACVC,OAAQ,knDA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,+MACVC,OAAQ,m0EAwCV,CACE9zC,GAAI,OACJ6zC,SAAU,+MACVC,OAAQ,owGAgDV,CACE9zC,GAAI,OACJ6zC,SAAU,+KACVC,OAAQ,iyCAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,uRACVC,OAAQ,q+DAwDV,CACE9zC,GAAI,OACJ6zC,SAAU,gJACVC,OAAQ,0+EAoBV,CACE9zC,GAAI,OACJ6zC,SACE,sUACFC,OAAQ,skFC3PiB,CAC7B9zC,GAAI,OACJgpC,MAAO,2IACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,yKACVC,OAAQ,8yDAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,2LACVC,OAAQ,+oFAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,qLACVC,OAAQ,oyDAyCV,CACE9zC,GAAI,OACJ6zC,SAAU,oSACVC,OAAQ,02BAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,mNACVC,OAAQ,2/CAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,wUACVC,OAAQ,u9CAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,sRACVC,OAAQ,i4DAmDV,CACE9zC,GAAI,OACJ6zC,SACE,0VACFC,OAAQ,qoECnQ2B,CACvC9zC,GAAI,OACJgpC,MAAO,8BACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,sIACVC,OAAQ,mkDA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,+NACVC,OAAQ,sjCAmBV,CACE9zC,GAAI,OACJ6zC,SACE,6OACFC,OAAQ,kqCA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,sLACVC,OAAQ,shCAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,gLACVC,OAAQ,2lDAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,uOACVC,OAAQ,u/CA0CV,CACE9zC,GAAI,OACJ6zC,SAAU,sLACVC,OAAQ,kjCA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,6QACVC,OAAQ,ggDAwCV,CACE9zC,GAAI,OACJ6zC,SAAU,sNACVC,OAAQ,k9BAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,mMACVC,OAAQ,swDClTW,CACvB9zC,GAAI,OACJgpC,MAAO,+IACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,iIACVC,OAAQ,qoCAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,uUACVC,OAAQ,0jBAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,2IACVC,OAAQ,2rCAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,mKACVC,OAAQ,4gCAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,wIACVC,OAAQ,upCAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,yKACVC,OAAQ,28CAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,0QACVC,OAAQ,kyCAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,4NACVC,OAAQ,srCAuBV,CACE9zC,GAAI,OACJ6zC,SACE,oVACFC,OAAQ,2hDAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,6MACVC,OAAQ,+vCA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,8UACVC,OAAQ,0lEC5SU,CACtB9zC,GAAI,OACJgpC,MAAO,8CACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,uEACVC,OAAQ,2mDA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,8NACVC,OAAQ,uzBAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,oOACVC,OAAQ,i1BA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,2MACVC,OAAQ,knEAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,iKACVC,OAAQ,ynCA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,0LACVC,OAAQ,o3BA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,8SACVC,OAAQ,s3BAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,wHACVC,OAAQ,+6DAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,+IACVC,OAAQ,uzBAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,2EACVC,OAAQ,8iBCtRmB,CAC/B9zC,GAAI,OACJgpC,MAAO,0KACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,oNACVC,OAAQ,2mGAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,sFACVC,OAAQ,yiDAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,0EACVC,OAAQ,s0CAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,iFACVC,OAAQ,uoDAwCV,CACE9zC,GAAI,OACJ6zC,SAAU,mFACVC,OAAQ,6lDA0CV,CACE9zC,GAAI,OACJ6zC,SAAU,0EACVC,OAAQ,25CAuCV,CACE9zC,GAAI,OACJ6zC,SAAU,yEACVC,OAAQ,i3CAuCV,CACE9zC,GAAI,OACJ6zC,SAAU,2EACVC,OAAQ,s/CAyCV,CACE9zC,GAAI,OACJ6zC,SAAU,uRACVC,OAAQ,6wDAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,+FACVC,OAAQ,2mDCxX0B,CACtC9zC,GAAI,OACJgpC,MAAO,4KACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,oNACVC,OAAQ,m/BAaV,CACE9zC,GAAI,OACJ6zC,SAAU,qTACVC,OAAQ,8iBAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,wUACVC,OAAQ,+mBAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,ySACVC,OAAQ,k5GAoDV,CACE9zC,GAAI,OACJ6zC,SAAU,+PACVC,OAAQ,6fAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,+SACVC,OAAQ,uxBA6BV,CACE9zC,GAAI,OACJ6zC,SACE,gWACFC,OAAQ,s/BA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,6PACVC,OAAQ,8yDAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,kRACVC,OAAQ,0jBAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,ySACVC,OAAQ,+lBAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,0QACVC,OAAQ,8xDCpSsB,CAClC9zC,GAAI,OACJgpC,MAAO,uJACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,mMACVC,OAAQ,4jFA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,6OACVC,OAAQ,m5DAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,iOACVC,OAAQ,ulEAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,+PACVC,OAAQ,4qCA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,yRACVC,OAAQ,wvDA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,6JACVC,OAAQ,ulCAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,qKACVC,OAAQ,0yCAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,gOACVC,OAAQ,+kCAiCV,CACE9zC,GAAI,OACJ6zC,SACE,4KACFC,OAAQ,05BAeV,CACE9zC,GAAI,OACJ6zC,SACE,yTACFC,OAAQ,0jCCjSqB,CACjC9zC,GAAI,OACJgpC,MAAO,yIACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,sLACVC,OAAQ,84BAeV,CACE9zC,GAAI,OACJ6zC,SAAU,uRACVC,OAAQ,ihCA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,iOACVC,OAAQ,0qBAkBV,CACE9zC,GAAI,OACJ6zC,SACE,iWACFC,OAAQ,miEAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,6JACVC,OAAQ,ulCAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,6OACVC,OAAQ,ijCAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,ySACVC,OAAQ,gsGAoDV,CACE9zC,GAAI,OACJ6zC,SAAU,iRACVC,OAAQ,4uCAiDV,CACE9zC,GAAI,OACJ6zC,SAAU,yPACVC,OAAQ,qpDAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,2TACVC,OAAQ,stEC/TwB,CACpC9zC,GAAI,MACJgpC,MAAO,4MACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,i1CAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,4FACVC,OAAQ,o6CAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,4KACVC,OAAQ,4oDAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,gGACVC,OAAQ,wmEA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,kIACVC,OAAQ,q/CAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,+JACVC,OAAQ,2pCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,sIACVC,OAAQ,uyDAYV,CACE9zC,GAAI,OACJ6zC,SAAU,wLACVC,OAAQ,4tCA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,uIACVC,OAAQ,85DAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,gIACVC,OAAQ,8rCCrOiB,CAC7B9zC,GAAI,OACJgpC,MAAO,uGACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,0JACVC,OAAQ,mgDAeV,CACE9zC,GAAI,OACJ6zC,SAAU,+NACVC,OAAQ,0kBAaV,CACE9zC,GAAI,OACJ6zC,SAAU,kGACVC,OAAQ,m+BAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,uJACVC,OAAQ,w6DAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,ugCA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,gJACVC,OAAQ,uvDAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,oMACVC,OAAQ,iqBAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,iRACVC,OAAQ,4gCA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,+IACVC,OAAQ,k0CAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,gRACVC,OAAQ,s/BCnO4B,CACxC9zC,GAAI,OACJgpC,MAAO,wJACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,qIACVC,OAAQ,4sEAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,gMACVC,OAAQ,sgCAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,0OACVC,OAAQ,yyBAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,mJACVC,OAAQ,qyBAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,sLACVC,OAAQ,khDAaV,CACE9zC,GAAI,OACJ6zC,SAAU,6FACVC,OAAQ,shCAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,8LACVC,OAAQ,iiDAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,wMACVC,OAAQ,2zBAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,0LACVC,OAAQ,ohCAcV,CACE9zC,GAAI,OACJ6zC,SAAU,6OACVC,OAAQ,shCCrMqB,CACjC9zC,GAAI,OACJgpC,MAAO,sHACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,wFACVC,OAAQ,ynDAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,wIACVC,OAAQ,2rFA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,2HACVC,OAAQ,qnDAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,qJACVC,OAAQ,yvDAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,6KACVC,OAAQ,kqCA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,0HACVC,OAAQ,81CA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,8GACVC,OAAQ,uyBAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,oOACVC,OAAQ,s4BAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,oJACVC,OAAQ,2+BAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,oOACVC,OAAQ,ykDCxPgB,CAC5B9zC,GAAI,OACJgpC,MAAO,yIACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,mFACVC,OAAQ,gvDAqCV,CACE9zC,GAAI,OACJ6zC,SAAU,kIACVC,OAAQ,stEAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,2LACVC,OAAQ,gkCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,mNACVC,OAAQ,uvCAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,uPACVC,OAAQ,giCA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,+2CAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,8NACVC,OAAQ,u8CAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,gJACVC,OAAQ,u5CAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,kIACVC,OAAQ,u9BAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,sJACVC,OAAQ,8qCCvQc,CAC1B9zC,GAAI,OACJgpC,MAAO,uIACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,iFACVC,OAAQ,0qCAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,sPACVC,OAAQ,iyCAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,+LACVC,OAAQ,+0CAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,4KACVC,OAAQ,8iCA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,oSACVC,OAAQ,qpCAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,sKACVC,OAAQ,qrCA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,8IACVC,OAAQ,kgDAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,4KACVC,OAAQ,i7BA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,0RACVC,OAAQ,ioCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,+HACVC,OAAQ,g3BCrPiB,CAC7B9zC,GAAI,OACJgpC,MAAO,4GACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,gEACVC,OAAQ,+xCAcV,CACE9zC,GAAI,OACJ6zC,SAAU,oGACVC,OAAQ,w/BAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,2GACVC,OAAQ,irDA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,+IACVC,OAAQ,yqBAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,yNACVC,OAAQ,ggBAaV,CACE9zC,GAAI,OACJ6zC,SAAU,0QACVC,OAAQ,8rBAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,oGACVC,OAAQ,sbAaV,CACE9zC,GAAI,OACJ6zC,SAAU,sLACVC,OAAQ,+tBAcV,CACE9zC,GAAI,OACJ6zC,SAAU,oGACVC,OAAQ,qwBA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,iKACVC,OAAQ,slBC9MgB,CAC5B9zC,GAAI,OACJgpC,MAAO,2DACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,kFACVC,OAAQ,0/CAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,6IACVC,OAAQ,8gDAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,2EACVC,OAAQ,82BAcV,CACE9zC,GAAI,OACJ6zC,SAAU,8EACVC,OAAQ,s1BAcV,CACE9zC,GAAI,OACJ6zC,SAAU,mMACVC,OAAQ,+7CAaV,CACE9zC,GAAI,OACJ6zC,SAAU,kFACVC,OAAQ,2gDAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,yNACVC,OAAQ,wzBAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,wIACVC,OAAQ,03CA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,gKACVC,OAAQ,87BAYV,CACE9zC,GAAI,OACJ6zC,SAAU,sSACVC,OAAQ,00BChNa,CACzB9zC,GAAI,OACJgpC,MAAO,mEACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,yEACVC,OAAQ,ulDAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,qFACVC,OAAQ,8hCA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,sJACVC,OAAQ,4sBAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,uGACVC,OAAQ,onBAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,qHACVC,OAAQ,yiBAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,yGACVC,OAAQ,6mBAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,wOACVC,OAAQ,27BAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,gOACVC,OAAQ,45BAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,gFACVC,OAAQ,61CAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,4NACVC,OAAQ,qmCC3OoB,CAChC9zC,GAAI,OACJgpC,MAAO,oLACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,2LACVC,OAAQ,ojFAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,+KACVC,OAAQ,ozCA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,4JACVC,OAAQ,mqDA0CV,CACE9zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,osDA2CV,CACE9zC,GAAI,OACJ6zC,SAAU,+IACVC,OAAQ,u0CAqCV,CACE9zC,GAAI,OACJ6zC,SAAU,+KACVC,OAAQ,6zCA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,qJACVC,OAAQ,4gDAyCV,CACE9zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,21CCvQmB,CAC/B9zC,GAAI,OACJgpC,MAAO,+GACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,iJACVC,OAAQ,o3DAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,8PACVC,OAAQ,ygGAuCV,CACE9zC,GAAI,OACJ6zC,SAAU,kLACVC,OAAQ,4yDAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,kLACVC,OAAQ,glDAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,4MACVC,OAAQ,o8CAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,oQACVC,OAAQ,+rDAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,qMACVC,OAAQ,2hCAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,iNACVC,OAAQ,miCAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,qPACVC,OAAQ,q6DAiDV,CACE9zC,GAAI,OACJ6zC,SAAU,gNACVC,OAAQ,83DC3Qc,CAC1B9zC,GAAI,OACJgpC,MAAO,4EACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,mHACVC,OAAQ,ojDASV,CACE9zC,GAAI,OACJ6zC,SAAU,gLACVC,OAAQ,+4DAcV,CACE9zC,GAAI,OACJ6zC,SAAU,yDACVC,OAAQ,m3CAeV,CACE9zC,GAAI,OACJ6zC,SAAU,gLACVC,OAAQ,o6DAeV,CACE9zC,GAAI,OACJ6zC,SAAU,2KACVC,OAAQ,qiEAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,6LACVC,OAAQ,41DAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,4LACVC,OAAQ,y8EAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,kOACVC,OAAQ,2iEAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,gNACVC,OAAQ,q6CAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,yDACVC,OAAQ,0mDCtLoB,CAChC9zC,GAAI,OACJgpC,MAAO,wFACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,2IACVC,OAAQ,y6DAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,0NACVC,OAAQ,0kGAkDV,CACE9zC,GAAI,OACJ6zC,SAAU,+JACVC,OAAQ,8zCA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,qPACVC,OAAQ,8jDA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,wRACVC,OAAQ,qoDAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,sLACVC,OAAQ,glDAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,iLACVC,OAAQ,qrDAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,8MACVC,OAAQ,k9DClNe,CAC3B9zC,GAAI,OACJgpC,MAAO,+FACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,wHACVC,OAAQ,gwCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,iMACVC,OAAQ,24CAcV,CACE9zC,GAAI,OACJ6zC,SAAU,mPACVC,OAAQ,gtCA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,qvCAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,kTACVC,OAAQ,0hBCtGoB,CAChC9zC,GAAI,OACJgpC,MAAO,yEACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,4HACVC,OAAQ,49EAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,yLACVC,OAAQ,0rEAYV,CACE9zC,GAAI,OACJ6zC,SAAU,8KACVC,OAAQ,84DAaV,CACE9zC,GAAI,OACJ6zC,SAAU,yFACVC,OAAQ,q6BAYV,CACE9zC,GAAI,OACJ6zC,SAAU,2GACVC,OAAQ,6hCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,mIACVC,OAAQ,s7CAYV,CACE9zC,GAAI,OACJ6zC,SAAU,+QACVC,OAAQ,krDAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,kNACVC,OAAQ,m+CAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,+MACVC,OAAQ,wqCA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,kLACVC,OAAQ,gtDCpLwB,CACpC9zC,GAAI,OACJgpC,MAAO,2LACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,+NACVC,OAAQ,sjGAeV,CACE9zC,GAAI,OACJ6zC,SACE,uWACFC,OAAQ,4rFAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,0QACVC,OAAQ,u5FAqBV,CACE9zC,GAAI,OACJ6zC,SACE,iRACFC,OAAQ,+kEAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,yMACVC,OAAQ,4wEAeV,CACE9zC,GAAI,OACJ6zC,SAAU,6PACVC,OAAQ,g9DAoBV,CACE9zC,GAAI,OACJ6zC,SACE,wTACFC,OAAQ,mmDAcV,CACE9zC,GAAI,OACJ6zC,SACE,8ZACFC,OAAQ,m4DAmBV,CACE9zC,GAAI,OACJ6zC,SACE,wTACFC,OAAQ,o+CAYV,CACE9zC,GAAI,OACJ6zC,SACE,2bACFC,OAAQ,iqDC9Lc,CAC1B9zC,GAAI,OACJgpC,MAAO,8GACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,gEACVC,OAAQ,6gEA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,yGACVC,OAAQ,4/CA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,8FACVC,OAAQ,0sDA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,iFACVC,OAAQ,q2FA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,4EACVC,OAAQ,w3FAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,gRACVC,OAAQ,2iDCxKa,CACzB9zC,GAAI,OACJgpC,MAAO,0EACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,kJACVC,OAAQ,y0GAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,sJACVC,OAAQ,4rCAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,oIACVC,OAAQ,45CA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,k/BA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,gFACVC,OAAQ,qhCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,uHACVC,OAAQ,wyBAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,mFACVC,OAAQ,suBAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,oFACVC,OAAQ,wiBAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,qFACVC,OAAQ,2uCAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,qJACVC,OAAQ,isCCtOS,CACrB9zC,GAAI,OACJgpC,MAAO,MACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,yDACVC,OAAQ,6gEAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,wJACVC,OAAQ,qxDAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,kIACVC,OAAQ,qxCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,8PACVC,OAAQ,0xDAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,+RACVC,OAAQ,uvCA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,2OACVC,OAAQ,8yBAWV,CACE9zC,GAAI,OACJ6zC,SAAU,yIACVC,OAAQ,2gCAcV,CACE9zC,GAAI,OACJ6zC,SAAU,8MACVC,OAAQ,iyCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,qTACVC,OAAQ,yhCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,qOACVC,OAAQ,++BCjMkB,CAC9B9zC,GAAI,OACJgpC,MAAO,8DACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,sQACVC,OAAQ,41CAkBV,CACE9zC,GAAI,OACJ6zC,SACE,qZACFC,OAAQ,+sFA4BV,CACE9zC,GAAI,OACJ6zC,SACE,4gBACFC,OAAQ,i9CAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,26EAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,ohCAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,uOACVC,OAAQ,qmFC7IU,CACtB9zC,GAAI,OACJgpC,MAAO,OACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,0DACVC,OAAQ,i1CAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,qGACVC,OAAQ,6hDAqCV,CACE9zC,GAAI,OACJ6zC,SAAU,gHACVC,OAAQ,6vDA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,sLACVC,OAAQ,4iBAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,gLACVC,OAAQ,4nBAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,wPACVC,OAAQ,g0BAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,6MACVC,OAAQ,okCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,sJACVC,OAAQ,2rBAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,uHACVC,OAAQ,yjCAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,8KACVC,OAAQ,6kCCxOa,CACzB9zC,GAAI,OACJgpC,MAAO,WACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,gJACVC,OAAQ,o6FAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,sHACVC,OAAQ,+jHAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,uJACVC,OAAQ,0+BAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,6NACVC,OAAQ,6mCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,8PACVC,OAAQ,ikCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,2HACVC,OAAQ,yqEASV,CACE9zC,GAAI,OACJ6zC,SAAU,+GACVC,OAAQ,k1DAQV,CACE9zC,GAAI,OACJ6zC,SAAU,mIACVC,OAAQ,8/DAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,4JACVC,OAAQ,q3BAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,8IACVC,OAAQ,8xCClMgB,CAC5B9zC,GAAI,OACJgpC,MAAO,cACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,iEACVC,OAAQ,m0GA2EV,CACE9zC,GAAI,OACJ6zC,SAAU,iJACVC,OAAQ,glDA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,qJACVC,OAAQ,iyCA4CV,CACE9zC,GAAI,OACJ6zC,SAAU,gPACVC,OAAQ,4hCA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,kKACVC,OAAQ,q5CCrMS,CACrB9zC,GAAI,OACJgpC,MAAO,qCACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,wFACVC,OAAQ,4rGAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,iSACVC,OAAQ,wlHAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,oGACVC,OAAQ,2zFAeV,CACE9zC,GAAI,OACJ6zC,SAAU,0OACVC,OAAQ,y2GAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,kNACVC,OAAQ,8+FAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,+LACVC,OAAQ,quEA2CV,CACE9zC,GAAI,OACJ6zC,SAAU,kSACVC,OAAQ,o2GAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,sPACVC,OAAQ,yoEAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,wyDC5NwB,CACpC9zC,GAAI,OACJgpC,MAAO,4KACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SACE,qPACFC,OAAQ,w+FAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,wOACVC,OAAQ,mnEAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,2OACVC,OAAQ,0rFAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,2KACVC,OAAQ,u7CA2BV,CACE9zC,GAAI,OACJ6zC,SACE,gWACFC,OAAQ,m6DAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,iLACVC,OAAQ,0wCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,qLACVC,OAAQ,yjDC7IkB,CAC9B9zC,GAAI,OACJgpC,MAAO,gBACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,mEACVC,OAAQ,gzKA6FV,CACE9zC,GAAI,OACJ6zC,SAAU,kFACVC,OAAQ,o8BAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,2GACVC,OAAQ,s4BAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,oIACVC,OAAQ,g5CAsCV,CACE9zC,GAAI,OACJ6zC,SAAU,qFACVC,OAAQ,u3BAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,4GACVC,OAAQ,qxBAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,wFACVC,OAAQ,44BC1OuB,CACnC9zC,GAAI,MACJgpC,MAAO,uCACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,0FACVC,OAAQ,ygGAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,qQACVC,OAAQ,wzCAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,gLACVC,OAAQ,4/BAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,6JACVC,OAAQ,2gDAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,gLACVC,OAAQ,stCA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,uQACVC,OAAQ,y5BAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,0KACVC,OAAQ,ipCA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,oMACVC,OAAQ,mjCA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,0KACVC,OAAQ,mwCC3QsB,CAClC9zC,GAAI,OACJgpC,MAAO,uCACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,0FACVC,OAAQ,6kHA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,8MACVC,OAAQ,44DAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,wMACVC,OAAQ,wxFAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,8PACVC,OAAQ,grBAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,kIACVC,OAAQ,4oFAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,+NACVC,OAAQ,gzBAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,4OACVC,OAAQ,utBClM0B,CACtC9zC,GAAI,OACJgpC,MAAO,cACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,iEACVC,OAAQ,8vGAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,oNACVC,OAAQ,q1FAqCV,CACE9zC,GAAI,OACJ6zC,SAAU,+EACVC,OAAQ,40CAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,wFACVC,OAAQ,w6CAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,0IACVC,OAAQ,oyCA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,wMACVC,OAAQ,gpBAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,yKACVC,OAAQ,6sDC1KwB,CACpC9zC,GAAI,OACJgpC,MAAO,4IACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,+LACVC,OAAQ,k1EAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,uMACVC,OAAQ,8rCAuBV,CACE9zC,GAAI,OACJ6zC,SACE,gWACFC,OAAQ,84FAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,+PACVC,OAAQ,s1CAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,8RACVC,OAAQ,qqCAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,iTACVC,OAAQ,itBAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,gTACVC,OAAQ,u/BAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,8UACVC,OAAQ,+6BAYV,CACE9zC,GAAI,OACJ6zC,SAAU,oSACVC,OAAQ,8RASV,CACE9zC,GAAI,OACJ6zC,SAAU,kSACVC,OAAQ,qSCnMsB,CAClC9zC,GAAI,OACJgpC,MAAO,sGACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,yJACVC,OAAQ,8nHAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,8MACVC,OAAQ,25FAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,wMACVC,OAAQ,64EAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,+PACVC,OAAQ,w/CAYV,CACE9zC,GAAI,OACJ6zC,SAAU,0NACVC,OAAQ,whEAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,iJACVC,OAAQ,u4GAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,4EACVC,OAAQ,whEAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,mNACVC,OAAQ,wtDCpKgB,CAC5B9zC,GAAI,OACJgpC,MAAO,cACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,kFACVC,OAAQ,00DAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,6EACVC,OAAQ,i7BAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,6EACVC,OAAQ,0sCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,uJACVC,OAAQ,g8BAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,gIACVC,OAAQ,i4EA4CV,CACE9zC,GAAI,OACJ6zC,SAAU,mJACVC,OAAQ,qqCA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,8MACVC,OAAQ,02BAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,8MACVC,OAAQ,glCCzMU,CACtB9zC,GAAI,OACJgpC,MAAO,OACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,0DACVC,OAAQ,+hDAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,mKACVC,OAAQ,0oFA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,yKACVC,OAAQ,+jGAqCV,CACE9zC,GAAI,OACJ6zC,SAAU,kHACVC,OAAQ,qwEAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,+IACVC,OAAQ,0rDAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,gJACVC,OAAQ,qxCAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,sJACVC,OAAQ,osCAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,8LACVC,OAAQ,iwDA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,wHACVC,OAAQ,uxBA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,kLACVC,OAAQ,2lDC9PuB,CACnC9zC,GAAI,OACJgpC,MAAO,mGACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,sJACVC,OAAQ,0hCAIV,CACE9zC,GAAI,OACJ6zC,SAAU,gKACVC,OAAQ,y0BAIV,CACE9zC,GAAI,OACJ6zC,SAAU,yNACVC,OAAQ,geAYV,CACE9zC,GAAI,OACJ6zC,SAAU,oJACVC,OAAQ,iIAKV,CACE9zC,GAAI,OACJ6zC,SAAU,uHACVC,OAAQ,iPAIV,CACE9zC,GAAI,OACJ6zC,SAAU,qOACVC,OAAQ,4fAYV,CACE9zC,GAAI,OACJ6zC,SAAU,8FACVC,OAAQ,iHAKV,CACE9zC,GAAI,OACJ6zC,SAAU,sOACVC,OAAQ,oMAOV,CACE9zC,GAAI,OACJ6zC,SAAU,sOACVC,OAAQ,qPAOV,CACE9zC,GAAI,OACJ6zC,SAAU,GACVC,OAAQ,MC9FqB,CACjC9zC,GAAI,OACJgpC,MAAO,0GACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,6JACVC,OAAQ,sxCAcV,CACE9zC,GAAI,OACJ6zC,SAAU,iSACVC,OAAQ,g2BAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,sOACVC,OAAQ,igCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,4OACVC,OAAQ,wkEA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,kUACVC,OAAQ,s8DC9FgB,CAC5B9zC,GAAI,OACJgpC,MAAO,aACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,wJACVC,OAAQ,yhDAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,+IACVC,OAAQ,+0BAcV,CACE9zC,GAAI,OACJ6zC,SAAU,0NACVC,OAAQ,skBAaV,CACE9zC,GAAI,OACJ6zC,SAAU,qIACVC,OAAQ,2kCAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,6MACVC,OAAQ,q5BC1FqB,CACjC9zC,GAAI,OACJgpC,MAAO,oBACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SACE,6ZACFC,OAAQ,47GAWV,CACE9zC,GAAI,OACJ6zC,SAAU,sRACVC,OAAQ,mvTAeV,CACE9zC,GAAI,OACJ6zC,SACE,+ZACFC,OAAQ,0qMCzCqB,CACjC9zC,GAAI,OACJgpC,MAAO,yIACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,yKACVC,OAAQ,igFAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,2LACVC,OAAQ,gwDAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,qTACVC,OAAQ,yiEAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,yPACVC,OAAQ,4+FAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,uRACVC,OAAQ,28DAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,2RACVC,OAAQ,utCAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,yPACVC,OAAQ,wtDAoBV,CACE9zC,GAAI,OACJ6zC,SACE,iUACFC,OAAQ,kkDCjKW,CACvB9zC,GAAI,IACJgpC,MAAO,8CACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,2DACVC,OAAQ,i1DAUV,CACE9zC,GAAI,OACJ6zC,SAAU,4JACVC,OAAQ,wqEAYV,CACE9zC,GAAI,OACJ6zC,SAAU,+FACVC,OAAQ,i4EAaV,CACE9zC,GAAI,OACJ6zC,SAAU,iJACVC,OAAQ,+0EAYV,CACE9zC,GAAI,OACJ6zC,SAAU,2KACVC,OAAQ,isGAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,uGACVC,OAAQ,6pEAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,iHACVC,OAAQ,ovDAWV,CACE9zC,GAAI,OACJ6zC,SAAU,4DACVC,OAAQ,0nCASV,CACE9zC,GAAI,OACJ6zC,SAAU,mHACVC,OAAQ,y/DAWV,CACE9zC,GAAI,OACJ6zC,SAAU,uGACVC,OAAQ,k3CAeV,CACE9zC,GAAI,OACJ6zC,SAAU,kHACVC,OAAQ,inDAWV,CACE9zC,GAAI,OACJ6zC,SAAU,4LACVC,OAAQ,usEAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,2HACVC,OAAQ,koDAYV,CACE9zC,GAAI,OACJ6zC,SAAU,6GACVC,OAAQ,yoDAYV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,8zDAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,mKACVC,OAAQ,0iDAWV,CACE9zC,GAAI,OACJ6zC,SAAU,uEACVC,OAAQ,khEC9QsB,CAClC9zC,GAAI,OACJgpC,MAAO,8BACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,iPACVC,OAAQ,2hBAMV,CACE9zC,GAAI,OACJ6zC,SAAU,wSACVC,OAAQ,4wCAOV,CACE9zC,GAAI,OACJ6zC,SAAU,qgBACVC,OAAQ,g2IC1BmB,CAC/B9zC,GAAI,OACJgpC,MAAO,iBACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,sNACVC,OAAQ,0PAKV,CACE9zC,GAAI,OACJ6zC,SAAU,2OACVC,OAAQ,m0BAQV,CACE9zC,GAAI,OACJ6zC,SAAU,+jBACVC,OAAQ,i7DC1Ba,CACzB9zC,GAAI,OACJgpC,MAAO,2EACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,0QACVC,OAAQ,s0HA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,yFACVC,OAAQ,4vEAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,uUACVC,OAAQ,g4EA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,mFACVC,OAAQ,gmEAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,uFACVC,OAAQ,+nEAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,4sCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,uIACVC,OAAQ,u8DAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,+IACVC,OAAQ,sgDAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,mNACVC,OAAQ,utCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,4TACVC,OAAQ,gnEClOkB,CAC9B9zC,GAAI,OACJgpC,MAAO,wBACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,iEACVC,OAAQ,ilFA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,oGACVC,OAAQ,+2DAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,mFACVC,OAAQ,i4BAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,6HACVC,OAAQ,65CAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,2LACVC,OAAQ,2kEAwCV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,4wBAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,+KACVC,OAAQ,y6CAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,wHACVC,OAAQ,2tCAqCV,CACE9zC,GAAI,OACJ6zC,SAAU,gHACVC,OAAQ,wjCC5R0B,CACtC9zC,GAAI,OACJgpC,MAAO,0CACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,sHACVC,OAAQ,gtFAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,uHACVC,OAAQ,6iEA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,oHACVC,OAAQ,+lEAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,iLACVC,OAAQ,2gDA2CV,CACE9zC,GAAI,OACJ6zC,SAAU,0MACVC,OAAQ,k7BA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,mNACVC,OAAQ,i8BAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,2QACVC,OAAQ,o7CAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,mGACVC,OAAQ,40BA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,2PACVC,OAAQ,0/BC7R2B,CACvC9zC,GAAI,OACJgpC,MAAO,iCACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,gEACVC,OAAQ,slFAuCV,CACE9zC,GAAI,OACJ6zC,SAAU,uEACVC,OAAQ,mxGA4CV,CACE9zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,qrCA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,8JACVC,OAAQ,i3BAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,8HACVC,OAAQ,ykCAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,wGACVC,OAAQ,61CA4BV,CACE9zC,GAAI,OACJ6zC,SACE,oQACFC,OAAQ,k2BClNgB,CAC5B9zC,GAAI,OACJgpC,MAAO,sEACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,4sDAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,6MACVC,OAAQ,0uDAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,qNACVC,OAAQ,w5EAuCV,CACE9zC,GAAI,OACJ6zC,SAAU,qMACVC,OAAQ,wiFA+CV,CACE9zC,GAAI,OACJ6zC,SAAU,8KACVC,OAAQ,0rDAsCV,CACE9zC,GAAI,OACJ6zC,SACE,mNACFC,OAAQ,60DAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,6oCA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,qLACVC,OAAQ,y+CC3RoB,CAChC9zC,GAAI,OACJgpC,MAAO,6IACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,oEACVC,OAAQ,2pIA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,kJACVC,OAAQ,6mEAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,8IACVC,OAAQ,6zDAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,yMACVC,OAAQ,o4CAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,+PACVC,OAAQ,ygDAqCV,CACE9zC,GAAI,OACJ6zC,SAAU,wUACVC,OAAQ,s8CA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,+KACVC,OAAQ,kjCA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,4LACVC,OAAQ,wyBC7NiB,CAC7B9zC,GAAI,OACJgpC,MAAO,wFACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,2IACVC,OAAQ,w9BAeV,CACE9zC,GAAI,OACJ6zC,SAAU,+PACVC,OAAQ,qxDAqCV,CACE9zC,GAAI,OACJ6zC,SAAU,oOACVC,OAAQ,k5CAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,uMACVC,OAAQ,w9BAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,8SACVC,OAAQ,2mCA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,+RACVC,OAAQ,i5CAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,qOACVC,OAAQ,8vCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,+KACVC,OAAQ,wlCA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,0IACVC,OAAQ,muBAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,oOACVC,OAAQ,yjCCpP0B,CACtC9zC,GAAI,OACJgpC,MAAO,0BACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,+KACVC,OAAQ,+kFA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,4LACVC,OAAQ,k4CA4BV,CACE9zC,GAAI,OACJ6zC,SACE,0RACFC,OAAQ,09DA4BV,CACE9zC,GAAI,OACJ6zC,SACE,iOACFC,OAAQ,ulDAkBV,CACE9zC,GAAI,OACJ6zC,SACE,qPACFC,OAAQ,00DAwBV,CACE9zC,GAAI,OACJ6zC,SACE,gVACFC,OAAQ,yhDA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,4QACVC,OAAQ,qxDAqCV,CACE9zC,GAAI,OACJ6zC,SACE,mUACFC,OAAQ,w5DCnOmB,CAC/B9zC,GAAI,OACJgpC,MAAO,+GACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,iKACVC,OAAQ,g1CAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,+MACVC,OAAQ,0/DAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,kMACVC,OAAQ,ikEAuCV,CACE9zC,GAAI,OACJ6zC,SAAU,+PACVC,OAAQ,qxDAqCV,CACE9zC,GAAI,OACJ6zC,SAAU,yKACVC,OAAQ,ikCAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,yNACVC,OAAQ,mkDAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,oSACVC,OAAQ,wgCAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,+KACVC,OAAQ,ogCAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,8MACVC,OAAQ,ulDAkBV,CACE9zC,GAAI,OACJ6zC,SACE,qPACFC,OAAQ,40DC5Qc,CAC1B9zC,GAAI,OACJgpC,MAAO,qGACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,uGACVC,OAAQ,8+GAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,iJACVC,OAAQ,qxGAiDV,CACE9zC,GAAI,OACJ6zC,SAAU,sLACVC,OAAQ,k9DAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,uQACVC,OAAQ,szEAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,yMACVC,OAAQ,42CA2BV,CACE9zC,GAAI,OACJ6zC,SACE,8WACFC,OAAQ,4lDA6CV,CACE9zC,GAAI,OACJ6zC,SAAU,8MACVC,OAAQ,+xCAsBV,CACE9zC,GAAI,OACJ6zC,SACE,qXACFC,OAAQ,2uCASV,CACE9zC,GAAI,OACJ6zC,SAAU,oKACVC,OAAQ,yzDC/Rc,CAC1B9zC,GAAI,OACJgpC,MAAO,mGACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,oOACVC,OAAQ,8qHA2CV,CACE9zC,GAAI,OACJ6zC,SAAU,qJACVC,OAAQ,qyCAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,yIACVC,OAAQ,8hCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,+MACVC,OAAQ,0wBAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,oJACVC,OAAQ,w/DCrHuB,CACnC9zC,GAAI,MACJgpC,MAAO,0JACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,6MACVC,OAAQ,6mEA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,6MACVC,OAAQ,+8DA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,yUACVC,OAAQ,m0EA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,uPACVC,OAAQ,yvDA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,2OACVC,OAAQ,q+DAaV,CACE9zC,GAAI,OACJ6zC,SAAU,4OACVC,OAAQ,8gCAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,qHACVC,OAAQ,0vBAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,sHACVC,OAAQ,2gCAsBV,CACE9zC,GAAI,OACJ6zC,SACE,wRACFC,OAAQ,01BAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,uPACVC,OAAQ,8vDCxPmB,CAC/B9zC,GAAI,OACJgpC,MAAO,iFACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,qJACVC,OAAQ,+3CAeV,CACE9zC,GAAI,OACJ6zC,SAAU,gPACVC,OAAQ,+vDAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,uHACVC,OAAQ,2jCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,sJACVC,OAAQ,4wDAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,oSACVC,OAAQ,goCC9FqB,CACjC9zC,GAAI,OACJgpC,MAAO,uHACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,gLACVC,OAAQ,gmDAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,8NACVC,OAAQ,ysCA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,oQACVC,OAAQ,o2EAsCV,CACE9zC,GAAI,OACJ6zC,SAAU,8OACVC,OAAQ,ycAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,8OACVC,OAAQ,ucAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,uRACVC,OAAQ,8jBAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,4NACVC,OAAQ,8ZAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,kKACVC,OAAQ,6lCAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,+PACVC,OAAQ,q3BAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,6QACVC,OAAQ,4qBClOa,CACzB9zC,GAAI,OACJgpC,MAAO,uDACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,uHACVC,OAAQ,gzCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,mHACVC,OAAQ,k0CAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,yHACVC,OAAQ,4qEAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,gLACVC,OAAQ,8wDA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,wPACVC,OAAQ,q5DAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,gOACVC,OAAQ,gwDASV,CACE9zC,GAAI,OACJ6zC,SAAU,uLACVC,OAAQ,izCAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,oIACVC,OAAQ,4iDA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,qJACVC,OAAQ,y9CCtO4B,CACxC9zC,GAAI,OACJgpC,MACE,gQACF4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,6MACVC,OAAQ,mlCAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,2NACVC,OAAQ,o/BA0BV,CACE9zC,GAAI,OACJ6zC,SACE,iZACFC,OAAQ,msGAuDV,CACE9zC,GAAI,OACJ6zC,SAAU,0QACVC,OAAQ,klEA4CV,CACE9zC,GAAI,OACJ6zC,SAAU,sRACVC,OAAQ,0sDA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,2TACVC,OAAQ,w0CAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,wPACVC,OAAQ,y0EAkDV,CACE9zC,GAAI,OACJ6zC,SAAU,wPACVC,OAAQ,6zDA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,8UACVC,OAAQ,2kDCrUoB,CAChC9zC,GAAI,OACJgpC,MAAO,kGACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,iJACVC,OAAQ,8oEA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,gJACVC,OAAQ,+xEAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,uRACVC,OAAQ,ihDAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,2LACVC,OAAQ,yrDA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,gOACVC,OAAQ,okCAiCV,CACE9zC,GAAI,OACJ6zC,SAAU,+NACVC,OAAQ,wqCAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,mKACVC,OAAQ,owEAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,2LACVC,OAAQ,09DAeV,CACE9zC,GAAI,OACJ6zC,SAAU,kPACVC,OAAQ,qxCAkCV,CACE9zC,GAAI,OACJ6zC,SAAU,2TACVC,OAAQ,4lDC9RuB,CACnC9zC,GAAI,OACJgpC,MAAO,sJACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,gJACVC,OAAQ,gsEA8BV,CACE9zC,GAAI,OACJ6zC,SAAU,sGACVC,OAAQ,iwEAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,qIACVC,OAAQ,q0DA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,iJACVC,OAAQ,k4EAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,uNACVC,OAAQ,g5CA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,sHACVC,OAAQ,srCAuCV,CACE9zC,GAAI,OACJ6zC,SAAU,8IACVC,OAAQ,ymDA+BV,CACE9zC,GAAI,OACJ6zC,SAAU,sKACVC,OAAQ,69BA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,qHACVC,OAAQ,yvDAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,mIACVC,OAAQ,igCCtSmB,CAC/B9zC,GAAI,OACJgpC,MAAO,wLACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,oEACVC,OAAQ,85EA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,oJACVC,OAAQ,soDA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,yKACVC,OAAQ,47EAeV,CACE9zC,GAAI,OACJ6zC,SAAU,gKACVC,OAAQ,slDAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,mJACVC,OAAQ,okCAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,kLACVC,OAAQ,0/BAmBV,CACE9zC,GAAI,OACJ6zC,SACE,sSACFC,OAAQ,6nDAcV,CACE9zC,GAAI,OACJ6zC,SAAU,sPACVC,OAAQ,40DAcV,CACE9zC,GAAI,OACJ6zC,SAAU,uNACVC,OAAQ,ywDAqBV,CACE9zC,GAAI,OACJ6zC,SACE,yQACFC,OAAQ,g3DC1NmB,CAC/B9zC,GAAI,OACJgpC,MAAO,wLACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,oEACVC,OAAQ,4mFAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,2PACVC,OAAQ,48CAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,2PACVC,OAAQ,kzDAeV,CACE9zC,GAAI,OACJ6zC,SAAU,6KACVC,OAAQ,g2BAcV,CACE9zC,GAAI,OACJ6zC,SAAU,4KACVC,OAAQ,qhCASV,CACE9zC,GAAI,OACJ6zC,SAAU,kLACVC,OAAQ,ogDAeV,CACE9zC,GAAI,OACJ6zC,SAAU,mJACVC,OAAQ,i8BAgBV,CACE9zC,GAAI,OACJ6zC,SACE,oRACFC,OAAQ,2tDAcV,CACE9zC,GAAI,OACJ6zC,SAAU,sMACVC,OAAQ,6lCAUV,CACE9zC,GAAI,OACJ6zC,SAAU,uNACVC,OAAQ,g1DAaV,CACE9zC,GAAI,OACJ6zC,SAAU,uNACVC,OAAQ,osDCrLiB,CAC7B9zC,GAAI,OACJgpC,MAAO,8EACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,yHACVC,OAAQ,sjCAeV,CACE9zC,GAAI,OACJ6zC,SAAU,uFACVC,OAAQ,y3BAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,yJACVC,OAAQ,u4DAeV,CACE9zC,GAAI,OACJ6zC,SAAU,4JACVC,OAAQ,o9DAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,kFACVC,OAAQ,skCAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,qLACVC,OAAQ,23BA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,iGACVC,OAAQ,4uBAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,8FACVC,OAAQ,qsBAaV,CACE9zC,GAAI,OACJ6zC,SAAU,8FACVC,OAAQ,qvBAeV,CACE9zC,GAAI,OACJ6zC,SAAU,+FACVC,OAAQ,yxBAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,6OACVC,OAAQ,8sDC/Ne,CAC3B9zC,GAAI,OACJgpC,MAAO,2EACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,qEACVC,OAAQ,wxCAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,iFACVC,OAAQ,q9DAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,qMACVC,OAAQ,+hCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,qJACVC,OAAQ,6tBAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,kIACVC,OAAQ,g2CAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,gMACVC,OAAQ,u6BAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,6KACVC,OAAQ,smCAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,4HACVC,OAAQ,krCAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,oHACVC,OAAQ,2wCAyBV,CACE9zC,GAAI,OACJ6zC,SAAU,+IACVC,OAAQ,84BCrP4B,CACxC9zC,GAAI,OACJgpC,MAAO,iMACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,kFACVC,OAAQ,ouGAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,sJACVC,OAAQ,24CAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,4PACVC,OAAQ,ykCAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,iNACVC,OAAQ,q6CAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,oMACVC,OAAQ,sxFAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,qJACVC,OAAQ,+mDAeV,CACE9zC,GAAI,OACJ6zC,SAAU,sKACVC,OAAQ,ywCAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,0JACVC,OAAQ,+8CAeV,CACE9zC,GAAI,OACJ6zC,SAAU,mHACVC,OAAQ,wsCAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,mOACVC,OAAQ,s9CC5OwB,CACpC9zC,GAAI,OACJgpC,MAAO,gIACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,6JACVC,OAAQ,63DAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,sFACVC,OAAQ,kzCAeV,CACE9zC,GAAI,OACJ6zC,SACE,8QACFC,OAAQ,89BAeV,CACE9zC,GAAI,OACJ6zC,SAAU,yPACVC,OAAQ,+jDAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,0MACVC,OAAQ,01BAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,+KACVC,OAAQ,yoCAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,0NACVC,OAAQ,itDA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,+MACVC,OAAQ,6yCAwBV,CACE9zC,GAAI,OACJ6zC,SAAU,6RACVC,OAAQ,4iDAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,0QACVC,OAAQ,87CCnNmB,CAC/B9zC,GAAI,OACJgpC,MAAO,+GACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,kKACVC,OAAQ,mwFA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,4GACVC,OAAQ,2yCAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,+PACVC,OAAQ,g1BAsBV,CACE9zC,GAAI,OACJ6zC,SAAU,4OACVC,OAAQ,0/CAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,uMACVC,OAAQ,89CAuCV,CACE9zC,GAAI,OACJ6zC,SAAU,oNACVC,OAAQ,yiCAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,qLACVC,OAAQ,qnBAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,6HACVC,OAAQ,q4CAoCV,CACE9zC,GAAI,OACJ6zC,SAAU,0IACVC,OAAQ,8oBCvOgB,CAC5B9zC,GAAI,OACJgpC,MAAO,4EACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,sPACVC,OAAQ,yyDAWV,CACE9zC,GAAI,OACJ6zC,SAAU,gOACVC,OAAQ,onEAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,uLACVC,OAAQ,0uCAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,iPACVC,OAAQ,qhEA0BV,CACE9zC,GAAI,OACJ6zC,SAAU,yLACVC,OAAQ,w3FA6BV,CACE9zC,GAAI,OACJ6zC,SAAU,8IACVC,OAAQ,ugDAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,sLACVC,OAAQ,0pEAkBV,CACE9zC,GAAI,OACJ6zC,SACE,qSACFC,OAAQ,g9CAaV,CACE9zC,GAAI,OACJ6zC,SACE,uVACFC,OAAQ,8/CAqBV,CACE9zC,GAAI,OACJ6zC,SAAU,qLACVC,OAAQ,m3DCjNa,CACzB9zC,GAAI,OACJgpC,MAAO,+DACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,0NACVC,OAAQ,myDAWV,CACE9zC,GAAI,OACJ6zC,SAAU,yNACVC,OAAQ,m9DAkBV,CACE9zC,GAAI,OACJ6zC,SAAU,oJACVC,OAAQ,q2DAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,2KACVC,OAAQ,kwCAmBV,CACE9zC,GAAI,OACJ6zC,SAAU,2OACVC,OAAQ,4mEAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,uQACVC,OAAQ,o8FAoBV,CACE9zC,GAAI,OACJ6zC,SAAU,gLACVC,OAAQ,w7CAuBV,CACE9zC,GAAI,OACJ6zC,SAAU,6MACVC,OAAQ,60DAqCV,CACE9zC,GAAI,OACJ6zC,SAAU,wKACVC,OAAQ,o3DAmCV,CACE9zC,GAAI,OACJ6zC,SAAU,4LACVC,OAAQ,ukFC/O0B,CACtC9zC,GAAI,OACJgpC,MAAO,0GACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,4DACVC,OAAQ,6kKA0DV,CACE9zC,GAAI,OACJ6zC,SAAU,2IACVC,OAAQ,2qGAgCV,CACE9zC,GAAI,OACJ6zC,SAAU,8MACVC,OAAQ,2zFA2DV,CACE9zC,GAAI,OACJ6zC,SAAU,iPACVC,OAAQ,mhEAmDV,CACE9zC,GAAI,OACJ6zC,SAAU,6LACVC,OAAQ,2tFC3NsB,CAClC9zC,GAAI,OACJgpC,MAAO,mFACP4K,UAAW,CACT,CACE5zC,GAAI,OACJ6zC,SAAU,8KACVC,OAAQ,ojOA4JV,CACE9zC,GAAI,OACJ6zC,SAAU,gJACVC,OAAQ,i+FAgBV,CACE9zC,GAAI,OACJ6zC,SAAU,qNACVC,OAAQ,sgHAiBV,CACE9zC,GAAI,OACJ6zC,SAAU,+JACVC,OAAQ,sqEA8CV,CACE9zC,GAAI,OACJ6zC,SAAU,4EACVC,OAAQ,msEA+CV,CACE9zC,GAAI,OACJ6zC,SAAU,uGACVC,OAAQ,mpCA4BV,CACE9zC,GAAI,OACJ6zC,SAAU,sGACVC,OAAQ,q2BA2BV,CACE9zC,GAAI,OACJ6zC,SAAU,qGACVC,OAAQ,42BCrVDhrB,GAAI,CACbirB,WAvBejL,GAAOkL,OAAO;;;;;;;;;;;;;;;EAwB7BC,SAPanL,GAAO6B,GAAG;;;GCMd7hB,GAAI,CACforB,KAxBWpL,GAAO6B,GAAG;;;;;;;;;;;;;;;;;;;;;GCAR,SAASuJ,GAAInL,GAAY,IAAX,KAAEtkC,GAAMskC,EAsBnC,OACEY,EAAAA,GAAAA,MAAC7gB,GAAEorB,KAAI,CAAAhjD,SAAA,CACJuT,EAAKukC,QACJC,EAAAA,GAAAA,KAAA,MAAA/3C,SACGuT,EAAKukC,MAAM9+C,MAAM,MAAM8rC,KAAI,CAACgJ,EAAM5mB,KACjCuxB,EAAAA,GAAAA,MAAA,QAAAz4C,SAAA,CACG8tC,GACDiK,EAAAA,GAAAA,KAAA,WAFS7wB,OAOhB3T,EAAKomC,cACJ5B,EAAAA,GAAAA,KAAA,KAAGh4C,wBAAyB,CAAEqhB,OAAQ7N,EAAKomC,eAE5CpmC,EAAKyB,OACJ+iC,EAAAA,GAAAA,KAAA,OAAA/3C,UACE+3C,EAAAA,GAAAA,KAAA,QAAA/3C,SAAOuT,EAAKyB,SAtCpB,WACE,IAAKzB,EAAKjO,OAASiO,EAAK+E,IACtB,OAAO,KAEP,GAAI/E,EAAKjO,MAAQiO,EAAK+E,IAAK,CAEzB,OADmB/E,EAAKjO,MAAQiO,EAAK+E,KAAO/E,EAAK+E,IAAIo8B,WAAW,aAK5DqD,EAAAA,GAAAA,KAAA,KAAA/3C,UACE+3C,EAAAA,GAAAA,KAAA,KAAGj9B,KAAMvH,EAAK+E,IAAKrS,OAAO,SAASg9C,IAAI,sBAAqBjjD,SACzDuT,EAAKjO,UALLyyC,EAAAA,GAAAA,KAAA,KAAG1zC,MAAO,CAAEqT,MAAO,OAAQ1X,SAAC,sDAUvC,CAEJ,CAsBKkjD,KAGP,CC7CA,MAcatrB,GAAI,CACfurB,MAfYvL,GAAO6B,GAAG;;;;;;;;;;;;GCAT,SAAS0J,GAAKtL,GAAY,IAAX,KAAEtkC,GAAMskC,EACpC,MAAMuL,EAAa7vC,EAAK+E,KAAO/E,EAAK+E,IAAIo8B,WAAW,YAEnD,OACE+D,EAAAA,GAAAA,MAAC7gB,GAAEurB,MAAK,CAAAnjD,SAAA,CACLuT,EAAKukC,QACJC,EAAAA,GAAAA,KAAA,QAAA/3C,UACE+3C,EAAAA,GAAAA,KAAA,KAAA/3C,SAAIuT,EAAKukC,UAIZvkC,EAAKomC,cAAe5B,EAAAA,GAAAA,KAAA,KAAA/3C,SAAIuT,EAAKomC,cAC7ByJ,GACCrL,EAAAA,GAAAA,KAAA,OAAK5c,IAAK5nB,EAAK+E,IAAK+qC,IAAK9vC,EAAKukC,SAE9BC,EAAAA,GAAAA,KAAA,KAAA/3C,SAAG,0DAKX,CCpBA,MAYa43B,GAAI,CACf0rB,MAbY1L,GAAO6B,GAAG;;;;;;;;;;GCAT,SAAS6J,GAAKzL,GAAY,IAAX,KAAEtkC,GAAMskC,EACpC,MAAMuL,EAAa7vC,EAAK+E,KAAO/E,EAAK+E,IAAIo8B,WAAW,iCAEnD,OACE+D,EAAAA,GAAAA,MAAC7gB,GAAE0rB,MAAK,CAAAtjD,SAAA,CACLuT,EAAKukC,QAASC,EAAAA,GAAAA,KAAA,MAAA/3C,SAAKuT,EAAKukC,QACxBvkC,EAAKomC,cAAe5B,EAAAA,GAAAA,KAAA,KAAA/3C,SAAIuT,EAAKomC,cAC7ByJ,GACCrL,EAAAA,GAAAA,KAAA,UAAQ5c,IAAK5nB,EAAK+E,IAAKw/B,MAAOvkC,EAAKukC,MAAOyL,YAAY,IAAIC,iBAAe,KAEzEzL,EAAAA,GAAAA,KAAA,KAAG1zC,MAAO,CAAEqT,MAAO,OAAQ1X,SAAC,0DAKpC,CCVe,SAAS6iD,GAAUhL,GAAgC,IAA/B,KAAEtkC,EAAI,SAAEkwC,EAAQ,SAAEC,GAAU7L,EAC7D,MAAO8L,IAAc7yB,EAAAA,EAAAA,UAAS,IAExB8yB,EAASH,EAAS/mD,SAAS6W,EAAKzE,IAMhC+0C,EAAkB7jD,GACjBA,EACEA,EAAS6tC,QAAOllC,IACrB,MAAMm7C,EAAsC,kBAAhBn7C,EAAMmvC,OAC7BnvC,EAAMmvC,MAAM5+C,cAAcwD,SAASinD,EAAWzqD,eAC7C6qD,EAAqBF,EAAel7C,EAAM3I,UAAUlJ,OAAS,EACnE,OAAOgtD,GAAgBC,CAAkB,IALrB,GAUlBC,EAAgBhkD,IACnBA,GAAY,IAAI8kC,KAAIn8B,IAAK,IACrBA,EACHmvC,MAAOnvC,EAAMmvC,OAAS,gBACtB93C,SAAUgkD,EAAar7C,EAAM3I,cAG3BikD,EAAmBJ,EAAeG,EAAazwC,EAAKvT,WAE1D,OACEy4C,EAAAA,GAAAA,MAAC7gB,GAAEirB,WAAU,CAAA7iD,SAAA,CAEI,UAAduT,EAAK3a,MAAoBm/C,EAAAA,GAAAA,KAACoL,GAAK,CAAC5vC,KAAMA,IACvB,UAAdA,EAAK3a,MAAoBm/C,EAAAA,GAAAA,KAACuL,GAAK,CAAC/vC,KAAMA,IACtB,SAAdA,EAAK3a,MAAmBm/C,EAAAA,GAAAA,KAACiL,GAAI,CAACzvC,KAAMA,KAEhCwkC,EAAAA,GAAAA,KAACJ,GAAM,CAELzf,QAASA,KAAMgsB,OAjCbC,EAiCoB5wC,EAAKzE,QAhCvC40C,EAASS,GADKA,KAiC6B,EAC/BvrD,KAAK,SACLk/C,MAAOvkC,EAAKukC,OAHPvkC,EAAKzE,IAOnB80C,GAAUK,EAAiBntD,OAAS,IACnCihD,EAAAA,GAAAA,KAACngB,GAAEmrB,SAAQ,CAAA/iD,SACRikD,EAAiBnf,KAAKn8B,IACrBovC,EAAAA,GAAAA,KAAA,OAAA/3C,UACE+3C,EAAAA,GAAAA,KAAC8K,GAAU,CAETtvC,KAAM5K,EACN86C,SAAUA,EACVC,SAAWS,GAAWT,EAASS,IAH1Bx7C,EAAMmG,KAFLnG,EAAMmG,UAhBjByE,EAAKzE,GA6BhB,CC/De,SAASs1C,GAAevM,GAAY,IAAX,KAAEtkC,GAAMskC,EAC9C,MAAO4L,EAAUY,IAAevzB,EAAAA,EAAAA,UAAS,IA6BzC,OACEinB,EAAAA,GAAAA,KAAC8K,GAAU,CAETtvC,KAAMA,EACNkwC,SAAUA,EACVC,SAhCkBS,IACpB,MAAMG,EAAW,SAACjqC,EAAMkqC,GAAyB,IAAfC,EAAI3tD,UAAAC,OAAA,QAAAkyC,IAAAnyC,UAAA,GAAAA,UAAA,GAAG,GACvC,GAAIwjB,EAAKvL,KAAOy1C,EAAU,MAAO,IAAIC,EAAMnqC,EAAKvL,IAChD,GAAIuL,EAAKra,SACP,IAAK,MAAM2I,KAAS0R,EAAKra,SAAU,CACjC,MAAMykD,EAASH,EAAS37C,EAAO47C,EAAU,IAAIC,EAAMnqC,EAAKvL,KACxD,GAAI21C,EAAQ,OAAOA,CACrB,CAEF,OAAO,IACT,EAEMC,EAAUJ,EAAS/wC,EAAM4wC,GAE/B,GAAGO,EACD,GAAIjB,EAAS/mD,SAASynD,GAAS,CAE7B,MAAMQ,EAAaD,EAAQnrD,MAAM,EAAGmrD,EAAQpgD,QAAQ6/C,IACpDE,EAAYM,EACd,MACEN,EAAYK,QAGdL,EAAY,GACd,GAKO9wC,EAAKzE,GAMhB,CCxCA,MA4Ba8oB,GAAI,CACbgtB,MA7BUhN,GAAO6B,GAAG;;;EA8BpBoL,KAzBSjN,GAAO6B,GAAG;;;;;;EA0BnBqL,YAlBgBlN,GAAO6B,GAAG;;EAmB1BsL,QAfYnN,GAAOoN,OAAO;;;;EAgB1BC,QAVYrN,GAAOsN,OAAO;;;GCnBjBttB,GAAI,CACbutB,QALYvN,GAAO6B,GAAG;;GCAX,SAAS0L,GAAOtN,GAAc,IAAZ,QAACuN,GAAQvN,EACtC,OACIY,EAAAA,GAAAA,MAAC7gB,GAAEutB,QAAO,CAAAnlD,SAAA,EACN+3C,EAAAA,GAAAA,KAAA,MAAA/3C,SAAI,kEACJy4C,EAAAA,GAAAA,MAAA,KAAAz4C,SAAA,CAAG,8EAAgBolD,EAAQC,cAC1BD,EAAQA,QAAQtgB,KAAI,CAAC2f,EAAQv9B,KAC1BuxB,EAAAA,GAAAA,MAAA,OAAAz4C,SAAA,EACIy4C,EAAAA,GAAAA,MAAA,MAAAz4C,SAAA,CAAI,yCAASykD,EAAO9B,aACpBlK,EAAAA,GAAAA,MAAA,KAAAz4C,SAAA,CAAG,sDAAYykD,EAAOa,eACtB7M,EAAAA,GAAAA,MAAA,KAAAz4C,SAAA,CAAG,gGAAmBykD,EAAOc,kBAC7B9M,EAAAA,GAAAA,MAAA,KAAAz4C,SAAA,CAAG,yCAASykD,EAAOe,MAAM,MAAIf,EAAO1U,OAAO,8CAJrC7oB,OAS1B,CCjBAu+B,eAAeC,GAAe/C,EAAU2C,GACtC,IACE,MAAMK,QAAiBC,MAAM,oCAAqC,CAChEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBtnD,KAAMsiC,KAAKC,UAAU,CACnB4hB,SAAUA,EAASA,SACnB2C,WAAYA,MAIVltC,QAAautC,EAASvtC,OAC5Bib,QAAQxoB,IAAI,0FAAqBuN,GAEjC,MAAM7E,EAAOutB,KAAK4O,MAAMt3B,GAEL,IAAD2tC,EAAlB,IAAKJ,EAASlqB,GACZ,MAAM,IAAI9/B,OAAgB,QAAVoqD,EAAAxyC,EAAK+f,aAAK,IAAAyyB,OAAA,EAAVA,EAAY9yB,UAAW,6LAGzC,MAAMuyB,EAAQjyC,EAAKiyC,MACnB,GAAI/rD,MAAM+rD,GACR,MAAM,IAAI7pD,MAAM,+OAGlB,OAAO6pD,CACT,CAAE,MAAOlyB,GAEP,OADAD,QAAQC,MAAM,qIAA6BA,GACpC,CACT,CACF,CAwBA,SAtBAmyB,eAA+B7rD,EAAMosD,GACnC,MAAMZ,EAAU,GAChB,IAAIa,EAAa,EAEjB,IAAK,MAAMtD,KAAY/oD,EAAK8oD,UAAW,CACrC,MAAM4C,EAAaU,EAAYrD,EAAS7zC,KAAO,GACzC02C,QAAcE,GAAe/C,EAAU2C,GACvCvV,EAAUyV,EAAQ,IAAO,GAC/BS,GAAclW,EACdqV,EAAQv+C,KAAK,CACX87C,SAAUA,EAASA,SACnB2C,aACAC,cAAe5C,EAASC,OACxB4C,QACAzV,UAEJ,CAGA,MAAO,CAAEqV,UAASC,YADEY,EAAarsD,EAAK8oD,UAAU5rD,QAAQovD,QAAQ,GAElE,ECjDarB,GAAOhN,IAAe,IAAd,KAAEj+C,GAAMi+C,EACzB,MAAOmO,EAAaG,IAAkBr1B,EAAAA,EAAAA,UAAS,CAAC,IACzCs0B,EAASgB,IAAct1B,EAAAA,EAAAA,UAAS,MAsBjCu1B,EAAiBzsD,EAAK8oD,UAAU4D,OACjC3D,IAAQ,IAAA4D,EAAA,MAA0C,MAAb,QAAxBA,EAAAP,EAAYrD,EAAS7zC,WAAG,IAAAy3C,OAAA,EAAxBA,EAA0B1qD,OAAa,IAGzD,OACIk8C,EAAAA,GAAAA,KAACngB,GAAEgtB,MAAK,CAAA5kD,SACHolD,GAAWrN,EAAAA,GAAAA,KAACoN,GAAO,CAACC,QAASA,KAE1B3M,EAAAA,GAAAA,MAAC7gB,GAAEitB,KAAI,CAAA7kD,SAAA,CACFpG,EAAK8oD,UAAU5d,KAAK6d,IACjBlK,EAAAA,GAAAA,MAAA,OAAAz4C,SAAA,EACI+3C,EAAAA,GAAAA,KAAA,MAAA/3C,SAAK2iD,EAASA,YACd5K,EAAAA,GAAAA,KAAA,YACIyO,KAAK,IACLnoD,MAAO2nD,EAAYrD,EAAS7zC,KAAO,GACnCgqC,SAAW3gD,IAAMsuD,OAjCjBC,EAiCoC/D,EAAS7zC,GAjCjC8zC,EAiCqCzqD,EAAE8N,OAAO5H,WAhClF8nD,GAAgBzb,IAAI,IAAWA,EAAM,CAACgc,GAAa9D,MAD5B6D,IAACC,EAAY9D,CAiCqD,EACjEhK,YAAY,mGANV+J,EAAS7zC,OAUvBipC,EAAAA,GAAAA,KAAA,UAAQ7f,QAjCHutB,UACjB,MAAML,QAAgBuB,GAAgB/sD,EAAMosD,GAC5CI,EAAWhB,EAAQ,EA+BwBvlD,UAAWwmD,EAAermD,SAAC,sFAZjDpG,EAAKkV,KAehB,EChDL81C,GAAQ/M,IAAiB,IAAhB,OAAE+O,GAAQ/O,EAC5B,MAAOgP,EAAeC,IAAoBh2B,EAAAA,EAAAA,UAAS,MAOnD,OACIinB,EAAAA,GAAAA,KAACngB,GAAEktB,YAAW,CAAA9kD,SACT4mD,EAAO9hB,KAAKlrC,IACT6+C,EAAAA,GAAAA,MAAC7gB,GAAEmtB,QAAO,CAAA/kD,SAAA,EACN+3C,EAAAA,GAAAA,KAACngB,GAAEqtB,QAAO,CAAC/sB,QAASA,IATXt+B,KAErBktD,EAAiBD,IAAkBjtD,EAAKkV,GAAK,KAAOlV,EAAKkV,GAAG,EAOtBi4C,CAAgBntD,GAAMoG,SAC3CpG,EAAKk+C,QAET+O,IAAkBjtD,EAAKkV,KAAMipC,EAAAA,GAAAA,KAAC8M,GAAI,CAACjrD,KAAMA,MAJ9BA,EAAKkV,OAOb,ECEX8oB,GAAI,CACbovB,KAvBSpP,GAAO6B,GAAG;;;;EAwBnBsL,QAlBYnN,GAAOoN,OAAO;;;;;;;;;EAmB1BC,QARYrN,GAAOsN,OAAO;;;GCZjB8B,GAAOA,KAEhBvO,EAAAA,GAAAA,MAAC7gB,GAAEovB,KAAI,CAAAhnD,SAAA,EACL+3C,EAAAA,GAAAA,KAACqM,GAAe,CAAC7wC,KAAMA,MACvBwkC,EAAAA,GAAAA,KAACyB,GAAI,KACLf,EAAAA,GAAAA,MAAC7gB,GAAEmtB,QAAO,CAAA/kD,SAAA,EACR+3C,EAAAA,GAAAA,KAACngB,GAAEqtB,QAAO,CAAAjlD,SAAC,oCACX+3C,EAAAA,GAAAA,KAAC6M,GAAK,CAACgC,OAAQhtD,WCEvB,SAXA,WACE,OACE6+C,EAAAA,GAAAA,MAAA,OAAKpC,UAAU,MAAKr2C,SAAA,EAClB+3C,EAAAA,GAAAA,KAACgB,GAAM,KACPhB,EAAAA,GAAAA,KAACyB,GAAI,KACLzB,EAAAA,GAAAA,KAACiP,GAAI,MAIX,ECAA,GAZyBC,IACnBA,GAAeA,aAAuBC,UACxC,6BAAqBplC,MAAK+1B,IAAkD,IAAjD,OAAEsP,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAAS1P,EACpEsP,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EAAY,GAExB,ECNWO,EAAAA,WACXhwD,SAASiwD,eAAe,SAErB3qD,QACHi7C,EAAAA,GAAAA,KAAC2P,EAAAA,WAAgB,CAAA1nD,UACf+3C,EAAAA,GAAAA,KAAC4P,GAAG,OAORC","sources":["../node_modules/react-dom/cjs/react-dom.production.min.js","../node_modules/react-dom/client.js","../node_modules/react-dom/index.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react/index.js","../node_modules/react/jsx-runtime.js","../node_modules/scheduler/cjs/scheduler.production.min.js","../node_modules/scheduler/index.js","../node_modules/shallowequal/index.js","../webpack/bootstrap","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/load script","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/jsonp chunk loading","../webpack/runtime/nonce","../node_modules/styled-components/node_modules/tslib/tslib.es6.mjs","../node_modules/stylis/src/Enum.js","../node_modules/stylis/src/Utility.js","../node_modules/stylis/src/Tokenizer.js","../node_modules/stylis/src/Serializer.js","../node_modules/stylis/src/Prefixer.js","../node_modules/stylis/src/Middleware.js","../node_modules/stylis/src/Parser.js","../node_modules/@emotion/unitless/dist/emotion-unitless.esm.js","../node_modules/styled-components/src/constants.ts","../node_modules/styled-components/src/utils/empties.ts","../node_modules/styled-components/src/utils/checkDynamicCreation.ts","../node_modules/styled-components/src/utils/determineTheme.ts","../node_modules/styled-components/src/utils/domElements.ts","../node_modules/styled-components/src/utils/escape.ts","../node_modules/styled-components/src/utils/generateAlphabeticName.ts","../node_modules/styled-components/src/utils/hash.ts","../node_modules/styled-components/src/utils/generateComponentId.ts","../node_modules/styled-components/src/utils/getComponentName.ts","../node_modules/styled-components/src/utils/isTag.ts","../node_modules/styled-components/src/utils/hoist.ts","../node_modules/styled-components/src/utils/isFunction.ts","../node_modules/styled-components/src/utils/isStyledComponent.ts","../node_modules/styled-components/src/utils/joinStrings.ts","../node_modules/styled-components/src/utils/isPlainObject.ts","../node_modules/styled-components/src/utils/mixinDeep.ts","../node_modules/styled-components/src/utils/setToString.ts","../node_modules/styled-components/src/utils/error.ts","../node_modules/styled-components/src/sheet/GroupedTag.ts","../node_modules/styled-components/src/sheet/GroupIDAllocator.ts","../node_modules/styled-components/src/sheet/Rehydration.ts","../node_modules/styled-components/src/utils/nonce.ts","../node_modules/styled-components/src/sheet/dom.ts","../node_modules/styled-components/src/sheet/Tag.ts","../node_modules/styled-components/src/sheet/Sheet.ts","../node_modules/styled-components/src/utils/stylis.ts","../node_modules/styled-components/src/models/StyleSheetManager.tsx","../node_modules/styled-components/src/models/Keyframes.ts","../node_modules/styled-components/src/utils/hyphenateStyleName.ts","../node_modules/styled-components/src/utils/flatten.ts","../node_modules/styled-components/src/utils/addUnitIfNeeded.ts","../node_modules/styled-components/src/utils/isStatelessFunction.ts","../node_modules/styled-components/src/utils/isStaticRules.ts","../node_modules/styled-components/src/models/ComponentStyle.ts","../node_modules/styled-components/src/models/ThemeProvider.tsx","../node_modules/styled-components/src/models/StyledComponent.ts","../node_modules/styled-components/src/utils/generateDisplayName.ts","../node_modules/styled-components/src/utils/interleave.ts","../node_modules/styled-components/src/constructors/css.ts","../node_modules/styled-components/src/constructors/constructWithOptions.ts","../node_modules/styled-components/src/constructors/styled.tsx","../node_modules/styled-components/src/models/GlobalStyle.ts","../node_modules/styled-components/src/models/ServerStyleSheet.tsx","../node_modules/styled-components/src/base.ts","components/buttons/Button.styles.js","components/buttons/Button.jsx","components/forms/NoteForm.styles.js","components/forms/NoteForm.jsx","components/header/Header.styles.js","components/header/Header.jsx","components/line/Line.styles.js","components/line/Line.jsx","data/demo/CodeModule/CodeModule.js","data/demo/ListModule/ListModule.js","data/demo/TextModule/TextModule.js","data/demo/demo.js","data/demo/LinkModule/LinkModule.js","data/demo/ImageModule/ImageModule.js","data/demo/VideoModule/VideoModule.js","data/ide/ide.js","data/ide/PyCharm/PyCharm.js","data/ide/SublimeText3/SublimeText3.js","data/ide/VSCode/VSCode.js","data/ide/WebStorm/WebStorm.js","data/Interview/ThemeFrontend/Definitions/Definitions.js","data/Interview/ThemeFrontend/JSQuestions/JSQuestions.js","data/Interview/ThemeFrontend/CommonQuestions/CommonQuestions.js","data/Interview/ThemeFrontend/HTMLCSS/HTMLCSS.js","data/Interview/ThemeFrontend/Network/Network.js","data/Interview/ThemeFrontend/ReactInterview/ReactInterview.js","data/Interview/ThemeFrontend/TypeScript/TypeScript.js","data/Interview/ThemeFrontend/ThemeFrontend.js","data/Interview/interview.js","data/Interview/ThemeBackend/ThemeBackend.js","data/javascript/addEventListenerFunction/addEventListenerFunction.js","data/javascript/arraysJavaScript/arraysJavaScript.js","data/javascript/AsynchronousProgramming/AsynchronousProgramming.js","data/javascript/CancelAscentAndDive/CancelAscentAndDive.js","data/javascript/Closure/ReadMoreAboutMemoryLeaksClosures/ReadMoreAboutMemoryLeaksClosures.js","data/javascript/Closure/Closure.js","data/javascript/Codewars/Task1/Task1.js","data/javascript/Codewars/Task10/Task10.js","data/javascript/Codewars/Task11/Task11.js","data/javascript/Codewars/Task12/Task12.js","data/javascript/Codewars/Task13/Task13.js","data/javascript/Codewars/Task14/Task14.js","data/javascript/Codewars/Task15/Task15.js","data/javascript/Codewars/Task2/Task2.js","data/javascript/Codewars/Task3/Task3.js","data/javascript/Codewars/Task4/Task4.js","data/javascript/Codewars/Task5/Task5.js","data/javascript/Codewars/Task6/Task6.js","data/javascript/Codewars/Task7/Task7.js","data/javascript/Codewars/Task8/Task8.js","data/javascript/Codewars/Task9/Task9.js","data/javascript/Codewars/Codewars.js","data/javascript/ContextThis/thisAndCallApplyBind/thisAndCallApplyBind.js","data/javascript/ContextThis/ContextThis.js","data/javascript/DataTypes/DataTypes.js","data/javascript/Descriptors/Descriptors.js","data/javascript/DestructuringObjectsInJS/DestructuringInJS.js","data/javascript/DifferenceBetweenNullAndUndefined/DifferenceBetweenNullAndUndefined.js","data/javascript/DragAndDrop/DragAndDrop.js","data/javascript/EventLoop/EventLoop.js","data/javascript/arrowFunctions/arrowFunctions.js","data/javascript/Functions/Functions.js","data/javascript/FunctionLevenshtein/FunctionLevenshtein.js","data/javascript/GarbageCollection/GarbageCollection.js","data/javascript/GlobalWindowObject/GlobalWindowObject.js","data/javascript/Hoisting/Hoisting.js","data/javascript/HowObjectsBecomePrimitives/HowObjectsBecomePrimitives.js","data/javascript/IIFE/IIFE.js","data/javascript/Inheritance/Inheritance.js","data/javascript/LexicalEnvironment/LexicalEnvironment.js","data/javascript/LinearEquation/LinearEquation.js","data/javascript/LivingAndNonlivingCollections/LivingAndNonlivingCollections.js","data/javascript/Methods/ArrayMethods/idempotentMethods/idempotentMethods.js","data/javascript/Methods/ArrayMethods/IterationMethods/iterationMethods.js","data/javascript/Methods/ArrayMethods/nonIdempotentMethods/nonIdempotentMethods.js","data/javascript/Methods/ArrayMethods/verificationMethods/verificationMethods.js","data/javascript/Methods/ArrayMethods/arrayMethods.js","data/javascript/Methods/StringMethods/StringAdditionalMethods/StringAdditionalMethods.js","data/javascript/Methods/StringMethods/StringReplace/stringReplace.js","data/javascript/Methods/StringMethods/StringReplaceChar/StringReplaceChar.js","data/javascript/Methods/StringMethods/StringSearchMethods/StringSearchMethods.js","data/javascript/Methods/StringMethods/StringSliceMethods/StringSliceMethods.js","data/javascript/Methods/StringMethods/StringSplitJoinMethods/StringSplitJoinMethods.js","data/javascript/Methods/StringMethods/StringTransformationsMethods/StringTransformationsMethods.js","data/javascript/Methods/StringMethods/stringMethods.js","data/javascript/Methods/NumberMethods/MathMethods/MathNumber/MathNumber.js","data/javascript/Methods/NumberMethods/MathMethods/MathRoots/MathRoots.js","data/javascript/Methods/NumberMethods/MathMethods/MathRounding/MathRounding.js","data/javascript/Methods/NumberMethods/MathMethods/MathMethods.js","data/javascript/Methods/NumberMethods/NumberFormation/NumberFormation.js","data/javascript/Methods/NumberMethods/NumberTransformationsType/NumberTransformationsType.js","data/javascript/Methods/NumberMethods/numberMethods.js","data/javascript/Methods/ObjectMethods/CheckPropertiesOfObject/CheckPropertiesOfObject.js","data/javascript/Methods/ObjectMethods/CopyJoinObject/CopyJoinObject.js","data/javascript/Methods/ObjectMethods/CreateCompareObjects/CreateCompareObjects.js","data/javascript/Methods/ObjectMethods/FreezeSealObject/FreezeSealObject.js","data/javascript/Methods/ObjectMethods/IterationOfObject/IterationOfObject.js","data/javascript/Methods/ObjectMethods/objectMethods.js","data/javascript/Methods/Cycle/BaseTypeCycle/BaseTypeCycle.js","data/javascript/Methods/Cycle/ForWhileDoWhile/ForWhileDoWhile.js","data/javascript/Methods/Cycle/CycleMethod.js","data/javascript/Methods/JSON/json.js","data/javascript/Methods/RegularExpression/MatchMethods/matchMethods.js","data/javascript/Methods/RegularExpression/RegularExpressionAdditionalMethods/RegularExpressionAdditionalMethods.js","data/javascript/Methods/RegularExpression/regularExpression.js","data/javascript/Methods/Methods.js","data/javascript/modulesJavaScript/modulesJavaScript.js","data/javascript/objectJavaScript/objectJavascript.js","data/javascript/OverrideBrowserDefaults/OverrideBrowserDefaults.js","data/javascript/PageVisibilityAPI/PageVisibilityAPI.js","data/javascript/Promises/Promises.js","data/javascript/Recursion/Recursion.js","data/javascript/Reducers/Reducers.js","data/javascript/RegularExpressions/RegularExpressions.js","data/javascript/Scope/Scope.js","data/javascript/Sets/Sets.js","data/javascript/SortFunctions/SortFunctions.js","data/javascript/StrictComparison/StrictComparison.js","data/javascript/stringsAndTemplateLiterals/stringsAndTemplateLiterals.js","data/javascript/Switch/Switch.js","data/javascript/TemporalDeadZone/TemporalDeadZone.js","data/javascript/TernaryOperatorAndLogicalOperators/TernaryOperatorAndLogicalOperators.js","data/javascript/TypeConversion/typeConversion.js","data/javascript/TypeofOperator/TypeofOperator.js","data/javascript/errorHandling/errorHandling.js","data/javascript/typeNaN/typeNaN.js","data/javascript/Classes/Classes.js","data/javascript/DOMManipulation/DOMManipulation.js","data/javascript/Variables/Variables.js","data/javascript/PrototypeAndProto/PrototypeAndProto.js","data/javascript/ForwardRef/ForwardRef.js","data/javascript/PureFunction/PureFunction.js","data/javascript/javascript.js","data/javascript/ES6/ES6.js","data/javascript/SearchFunction/SearchFunction.js","data/nextjs/nextJs.js","data/nextjs/NextJsCourseTutorial/NextJsCourseTutorial.js","data/nextjs/Routing/Routing.js","data/patterns/CI_CD_CD/CI_CD_CD.js","data/patterns/CleanCode/CleanCode.js","data/patterns/DesignPatterns/DesignPatterns.js","data/patterns/DialogPattern/DialogPattern.js","data/patterns/EventDelegation/EventDelegation.js","data/patterns/FunctionalProgramming/FunctionalProgramming.js","data/patterns/ImperativeAndDeclarativeProgramming/ImperativeAndDeclarativeProgramming.js","data/patterns/MethodologyAgile/MethodologyAgile.js","data/patterns/MethodologyBEM/MethodologyBEM.js","data/patterns/MethodologyKanban/MethodologyKanban.js","data/patterns/MethodologyScrum/MethodologyScrum.js","data/patterns/OOP/OOP.js","data/patterns/SOLID/SOLID.js","data/patterns/patterns.js","data/patterns/DRY/DRY.js","data/patterns/KISS/KISS.js","data/patterns/YAGNI/YAGNI.js","data/react/reactJS/CacheReact/CacheReact.js","data/react/reactJS/componentRerenders/componentRerendersReact.js","data/react/reactJS/FiberTree/FiberTree.js","data/react/reactJS/hooks/useCallback/useCallback.js","data/react/reactJS/hooks/useContext/useContext.js","data/react/reactJS/hooks/useEffect/useEffect.js","data/react/reactJS/hooks/useMemo/useMemo.js","data/react/reactJS/hooks/useReducer/useReducer.js","data/react/reactJS/hooks/useRef/useRef.js","data/react/reactJS/hooks/useState/useState.js","data/react/reactJS/hooks/useImperativeHandle/useImperativeHandle.js","data/react/reactJS/hooks/useLayoutEffect/useLayoutEffect.js","data/react/reactJS/hooks/useDebugValue/useDebugValue.js","data/react/reactJS/hooks/hooks.js","data/react/reactJS/memoization/memoReact.js","data/react/reactJS/polymorphismInReact/polymorphismInReact.js","data/react/reactJS/PortalsReact/PortalsReact.js","data/react/reactJS/Props/Props.js","data/Data.js","data/webTechnology/Network.js","data/webTechnology/BOM/BOM.js","data/webTechnology/Cache/cache.js","data/webTechnology/CORS/CORS.js","data/webTechnology/CRP/CRP.js","data/webTechnology/Cookie/Cookie.js","data/webTechnology/DataStructure/DataStructure.js","data/webTechnology/DOM/DOM.js","data/webTechnology/HTTPAndHTTPS/HTTPAndHTTPS.js","data/webTechnology/HTTPAndHTTPS/HTTPBase/HTTPBase.js","data/webTechnology/HTTPAndHTTPS/HTTPHeaders/HTTPHeaders.js","data/webTechnology/HTTPAndHTTPS/GETandPOST/GETandPOST.js","data/webTechnology/HTTPAndHTTPS/PATCHandPUT/PATCHandPUT.js","data/webTechnology/HTTPAndHTTPS/Options/Options.js","data/webTechnology/HTTPAndHTTPS/HttpProtocols/HttpProtocols.js","data/webTechnology/HTTPAndHTTPS/IdempotentHTTPMethods/IdempotentHTTPMethods.js","data/webTechnology/HTTPAndHTTPS/ProtocolTCPAndUDP/ProtocolTCPAndUDP.js","data/webTechnology/HTTPAndHTTPS/ConnectMethod/ConnectMethod.js","data/webTechnology/HTTPAndHTTPS/RequestResponse/RequestResponse.js","data/webTechnology/HTTPAndHTTPS/ResponseCodes/ResponseCodes.js","data/webTechnology/JWT/JWT.js","data/webTechnology/JustAndHardRequest/JustAndHardRequest.js","data/webTechnology/LocalStorage/localStorage.js","data/webTechnology/LongPollingAndShortPolling/LongPollingAndShortPolling.js","data/webTechnology/ModelOSI/ModelOSI.js","data/webTechnology/RESTAPI/RESTAPI.js","data/webTechnology/SessionStorage/sessionStorage.js","data/webTechnology/ServerSentEvents/ServerSentEvents.js","data/webTechnology/WebThreats/WebThreats.js","data/webTechnology/WebSocketAndPredecessorTechnologies/WebSocketAndPredecessorTechnologies.js","data/webTechnology/WhenUserOpensPage/WhenUserOpensPage.js","data/htmlcss/htmlcss.js","data/htmlcss/CreatingLayoutInHTMLAndCSS/CreatingLayoutInHTMLAndCSS.js","data/htmlcss/DevelopmentOfMultilingualWebsites/DevelopmentOfMultilingualWebsites.js","data/htmlcss/DifferenceBetweenScriptAsyncAndDefer/DifferenceBetweenScriptAsyncAndDefer.js","data/htmlcss/ForAttribute/ForAttribute.js","data/htmlcss/HTMLDocumentStructure/HTMLDocumentStructure.js","data/htmlcss/JoinJavaScriptFilesInHTML/JoinJavaScriptFilesInHTML.js","data/htmlcss/ProgressiveScan/ProgressiveScan.js","data/htmlcss/Style/Style.js","data/htmlcss/Style/CSSModule/CSSModule.js","data/htmlcss/Style/SASSModule/SASSModule.js","data/htmlcss/Style/SCSSModule/SCSSModule.js","data/htmlcss/Style/styledComponentsModule/styledComponentsModule.js","data/react/react.js","data/react/reactJS/reactJS.js","data/react/reactJS/PureComponent/PureComponent.js","data/react/reactJS/VirtualDom/VirtualDom.js","data/react/reactJS/TwoWayBinding/TwoWayBinding.js","data/react/reactTS/reactTS.js","data/react/ReactNative/reactNative.js","data/stateManaging/stateManaging.js","data/stateManaging/Redux/redux.js","data/stateManaging/Redux/workCycle/workCycle.js","data/stateManaging/Redux/middleware/middleware.js","data/stateManaging/Redux/ReduxToolkit/reduxToolkit.js","data/stateManaging/Redux/ReduxToolkit/reduxCreateSliceExample/reduxCreateSliceExample.js","data/git/gitParent.js","data/git/Git/git.js","data/git/gitCommands/gitCommands.js","data/git/gitFlow/gitFlow.js","data/tests/test.js","data/tests/Common/GeneralPrinciples/testProgrammingParadigms.js","data/tests/Common/GeneralPrinciples/testFunctionalProgramming.js","data/tests/Common/GeneralPrinciples/testCommonPrinciples.js","data/tests/Javascript/Browser/testEventLoop.js","data/tests/Common/Patterns/testOOP.js","data/tests/Javascript/Core/testClosure.js","data/tests/Javascript/Core/testPromise.js","data/tests/Javascript/Browser/testDOM.js","data/tests/Javascript/Browser/testBOM.js","data/tests/React/Reconciliation/testFiber.js","data/tests/Javascript/Core/testThis.js","data/tests/React/Reconciliation/testVirtualDom.js","data/tests/Javascript/Core/testDataType.js","data/tests/Common/Patterns/testSOLID.js","data/tests/Common/GeneralPrinciples/testRESTAPI.js","data/tests/Common/GeneralPrinciples/testCORS.js","data/tests/Javascript/Core/testVarLetConst.js","data/tests/Javascript/Core/testEquality.js","data/tests/Javascript/Core/testFunctions.js","data/tests/Javascript/Core/testIIFE.js","data/tests/Javascript/Core/testMapVsForEach.js","data/tests/Javascript/Core/testScope.js","data/tests/Javascript/Core/testMethodsArrays.js","data/tests/Javascript/Core/testMethodsObjects.js","data/tests/Javascript/Core/testNullVsUndefined.js","data/tests/React/Optimization/testMemo.js","data/tests/React/Hooks/testHooks.js","data/tests/React/Optimization/testPureComponent.js","data/tests/Javascript/Core/testContext.js","data/tests/React/Components/testContextReact.js","data/tests/Javascript/Core/testInheritance.js","data/tests/TypeScript/Advanced/testGenerics.js","data/tests/TypeScript/Core/testTypescript.js","data/tests/Common/GeneralPrinciples/testHTTP.js","data/tests/Common/DataStructures/testMapSet.js","data/tests/Javascript/Storage/testCookie.js","data/tests/Javascript/Storage/testCache.js","data/tests/React/testReact.js","data/tests/React/Components/testProps.js","data/tests/Javascript/Storage/testLocalStorageLocalSession.js","data/tests/React/JSX/testJSX.js","data/tests/Javascript/HTML/testSemantic.js","data/tests/Javascript/HTML/testSemanticCriticalRenderingPath.js","data/tests/Javascript/Core/testClasses.js","data/tests/Javascript/Browser/testEvents.js","data/tests/Javascript/Core/testPureFunction.js","data/tests/React/Routing/testReactRouter.js","data/tests/React/Routing/testReactRouterAPI.js","data/tests/React/Redux/testRedux.js","data/tests/React/Redux/test3ReduxMainPrinciples.js","data/tests/React/Redux/testSelectorsRedux.js","data/tests/React/Redux/testReducersRedux.js","data/tests/React/Hooks/testUseEffect.js","data/tests/React/Hooks/testUseContext.js","data/tests/React/Hooks/testCustomHooks.js","data/tests/React/Components/testWorkingWithForms.js","data/tests/React/Components/testState.js","data/tests/React/Components/testRefs.js","data/tests/React/Components/testPatternsReact.js","data/tests/React/Components/testFunctionalComponents.js","data/tests/React/Components/testLifecycleMethods.js","data/tests/React/Components/testClassComponents.js","data/tests/React/Optimization/testUseMemo&UseCallback.js","data/tests/React/Optimization/testLazyImports&DynamicImports.js","data/tests/React/Optimization/testBasicReactOptimization.js","data/tests/React/Hooks/testUseLayoutEffect.js","data/tests/React/Hooks/testUseReducer.js","data/tests/React/Hooks/testUseState.js","data/tests/React/Redux/testMiddlewares.js","data/tests/React/Redux/testHOCconnect.js","data/tests/React/Redux/testActions.js","data/tests/Common/Patterns/testDesignPatterns.js","data/tests/Common/DataStructures/testDataStructure.js","data/tests/Common/DataStructures/testDataBase.js","data/tests/Javascript/CSS/testStyleIsolation.js","data/tests/Javascript/Core/testPrototype.js","data/tests/Common/Patterns/testMethodologyBem.js","data/tests/Common/Debugging/testAppSpeedEstimation.js","data/tests/React/Routing/testRouteRef.js","data/tests/Common/GeneralPrinciples/testUseTSJS.js","data/tests/Javascript/CSS/testCSS.js","data/tests/Javascript/CSS/testSelectorsCSS.js","data/tests/TypeScript/Advanced/testEnum.js","data/tests/Common/Git/testGitFlow.js","data/tests/TypeScript/Advanced/testTypeGuards.js","data/tests/React/Testing/testE2E.js","data/tests/Javascript/HTML/testSemanticVersioning.js","data/tests/TypeScript/Advanced/testUtilityTypes.js","data/tests/TypeScript/Core/testClassesTypeScript.js","data/tests/TypeScript/Core/testModuleTypeScript.js","data/tests/TypeScript/Core/testStrictModeTypeScript.js","data/tests/Javascript/Core/testRegularExpressions.js","data/tests/Javascript/Core/testGarbageCollector.js","data/tests/Javascript/Core/testAsyncAwait.js","data/tests/Javascript/HTML/testHTML.js","data/tests/Javascript/Core/testDestructurization.js","data/tests/Javascript/Core/testTernaryOperator.js","data/tests/Javascript/Core/testSetTimeout.js","data/tests/Common/GeneralPrinciples/testWorkWithBackend.js","data/tests/React/Testing/testSnapshotTesting.js","data/tests/Common/Development/testAgile.js","data/tests/Common/GeneralPrinciples/testRequestParamJSON.js","data/tests/Javascript/Core/testSearchMethods.js","data/tests/React/Testing/testTesting.js","data/tests/React/Routing/testHooksRouting.js","data/tests/React/Routing/testHistoryLocationMatch.js","data/tests/TypeScript/Core/testUnionType&Intersection.js","data/tests/React/Hooks/testOtherHooks.js","data/tests/React/Events/testSyntheticEvent.js","data/tests/React/Events/testJSXHandlers.js","data/tests/React/Events/testBubblingEventInReact.js","data/tests/React/Events/testBindingEvents.js","data/tests/React/Components/testWhyHooks.js","data/tests/Javascript/CSS/testPosition.js","data/tests/React/Optimization/testTwoWayDataBinding.js","data/tests/Javascript/CSS/testPsevdoelement.js","data/tests/React/Components/testPropsValidation.js","data/tests/React/Components/testPortals.js","data/tests/React/Components/testControlledUncontrolled.js","data/tests/React/Optimization/testVirtualization.js","data/tests/React/Optimization/testReselect&Recompose.js","data/tests/React/Optimization/testReduxDevtools.js","data/tests/React/Optimization/testReactDevtools.js","data/tests/React/JSX/testRenderReact.js","data/tests/React/JSX/testFragments.js","data/tests/React/Optimization/testConcurrentMode&Suspense.js","data/tests/React/Optimization/testBundleOptimization.js","data/tests/Javascript/Core/testErrorHandling.js","data/tests/Common/GeneralPrinciples/testProcessors.js","data/tests/Common/GeneralPrinciples/testLibrary.js","data/tests/React/Testing/testJestEnzymeOtherTools.js","data/tests/React/Redux/testReduxAlternative.js","components/categories/Categories.styles.js","components/types/Text.styles.js","components/types/Text.jsx","components/types/Image.styles.js","components/types/Image.jsx","components/types/Video.styles.js","components/types/Video.jsx","components/categories/Categories.jsx","components/categories/ParentComponent.jsx","components/tests/Test.styles.js","components/results/Results.styles.js","components/results/Results.jsx","utils/evaluateAnswers.js","components/tests/Test.jsx","components/tests/Tests.jsx","components/main/Main.styles.js","components/main/Main.jsx","App.jsx","reportWebVitals.ts","index.tsx"],"sourcesContent":["/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),ca=require(\"scheduler\");function p(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+\"Capture\",b)}\nfunction ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a])}\nvar ia=!(\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,la=\n{},ma={};function oa(a){if(ja.call(ma,a))return!0;if(ja.call(la,a))return!1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return!1}function pa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction qa(a,b,c,d){if(null===b||\"undefined\"===typeof b||pa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var z={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1)});var ra=/[\\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(ra,\nsa);z[b]=new v(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1)});\nz.xlinkHref=new v(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||\"o\"!==b[0]&&\"O\"!==b[0]||\"n\"!==b[1]&&\"N\"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,\"\"+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:\"\":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?\"\":\"\"+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)))}\nvar ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for(\"react.element\"),wa=Symbol.for(\"react.portal\"),ya=Symbol.for(\"react.fragment\"),za=Symbol.for(\"react.strict_mode\"),Aa=Symbol.for(\"react.profiler\"),Ba=Symbol.for(\"react.provider\"),Ca=Symbol.for(\"react.context\"),Da=Symbol.for(\"react.forward_ref\"),Ea=Symbol.for(\"react.suspense\"),Fa=Symbol.for(\"react.suspense_list\"),Ga=Symbol.for(\"react.memo\"),Ha=Symbol.for(\"react.lazy\");Symbol.for(\"react.scope\");Symbol.for(\"react.debug_trace_mode\");\nvar Ia=Symbol.for(\"react.offscreen\");Symbol.for(\"react.legacy_hidden\");Symbol.for(\"react.cache\");Symbol.for(\"react.tracing_marker\");var Ja=Symbol.iterator;function Ka(a){if(null===a||\"object\"!==typeof a)return null;a=Ja&&a[Ja]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);La=b&&b[1]||\"\"}return\"\\n\"+La+a}var Na=!1;\nfunction Oa(a,b){if(!a||Na)return\"\";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,\"props\",{set:function(){throw Error();}}),\"object\"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(l){var d=l}Reflect.construct(a,[],b)}else{try{b.call()}catch(l){d=l}a.call(b.prototype)}else{try{throw Error();}catch(l){d=l}a()}}catch(l){if(l&&d&&\"string\"===typeof l.stack){for(var e=l.stack.split(\"\\n\"),\nf=d.stack.split(\"\\n\"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k=\"\\n\"+e[g].replace(\" at new \",\" at \");a.displayName&&k.includes(\"<anonymous>\")&&(k=k.replace(\"<anonymous>\",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:\"\")?Ma(a):\"\"}\nfunction Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma(\"Lazy\");case 13:return Ma(\"Suspense\");case 19:return Ma(\"SuspenseList\");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return\"\"}}\nfunction Qa(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ya:return\"Fragment\";case wa:return\"Portal\";case Aa:return\"Profiler\";case za:return\"StrictMode\";case Ea:return\"Suspense\";case Fa:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case Ca:return(a.displayName||\"Context\")+\".Consumer\";case Ba:return(a._context.displayName||\"Context\")+\".Provider\";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||\nb.name||\"\",a=\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||\"Memo\";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}\nfunction Ra(a){var b=a.type;switch(a.tag){case 24:return\"Cache\";case 9:return(b.displayName||\"Context\")+\".Consumer\";case 10:return(b._context.displayName||\"Context\")+\".Provider\";case 18:return\"DehydratedFragment\";case 11:return a=b.render,a=a.displayName||a.name||\"\",b.displayName||(\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");case 7:return\"Fragment\";case 5:return b;case 4:return\"Portal\";case 3:return\"Root\";case 6:return\"Text\";case 16:return Qa(b);case 8:return b===za?\"StrictMode\":\"Mode\";case 22:return\"Offscreen\";\ncase 12:return\"Profiler\";case 21:return\"Scope\";case 13:return\"Suspense\";case 19:return\"SuspenseList\";case 25:return\"TracingMarker\";case 1:case 0:case 17:case 2:case 14:case 15:if(\"function\"===typeof b)return b.displayName||b.name||null;if(\"string\"===typeof b)return b}return null}function Sa(a){switch(typeof a){case \"boolean\":case \"number\":case \"string\":case \"undefined\":return a;case \"object\":return a;default:return\"\"}}\nfunction Ta(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ua(a){var b=Ta(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"undefined\"!==typeof c&&\"function\"===typeof c.get&&\"function\"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=\"\"+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=Ta(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||(\"undefined\"!==typeof document?document:void 0);if(\"undefined\"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?\"\":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}function ab(a,b){b=b.checked;null!=b&&ta(a,\"checked\",b,!1)}\nfunction bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if(\"number\"===d){if(0===c&&\"\"===a.value||a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else if(\"submit\"===d||\"reset\"===d){a.removeAttribute(\"value\");return}b.hasOwnProperty(\"value\")?cb(a,b.type,c):b.hasOwnProperty(\"defaultValue\")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction db(a,b,c){if(b.hasOwnProperty(\"value\")||b.hasOwnProperty(\"defaultValue\")){var d=b.type;if(!(\"submit\"!==d&&\"reset\"!==d||void 0!==b.value&&null!==b.value))return;b=\"\"+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;\"\"!==c&&(a.name=\"\");a.defaultChecked=!!a._wrapperState.initialChecked;\"\"!==c&&(a.name=c)}\nfunction cb(a,b,c){if(\"number\"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=\"\"+a._wrapperState.initialValue:a.defaultValue!==\"\"+c&&(a.defaultValue=\"\"+c)}var eb=Array.isArray;\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0]}b=c}null==b&&(b=\"\");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=\"\"+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&\"\"!==b&&null!==b&&(a.value=b)}function kb(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}\nfunction lb(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?kb(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar mb,nb=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(\"http://www.w3.org/2000/svg\"!==a.namespaceURI||\"innerHTML\"in a)a.innerHTML=b;else{mb=mb||document.createElement(\"div\");mb.innerHTML=\"<svg>\"+b.valueOf().toString()+\"</svg>\";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,\nzoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a]})});function rb(a,b,c){return null==b||\"boolean\"===typeof b||\"\"===b?\"\":c||\"number\"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(\"\"+b).trim():b+\"px\"}\nfunction sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\"),e=rb(c,b[c],d);\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if(\"object\"!==typeof b.dangerouslySetInnerHTML||!(\"__html\"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&\"object\"!==typeof b.style)throw Error(p(62));}}\nfunction vb(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if(\"function\"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb()}}\nfunction Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":case \"onMouseEnter\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&\"function\"!==\ntypeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,\"passive\",{get:function(){Lb=!0}});window.addEventListener(\"test\",Mb,Mb);window.removeEventListener(\"test\",Mb,Mb)}catch(a){Lb=!1}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments)}\nfunction Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null}else throw Error(p(198));Qb||(Qb=!0,Rb=l)}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}\nfunction Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling}return null}\nvar ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&\"function\"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128))}catch(b){}}\nvar oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;\nfunction tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;\ndefault:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)))}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}\nfunction wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b)}else k<=b&&(a.expiredLanes|=h);f&=~h}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f}}\nfunction Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");\nfunction Sc(a,b){switch(a){case \"focusin\":case \"focusout\":Lc=null;break;case \"dragenter\":case \"dragleave\":Mc=null;break;case \"mouseover\":case \"mouseout\":Nc=null;break;case \"pointerover\":case \"pointerout\":Oc.delete(b.pointerId);break;case \"gotpointercapture\":case \"lostpointercapture\":Pc.delete(b.pointerId)}}\nfunction Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction Uc(a,b,c,d,e){switch(b){case \"focusin\":return Lc=Tc(Lc,a,b,c,d,e),!0;case \"dragenter\":return Mc=Tc(Mc,a,b,c,d,e),!0;case \"mouseover\":return Nc=Tc(Nc,a,b,c,d,e),!0;case \"pointerover\":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return!0;case \"gotpointercapture\":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c)});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction Xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift()}return!0}function Zc(a,b,c){Xc(a)&&c.delete(b)}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc)}\nfunction ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)))}\nfunction bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift()}var cd=ua.ReactCurrentBatchConfig,dd=!0;\nfunction ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d)}finally{C=e,cd.transition=f}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d)}finally{C=e,cd.transition=f}}\nfunction fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f}null!==e&&d.stopPropagation()}else hd(a,b,d,null,c)}}var id=null;\nfunction Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null}else b!==a&&(a=null);id=a;return null}\nfunction jd(a){switch(a){case \"cancel\":case \"click\":case \"close\":case \"contextmenu\":case \"copy\":case \"cut\":case \"auxclick\":case \"dblclick\":case \"dragend\":case \"dragstart\":case \"drop\":case \"focusin\":case \"focusout\":case \"input\":case \"invalid\":case \"keydown\":case \"keypress\":case \"keyup\":case \"mousedown\":case \"mouseup\":case \"paste\":case \"pause\":case \"play\":case \"pointercancel\":case \"pointerdown\":case \"pointerup\":case \"ratechange\":case \"reset\":case \"resize\":case \"seeked\":case \"submit\":case \"touchcancel\":case \"touchend\":case \"touchstart\":case \"volumechange\":case \"change\":case \"selectionchange\":case \"textInput\":case \"compositionstart\":case \"compositionend\":case \"compositionupdate\":case \"beforeblur\":case \"afterblur\":case \"beforeinput\":case \"blur\":case \"fullscreenchange\":case \"focus\":case \"hashchange\":case \"popstate\":case \"select\":case \"selectstart\":return 1;case \"drag\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"mousemove\":case \"mouseout\":case \"mouseover\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"scroll\":case \"toggle\":case \"touchmove\":case \"wheel\":case \"mouseenter\":case \"mouseleave\":case \"pointerenter\":case \"pointerleave\":return 4;\ncase \"message\":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e=\"value\"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}\nfunction od(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if(\"movementX\"in\na)return a.movementX;a!==yd&&(yd&&\"mousemove\"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return\"movementY\"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:\"Escape\",\nSpacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Nd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",\n119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},Od={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=od(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?Nd[a.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return\"keypress\"===a.type?od(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?od(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&\"CompositionEvent\"in window,be=null;ia&&\"documentMode\"in document&&(be=document.documentMode);var ce=ia&&\"TextEvent\"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case \"keyup\":return-1!==$d.indexOf(b.keyCode);case \"keydown\":return 229!==b.keyCode;case \"keypress\":case \"mousedown\":case \"focusout\":return!0;default:return!1}}function he(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case \"compositionend\":return he(b);case \"keypress\":if(32!==b.which)return null;fe=!0;return ee;case \"textInput\":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return\"compositionend\"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case \"paste\":return null;case \"keypress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"compositionend\":return de&&\"ko\"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!le[a.type]:\"textarea\"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,\"onChange\");0<b.length&&(c=new td(\"onChange\",\"change\",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if(\"change\"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye=\"oninput\"in document;if(!ye){var ze=document.createElement(\"div\");ze.setAttribute(\"oninput\",\"return;\");ye=\"function\"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent(\"onpropertychange\",Be),qe=pe=null)}function Be(a){if(\"value\"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b)}}\nfunction Ce(a,b,c){\"focusin\"===a?(Ae(),pe=b,qe=c,pe.attachEvent(\"onpropertychange\",Be)):\"focusout\"===a&&Ae()}function De(a){if(\"selectionchange\"===a||\"keyup\"===a||\"keydown\"===a)return te(qe)}function Ee(a,b){if(\"click\"===a)return te(b)}function Fe(a,b){if(\"input\"===a||\"change\"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He=\"function\"===typeof Object.is?Object.is:Ge;\nfunction Ie(a,b){if(He(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return!1}return!0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Je(c)}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):\"contains\"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c=\"string\"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&(\"text\"===a.type||\"search\"===a.type||\"tel\"===a.type||\"url\"===a.type||\"password\"===a.type)||\"textarea\"===b||\"true\"===a.contentEditable)}\nfunction Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),\"selectionStart\"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,\nd);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)))}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});\"function\"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}}\nvar Pe=ia&&\"documentMode\"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,\"selectionStart\"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,\"onSelect\"),0<d.length&&(b=new td(\"onSelect\",\"select\",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nfunction Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;return c}var We={animationend:Ve(\"Animation\",\"AnimationEnd\"),animationiteration:Ve(\"Animation\",\"AnimationIteration\"),animationstart:Ve(\"Animation\",\"AnimationStart\"),transitionend:Ve(\"Transition\",\"TransitionEnd\")},Xe={},Ye={};\nia&&(Ye=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),\"TransitionEvent\"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze(\"animationend\"),af=Ze(\"animationiteration\"),bf=Ze(\"animationstart\"),cf=Ze(\"transitionend\"),df=new Map,ef=\"abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel\".split(\" \");\nfunction ff(a,b){df.set(a,b);fa(b,[a])}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,\"on\"+kf)}ff($e,\"onAnimationEnd\");ff(af,\"onAnimationIteration\");ff(bf,\"onAnimationStart\");ff(\"dblclick\",\"onDoubleClick\");ff(\"focusin\",\"onFocus\");ff(\"focusout\",\"onBlur\");ff(cf,\"onTransitionEnd\");ha(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);ha(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);ha(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);\nha(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);fa(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));fa(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));fa(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);fa(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));fa(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));\nfa(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var lf=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),mf=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(lf));\nfunction nf(a,b,c){var d=a.type||\"unknown-event\";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}\nfunction D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+\"__bubble\";c.has(d)||(pf(b,a,2,!1),c.add(d))}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b)}var rf=\"_reactListening\"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){\"selectionchange\"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a))});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf(\"selectionchange\",!1,b))}}\nfunction pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd}c=e.bind(null,b,c,a);e=void 0;!Lb||\"touchstart\"!==b&&\"touchmove\"!==b&&\"wheel\"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Jb(function(){var d=f,e=xb(c),g=[];\na:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case \"keypress\":if(0===od(c))break a;case \"keydown\":case \"keyup\":k=Rd;break;case \"focusin\":n=\"focus\";k=Fd;break;case \"focusout\":n=\"blur\";k=Fd;break;case \"beforeblur\":case \"afterblur\":k=Fd;break;case \"click\":if(2===c.button)break a;case \"auxclick\":case \"dblclick\":case \"mousedown\":case \"mousemove\":case \"mouseup\":case \"mouseout\":case \"mouseover\":case \"contextmenu\":k=Bd;break;case \"drag\":case \"dragend\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"dragstart\":case \"drop\":k=\nDd;break;case \"touchcancel\":case \"touchend\":case \"touchmove\":case \"touchstart\":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case \"scroll\":k=vd;break;case \"wheel\":k=Zd;break;case \"copy\":case \"cut\":case \"paste\":k=Jd;break;case \"gotpointercapture\":case \"lostpointercapture\":case \"pointercancel\":case \"pointerdown\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"pointerup\":k=Td}var t=0!==(b&4),J=!t&&\"scroll\"===a,x=t?null!==h?h+\"Capture\":null:h;t=[];for(var w=d,u;null!==\nw;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}))}}if(0===(b&7)){a:{h=\"mouseover\"===a||\"pointerover\"===a;k=\"mouseout\"===a||\"pointerout\"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==\nn&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null}else k=null,n=d;if(k!==n){t=Bd;F=\"onMouseLeave\";x=\"onMouseEnter\";w=\"mouse\";if(\"pointerout\"===a||\"pointerover\"===a)t=Td,F=\"onPointerLeave\",x=\"onPointerEnter\",w=\"pointer\";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+\"leave\",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+\"enter\",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=\nvf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x)}t=null}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if(\"select\"===k||\"input\"===k&&\"file\"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else{na=De;var xa=Ce}else(k=h.nodeName)&&\"input\"===k.toLowerCase()&&(\"checkbox\"===h.type||\"radio\"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);\"focusout\"===a&&(xa=h._wrapperState)&&\nxa.controlled&&\"number\"===h.type&&cb(h,\"number\",h.value)}xa=d?ue(d):window;switch(a){case \"focusin\":if(me(xa)||\"true\"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case \"focusout\":Se=Re=Qe=null;break;case \"mousedown\":Te=!0;break;case \"contextmenu\":case \"mouseup\":case \"dragend\":Te=!1;Ue(g,c,e);break;case \"selectionchange\":if(Pe)break;case \"keydown\":case \"keyup\":Ue(g,c,e)}var $a;if(ae)b:{switch(a){case \"compositionstart\":var ba=\"onCompositionStart\";break b;case \"compositionend\":ba=\"onCompositionEnd\";\nbreak b;case \"compositionupdate\":ba=\"onCompositionUpdate\";break b}ba=void 0}else ie?ge(a,c)&&(ba=\"onCompositionEnd\"):\"keydown\"===a&&229===c.keyCode&&(ba=\"onCompositionStart\");ba&&(de&&\"ko\"!==c.locale&&(ie||\"onCompositionStart\"!==ba?\"onCompositionEnd\"===ba&&ie&&($a=nd()):(kd=e,ld=\"value\"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,\"onBeforeInput\"),\n0<d.length&&(e=new Ld(\"onBeforeInput\",\"beforeinput\",null,c,e),g.push({event:e,listeners:d}),e.data=$a)}se(g,b)})}function tf(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+\"Capture\",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}var xf=/\\r\\n?/g,yf=/\\u0000|\\uFFFD/g;function zf(a){return(\"string\"===typeof a?a:\"\"+a).replace(xf,\"\\n\").replace(yf,\"\")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}\nvar Cf=null,Df=null;function Ef(a,b){return\"textarea\"===a||\"noscript\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}\nvar Ff=\"function\"===typeof setTimeout?setTimeout:void 0,Gf=\"function\"===typeof clearTimeout?clearTimeout:void 0,Hf=\"function\"===typeof Promise?Promise:void 0,Jf=\"function\"===typeof queueMicrotask?queueMicrotask:\"undefined\"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;})}\nfunction Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,\"/$\"===c){if(0===d){a.removeChild(e);bd(b);return}d--}else\"$\"!==c&&\"$?\"!==c&&\"$!\"!==c||d++;c=e}while(c);bd(b)}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if(\"$\"===b||\"$!\"===b||\"$?\"===b)break;if(\"/$\"===b)return null}}return a}\nfunction Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(\"$\"===c||\"$!\"===c||\"$?\"===c){if(0===b)return a;b--}else\"/$\"===c&&b++}a=a.previousSibling}return null}var Nf=Math.random().toString(36).slice(2),Of=\"__reactFiber$\"+Nf,Pf=\"__reactProps$\"+Nf,uf=\"__reactContainer$\"+Nf,of=\"__reactEvents$\"+Nf,Qf=\"__reactListeners$\"+Nf,Rf=\"__reactHandles$\"+Nf;\nfunction Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[Of]||a[uf];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return{current:a}}\nfunction E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--)}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}\nfunction Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H)}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c)}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||\"Unknown\",e));return A({},c,d)}\nfunction cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return!0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c)}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a)}function ig(a){fg=!0;hg(a)}\nfunction jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg=\"\";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b}\nfunction ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a}else rg=1<<f|c<<e|d,sg=a}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0))}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null}var xg=null,yg=null,I=!1,zg=null;\nfunction Ag(a,b){var c=Bg(5,null,null,0);c.elementType=\"DELETED\";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c)}\nfunction Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=\"\"===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=\nnull,!0):!1;default:return!1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a)}}else{if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a}\nfunction Gg(a){if(a!==xg)return!1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b=\"head\"!==b&&\"body\"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling)}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(\"/$\"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--}else\"$\"!==c&&\"$!\"!==c&&\"$?\"!==c||b++}a=a.nextSibling}yg=\nnull}}else yg=xg?Lf(a.stateNode.nextSibling):null;return!0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling)}function Ig(){yg=xg=null;I=!1}function Jg(a){null===zg?zg=[a]:zg.push(a)}var Kg=ua.ReactCurrentBatchConfig;\nfunction Lg(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode}if(!d)throw Error(p(147,a));var e=d,f=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;null===a?delete b[f]:b[f]=a};b._stringRef=f;return b}if(\"string\"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}\nfunction Mg(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,\"[object Object]\"===a?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":a));}function Ng(a){var b=a._init;return b(a._payload)}\nfunction Og(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c)}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Pg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&\nnull===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Qg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||\"object\"===typeof f&&null!==f&&f.$$typeof===Ha&&Ng(f)===b.type))return d=e(b,c.props),d.ref=Lg(a,b,c),d.return=a,d;d=Rg(c.type,c.key,c.props,null,a.mode,d);d.ref=Lg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||\nb.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=Sg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Tg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if(\"string\"===typeof b&&\"\"!==b||\"number\"===typeof b)return b=Qg(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=Rg(b.type,b.key,b.props,null,a.mode,c),\nc.ref=Lg(a,null,b),c.return=a,c;case wa:return b=Sg(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Tg(b,a.mode,c,null),b.return=a,b;Mg(a,b)}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c&&\"\"!==c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,\nb,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);Mg(a,c)}return null}function y(a,b,c,d,e){if(\"string\"===typeof d&&\"\"!==d||\"number\"===typeof d)return a=a.get(c)||null,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);Mg(b,d)}return null}\nfunction n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===\nx.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if(\"function\"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x}if(n.done)return c(e,\nm),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){\"object\"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if(\"object\"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=\nf.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||\"object\"===typeof k&&null!==k&&k.$$typeof===Ha&&Ng(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=Lg(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling}f.type===ya?(d=Tg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Rg(f.type,f.key,f.props,null,a.mode,h),h.ref=Lg(a,d,f),h.return=a,a=h)}return g(a);case wa:a:{for(l=f.key;null!==\nd;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=Sg(f,a.mode,h);d.return=a;a=d}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);Mg(a,f)}return\"string\"===typeof f&&\"\"!==f||\"number\"===typeof f?(f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):\n(c(a,d),d=Qg(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Ug=Og(!0),Vg=Og(!1),Wg=Uf(null),Xg=null,Yg=null,Zg=null;function $g(){Zg=Yg=Xg=null}function ah(a){var b=Wg.current;E(Wg);a._currentValue=b}function bh(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return}}\nfunction ch(a,b){Xg=a;Zg=Yg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(dh=!0),a.firstContext=null)}function eh(a){var b=a._currentValue;if(Zg!==a)if(a={context:a,memoizedValue:b,next:null},null===Yg){if(null===Xg)throw Error(p(308));Yg=a;Xg.dependencies={lanes:0,firstContext:a}}else Yg=Yg.next=a;return b}var fh=null;function gh(a){null===fh?fh=[a]:fh.push(a)}\nfunction hh(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,gh(b)):(c.next=e.next,e.next=c);b.interleaved=c;return ih(a,d)}function ih(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var jh=!1;function kh(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}\nfunction lh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function mh(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}\nfunction nh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return ih(a,c)}e=d.interleaved;null===e?(b.next=b,gh(d)):(b.next=e.next,e.next=b);d.interleaved=b;return ih(a,c)}function oh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nfunction ph(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction qh(a,b,c,d){var e=a.updateQueue;jh=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k))}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,\nnext:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if(\"function\"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r=\"function\"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:jh=!0}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h))}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;\nh=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);rh|=g;a.lanes=g;a.memoizedState=q}}\nfunction sh(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if(\"function\"!==typeof e)throw Error(p(191,e));e.call(d)}}}var th={},uh=Uf(th),vh=Uf(th),wh=Uf(th);function xh(a){if(a===th)throw Error(p(174));return a}\nfunction yh(a,b){G(wh,b);G(vh,a);G(uh,th);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,\"\");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a)}E(uh);G(uh,b)}function zh(){E(uh);E(vh);E(wh)}function Ah(a){xh(wh.current);var b=xh(uh.current);var c=lb(b,a.type);b!==c&&(G(vh,a),G(uh,c))}function Bh(a){vh.current===a&&(E(uh),E(vh))}var L=Uf(0);\nfunction Ch(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||\"$?\"===c.data||\"$!\"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var Dh=[];\nfunction Eh(){for(var a=0;a<Dh.length;a++)Dh[a]._workInProgressVersionPrimary=null;Dh.length=0}var Fh=ua.ReactCurrentDispatcher,Gh=ua.ReactCurrentBatchConfig,Hh=0,M=null,N=null,O=null,Ih=!1,Jh=!1,Kh=0,Lh=0;function P(){throw Error(p(321));}function Mh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Nh(a,b,c,d,e,f){Hh=f;M=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Fh.current=null===a||null===a.memoizedState?Oh:Ph;a=c(d,e);if(Jh){f=0;do{Jh=!1;Kh=0;if(25<=f)throw Error(p(301));f+=1;O=N=null;b.updateQueue=null;Fh.current=Qh;a=c(d,e)}while(Jh)}Fh.current=Rh;b=null!==N&&null!==N.next;Hh=0;O=N=M=null;Ih=!1;if(b)throw Error(p(300));return a}function Sh(){var a=0!==Kh;Kh=0;return a}\nfunction Th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===O?M.memoizedState=O=a:O=O.next=a;return O}function Uh(){if(null===N){var a=M.alternate;a=null!==a?a.memoizedState:null}else a=N.next;var b=null===O?M.memoizedState:O.next;if(null!==b)O=b,N=a;else{if(null===a)throw Error(p(310));N=a;a={memoizedState:N.memoizedState,baseState:N.baseState,baseQueue:N.baseQueue,queue:N.queue,next:null};null===O?M.memoizedState=O=a:O=O.next=a}return O}\nfunction Vh(a,b){return\"function\"===typeof b?b(a):b}\nfunction Wh(a){var b=Uh(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=N,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Hh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else{var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,\neagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;M.lanes|=m;rh|=m}l=l.next}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(dh=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d}a=c.interleaved;if(null!==a){e=a;do f=e.lane,M.lanes|=f,rh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return[b.memoizedState,c.dispatch]}\nfunction Xh(a){var b=Uh(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(dh=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}function Yh(){}\nfunction Zh(a,b){var c=M,d=Uh(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,dh=!0);d=d.queue;$h(ai.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==O&&O.memoizedState.tag&1){c.flags|=2048;bi(9,ci.bind(null,c,d,e,b),void 0,null);if(null===Q)throw Error(p(349));0!==(Hh&30)||di(c,b,e)}return e}function di(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=M.updateQueue;null===b?(b={lastEffect:null,stores:null},M.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a))}\nfunction ci(a,b,c,d){b.value=c;b.getSnapshot=d;ei(b)&&fi(a)}function ai(a,b,c){return c(function(){ei(b)&&fi(a)})}function ei(a){var b=a.getSnapshot;a=a.value;try{var c=b();return!He(a,c)}catch(d){return!0}}function fi(a){var b=ih(a,1);null!==b&&gi(b,a,1,-1)}\nfunction hi(a){var b=Th();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Vh,lastRenderedState:a};b.queue=a;a=a.dispatch=ii.bind(null,M,a);return[b.memoizedState,a]}\nfunction bi(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=M.updateQueue;null===b?(b={lastEffect:null,stores:null},M.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function ji(){return Uh().memoizedState}function ki(a,b,c,d){var e=Th();M.flags|=a;e.memoizedState=bi(1|b,c,void 0,void 0===d?null:d)}\nfunction li(a,b,c,d){var e=Uh();d=void 0===d?null:d;var f=void 0;if(null!==N){var g=N.memoizedState;f=g.destroy;if(null!==d&&Mh(d,g.deps)){e.memoizedState=bi(b,c,f,d);return}}M.flags|=a;e.memoizedState=bi(1|b,c,f,d)}function mi(a,b){return ki(8390656,8,a,b)}function $h(a,b){return li(2048,8,a,b)}function ni(a,b){return li(4,2,a,b)}function oi(a,b){return li(4,4,a,b)}\nfunction pi(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function qi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return li(4,4,pi.bind(null,b,a),c)}function ri(){}function si(a,b){var c=Uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Mh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}\nfunction ti(a,b){var c=Uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Mh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function ui(a,b,c){if(0===(Hh&21))return a.baseState&&(a.baseState=!1,dh=!0),a.memoizedState=c;He(c,b)||(c=yc(),M.lanes|=c,rh|=c,a.baseState=!0);return b}function vi(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Gh.transition;Gh.transition={};try{a(!1),b()}finally{C=c,Gh.transition=d}}function wi(){return Uh().memoizedState}\nfunction xi(a,b,c){var d=yi(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(zi(a))Ai(b,c);else if(c=hh(a,b,c,d),null!==c){var e=R();gi(c,a,d,e);Bi(c,b,d)}}\nfunction ii(a,b,c){var d=yi(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(zi(a))Ai(b,e);else{var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,gh(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=hh(a,b,e,d);null!==c&&(e=R(),gi(c,a,d,e),Bi(c,b,d))}}\nfunction zi(a){var b=a.alternate;return a===M||null!==b&&b===M}function Ai(a,b){Jh=Ih=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}function Bi(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nvar Rh={readContext:eh,useCallback:P,useContext:P,useEffect:P,useImperativeHandle:P,useInsertionEffect:P,useLayoutEffect:P,useMemo:P,useReducer:P,useRef:P,useState:P,useDebugValue:P,useDeferredValue:P,useTransition:P,useMutableSource:P,useSyncExternalStore:P,useId:P,unstable_isNewReconciler:!1},Oh={readContext:eh,useCallback:function(a,b){Th().memoizedState=[a,void 0===b?null:b];return a},useContext:eh,useEffect:mi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ki(4194308,\n4,pi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ki(4194308,4,a,b)},useInsertionEffect:function(a,b){return ki(4,2,a,b)},useMemo:function(a,b){var c=Th();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=xi.bind(null,M,a);return[d.memoizedState,a]},useRef:function(a){var b=\nTh();a={current:a};return b.memoizedState=a},useState:hi,useDebugValue:ri,useDeferredValue:function(a){return Th().memoizedState=a},useTransition:function(){var a=hi(!1),b=a[0];a=vi.bind(null,a[1]);Th().memoizedState=a;return[b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=M,e=Th();if(I){if(void 0===c)throw Error(p(407));c=c()}else{c=b();if(null===Q)throw Error(p(349));0!==(Hh&30)||di(d,b,c)}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;mi(ai.bind(null,d,\nf,a),[a]);d.flags|=2048;bi(9,ci.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=Th(),b=Q.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=\":\"+b+\"R\"+c;c=Kh++;0<c&&(b+=\"H\"+c.toString(32));b+=\":\"}else c=Lh++,b=\":\"+b+\"r\"+c.toString(32)+\":\";return a.memoizedState=b},unstable_isNewReconciler:!1},Ph={readContext:eh,useCallback:si,useContext:eh,useEffect:$h,useImperativeHandle:qi,useInsertionEffect:ni,useLayoutEffect:oi,useMemo:ti,useReducer:Wh,useRef:ji,useState:function(){return Wh(Vh)},\nuseDebugValue:ri,useDeferredValue:function(a){var b=Uh();return ui(b,N.memoizedState,a)},useTransition:function(){var a=Wh(Vh)[0],b=Uh().memoizedState;return[a,b]},useMutableSource:Yh,useSyncExternalStore:Zh,useId:wi,unstable_isNewReconciler:!1},Qh={readContext:eh,useCallback:si,useContext:eh,useEffect:$h,useImperativeHandle:qi,useInsertionEffect:ni,useLayoutEffect:oi,useMemo:ti,useReducer:Xh,useRef:ji,useState:function(){return Xh(Vh)},useDebugValue:ri,useDeferredValue:function(a){var b=Uh();return null===\nN?b.memoizedState=a:ui(b,N.memoizedState,a)},useTransition:function(){var a=Xh(Vh)[0],b=Uh().memoizedState;return[a,b]},useMutableSource:Yh,useSyncExternalStore:Zh,useId:wi,unstable_isNewReconciler:!1};function Ci(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}function Di(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar Ei={isMounted:function(a){return(a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=R(),e=yi(a),f=mh(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=nh(a,f,e);null!==b&&(gi(b,a,e,d),oh(b,a,e))},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=R(),e=yi(a),f=mh(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=nh(a,f,e);null!==b&&(gi(b,a,e,d),oh(b,a,e))},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=R(),d=\nyi(a),e=mh(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=nh(a,e,d);null!==b&&(gi(b,a,d,c),oh(b,a,d))}};function Fi(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}\nfunction Gi(a,b,c){var d=!1,e=Vf;var f=b.contextType;\"object\"===typeof f&&null!==f?f=eh(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Ei;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction Hi(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Ei.enqueueReplaceState(b,b.state,null)}\nfunction Ii(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs={};kh(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=eh(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(Di(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||(b=e.state,\n\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Ei.enqueueReplaceState(e,e.state,null),qh(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.flags|=4194308)}function Ji(a,b){try{var c=\"\",d=b;do c+=Pa(d),d=d.return;while(d);var e=c}catch(f){e=\"\\nError generating stack: \"+f.message+\"\\n\"+f.stack}return{value:a,source:b,stack:e,digest:null}}\nfunction Ki(a,b,c){return{value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}function Li(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Mi=\"function\"===typeof WeakMap?WeakMap:Map;function Ni(a,b,c){c=mh(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Oi||(Oi=!0,Pi=d);Li(a,b)};return c}\nfunction Qi(a,b,c){c=mh(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Li(a,b)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){Li(a,b);\"function\"!==typeof d&&(null===Ri?Ri=new Set([this]):Ri.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}\nfunction Si(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Mi;var e=new Set;d.set(b,e)}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ti.bind(null,a,b,c),b.then(a,a))}function Ui(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return}while(null!==a);return null}\nfunction Vi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=mh(-1,1),b.tag=2,nh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Wi=ua.ReactCurrentOwner,dh=!1;function Xi(a,b,c,d){b.child=null===a?Vg(b,null,c,d):Ug(b,a.child,c,d)}\nfunction Yi(a,b,c,d,e){c=c.render;var f=b.ref;ch(b,e);d=Nh(a,b,c,d,f,e);c=Sh();if(null!==a&&!dh)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Zi(a,b,e);I&&c&&vg(b);b.flags|=1;Xi(a,b,d,e);return b.child}\nfunction $i(a,b,c,d,e){if(null===a){var f=c.type;if(\"function\"===typeof f&&!aj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,bj(a,b,f,d,e);a=Rg(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return Zi(a,b,e)}b.flags|=1;a=Pg(f,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction bj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(dh=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(dh=!0);else return b.lanes=a.lanes,Zi(a,b,e)}return cj(a,b,c,d,e)}\nfunction dj(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if(\"hidden\"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(ej,fj),fj|=c;else{if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(ej,fj),fj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(ej,fj);fj|=d}else null!==\nf?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(ej,fj),fj|=d;Xi(a,b,e,c);return b.child}function gj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152}function cj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);ch(b,e);c=Nh(a,b,c,d,f,e);d=Sh();if(null!==a&&!dh)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Zi(a,b,e);I&&d&&vg(b);b.flags|=1;Xi(a,b,c,e);return b.child}\nfunction hj(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b)}else f=!1;ch(b,e);if(null===b.stateNode)ij(a,b),Gi(b,c,d),Ii(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=eh(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q=\"function\"===typeof m||\"function\"===typeof g.getSnapshotBeforeUpdate;q||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||\n(h!==d||k!==l)&&Hi(b,g,d,l);jh=!1;var r=b.memoizedState;g.state=r;qh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||jh?(\"function\"===typeof m&&(Di(b,c,m,d),k=b.memoizedState),(h=jh||Fi(b,c,h,d,r,k,l))?(q||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===typeof g.componentDidMount&&(b.flags|=4194308)):\n(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1)}else{g=b.stateNode;lh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Ci(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;\"object\"===typeof k&&null!==k?k=eh(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m=\"function\"===typeof y||\"function\"===typeof g.getSnapshotBeforeUpdate)||\n\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&Hi(b,g,d,k);jh=!1;r=b.memoizedState;g.state=r;qh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||jh?(\"function\"===typeof y&&(Di(b,c,y,d),n=b.memoizedState),(l=jh||Fi(b,c,l,d,r,n,k)||!1)?(m||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),\"function\"===typeof g.UNSAFE_componentWillUpdate&&\ng.UNSAFE_componentWillUpdate(d,n,k)),\"function\"===typeof g.componentDidUpdate&&(b.flags|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===\na.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1)}return jj(a,b,c,d,f,e)}\nfunction jj(a,b,c,d,e,f){gj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),Zi(a,b,f);d=b.stateNode;Wi.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Ug(b,a.child,null,f),b.child=Ug(b,null,h,f)):Xi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function kj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);yh(a,b.containerInfo)}\nfunction lj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Xi(a,b,c,d);return b.child}var mj={dehydrated:null,treeContext:null,retryLane:0};function nj(a){return{baseLanes:a,cachePool:null,transitions:null}}\nfunction oj(a,b,c){var d=b.pendingProps,e=L.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(L,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:\"$!\"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:\"hidden\",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=\ng):f=pj(g,d,0,null),a=Tg(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=nj(c),b.memoizedState=mj,a):qj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return rj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:\"hidden\",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=Pg(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=Pg(h,f):(f=Tg(f,g,c,null),f.flags|=2);f.return=\nb;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?nj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=mj;return d}f=a.child;a=f.sibling;d=Pg(f,{mode:\"visible\",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}\nfunction qj(a,b){b=pj({mode:\"visible\",children:b},a.mode,0,null);b.return=a;return a.child=b}function sj(a,b,c,d){null!==d&&Jg(d);Ug(b,a.child,null,c);a=qj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}\nfunction rj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Ki(Error(p(422))),sj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=pj({mode:\"visible\",children:d.children},e,0,null);f=Tg(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Ug(b,a.child,null,g);b.child.memoizedState=nj(g);b.memoizedState=mj;return f}if(0===(b.mode&1))return sj(a,b,g,null);if(\"$!\"===e.data){d=e.nextSibling&&e.nextSibling.dataset;\nif(d)var h=d.dgst;d=h;f=Error(p(419));d=Ki(f,d,void 0);return sj(a,b,g,d)}h=0!==(g&a.childLanes);if(dh||h){d=Q;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0}e=0!==(e&(d.suspendedLanes|g))?0:e;\n0!==e&&e!==f.retryLane&&(f.retryLane=e,ih(a,e),gi(d,a,e,-1))}tj();d=Ki(Error(p(421)));return sj(a,b,g,d)}if(\"$?\"===e.data)return b.flags|=128,b.child=a.child,b=uj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=qj(b,d.children);b.flags|=4096;return b}function vj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);bh(a.return,b,c)}\nfunction wj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e)}\nfunction xj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Xi(a,b,d.children,c);d=L.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else{if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&vj(a,c,b);else if(19===a.tag)vj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}G(L,d);if(0===(b.mode&1))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Ch(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);wj(b,!1,e,c,f);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Ch(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}wj(b,!0,c,null,f);break;case \"together\":wj(b,!1,null,null,void 0);break;default:b.memoizedState=null}return b.child}\nfunction ij(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2)}function Zi(a,b,c){null!==a&&(b.dependencies=a.dependencies);rh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=Pg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Pg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}\nfunction yj(a,b,c){switch(b.tag){case 3:kj(b);Ig();break;case 5:Ah(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:yh(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Wg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(L,L.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return oj(a,b,c);G(L,L.current&1);a=Zi(a,b,c);return null!==a?a.sibling:null}G(L,L.current&1);break;case 19:d=0!==(c&\nb.childLanes);if(0!==(a.flags&128)){if(d)return xj(a,b,c);b.flags|=128}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(L,L.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,dj(a,b,c)}return Zi(a,b,c)}var zj,Aj,Bj,Cj;\nzj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Aj=function(){};\nBj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;xh(uh.current);var f=null;switch(c){case \"input\":e=Ya(a,e);d=Ya(a,d);f=[];break;case \"select\":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case \"textarea\":e=gb(a,e);d=gb(a,d);f=[];break;default:\"function\"!==typeof e.onClick&&\"function\"===typeof d.onClick&&(a.onclick=Bf)}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if(\"style\"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&\n(c||(c={}),c[g]=\"\")}else\"dangerouslySetInnerHTML\"!==l&&\"children\"!==l&&\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&\"autoFocus\"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if(\"style\"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]=\"\");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,\nc)),c=k;else\"dangerouslySetInnerHTML\"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):\"children\"===l?\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(l,\"\"+k):\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&(ea.hasOwnProperty(l)?(null!=k&&\"onScroll\"===l&&D(\"scroll\",a),f||h===k||(f=[])):(f=f||[]).push(l,k))}c&&(f=f||[]).push(\"style\",c);var l=f;if(b.updateQueue=l)b.flags|=4}};Cj=function(a,b,c,d){c!==d&&(b.flags|=4)};\nfunction Dj(a,b){if(!I)switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}\nfunction Ej(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;zh();E(Wf);E(H);Eh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Fj(zg),zg=null));Aj(a,b);S(b);return null;case 5:Bh(b);var e=xh(wh.current);\nc=b.type;if(null!==a&&null!=b.stateNode)Bj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else{if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=xh(uh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case \"dialog\":D(\"cancel\",d);D(\"close\",d);break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",d);break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],d);break;case \"source\":D(\"error\",d);break;case \"img\":case \"image\":case \"link\":D(\"error\",\nd);D(\"load\",d);break;case \"details\":D(\"toggle\",d);break;case \"input\":Za(d,f);D(\"invalid\",d);break;case \"select\":d._wrapperState={wasMultiple:!!f.multiple};D(\"invalid\",d);break;case \"textarea\":hb(d,f),D(\"invalid\",d)}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];\"children\"===g?\"string\"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=[\"children\",h]):\"number\"===typeof h&&d.textContent!==\"\"+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,\nh,a),e=[\"children\",\"\"+h]):ea.hasOwnProperty(g)&&null!=h&&\"onScroll\"===g&&D(\"scroll\",d)}switch(c){case \"input\":Va(d);db(d,f,!0);break;case \"textarea\":Va(d);jb(d);break;case \"select\":case \"option\":break;default:\"function\"===typeof f.onClick&&(d.onclick=Bf)}d=e;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;\"http://www.w3.org/1999/xhtml\"===a&&(a=kb(c));\"http://www.w3.org/1999/xhtml\"===a?\"script\"===c?(a=g.createElement(\"div\"),a.innerHTML=\"<script>\\x3c/script>\",a=a.removeChild(a.firstChild)):\n\"string\"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),\"select\"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;zj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case \"dialog\":D(\"cancel\",a);D(\"close\",a);e=d;break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",a);e=d;break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case \"source\":D(\"error\",a);e=d;break;case \"img\":case \"image\":case \"link\":D(\"error\",\na);D(\"load\",a);e=d;break;case \"details\":D(\"toggle\",a);e=d;break;case \"input\":Za(a,d);e=Ya(a,d);D(\"invalid\",a);break;case \"option\":e=d;break;case \"select\":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D(\"invalid\",a);break;case \"textarea\":hb(a,d);e=gb(a,d);D(\"invalid\",a);break;default:e=d}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];\"style\"===f?sb(a,k):\"dangerouslySetInnerHTML\"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):\"children\"===f?\"string\"===typeof k?(\"textarea\"!==\nc||\"\"!==k)&&ob(a,k):\"number\"===typeof k&&ob(a,\"\"+k):\"suppressContentEditableWarning\"!==f&&\"suppressHydrationWarning\"!==f&&\"autoFocus\"!==f&&(ea.hasOwnProperty(f)?null!=k&&\"onScroll\"===f&&D(\"scroll\",a):null!=k&&ta(a,f,k,g))}switch(c){case \"input\":Va(a);db(a,d,!1);break;case \"textarea\":Va(a);jb(a);break;case \"option\":null!=d.value&&a.setAttribute(\"value\",\"\"+Sa(d.value));break;case \"select\":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,\n!0);break;default:\"function\"===typeof e.onClick&&(a.onclick=Bf)}switch(c){case \"button\":case \"input\":case \"select\":case \"textarea\":d=!!d.autoFocus;break a;case \"img\":d=!0;break a;default:d=!1}}d&&(b.flags|=4)}null!==b.ref&&(b.flags|=512,b.flags|=2097152)}S(b);return null;case 6:if(a&&null!=b.stateNode)Cj(a,b,a.memoizedProps,d);else{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(p(166));c=xh(wh.current);xh(uh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=\nxg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1))}f&&(b.flags|=4)}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d}S(b);return null;case 13:E(L);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===\na){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1}else null!==zg&&(Fj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(L.current&1)?0===T&&(T=3):tj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return zh(),\nAj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return ah(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(L);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Dj(f,!1);else{if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Ch(a);if(null!==g){b.flags|=128;Dj(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,\ng=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(L,L.current&1|2);return b.child}a=\na.sibling}null!==f.tail&&B()>Gj&&(b.flags|=128,d=!0,Dj(f,!1),b.lanes=4194304)}else{if(!d)if(a=Ch(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Dj(f,!0),null===f.tail&&\"hidden\"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Gj&&1073741824!==c&&(b.flags|=128,d=!0,Dj(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g)}if(null!==f.tail)return b=f.tail,f.rendering=\nb,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=L.current,G(L,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Hj(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(fj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}\nfunction Ij(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return zh(),E(Wf),E(H),Eh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Bh(b),null;case 13:E(L);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig()}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(L),null;case 4:return zh(),null;case 10:return ah(b.type._context),null;case 22:case 23:return Hj(),\nnull;case 24:return null;default:return null}}var Jj=!1,U=!1,Kj=\"function\"===typeof WeakSet?WeakSet:Set,V=null;function Lj(a,b){var c=a.ref;if(null!==c)if(\"function\"===typeof c)try{c(null)}catch(d){W(a,b,d)}else c.current=null}function Mj(a,b,c){try{c()}catch(d){W(a,b,d)}}var Nj=!1;\nfunction Oj(a,b){Cf=dd;a=Me();if(Ne(a)){if(\"selectionStart\"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=\nq.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode}q=y}c=-1===h||-1===k?null:{start:h,end:k}}else c=null}c=c||{start:0,end:0}}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;\ncase 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Ci(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent=\"\":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F)}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return}n=Nj;Nj=!1;return n}\nfunction Pj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Mj(b,c,f)}e=e.next}while(e!==d)}}function Qj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}function Rj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c}\"function\"===typeof b?b(a):b.current=a}}\nfunction Sj(a){var b=a.alternate;null!==b&&(a.alternate=null,Sj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null}function Tj(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction Uj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Tj(a.return))return null;a=a.return}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child}if(!(a.flags&2))return a.stateNode}}\nfunction Vj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Vj(a,b,c),a=a.sibling;null!==a;)Vj(a,b,c),a=a.sibling}\nfunction Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling}var X=null,Xj=!1;function Yj(a,b,c){for(c=c.child;null!==c;)Zj(a,b,c),c=c.sibling}\nfunction Zj(a,b,c){if(lc&&\"function\"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c)}catch(h){}switch(c.tag){case 5:U||Lj(c,b);case 6:var d=X,e=Xj;X=null;Yj(a,b,c);X=d;Xj=e;null!==X&&(Xj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Xj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Xj;X=c.stateNode.containerInfo;Xj=!0;\nYj(a,b,c);X=d;Xj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Mj(c,b,g):0!==(f&4)&&Mj(c,b,g));e=e.next}while(e!==d)}Yj(a,b,c);break;case 1:if(!U&&(Lj(c,b),d=c.stateNode,\"function\"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount()}catch(h){W(c,b,h)}Yj(a,b,c);break;case 21:Yj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==\nc.memoizedState,Yj(a,b,c),U=d):Yj(a,b,c);break;default:Yj(a,b,c)}}function ak(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Kj);b.forEach(function(b){var d=bk.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction ck(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Xj=!1;break a;case 3:X=h.stateNode.containerInfo;Xj=!0;break a;case 4:X=h.stateNode.containerInfo;Xj=!0;break a}h=h.return}if(null===X)throw Error(p(160));Zj(f,g,e);X=null;Xj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null}catch(l){W(e,b,l)}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)dk(b,a),b=b.sibling}\nfunction dk(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:ck(b,a);ek(a);if(d&4){try{Pj(3,a,a.return),Qj(3,a)}catch(t){W(a,a.return,t)}try{Pj(5,a,a.return)}catch(t){W(a,a.return,t)}}break;case 1:ck(b,a);ek(a);d&512&&null!==c&&Lj(c,c.return);break;case 5:ck(b,a);ek(a);d&512&&null!==c&&Lj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,\"\")}catch(t){W(a,a.return,t)}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;\na.updateQueue=null;if(null!==k)try{\"input\"===h&&\"radio\"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];\"style\"===m?sb(e,q):\"dangerouslySetInnerHTML\"===m?nb(e,q):\"children\"===m?ob(e,q):ta(e,m,q,l)}switch(h){case \"input\":bb(e,f);break;case \"textarea\":ib(e,f);break;case \"select\":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,\nf.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:\"\",!1))}e[Pf]=f}catch(t){W(a,a.return,t)}}break;case 6:ck(b,a);ek(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f}catch(t){W(a,a.return,t)}}break;case 3:ck(b,a);ek(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo)}catch(t){W(a,a.return,t)}break;case 4:ck(b,a);ek(a);break;case 13:ck(b,a);ek(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||\nnull!==e.alternate&&null!==e.alternate.memoizedState||(fk=B()));d&4&&ak(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,ck(b,a),U=l):ck(b,a);ek(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Pj(4,r,r.return);break;case 1:Lj(r,r.return);var n=r.stateNode;if(\"function\"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=\nb.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount()}catch(t){W(d,c,t)}}break;case 5:Lj(r,r.return);break;case 22:if(null!==r.memoizedState){gk(q);continue}}null!==y?(y.return=r,V=y):gk(q)}m=m.sibling}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,\"function\"===typeof f.setProperty?f.setProperty(\"display\",\"none\",\"important\"):f.display=\"none\"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty(\"display\")?k.display:null,h.style.display=\nrb(\"display\",g))}catch(t){W(a,a.return,t)}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?\"\":q.memoizedProps}catch(t){W(a,a.return,t)}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling}}break;case 19:ck(b,a);ek(a);d&4&&ak(a);break;case 21:break;default:ck(b,\na),ek(a)}}function ek(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Tj(c)){var d=c;break a}c=c.return}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,\"\"),d.flags&=-33);var f=Uj(a);Wj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Uj(a);Vj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k)}a.flags&=-3}b&4096&&(a.flags&=-4097)}function hk(a,b,c){V=a;ik(a,b,c)}\nfunction ik(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Jj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Jj;var l=U;Jj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?jk(e):null!==k?(k.return=g,V=k):jk(e);for(;null!==f;)V=f,ik(f,b,c),f=f.sibling;V=e;Jj=h;U=l}kk(a,b,c)}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):kk(a,b,c)}}\nfunction kk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Qj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else{var e=b.elementType===b.type?c.memoizedProps:Ci(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate)}var f=b.updateQueue;null!==f&&sh(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=\nb.child.stateNode;break;case 1:c=b.child.stateNode}sh(b,g,c)}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case \"button\":case \"input\":case \"select\":case \"textarea\":k.autoFocus&&c.focus();break;case \"img\":k.src&&(c.src=k.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;\ndefault:throw Error(p(163));}U||b.flags&512&&Rj(b)}catch(r){W(b,b.return,r)}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}function gk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}\nfunction jk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Qj(4,b)}catch(k){W(b,c,k)}break;case 1:var d=b.stateNode;if(\"function\"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount()}catch(k){W(b,e,k)}}var f=b.return;try{Rj(b)}catch(k){W(b,f,k)}break;case 5:var g=b.return;try{Rj(b)}catch(k){W(b,g,k)}}}catch(k){W(b,b.return,k)}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return}}\nvar lk=Math.ceil,mk=ua.ReactCurrentDispatcher,nk=ua.ReactCurrentOwner,ok=ua.ReactCurrentBatchConfig,K=0,Q=null,Y=null,Z=0,fj=0,ej=Uf(0),T=0,pk=null,rh=0,qk=0,rk=0,sk=null,tk=null,fk=0,Gj=Infinity,uk=null,Oi=!1,Pi=null,Ri=null,vk=!1,wk=null,xk=0,yk=0,zk=null,Ak=-1,Bk=0;function R(){return 0!==(K&6)?B():-1!==Ak?Ak:Ak=B()}\nfunction yi(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Bk&&(Bk=yc()),Bk;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function gi(a,b,c,d){if(50<yk)throw yk=0,zk=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==Q)a===Q&&(0===(K&2)&&(qk|=c),4===T&&Ck(a,Z)),Dk(a,d),1===c&&0===K&&0===(b.mode&1)&&(Gj=B()+500,fg&&jg())}\nfunction Dk(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===Q?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Ek.bind(null,a)):hg(Ek.bind(null,a)),Jf(function(){0===(K&6)&&jg()}),c=null;else{switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc}c=Fk(c,Gk.bind(null,a))}a.callbackPriority=b;a.callbackNode=c}}\nfunction Gk(a,b){Ak=-1;Bk=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Hk()&&a.callbackNode!==c)return null;var d=uc(a,a===Q?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Ik(a,d);else{b=d;var e=K;K|=2;var f=Jk();if(Q!==a||Z!==b)uk=null,Gj=B()+500,Kk(a,b);do try{Lk();break}catch(h){Mk(a,h)}while(1);$g();mk.current=f;K=e;null!==Y?b=0:(Q=null,Z=0,b=T)}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Nk(a,e)));if(1===b)throw c=pk,Kk(a,0),Ck(a,d),Dk(a,B()),c;if(6===b)Ck(a,d);\nelse{e=a.current.alternate;if(0===(d&30)&&!Ok(e)&&(b=Ik(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Nk(a,f))),1===b))throw c=pk,Kk(a,0),Ck(a,d),Dk(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Pk(a,tk,uk);break;case 3:Ck(a,d);if((d&130023424)===d&&(b=fk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){R();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Pk.bind(null,a,tk,uk),b);break}Pk(a,tk,uk);break;case 4:Ck(a,d);if((d&4194240)===\nd)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*lk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Pk.bind(null,a,tk,uk),d);break}Pk(a,tk,uk);break;case 5:Pk(a,tk,uk);break;default:throw Error(p(329));}}}Dk(a,B());return a.callbackNode===c?Gk.bind(null,a):null}\nfunction Nk(a,b){var c=sk;a.current.memoizedState.isDehydrated&&(Kk(a,b).flags|=256);a=Ik(a,b);2!==a&&(b=tk,tk=c,null!==b&&Fj(b));return a}function Fj(a){null===tk?tk=a:tk.push.apply(tk,a)}\nfunction Ok(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return!1}catch(g){return!1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else{if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return!0;b=b.return}b.sibling.return=b.return;b=b.sibling}}return!0}\nfunction Ck(a,b){b&=~rk;b&=~qk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d}}function Ek(a){if(0!==(K&6))throw Error(p(327));Hk();var b=uc(a,0);if(0===(b&1))return Dk(a,B()),null;var c=Ik(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Nk(a,d))}if(1===c)throw c=pk,Kk(a,0),Ck(a,b),Dk(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Pk(a,tk,uk);Dk(a,B());return null}\nfunction Qk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Gj=B()+500,fg&&jg())}}function Rk(a){null!==wk&&0===wk.tag&&0===(K&6)&&Hk();var b=K;K|=1;var c=ok.transition,d=C;try{if(ok.transition=null,C=1,a)return a()}finally{C=d,ok.transition=c,K=b,0===(K&6)&&jg()}}function Hj(){fj=ej.current;E(ej)}\nfunction Kk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:zh();E(Wf);E(H);Eh();break;case 5:Bh(d);break;case 4:zh();break;case 13:E(L);break;case 19:E(L);break;case 10:ah(d.type._context);break;case 22:case 23:Hj()}c=c.return}Q=a;Y=a=Pg(a.current,null);Z=fj=b;T=0;pk=null;rk=qk=rh=0;tk=sk=null;if(null!==fh){for(b=\n0;b<fh.length;b++)if(c=fh[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g}c.pending=d}fh=null}return a}\nfunction Mk(a,b){do{var c=Y;try{$g();Fh.current=Rh;if(Ih){for(var d=M.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}Ih=!1}Hh=0;O=N=M=null;Jh=!1;Kh=0;nk.current=null;if(null===c||null===c.return){T=1;pk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&\"object\"===typeof k&&\"function\"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,\nm.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null)}var y=Ui(g);if(null!==y){y.flags&=-257;Vi(y,g,h,f,b);y.mode&1&&Si(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t}else n.add(k);break a}else{if(0===(b&1)){Si(f,l,b);tj();break a}k=Error(p(426))}}else if(I&&h.mode&1){var J=Ui(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Vi(J,g,h,f,b);Jg(Ji(k,h));break a}}f=k=Ji(k,h);4!==T&&(T=2);null===sk?sk=[f]:sk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;\nb&=-b;f.lanes|=b;var x=Ni(f,k,b);ph(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&(\"function\"===typeof w.getDerivedStateFromError||null!==u&&\"function\"===typeof u.componentDidCatch&&(null===Ri||!Ri.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Qi(f,h,b);ph(f,F);break a}}f=f.return}while(null!==f)}Sk(c)}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Jk(){var a=mk.current;mk.current=Rh;return null===a?Rh:a}\nfunction tj(){if(0===T||3===T||2===T)T=4;null===Q||0===(rh&268435455)&&0===(qk&268435455)||Ck(Q,Z)}function Ik(a,b){var c=K;K|=2;var d=Jk();if(Q!==a||Z!==b)uk=null,Kk(a,b);do try{Tk();break}catch(e){Mk(a,e)}while(1);$g();K=c;mk.current=d;if(null!==Y)throw Error(p(261));Q=null;Z=0;return T}function Tk(){for(;null!==Y;)Uk(Y)}function Lk(){for(;null!==Y&&!cc();)Uk(Y)}function Uk(a){var b=Vk(a.alternate,a,fj);a.memoizedProps=a.pendingProps;null===b?Sk(a):Y=b;nk.current=null}\nfunction Sk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Ej(c,b,fj),null!==c){Y=c;return}}else{c=Ij(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else{T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===T&&(T=5)}function Pk(a,b,c){var d=C,e=ok.transition;try{ok.transition=null,C=1,Wk(a,b,c,d)}finally{ok.transition=e,C=d}return null}\nfunction Wk(a,b,c,d){do Hk();while(null!==wk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===Q&&(Y=Q=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||vk||(vk=!0,Fk(hc,function(){Hk();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=ok.transition;ok.transition=null;\nvar g=C;C=1;var h=K;K|=4;nk.current=null;Oj(a,c);dk(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;hk(c,a,e);dc();K=h;C=g;ok.transition=f}else a.current=c;vk&&(vk=!1,wk=a,xk=e);f=a.pendingLanes;0===f&&(Ri=null);mc(c.stateNode,d);Dk(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Oi)throw Oi=!1,a=Pi,Pi=null,a;0!==(xk&1)&&0!==a.tag&&Hk();f=a.pendingLanes;0!==(f&1)?a===zk?yk++:(yk=0,zk=a):yk=0;jg();return null}\nfunction Hk(){if(null!==wk){var a=Dc(xk),b=ok.transition,c=C;try{ok.transition=null;C=16>a?16:a;if(null===wk)var d=!1;else{a=wk;wk=null;xk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Pj(8,m,f)}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Sj(m);if(m===\nl){V=null;break}if(null!==r){r.return=y;V=r;break}V=y}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J}while(null!==t)}}V=f}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Pj(9,f,f.return)}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==\nu)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Qj(9,h)}}catch(na){W(h,h.return,na)}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return}}K=e;jg();if(lc&&\"function\"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a)}catch(na){}d=!0}return d}finally{C=c,ok.transition=b}}return!1}function Xk(a,b,c){b=Ji(c,b);b=Ni(a,b,1);a=nh(a,b,1);b=R();null!==a&&(Ac(a,1,b),Dk(a,b))}\nfunction W(a,b,c){if(3===a.tag)Xk(a,a,c);else for(;null!==b;){if(3===b.tag){Xk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if(\"function\"===typeof b.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===Ri||!Ri.has(d))){a=Ji(c,a);a=Qi(b,a,1);b=nh(b,a,1);a=R();null!==b&&(Ac(b,1,a),Dk(b,a));break}}b=b.return}}\nfunction Ti(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=R();a.pingedLanes|=a.suspendedLanes&c;Q===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-fk?Kk(a,0):rk|=c);Dk(a,b)}function Yk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=R();a=ih(a,b);null!==a&&(Ac(a,b,c),Dk(a,c))}function uj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Yk(a,c)}\nfunction bk(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Yk(a,c)}var Vk;\nVk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)dh=!0;else{if(0===(a.lanes&c)&&0===(b.flags&128))return dh=!1,yj(a,b,c);dh=0!==(a.flags&131072)?!0:!1}else dh=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;ij(a,b);a=b.pendingProps;var e=Yf(b,H.current);ch(b,c);e=Nh(null,b,d,a,e,c);var f=Sh();b.flags|=1;\"object\"===typeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=\nnull,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,kh(b),e.updater=Ei,b.stateNode=e,e._reactInternals=b,Ii(b,d,a,c),b=jj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Xi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{ij(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=Zk(d);a=Ci(d,a);switch(e){case 0:b=cj(null,b,d,a,c);break a;case 1:b=hj(null,b,d,a,c);break a;case 11:b=Yi(null,b,d,a,c);break a;case 14:b=$i(null,b,d,Ci(d.type,a),c);break a}throw Error(p(306,\nd,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),cj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),hj(a,b,d,e,c);case 3:a:{kj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;lh(a,b);qh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=\nf,b.memoizedState=f,b.flags&256){e=Ji(Error(p(423)),b);b=lj(a,b,d,c,e);break a}else if(d!==e){e=Ji(Error(p(424)),b);b=lj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Vg(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else{Ig();if(d===e){b=Zi(a,b,c);break a}Xi(a,b,d,c)}b=b.child}return b;case 5:return Ah(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),\ngj(a,b),Xi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return oj(a,b,c);case 4:return yh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Ug(b,null,d,c):Xi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),Yi(a,b,d,e,c);case 7:return Xi(a,b,b.pendingProps,c),b.child;case 8:return Xi(a,b,b.pendingProps.children,c),b.child;case 12:return Xi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;\ng=e.value;G(Wg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=Zi(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=mh(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);bh(f.return,\nc,b);h.lanes|=c;break}k=k.next}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);bh(g,c,b);g=f.sibling}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return}f=g}Xi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,d=b.pendingProps.children,ch(b,c),e=eh(e),d=d(e),b.flags|=1,Xi(a,b,d,c),\nb.child;case 14:return d=b.type,e=Ci(d,b.pendingProps),e=Ci(d.type,e),$i(a,b,d,e,c);case 15:return bj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),ij(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,ch(b,c),Gi(b,d,e),Ii(b,d,e,c),jj(null,b,d,!0,a,c);case 19:return xj(a,b,c);case 22:return dj(a,b,c)}throw Error(p(156,b.tag));};function Fk(a,b){return ac(a,b)}\nfunction $k(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null}function Bg(a,b,c,d){return new $k(a,b,c,d)}function aj(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction Zk(a){if(\"function\"===typeof a)return aj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}\nfunction Pg(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction Rg(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)aj(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ya:return Tg(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return pj(c,e,f,b);default:if(\"object\"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;\nbreak a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,\"\"));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Tg(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function pj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function Qg(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}\nfunction Sg(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction al(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=\nnull}function bl(a,b,c,d,e,f,g,h,k){a=new al(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};kh(f);return a}function cl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wa,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}\nfunction dl(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}\nfunction el(a,b,c,d,e,f,g,h,k){a=bl(c,d,!0,a,e,f,g,h,k);a.context=dl(null);c=a.current;d=R();e=yi(c);f=mh(d,e);f.callback=void 0!==b&&null!==b?b:null;nh(c,f,e);a.current.lanes=e;Ac(a,e,d);Dk(a,d);return a}function fl(a,b,c,d){var e=b.current,f=R(),g=yi(e);c=dl(c);null===b.context?b.context=c:b.pendingContext=c;b=mh(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=nh(e,b,g);null!==a&&(gi(a,e,g,f),oh(a,e,g));return g}\nfunction gl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function hl(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function il(a,b){hl(a,b);(a=a.alternate)&&hl(a,b)}function jl(){return null}var kl=\"function\"===typeof reportError?reportError:function(a){console.error(a)};function ll(a){this._internalRoot=a}\nml.prototype.render=ll.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));fl(a,b,null,null)};ml.prototype.unmount=ll.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Rk(function(){fl(null,a,null,null)});b[uf]=null}};function ml(a){this._internalRoot=a}\nml.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a)}};function nl(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function ol(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}function pl(){}\nfunction ql(a,b,c,d,e){if(e){if(\"function\"===typeof d){var f=d;d=function(){var a=gl(g);f.call(a)}}var g=el(b,d,a,0,null,!1,!1,\"\",pl);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Rk();return g}for(;e=a.lastChild;)a.removeChild(e);if(\"function\"===typeof d){var h=d;d=function(){var a=gl(k);h.call(a)}}var k=bl(a,0,!1,null,null,!1,!1,\"\",pl);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Rk(function(){fl(b,k,c,d)});return k}\nfunction rl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if(\"function\"===typeof e){var h=e;e=function(){var a=gl(g);h.call(a)}}fl(b,g,a,e)}else g=ql(c,b,a,e,d);return gl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Dk(b,B()),0===(K&6)&&(Gj=B()+500,jg()))}break;case 13:Rk(function(){var b=ih(a,1);if(null!==b){var c=R();gi(b,a,1,c)}}),il(a,1)}};\nFc=function(a){if(13===a.tag){var b=ih(a,134217728);if(null!==b){var c=R();gi(b,a,134217728,c)}il(a,134217728)}};Gc=function(a){if(13===a.tag){var b=yi(a),c=ih(a,b);if(null!==c){var d=R();gi(c,a,b,d)}il(a,b)}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c}};\nyb=function(a,b,c){switch(b){case \"input\":bb(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+b)+'][type=\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e)}}}break;case \"textarea\":ib(a,c);break;case \"select\":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Qk;Hb=Rk;\nvar sl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Qk]},tl={findFiberByHostInstance:Wc,bundleType:0,version:\"18.3.1\",rendererPackageName:\"react-dom\"};\nvar ul={bundleType:tl.bundleType,version:tl.version,rendererPackageName:tl.rendererPackageName,rendererConfig:tl.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:tl.findFiberByHostInstance||\njl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:\"18.3.1-next-f1338f8080-20240426\"};if(\"undefined\"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var vl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!vl.isDisabled&&vl.supportsFiber)try{kc=vl.inject(ul),lc=vl}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=sl;\nexports.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nl(b))throw Error(p(200));return cl(a,b,null,c)};exports.createRoot=function(a,b){if(!nl(a))throw Error(p(299));var c=!1,d=\"\",e=kl;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=bl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ll(b)};\nexports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if(\"function\"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(\",\");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a){return Rk(a)};exports.hydrate=function(a,b,c){if(!ol(b))throw Error(p(200));return rl(null,a,b,!0,c)};\nexports.hydrateRoot=function(a,b,c){if(!nl(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f=\"\",g=kl;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=el(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,\ne);return new ml(b)};exports.render=function(a,b,c){if(!ol(b))throw Error(p(200));return rl(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!ol(a))throw Error(p(40));return a._reactRootContainer?(Rk(function(){rl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null})}),!0):!1};exports.unstable_batchedUpdates=Qk;\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!ol(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return rl(a,b,c,!1,d)};exports.version=\"18.3.1-next-f1338f8080-20240426\";\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=Symbol.for(\"react.element\"),n=Symbol.for(\"react.portal\"),p=Symbol.for(\"react.fragment\"),q=Symbol.for(\"react.strict_mode\"),r=Symbol.for(\"react.profiler\"),t=Symbol.for(\"react.provider\"),u=Symbol.for(\"react.context\"),v=Symbol.for(\"react.forward_ref\"),w=Symbol.for(\"react.suspense\"),x=Symbol.for(\"react.memo\"),y=Symbol.for(\"react.lazy\"),z=Symbol.iterator;function A(a){if(null===a||\"object\"!==typeof a)return null;a=z&&a[z]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nvar B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};\nE.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;\nH.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}\nfunction N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g;function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction R(a,b,e,d,c){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=\"\"===d?\".\"+Q(h,0):d,I(c)?(e=\"\",null!=a&&(e=a.replace(P,\"$&/\")+\"/\"),R(c,b,e,\"\",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?\"\":(\"\"+c.key).replace(P,\"$&/\")+\"/\")+a)),b.push(c)),1;h=0;d=\"\"===d?\".\":d+\":\";if(I(a))for(var g=0;g<a.length;g++){k=\na[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if(\"object\"===k)throw b=String(a),Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b)+\"). If you meant to render a collection of children, use an array instead.\");return h}\nfunction S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,\"\",\"\",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}\nvar U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};function X(){throw Error(\"act(...) is not supported in production builds of React.\");}\nexports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error(\"React.Children.only expected to receive a single React element child.\");return a}};exports.Component=E;exports.Fragment=p;exports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;exports.act=X;\nexports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+a+\".\");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);\nfor(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};\nexports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=X;exports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};\nexports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};exports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};\nexports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};exports.useTransition=function(){return U.current.useTransition()};exports.version=\"18.3.1\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","//\n\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== \"object\" || !objA || typeof objB !== \"object\" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n\n  // Test for A's keys different from B.\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || (ret === void 0 && valueA !== valueB)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"e3592197\" + \".chunk.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var inProgress = {};\nvar dataWebpackPrefix = \"it-notes:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/it-notes/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkit_notes\"] = self[\"webpackChunkit_notes\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","__webpack_require__.nc = undefined;","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","export var MS = '-ms-'\nexport var MOZ = '-moz-'\nexport var WEBKIT = '-webkit-'\n\nexport var COMMENT = 'comm'\nexport var RULESET = 'rule'\nexport var DECLARATION = 'decl'\n\nexport var PAGE = '@page'\nexport var MEDIA = '@media'\nexport var IMPORT = '@import'\nexport var CHARSET = '@charset'\nexport var VIEWPORT = '@viewport'\nexport var SUPPORTS = '@supports'\nexport var DOCUMENT = '@document'\nexport var NAMESPACE = '@namespace'\nexport var KEYFRAMES = '@keyframes'\nexport var FONT_FACE = '@font-face'\nexport var COUNTER_STYLE = '@counter-style'\nexport var FONT_FEATURE_VALUES = '@font-feature-values'\nexport var LAYER = '@layer'\nexport var SCOPE = '@scope'\n","/**\n * @param {number}\n * @return {number}\n */\nexport var abs = Math.abs\n\n/**\n * @param {number}\n * @return {string}\n */\nexport var from = String.fromCharCode\n\n/**\n * @param {object}\n * @return {object}\n */\nexport var assign = Object.assign\n\n/**\n * @param {string} value\n * @param {number} length\n * @return {number}\n */\nexport function hash (value, length) {\n\treturn charat(value, 0) ^ 45 ? (((((((length << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^ charat(value, 2)) << 2) ^ charat(value, 3) : 0\n}\n\n/**\n * @param {string} value\n * @return {string}\n */\nexport function trim (value) {\n\treturn value.trim()\n}\n\n/**\n * @param {string} value\n * @param {RegExp} pattern\n * @return {string?}\n */\nexport function match (value, pattern) {\n\treturn (value = pattern.exec(value)) ? value[0] : value\n}\n\n/**\n * @param {string} value\n * @param {(string|RegExp)} pattern\n * @param {string} replacement\n * @return {string}\n */\nexport function replace (value, pattern, replacement) {\n\treturn value.replace(pattern, replacement)\n}\n\n/**\n * @param {string} value\n * @param {string} search\n * @param {number} position\n * @return {number}\n */\nexport function indexof (value, search, position) {\n\treturn value.indexOf(search, position)\n}\n\n/**\n * @param {string} value\n * @param {number} index\n * @return {number}\n */\nexport function charat (value, index) {\n\treturn value.charCodeAt(index) | 0\n}\n\n/**\n * @param {string} value\n * @param {number} begin\n * @param {number} end\n * @return {string}\n */\nexport function substr (value, begin, end) {\n\treturn value.slice(begin, end)\n}\n\n/**\n * @param {string} value\n * @return {number}\n */\nexport function strlen (value) {\n\treturn value.length\n}\n\n/**\n * @param {any[]} value\n * @return {number}\n */\nexport function sizeof (value) {\n\treturn value.length\n}\n\n/**\n * @param {any} value\n * @param {any[]} array\n * @return {any}\n */\nexport function append (value, array) {\n\treturn array.push(value), value\n}\n\n/**\n * @param {string[]} array\n * @param {function} callback\n * @return {string}\n */\nexport function combine (array, callback) {\n\treturn array.map(callback).join('')\n}\n\n/**\n * @param {string[]} array\n * @param {RegExp} pattern\n * @return {string[]}\n */\nexport function filter (array, pattern) {\n\treturn array.filter(function (value) { return !match(value, pattern) })\n}\n","import {from, trim, charat, strlen, substr, append, assign} from './Utility.js'\n\nexport var line = 1\nexport var column = 1\nexport var length = 0\nexport var position = 0\nexport var character = 0\nexport var characters = ''\n\n/**\n * @param {string} value\n * @param {object | null} root\n * @param {object | null} parent\n * @param {string} type\n * @param {string[] | string} props\n * @param {object[] | string} children\n * @param {object[]} siblings\n * @param {number} length\n */\nexport function node (value, root, parent, type, props, children, length, siblings) {\n\treturn {value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column, length: length, return: '', siblings: siblings}\n}\n\n/**\n * @param {object} root\n * @param {object} props\n * @return {object}\n */\nexport function copy (root, props) {\n\treturn assign(node('', null, null, '', null, null, 0, root.siblings), root, {length: -root.length}, props)\n}\n\n/**\n * @param {object} root\n */\nexport function lift (root) {\n\twhile (root.root)\n\t\troot = copy(root.root, {children: [root]})\n\n\tappend(root, root.siblings)\n}\n\n/**\n * @return {number}\n */\nexport function char () {\n\treturn character\n}\n\n/**\n * @return {number}\n */\nexport function prev () {\n\tcharacter = position > 0 ? charat(characters, --position) : 0\n\n\tif (column--, character === 10)\n\t\tcolumn = 1, line--\n\n\treturn character\n}\n\n/**\n * @return {number}\n */\nexport function next () {\n\tcharacter = position < length ? charat(characters, position++) : 0\n\n\tif (column++, character === 10)\n\t\tcolumn = 1, line++\n\n\treturn character\n}\n\n/**\n * @return {number}\n */\nexport function peek () {\n\treturn charat(characters, position)\n}\n\n/**\n * @return {number}\n */\nexport function caret () {\n\treturn position\n}\n\n/**\n * @param {number} begin\n * @param {number} end\n * @return {string}\n */\nexport function slice (begin, end) {\n\treturn substr(characters, begin, end)\n}\n\n/**\n * @param {number} type\n * @return {number}\n */\nexport function token (type) {\n\tswitch (type) {\n\t\t// \\0 \\t \\n \\r \\s whitespace token\n\t\tcase 0: case 9: case 10: case 13: case 32:\n\t\t\treturn 5\n\t\t// ! + , / > @ ~ isolate token\n\t\tcase 33: case 43: case 44: case 47: case 62: case 64: case 126:\n\t\t// ; { } breakpoint token\n\t\tcase 59: case 123: case 125:\n\t\t\treturn 4\n\t\t// : accompanied token\n\t\tcase 58:\n\t\t\treturn 3\n\t\t// \" ' ( [ opening delimit token\n\t\tcase 34: case 39: case 40: case 91:\n\t\t\treturn 2\n\t\t// ) ] closing delimit token\n\t\tcase 41: case 93:\n\t\t\treturn 1\n\t}\n\n\treturn 0\n}\n\n/**\n * @param {string} value\n * @return {any[]}\n */\nexport function alloc (value) {\n\treturn line = column = 1, length = strlen(characters = value), position = 0, []\n}\n\n/**\n * @param {any} value\n * @return {any}\n */\nexport function dealloc (value) {\n\treturn characters = '', value\n}\n\n/**\n * @param {number} type\n * @return {string}\n */\nexport function delimit (type) {\n\treturn trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))\n}\n\n/**\n * @param {string} value\n * @return {string[]}\n */\nexport function tokenize (value) {\n\treturn dealloc(tokenizer(alloc(value)))\n}\n\n/**\n * @param {number} type\n * @return {string}\n */\nexport function whitespace (type) {\n\twhile (character = peek())\n\t\tif (character < 33)\n\t\t\tnext()\n\t\telse\n\t\t\tbreak\n\n\treturn token(type) > 2 || token(character) > 3 ? '' : ' '\n}\n\n/**\n * @param {string[]} children\n * @return {string[]}\n */\nexport function tokenizer (children) {\n\twhile (next())\n\t\tswitch (token(character)) {\n\t\t\tcase 0: append(identifier(position - 1), children)\n\t\t\t\tbreak\n\t\t\tcase 2: append(delimit(character), children)\n\t\t\t\tbreak\n\t\t\tdefault: append(from(character), children)\n\t\t}\n\n\treturn children\n}\n\n/**\n * @param {number} index\n * @param {number} count\n * @return {string}\n */\nexport function escaping (index, count) {\n\twhile (--count && next())\n\t\t// not 0-9 A-F a-f\n\t\tif (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))\n\t\t\tbreak\n\n\treturn slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))\n}\n\n/**\n * @param {number} type\n * @return {number}\n */\nexport function delimiter (type) {\n\twhile (next())\n\t\tswitch (character) {\n\t\t\t// ] ) \" '\n\t\t\tcase type:\n\t\t\t\treturn position\n\t\t\t// \" '\n\t\t\tcase 34: case 39:\n\t\t\t\tif (type !== 34 && type !== 39)\n\t\t\t\t\tdelimiter(character)\n\t\t\t\tbreak\n\t\t\t// (\n\t\t\tcase 40:\n\t\t\t\tif (type === 41)\n\t\t\t\t\tdelimiter(type)\n\t\t\t\tbreak\n\t\t\t// \\\n\t\t\tcase 92:\n\t\t\t\tnext()\n\t\t\t\tbreak\n\t\t}\n\n\treturn position\n}\n\n/**\n * @param {number} type\n * @param {number} index\n * @return {number}\n */\nexport function commenter (type, index) {\n\twhile (next())\n\t\t// //\n\t\tif (type + character === 47 + 10)\n\t\t\tbreak\n\t\t// /*\n\t\telse if (type + character === 42 + 42 && peek() === 47)\n\t\t\tbreak\n\n\treturn '/*' + slice(index, position - 1) + '*' + from(type === 47 ? type : next())\n}\n\n/**\n * @param {number} index\n * @return {string}\n */\nexport function identifier (index) {\n\twhile (!token(peek()))\n\t\tnext()\n\n\treturn slice(index, position)\n}\n","import {IMPORT, LAYER, COMMENT, RULESET, DECLARATION, KEYFRAMES} from './Enum.js'\nimport {strlen} from './Utility.js'\n\n/**\n * @param {object[]} children\n * @param {function} callback\n * @return {string}\n */\nexport function serialize (children, callback) {\n\tvar output = ''\n\n\tfor (var i = 0; i < children.length; i++)\n\t\toutput += callback(children[i], i, children, callback) || ''\n\n\treturn output\n}\n\n/**\n * @param {object} element\n * @param {number} index\n * @param {object[]} children\n * @param {function} callback\n * @return {string}\n */\nexport function stringify (element, index, children, callback) {\n\tswitch (element.type) {\n\t\tcase LAYER: if (element.children.length) break\n\t\tcase IMPORT: case DECLARATION: return element.return = element.return || element.value\n\t\tcase COMMENT: return ''\n\t\tcase KEYFRAMES: return element.return = element.value + '{' + serialize(element.children, callback) + '}'\n\t\tcase RULESET: if (!strlen(element.value = element.props.join(','))) return ''\n\t}\n\n\treturn strlen(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : ''\n}\n","import {MS, MOZ, WEBKIT} from './Enum.js'\nimport {hash, charat, strlen, indexof, replace, substr, match} from './Utility.js'\n\n/**\n * @param {string} value\n * @param {number} length\n * @param {object[]} children\n * @return {string}\n */\nexport function prefix (value, length, children) {\n\tswitch (hash(value, length)) {\n\t\t// color-adjust\n\t\tcase 5103:\n\t\t\treturn WEBKIT + 'print-' + value + value\n\t\t// animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)\n\t\tcase 5737: case 4201: case 3177: case 3433: case 1641: case 4457: case 2921:\n\t\t// text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break\n\t\tcase 5572: case 6356: case 5844: case 3191: case 6645: case 3005:\n\t\t// mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,\n\t\tcase 6391: case 5879: case 5623: case 6135: case 4599: case 4855:\n\t\t// background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)\n\t\tcase 4215: case 6389: case 5109: case 5365: case 5621: case 3829:\n\t\t\treturn WEBKIT + value + value\n\t\t// tab-size\n\t\tcase 4789:\n\t\t\treturn MOZ + value + value\n\t\t// appearance, user-select, transform, hyphens, text-size-adjust\n\t\tcase 5349: case 4246: case 4810: case 6968: case 2756:\n\t\t\treturn WEBKIT + value + MOZ + value + MS + value + value\n\t\t// writing-mode\n\t\tcase 5936:\n\t\t\tswitch (charat(value, length + 11)) {\n\t\t\t\t// vertical-l(r)\n\t\t\t\tcase 114:\n\t\t\t\t\treturn WEBKIT + value + MS + replace(value, /[svh]\\w+-[tblr]{2}/, 'tb') + value\n\t\t\t\t// vertical-r(l)\n\t\t\t\tcase 108:\n\t\t\t\t\treturn WEBKIT + value + MS + replace(value, /[svh]\\w+-[tblr]{2}/, 'tb-rl') + value\n\t\t\t\t// horizontal(-)tb\n\t\t\t\tcase 45:\n\t\t\t\t\treturn WEBKIT + value + MS + replace(value, /[svh]\\w+-[tblr]{2}/, 'lr') + value\n\t\t\t\t// default: fallthrough to below\n\t\t\t}\n\t\t// flex, flex-direction, scroll-snap-type, writing-mode\n\t\tcase 6828: case 4268: case 2903:\n\t\t\treturn WEBKIT + value + MS + value + value\n\t\t// order\n\t\tcase 6165:\n\t\t\treturn WEBKIT + value + MS + 'flex-' + value + value\n\t\t// align-items\n\t\tcase 5187:\n\t\t\treturn WEBKIT + value + replace(value, /(\\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value\n\t\t// align-self\n\t\tcase 5443:\n\t\t\treturn WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/g, '') + (!match(value, /flex-|baseline/) ? MS + 'grid-row-' + replace(value, /flex-|-self/g, '') : '') + value\n\t\t// align-content\n\t\tcase 4675:\n\t\t\treturn WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/g, '') + value\n\t\t// flex-shrink\n\t\tcase 5548:\n\t\t\treturn WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value\n\t\t// flex-basis\n\t\tcase 5292:\n\t\t\treturn WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value\n\t\t// flex-grow\n\t\tcase 6060:\n\t\t\treturn WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value\n\t\t// transition\n\t\tcase 4554:\n\t\t\treturn WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value\n\t\t// cursor\n\t\tcase 6187:\n\t\t\treturn replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value\n\t\t// background, background-image\n\t\tcase 5495: case 3959:\n\t\t\treturn replace(value, /(image-set\\([^]*)/, WEBKIT + '$1' + '$`$1')\n\t\t// justify-content\n\t\tcase 4968:\n\t\t\treturn replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value\n\t\t// justify-self\n\t\tcase 4200:\n\t\t\tif (!match(value, /flex-|baseline/)) return MS + 'grid-column-align' + substr(value, length) + value\n\t\t\tbreak\n\t\t// grid-template-(columns|rows)\n\t\tcase 2592: case 3360:\n\t\t\treturn MS + replace(value, 'template-', '') + value\n\t\t// grid-(row|column)-start\n\t\tcase 4384: case 3616:\n\t\t\tif (children && children.some(function (element, index) { return length = index, match(element.props, /grid-\\w+-end/) })) {\n\t\t\t\treturn ~indexof(value + (children = children[length].value), 'span', 0) ? value : (MS + replace(value, '-start', '') + value + MS + 'grid-row-span:' + (~indexof(children, 'span', 0) ? match(children, /\\d+/) : +match(children, /\\d+/) - +match(value, /\\d+/)) + ';')\n\t\t\t}\n\t\t\treturn MS + replace(value, '-start', '') + value\n\t\t// grid-(row|column)-end\n\t\tcase 4896: case 4128:\n\t\t\treturn (children && children.some(function (element) { return match(element.props, /grid-\\w+-start/) })) ? value : MS + replace(replace(value, '-end', '-span'), 'span ', '') + value\n\t\t// (margin|padding)-inline-(start|end)\n\t\tcase 4095: case 3583: case 4068: case 2532:\n\t\t\treturn replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value\n\t\t// (min|max)?(width|height|inline-size|block-size)\n\t\tcase 8116: case 7059: case 5753: case 5535:\n\t\tcase 5445: case 5701: case 4933: case 4677:\n\t\tcase 5533: case 5789: case 5021: case 4765:\n\t\t\t// stretch, max-content, min-content, fill-available\n\t\t\tif (strlen(value) - 1 - length > 6)\n\t\t\t\tswitch (charat(value, length + 1)) {\n\t\t\t\t\t// (m)ax-content, (m)in-content\n\t\t\t\t\tcase 109:\n\t\t\t\t\t\t// -\n\t\t\t\t\t\tif (charat(value, length + 4) !== 45)\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t// (f)ill-available, (f)it-content\n\t\t\t\t\tcase 102:\n\t\t\t\t\t\treturn replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value\n\t\t\t\t\t// (s)tretch\n\t\t\t\t\tcase 115:\n\t\t\t\t\t\treturn ~indexof(value, 'stretch', 0) ? prefix(replace(value, 'stretch', 'fill-available'), length, children) + value : value\n\t\t\t\t}\n\t\t\tbreak\n\t\t// grid-(column|row)\n\t\tcase 5152: case 5920:\n\t\t\treturn replace(value, /(.+?):(\\d+)(\\s*\\/\\s*(span)?\\s*(\\d+))?(.*)/, function (_, a, b, c, d, e, f) { return (MS + a + ':' + b + f) + (c ? (MS + a + '-span:' + (d ? e : +e - +b)) + f : '') + value })\n\t\t// position: sticky\n\t\tcase 4949:\n\t\t\t// stick(y)?\n\t\t\tif (charat(value, length + 6) === 121)\n\t\t\t\treturn replace(value, ':', ':' + WEBKIT) + value\n\t\t\tbreak\n\t\t// display: (flex|inline-flex|grid|inline-grid)\n\t\tcase 6444:\n\t\t\tswitch (charat(value, charat(value, 14) === 45 ? 18 : 11)) {\n\t\t\t\t// (inline-)?fle(x)\n\t\t\t\tcase 120:\n\t\t\t\t\treturn replace(value, /(.+:)([^;\\s!]+)(;|(\\s+)?!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value\n\t\t\t\t// (inline-)?gri(d)\n\t\t\t\tcase 100:\n\t\t\t\t\treturn replace(value, ':', ':' + MS) + value\n\t\t\t}\n\t\t\tbreak\n\t\t// scroll-margin, scroll-margin-(top|right|bottom|left)\n\t\tcase 5719: case 2647: case 2135: case 3927: case 2391:\n\t\t\treturn replace(value, 'scroll-', 'scroll-snap-') + value\n\t}\n\n\treturn value\n}\n","import {MS, MOZ, WEBKIT, RULESET, KEYFRAMES, DECLARATION} from './Enum.js'\nimport {match, charat, substr, strlen, sizeof, replace, combine, filter, assign} from './Utility.js'\nimport {copy, lift, tokenize} from './Tokenizer.js'\nimport {serialize} from './Serializer.js'\nimport {prefix} from './Prefixer.js'\n\n/**\n * @param {function[]} collection\n * @return {function}\n */\nexport function middleware (collection) {\n\tvar length = sizeof(collection)\n\n\treturn function (element, index, children, callback) {\n\t\tvar output = ''\n\n\t\tfor (var i = 0; i < length; i++)\n\t\t\toutput += collection[i](element, index, children, callback) || ''\n\n\t\treturn output\n\t}\n}\n\n/**\n * @param {function} callback\n * @return {function}\n */\nexport function rulesheet (callback) {\n\treturn function (element) {\n\t\tif (!element.root)\n\t\t\tif (element = element.return)\n\t\t\t\tcallback(element)\n\t}\n}\n\n/**\n * @param {object} element\n * @param {number} index\n * @param {object[]} children\n * @param {function} callback\n */\nexport function prefixer (element, index, children, callback) {\n\tif (element.length > -1)\n\t\tif (!element.return)\n\t\t\tswitch (element.type) {\n\t\t\t\tcase DECLARATION: element.return = prefix(element.value, element.length, children)\n\t\t\t\t\treturn\n\t\t\t\tcase KEYFRAMES:\n\t\t\t\t\treturn serialize([copy(element, {value: replace(element.value, '@', '@' + WEBKIT)})], callback)\n\t\t\t\tcase RULESET:\n\t\t\t\t\tif (element.length)\n\t\t\t\t\t\treturn combine(children = element.props, function (value) {\n\t\t\t\t\t\t\tswitch (match(value, callback = /(::plac\\w+|:read-\\w+)/)) {\n\t\t\t\t\t\t\t\t// :read-(only|write)\n\t\t\t\t\t\t\t\tcase ':read-only': case ':read-write':\n\t\t\t\t\t\t\t\t\tlift(copy(element, {props: [replace(value, /:(read-\\w+)/, ':' + MOZ + '$1')]}))\n\t\t\t\t\t\t\t\t\tlift(copy(element, {props: [value]}))\n\t\t\t\t\t\t\t\t\tassign(element, {props: filter(children, callback)})\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t// :placeholder\n\t\t\t\t\t\t\t\tcase '::placeholder':\n\t\t\t\t\t\t\t\t\tlift(copy(element, {props: [replace(value, /:(plac\\w+)/, ':' + WEBKIT + 'input-$1')]}))\n\t\t\t\t\t\t\t\t\tlift(copy(element, {props: [replace(value, /:(plac\\w+)/, ':' + MOZ + '$1')]}))\n\t\t\t\t\t\t\t\t\tlift(copy(element, {props: [replace(value, /:(plac\\w+)/, MS + 'input-$1')]}))\n\t\t\t\t\t\t\t\t\tlift(copy(element, {props: [value]}))\n\t\t\t\t\t\t\t\t\tassign(element, {props: filter(children, callback)})\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn ''\n\t\t\t\t\t\t})\n\t\t\t}\n}\n\n/**\n * @param {object} element\n * @param {number} index\n * @param {object[]} children\n */\nexport function namespace (element) {\n\tswitch (element.type) {\n\t\tcase RULESET:\n\t\t\telement.props = element.props.map(function (value) {\n\t\t\t\treturn combine(tokenize(value), function (value, index, children) {\n\t\t\t\t\tswitch (charat(value, 0)) {\n\t\t\t\t\t\t// \\f\n\t\t\t\t\t\tcase 12:\n\t\t\t\t\t\t\treturn substr(value, 1, strlen(value))\n\t\t\t\t\t\t// \\0 ( + > ~\n\t\t\t\t\t\tcase 0: case 40: case 43: case 62: case 126:\n\t\t\t\t\t\t\treturn value\n\t\t\t\t\t\t// :\n\t\t\t\t\t\tcase 58:\n\t\t\t\t\t\t\tif (children[++index] === 'global')\n\t\t\t\t\t\t\t\tchildren[index] = '', children[++index] = '\\f' + substr(children[index], index = 1, -1)\n\t\t\t\t\t\t// \\s\n\t\t\t\t\t\tcase 32:\n\t\t\t\t\t\t\treturn index === 1 ? '' : value\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tswitch (index) {\n\t\t\t\t\t\t\t\tcase 0: element = value\n\t\t\t\t\t\t\t\t\treturn sizeof(children) > 1 ? '' : value\n\t\t\t\t\t\t\t\tcase index = sizeof(children) - 1: case 2:\n\t\t\t\t\t\t\t\t\treturn index === 2 ? value + element + element : value + element\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\treturn value\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t}\n}\n","import {COMMENT, RULESET, DECLARATION} from './Enum.js'\nimport {abs, charat, trim, from, sizeof, strlen, substr, append, replace, indexof} from './Utility.js'\nimport {node, char, prev, next, peek, caret, alloc, dealloc, delimit, whitespace, escaping, identifier, commenter} from './Tokenizer.js'\n\n/**\n * @param {string} value\n * @return {object[]}\n */\nexport function compile (value) {\n\treturn dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value))\n}\n\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {string[]} rule\n * @param {string[]} rules\n * @param {string[]} rulesets\n * @param {number[]} pseudo\n * @param {number[]} points\n * @param {string[]} declarations\n * @return {object}\n */\nexport function parse (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {\n\tvar index = 0\n\tvar offset = 0\n\tvar length = pseudo\n\tvar atrule = 0\n\tvar property = 0\n\tvar previous = 0\n\tvar variable = 1\n\tvar scanning = 1\n\tvar ampersand = 1\n\tvar character = 0\n\tvar type = ''\n\tvar props = rules\n\tvar children = rulesets\n\tvar reference = rule\n\tvar characters = type\n\n\twhile (scanning)\n\t\tswitch (previous = character, character = next()) {\n\t\t\t// (\n\t\t\tcase 40:\n\t\t\t\tif (previous != 108 && charat(characters, length - 1) == 58) {\n\t\t\t\t\tif (indexof(characters += replace(delimit(character), '&', '&\\f'), '&\\f', abs(index ? points[index - 1] : 0)) != -1)\n\t\t\t\t\t\tampersand = -1\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t// \" ' [\n\t\t\tcase 34: case 39: case 91:\n\t\t\t\tcharacters += delimit(character)\n\t\t\t\tbreak\n\t\t\t// \\t \\n \\r \\s\n\t\t\tcase 9: case 10: case 13: case 32:\n\t\t\t\tcharacters += whitespace(previous)\n\t\t\t\tbreak\n\t\t\t// \\\n\t\t\tcase 92:\n\t\t\t\tcharacters += escaping(caret() - 1, 7)\n\t\t\t\tcontinue\n\t\t\t// /\n\t\t\tcase 47:\n\t\t\t\tswitch (peek()) {\n\t\t\t\t\tcase 42: case 47:\n\t\t\t\t\t\tappend(comment(commenter(next(), caret()), root, parent, declarations), declarations)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcharacters += '/'\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t// {\n\t\t\tcase 123 * variable:\n\t\t\t\tpoints[index++] = strlen(characters) * ampersand\n\t\t\t// } ; \\0\n\t\t\tcase 125 * variable: case 59: case 0:\n\t\t\t\tswitch (character) {\n\t\t\t\t\t// \\0 }\n\t\t\t\t\tcase 0: case 125: scanning = 0\n\t\t\t\t\t// ;\n\t\t\t\t\tcase 59 + offset: if (ampersand == -1) characters = replace(characters, /\\f/g, '')\n\t\t\t\t\t\tif (property > 0 && (strlen(characters) - length))\n\t\t\t\t\t\t\tappend(property > 32 ? declaration(characters + ';', rule, parent, length - 1, declarations) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2, declarations), declarations)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// @ ;\n\t\t\t\t\tcase 59: characters += ';'\n\t\t\t\t\t// { rule/at-rule\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tappend(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length, rulesets), rulesets)\n\n\t\t\t\t\t\tif (character === 123)\n\t\t\t\t\t\t\tif (offset === 0)\n\t\t\t\t\t\t\t\tparse(characters, root, reference, reference, props, rulesets, length, points, children)\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tswitch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {\n\t\t\t\t\t\t\t\t\t// d l m s\n\t\t\t\t\t\t\t\t\tcase 100: case 108: case 109: case 115:\n\t\t\t\t\t\t\t\t\t\tparse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length, children), children), rules, children, length, points, rule ? props : children)\n\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tparse(characters, reference, reference, reference, [''], children, 0, points, children)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tindex = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo\n\t\t\t\tbreak\n\t\t\t// :\n\t\t\tcase 58:\n\t\t\t\tlength = 1 + strlen(characters), property = previous\n\t\t\tdefault:\n\t\t\t\tif (variable < 1)\n\t\t\t\t\tif (character == 123)\n\t\t\t\t\t\t--variable\n\t\t\t\t\telse if (character == 125 && variable++ == 0 && prev() == 125)\n\t\t\t\t\t\tcontinue\n\n\t\t\t\tswitch (characters += from(character), character * variable) {\n\t\t\t\t\t// &\n\t\t\t\t\tcase 38:\n\t\t\t\t\t\tampersand = offset > 0 ? 1 : (characters += '\\f', -1)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// ,\n\t\t\t\t\tcase 44:\n\t\t\t\t\t\tpoints[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// @\n\t\t\t\t\tcase 64:\n\t\t\t\t\t\t// -\n\t\t\t\t\t\tif (peek() === 45)\n\t\t\t\t\t\t\tcharacters += delimit(next())\n\n\t\t\t\t\t\tatrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// -\n\t\t\t\t\tcase 45:\n\t\t\t\t\t\tif (previous === 45 && strlen(characters) == 2)\n\t\t\t\t\t\t\tvariable = 0\n\t\t\t\t}\n\t\t}\n\n\treturn rulesets\n}\n\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {number} index\n * @param {number} offset\n * @param {string[]} rules\n * @param {number[]} points\n * @param {string} type\n * @param {string[]} props\n * @param {string[]} children\n * @param {number} length\n * @param {object[]} siblings\n * @return {object}\n */\nexport function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length, siblings) {\n\tvar post = offset - 1\n\tvar rule = offset === 0 ? rules : ['']\n\tvar size = sizeof(rule)\n\n\tfor (var i = 0, j = 0, k = 0; i < index; ++i)\n\t\tfor (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)\n\t\t\tif (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\\f/g, rule[x])))\n\t\t\t\tprops[k++] = z\n\n\treturn node(value, root, parent, offset === 0 ? RULESET : type, props, children, length, siblings)\n}\n\n/**\n * @param {number} value\n * @param {object} root\n * @param {object?} parent\n * @param {object[]} siblings\n * @return {object}\n */\nexport function comment (value, root, parent, siblings) {\n\treturn node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0, siblings)\n}\n\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {number} length\n * @param {object[]} siblings\n * @return {object}\n */\nexport function declaration (value, root, parent, length, siblings) {\n\treturn node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length, siblings)\n}\n","var unitlessKeys = {\n  animationIterationCount: 1,\n  aspectRatio: 1,\n  borderImageOutset: 1,\n  borderImageSlice: 1,\n  borderImageWidth: 1,\n  boxFlex: 1,\n  boxFlexGroup: 1,\n  boxOrdinalGroup: 1,\n  columnCount: 1,\n  columns: 1,\n  flex: 1,\n  flexGrow: 1,\n  flexPositive: 1,\n  flexShrink: 1,\n  flexNegative: 1,\n  flexOrder: 1,\n  gridRow: 1,\n  gridRowEnd: 1,\n  gridRowSpan: 1,\n  gridRowStart: 1,\n  gridColumn: 1,\n  gridColumnEnd: 1,\n  gridColumnSpan: 1,\n  gridColumnStart: 1,\n  msGridRow: 1,\n  msGridRowSpan: 1,\n  msGridColumn: 1,\n  msGridColumnSpan: 1,\n  fontWeight: 1,\n  lineHeight: 1,\n  opacity: 1,\n  order: 1,\n  orphans: 1,\n  tabSize: 1,\n  widows: 1,\n  zIndex: 1,\n  zoom: 1,\n  WebkitLineClamp: 1,\n  // SVG-related properties\n  fillOpacity: 1,\n  floodOpacity: 1,\n  stopOpacity: 1,\n  strokeDasharray: 1,\n  strokeDashoffset: 1,\n  strokeMiterlimit: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1\n};\n\nexport { unitlessKeys as default };\n","declare let SC_DISABLE_SPEEDY: boolean | null | undefined;\ndeclare let __VERSION__: string;\n\nexport const SC_ATTR: string =\n  (typeof process !== 'undefined' &&\n    typeof process.env !== 'undefined' &&\n    (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR)) ||\n  'data-styled';\n\nexport const SC_ATTR_ACTIVE = 'active';\nexport const SC_ATTR_VERSION = 'data-styled-version';\nexport const SC_VERSION = __VERSION__;\nexport const SPLITTER = '/*!sc*/\\n';\n\nexport const IS_BROWSER = typeof window !== 'undefined' && 'HTMLElement' in window;\n\nexport const DISABLE_SPEEDY = Boolean(\n  typeof SC_DISABLE_SPEEDY === 'boolean'\n    ? SC_DISABLE_SPEEDY\n    : typeof process !== 'undefined' &&\n        typeof process.env !== 'undefined' &&\n        typeof process.env.REACT_APP_SC_DISABLE_SPEEDY !== 'undefined' &&\n        process.env.REACT_APP_SC_DISABLE_SPEEDY !== ''\n      ? process.env.REACT_APP_SC_DISABLE_SPEEDY === 'false'\n        ? false\n        : process.env.REACT_APP_SC_DISABLE_SPEEDY\n      : typeof process !== 'undefined' &&\n          typeof process.env !== 'undefined' &&\n          typeof process.env.SC_DISABLE_SPEEDY !== 'undefined' &&\n          process.env.SC_DISABLE_SPEEDY !== ''\n        ? process.env.SC_DISABLE_SPEEDY === 'false'\n          ? false\n          : process.env.SC_DISABLE_SPEEDY\n        : process.env.NODE_ENV !== 'production'\n);\n\n// Shared empty execution context when generating static styles\nexport const STATIC_EXECUTION_CONTEXT = {};\n","import { Dict } from '../types';\n\nexport const EMPTY_ARRAY = Object.freeze([]) as Readonly<any[]>;\nexport const EMPTY_OBJECT = Object.freeze({}) as Readonly<Dict<any>>;\n","import { useRef } from 'react';\n\nconst invalidHookCallRe = /invalid hook call/i;\nconst seen = new Set();\n\nexport const checkDynamicCreation = (displayName: string, componentId?: string | undefined) => {\n  if (process.env.NODE_ENV !== 'production') {\n    const parsedIdString = componentId ? ` with the id of \"${componentId}\"` : '';\n    const message =\n      `The component ${displayName}${parsedIdString} has been created dynamically.\\n` +\n      \"You may see this warning because you've called styled inside another component.\\n\" +\n      'To resolve this only create new StyledComponents outside of any render method and function component.';\n\n    // If a hook is called outside of a component:\n    // React 17 and earlier throw an error\n    // React 18 and above use console.error\n\n    const originalConsoleError = console.error;\n    try {\n      let didNotCallInvalidHook = true;\n      console.error = (consoleErrorMessage, ...consoleErrorArgs) => {\n        // The error here is expected, since we're expecting anything that uses `checkDynamicCreation` to\n        // be called outside of a React component.\n        if (invalidHookCallRe.test(consoleErrorMessage)) {\n          didNotCallInvalidHook = false;\n          // This shouldn't happen, but resets `warningSeen` if we had this error happen intermittently\n          seen.delete(message);\n        } else {\n          originalConsoleError(consoleErrorMessage, ...consoleErrorArgs);\n        }\n      };\n      // We purposefully call `useRef` outside of a component and expect it to throw\n      // If it doesn't, then we're inside another component.\n      useRef();\n\n      if (didNotCallInvalidHook && !seen.has(message)) {\n        console.warn(message);\n        seen.add(message);\n      }\n    } catch (error) {\n      // The error here is expected, since we're expecting anything that uses `checkDynamicCreation` to\n      // be called outside of a React component.\n      if (invalidHookCallRe.test((error as Error).message)) {\n        // This shouldn't happen, but resets `warningSeen` if we had this error happen intermittently\n        seen.delete(message);\n      }\n    } finally {\n      console.error = originalConsoleError;\n    }\n  }\n};\n","import { DefaultTheme, ExecutionProps } from '../types';\nimport { EMPTY_OBJECT } from './empties';\n\nexport default function determineTheme(\n  props: ExecutionProps,\n  providedTheme?: DefaultTheme | undefined,\n  defaultProps: { theme?: DefaultTheme | undefined } = EMPTY_OBJECT\n): DefaultTheme | undefined {\n  return (props.theme !== defaultProps.theme && props.theme) || providedTheme || defaultProps.theme;\n}\n","// Thanks to ReactDOMFactories for this handy list!\n\nconst elements = [\n  'a',\n  'abbr',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'base',\n  'bdi',\n  'bdo',\n  'big',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'data',\n  'datalist',\n  'dd',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'div',\n  'dl',\n  'dt',\n  'em',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'iframe',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'keygen',\n  'label',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'map',\n  'mark',\n  'menu',\n  'menuitem',\n  'meta',\n  'meter',\n  'nav',\n  'noscript',\n  'object',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'param',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'section',\n  'select',\n  'small',\n  'source',\n  'span',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'tr',\n  'track',\n  'u',\n  'ul',\n  'use',\n  'var',\n  'video',\n  'wbr', // SVG\n  'circle',\n  'clipPath',\n  'defs',\n  'ellipse',\n  'foreignObject',\n  'g',\n  'image',\n  'line',\n  'linearGradient',\n  'marker',\n  'mask',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialGradient',\n  'rect',\n  'stop',\n  'svg',\n  'text',\n  'tspan',\n] as const;\n\nexport default new Set(elements);\nexport type SupportedHTMLElements = (typeof elements)[number];\n","// Source: https://www.w3.org/TR/cssom-1/#serialize-an-identifier\n// Control characters and non-letter first symbols are not supported\nconst escapeRegex = /[!\"#$%&'()*+,./:;<=>?@[\\\\\\]^`{|}~-]+/g;\n\nconst dashesAtEnds = /(^-|-$)/g;\n\n/**\n * TODO: Explore using CSS.escape when it becomes more available\n * in evergreen browsers.\n */\nexport default function escape(str: string) {\n  return str // Replace all possible CSS selectors\n    .replace(escapeRegex, '-') // Remove extraneous hyphens at the start and end\n    .replace(dashesAtEnds, '');\n}\n","const AD_REPLACER_R = /(a)(d)/gi;\n\n/* This is the \"capacity\" of our alphabet i.e. 2x26 for all letters plus their capitalised\n * counterparts */\nconst charsLength = 52;\n\n/* start at 75 for 'a' until 'z' (25) and then start at 65 for capitalised letters */\nconst getAlphabeticChar = (code: number) => String.fromCharCode(code + (code > 25 ? 39 : 97));\n\n/* input a number, usually a hash and convert it to base-52 */\nexport default function generateAlphabeticName(code: number) {\n  let name = '';\n  let x;\n\n  /* get a char and divide by alphabet-length */\n  for (x = Math.abs(code); x > charsLength; x = (x / charsLength) | 0) {\n    name = getAlphabeticChar(x % charsLength) + name;\n  }\n\n  return (getAlphabeticChar(x % charsLength) + name).replace(AD_REPLACER_R, '$1-$2');\n}\n","export const SEED = 5381;\n\n// When we have separate strings it's useful to run a progressive\n// version of djb2 where we pretend that we're still looping over\n// the same string\nexport const phash = (h: number, x: string) => {\n  let i = x.length;\n\n  while (i) {\n    h = (h * 33) ^ x.charCodeAt(--i);\n  }\n\n  return h;\n};\n\n// This is a djb2 hashing function\nexport const hash = (x: string) => {\n  return phash(SEED, x);\n};\n","import generateAlphabeticName from './generateAlphabeticName';\nimport { hash } from './hash';\n\nexport default function generateComponentId(str: string) {\n  return generateAlphabeticName(hash(str) >>> 0);\n}\n","import { StyledTarget } from '../types';\n\nexport default function getComponentName(target: StyledTarget<any>) {\n  return (\n    (process.env.NODE_ENV !== 'production' ? typeof target === 'string' && target : false) ||\n    (target as Exclude<StyledTarget<any>, string>).displayName ||\n    (target as Function).name ||\n    'Component'\n  );\n}\n","import { StyledTarget } from '../types';\n\nexport default function isTag(target: StyledTarget<'web'>): target is string {\n  return (\n    typeof target === 'string' &&\n    (process.env.NODE_ENV !== 'production'\n      ? target.charAt(0) === target.charAt(0).toLowerCase()\n      : true)\n  );\n}\n","import React from 'react';\nimport { AnyComponent } from '../types';\n\nconst hasSymbol = typeof Symbol === 'function' && Symbol.for;\n\n// copied from react-is\nconst REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nconst REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\n\n/**\n * Adapted from hoist-non-react-statics to avoid the react-is dependency.\n */\nconst REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true,\n};\n\nconst KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true,\n};\n\nconst FORWARD_REF_STATICS = {\n  $$typeof: true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n};\n\nconst MEMO_STATICS = {\n  $$typeof: true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true,\n};\n\nconst TYPE_STATICS = {\n  [REACT_FORWARD_REF_TYPE]: FORWARD_REF_STATICS,\n  [REACT_MEMO_TYPE]: MEMO_STATICS,\n};\n\ntype OmniComponent = AnyComponent;\n\n// adapted from react-is\nfunction isMemo(\n  object: OmniComponent | React.MemoExoticComponent<any>\n): object is React.MemoExoticComponent<any> {\n  const $$typeofType = 'type' in object && object.type.$$typeof;\n\n  return $$typeofType === REACT_MEMO_TYPE;\n}\n\nfunction getStatics(component: OmniComponent) {\n  // React v16.11 and below\n  if (isMemo(component)) {\n    return MEMO_STATICS;\n  }\n\n  // React v16.12 and above\n  return '$$typeof' in component\n    ? TYPE_STATICS[component['$$typeof'] as unknown as string]\n    : REACT_STATICS;\n}\n\nconst defineProperty = Object.defineProperty;\nconst getOwnPropertyNames = Object.getOwnPropertyNames;\nconst getOwnPropertySymbols = Object.getOwnPropertySymbols;\nconst getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nconst getPrototypeOf = Object.getPrototypeOf;\nconst objectPrototype = Object.prototype;\n\ntype ExcludeList = {\n  [key: string]: true;\n};\n\ntype NonReactStatics<S extends OmniComponent, C extends ExcludeList = {}> = {\n  [key in Exclude<\n    keyof S,\n    S extends React.MemoExoticComponent<any>\n      ? keyof typeof MEMO_STATICS | keyof C\n      : S extends React.ForwardRefExoticComponent<any>\n        ? keyof typeof FORWARD_REF_STATICS | keyof C\n        : keyof typeof REACT_STATICS | keyof typeof KNOWN_STATICS | keyof C\n  >]: S[key];\n};\n\nexport default function hoistNonReactStatics<\n  T extends OmniComponent,\n  S extends OmniComponent,\n  C extends ExcludeList = {},\n>(targetComponent: T, sourceComponent: S, excludelist?: C | undefined) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n\n    if (objectPrototype) {\n      const inheritedComponent = getPrototypeOf(sourceComponent);\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, excludelist);\n      }\n    }\n\n    let keys: (String | Symbol)[] = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    const targetStatics = getStatics(targetComponent);\n    const sourceStatics = getStatics(sourceComponent);\n\n    for (let i = 0; i < keys.length; ++i) {\n      const key = keys[i] as unknown as string;\n      if (\n        !(key in KNOWN_STATICS) &&\n        !(excludelist && excludelist[key]) &&\n        !(sourceStatics && key in sourceStatics) &&\n        !(targetStatics && key in targetStatics)\n      ) {\n        const descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor!);\n        } catch (e) {\n          /* ignore */\n        }\n      }\n    }\n  }\n\n  return targetComponent as T & NonReactStatics<S, C>;\n}\n","export default function isFunction(test: any): test is Function {\n  return typeof test === 'function';\n}\n","import { StyledComponentBrand } from '../types';\n\nexport default function isStyledComponent(target: any): target is StyledComponentBrand {\n  return typeof target === 'object' && 'styledComponentId' in target;\n}\n","/**\n * Convenience function for joining strings to form className chains\n */\nexport function joinStrings(a?: string | undefined, b?: string | undefined): string {\n  return a && b ? `${a} ${b}` : a || b || '';\n}\n\nexport function joinStringArray(arr: string[], sep?: string | undefined): string {\n  if (arr.length === 0) {\n    return '';\n  }\n\n  let result = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    result += sep ? sep + arr[i] : arr[i];\n  }\n  return result;\n}\n","export default function isPlainObject(x: any): x is Record<any, any> {\n  return (\n    x !== null &&\n    typeof x === 'object' &&\n    x.constructor.name === Object.name &&\n    /* check for reasonable markers that the object isn't an element for react & preact/compat */\n    !('props' in x && x.$$typeof)\n  );\n}\n","import isPlainObject from './isPlainObject';\n\nfunction mixinRecursively(target: any, source: any, forceMerge = false) {\n  /* only merge into POJOs, Arrays, but for top level objects only\n   * allow to merge into anything by passing forceMerge = true */\n  if (!forceMerge && !isPlainObject(target) && !Array.isArray(target)) {\n    return source;\n  }\n\n  if (Array.isArray(source)) {\n    for (let key = 0; key < source.length; key++) {\n      target[key] = mixinRecursively(target[key], source[key]);\n    }\n  } else if (isPlainObject(source)) {\n    for (const key in source) {\n      target[key] = mixinRecursively(target[key], source[key]);\n    }\n  }\n\n  return target;\n}\n\n/**\n * Arrays & POJOs merged recursively, other objects and value types are overridden\n * If target is not a POJO or an Array, it will get source properties injected via shallow merge\n * Source objects applied left to right.  Mutates & returns target.  Similar to lodash merge.\n */\nexport default function mixinDeep(target: any, ...sources: any[]) {\n  for (const source of sources) {\n    mixinRecursively(target, source, true);\n  }\n\n  return target;\n}\n","/**\n * If the Object prototype is frozen, the \"toString\" property is non-writable. This means that any objects which inherit this property\n * cannot have the property changed using a \"=\" assignment operator. If using strict mode, attempting that will cause an error. If not using\n * strict mode, attempting that will be silently ignored.\n *\n * If the Object prototype is frozen, inherited non-writable properties can still be shadowed using one of two mechanisms:\n *\n *  1. ES6 class methods: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#methods\n *  2. Using the `Object.defineProperty()` static method:\n *     https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n *\n * However, this project uses Babel to transpile ES6 classes, and transforms ES6 class methods to use the assignment operator instead:\n * https://babeljs.io/docs/babel-plugin-transform-class-properties#options\n *\n * Therefore, the most compatible way to shadow the prototype's \"toString\" property is to define a new \"toString\" property on this object.\n */\nexport function setToString(object: object, toStringFn: () => string) {\n  Object.defineProperty(object, 'toString', { value: toStringFn });\n}\n","import { Dict } from '../types';\nimport errorMap from './errors';\n\nconst ERRORS: Dict<any> = process.env.NODE_ENV !== 'production' ? errorMap : {};\n\n/**\n * super basic version of sprintf\n */\nfunction format(...args: [string, ...any]) {\n  let a = args[0];\n  const b = [];\n\n  for (let c = 1, len = args.length; c < len; c += 1) {\n    b.push(args[c]);\n  }\n\n  b.forEach(d => {\n    a = a.replace(/%[a-z]/, d);\n  });\n\n  return a;\n}\n\n/**\n * Create an error file out of errors.md for development and a simple web link to the full errors\n * in production mode.\n */\nexport default function throwStyledComponentsError(\n  code: string | number,\n  ...interpolations: any[]\n) {\n  if (process.env.NODE_ENV === 'production') {\n    return new Error(\n      `An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#${code} for more information.${\n        interpolations.length > 0 ? ` Args: ${interpolations.join(', ')}` : ''\n      }`\n    );\n  } else {\n    return new Error(format(ERRORS[code], ...interpolations).trim());\n  }\n}\n","import { SPLITTER } from '../constants';\nimport styledError from '../utils/error';\nimport { GroupedTag, Tag } from './types';\n\n/** Create a GroupedTag with an underlying Tag implementation */\nexport const makeGroupedTag = (tag: Tag) => {\n  return new DefaultGroupedTag(tag);\n};\n\nconst BASE_SIZE = 1 << 9;\n\nconst DefaultGroupedTag = class DefaultGroupedTag implements GroupedTag {\n  groupSizes: Uint32Array;\n  length: number;\n  tag: Tag;\n\n  constructor(tag: Tag) {\n    this.groupSizes = new Uint32Array(BASE_SIZE);\n    this.length = BASE_SIZE;\n    this.tag = tag;\n  }\n\n  indexOfGroup(group: number) {\n    let index = 0;\n    for (let i = 0; i < group; i++) {\n      index += this.groupSizes[i];\n    }\n\n    return index;\n  }\n\n  insertRules(group: number, rules: string[]) {\n    if (group >= this.groupSizes.length) {\n      const oldBuffer = this.groupSizes;\n      const oldSize = oldBuffer.length;\n\n      let newSize = oldSize;\n      while (group >= newSize) {\n        newSize <<= 1;\n        if (newSize < 0) {\n          throw styledError(16, `${group}`);\n        }\n      }\n\n      this.groupSizes = new Uint32Array(newSize);\n      this.groupSizes.set(oldBuffer);\n      this.length = newSize;\n\n      for (let i = oldSize; i < newSize; i++) {\n        this.groupSizes[i] = 0;\n      }\n    }\n\n    let ruleIndex = this.indexOfGroup(group + 1);\n\n    for (let i = 0, l = rules.length; i < l; i++) {\n      if (this.tag.insertRule(ruleIndex, rules[i])) {\n        this.groupSizes[group]++;\n        ruleIndex++;\n      }\n    }\n  }\n\n  clearGroup(group: number) {\n    if (group < this.length) {\n      const length = this.groupSizes[group];\n      const startIndex = this.indexOfGroup(group);\n      const endIndex = startIndex + length;\n\n      this.groupSizes[group] = 0;\n\n      for (let i = startIndex; i < endIndex; i++) {\n        this.tag.deleteRule(startIndex);\n      }\n    }\n  }\n\n  getGroup(group: number) {\n    let css = '';\n    if (group >= this.length || this.groupSizes[group] === 0) {\n      return css;\n    }\n\n    const length = this.groupSizes[group];\n    const startIndex = this.indexOfGroup(group);\n    const endIndex = startIndex + length;\n\n    for (let i = startIndex; i < endIndex; i++) {\n      css += `${this.tag.getRule(i)}${SPLITTER}`;\n    }\n\n    return css;\n  }\n};\n","import styledError from '../utils/error';\n\nconst MAX_SMI = 1 << (31 - 1);\n\nlet groupIDRegister: Map<string, number> = new Map();\nlet reverseRegister: Map<number, string> = new Map();\nlet nextFreeGroup = 1;\n\nexport const resetGroupIds = () => {\n  groupIDRegister = new Map();\n  reverseRegister = new Map();\n  nextFreeGroup = 1;\n};\n\nexport const getGroupForId = (id: string): number => {\n  if (groupIDRegister.has(id)) {\n    return groupIDRegister.get(id) as any;\n  }\n\n  while (reverseRegister.has(nextFreeGroup)) {\n    nextFreeGroup++;\n  }\n\n  const group = nextFreeGroup++;\n\n  if (process.env.NODE_ENV !== 'production' && ((group | 0) < 0 || group > MAX_SMI)) {\n    throw styledError(16, `${group}`);\n  }\n\n  groupIDRegister.set(id, group);\n  reverseRegister.set(group, id);\n  return group;\n};\n\nexport const getIdForGroup = (group: number): void | string => {\n  return reverseRegister.get(group);\n};\n\nexport const setGroupForId = (id: string, group: number) => {\n  // move pointer\n  nextFreeGroup = group + 1;\n\n  groupIDRegister.set(id, group);\n  reverseRegister.set(group, id);\n};\n","import { SC_ATTR, SC_ATTR_ACTIVE, SC_ATTR_VERSION, SC_VERSION, SPLITTER } from '../constants';\nimport { getIdForGroup, setGroupForId } from './GroupIDAllocator';\nimport { Sheet } from './types';\n\nconst SELECTOR = `style[${SC_ATTR}][${SC_ATTR_VERSION}=\"${SC_VERSION}\"]`;\nconst MARKER_RE = new RegExp(`^${SC_ATTR}\\\\.g(\\\\d+)\\\\[id=\"([\\\\w\\\\d-]+)\"\\\\].*?\"([^\"]*)`);\n\nexport const outputSheet = (sheet: Sheet) => {\n  const tag = sheet.getTag();\n  const { length } = tag;\n\n  let css = '';\n  for (let group = 0; group < length; group++) {\n    const id = getIdForGroup(group);\n    if (id === undefined) continue;\n\n    const names = sheet.names.get(id);\n    const rules = tag.getGroup(group);\n    if (names === undefined || !names.size || rules.length === 0) continue;\n\n    const selector = `${SC_ATTR}.g${group}[id=\"${id}\"]`;\n\n    let content = '';\n    if (names !== undefined) {\n      names.forEach(name => {\n        if (name.length > 0) {\n          content += `${name},`;\n        }\n      });\n    }\n\n    // NOTE: It's easier to collect rules and have the marker\n    // after the actual rules to simplify the rehydration\n    css += `${rules}${selector}{content:\"${content}\"}${SPLITTER}`;\n  }\n\n  return css;\n};\n\nconst rehydrateNamesFromContent = (sheet: Sheet, id: string, content: string) => {\n  const names = content.split(',');\n  let name;\n\n  for (let i = 0, l = names.length; i < l; i++) {\n    if ((name = names[i])) {\n      sheet.registerName(id, name);\n    }\n  }\n};\n\nconst rehydrateSheetFromTag = (sheet: Sheet, style: HTMLStyleElement) => {\n  const parts = (style.textContent ?? '').split(SPLITTER);\n  const rules: string[] = [];\n\n  for (let i = 0, l = parts.length; i < l; i++) {\n    const part = parts[i].trim();\n    if (!part) continue;\n\n    const marker = part.match(MARKER_RE);\n\n    if (marker) {\n      const group = parseInt(marker[1], 10) | 0;\n      const id = marker[2];\n\n      if (group !== 0) {\n        // Rehydrate componentId to group index mapping\n        setGroupForId(id, group);\n        // Rehydrate names and rules\n        // looks like: data-styled.g11[id=\"idA\"]{content:\"nameA,\"}\n        rehydrateNamesFromContent(sheet, id, marker[3]);\n        sheet.getTag().insertRules(group, rules);\n      }\n\n      rules.length = 0;\n    } else {\n      rules.push(part);\n    }\n  }\n};\n\nexport const rehydrateSheet = (sheet: Sheet) => {\n  const nodes = document.querySelectorAll(SELECTOR);\n\n  for (let i = 0, l = nodes.length; i < l; i++) {\n    const node = nodes[i] as any as HTMLStyleElement;\n    if (node && node.getAttribute(SC_ATTR) !== SC_ATTR_ACTIVE) {\n      rehydrateSheetFromTag(sheet, node);\n\n      if (node.parentNode) {\n        node.parentNode.removeChild(node);\n      }\n    }\n  }\n};\n","declare let __webpack_nonce__: string;\n\nexport default function getNonce() {\n  return typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;\n}\n","import { SC_ATTR, SC_ATTR_ACTIVE, SC_ATTR_VERSION, SC_VERSION } from '../constants';\nimport { InsertionTarget } from '../types';\nimport styledError from '../utils/error';\nimport getNonce from '../utils/nonce';\n\n/** Find last style element if any inside target */\nconst findLastStyleTag = (target: InsertionTarget): void | HTMLStyleElement => {\n  const arr = Array.from(target.querySelectorAll<HTMLStyleElement>(`style[${SC_ATTR}]`));\n\n  return arr[arr.length - 1];\n};\n\n/** Create a style element inside `target` or <head> after the last */\nexport const makeStyleTag = (target?: InsertionTarget | undefined): HTMLStyleElement => {\n  const head = document.head;\n  const parent = target || head;\n  const style = document.createElement('style');\n  const prevStyle = findLastStyleTag(parent);\n  const nextSibling = prevStyle !== undefined ? prevStyle.nextSibling : null;\n\n  style.setAttribute(SC_ATTR, SC_ATTR_ACTIVE);\n  style.setAttribute(SC_ATTR_VERSION, SC_VERSION);\n\n  const nonce = getNonce();\n\n  if (nonce) style.setAttribute('nonce', nonce);\n\n  parent.insertBefore(style, nextSibling);\n\n  return style;\n};\n\n/** Get the CSSStyleSheet instance for a given style element */\nexport const getSheet = (tag: HTMLStyleElement): CSSStyleSheet => {\n  if (tag.sheet) {\n    return tag.sheet as any as CSSStyleSheet;\n  }\n\n  // Avoid Firefox quirk where the style element might not have a sheet property\n  const { styleSheets } = document;\n  for (let i = 0, l = styleSheets.length; i < l; i++) {\n    const sheet = styleSheets[i];\n    if (sheet.ownerNode === tag) {\n      return sheet as any as CSSStyleSheet;\n    }\n  }\n\n  throw styledError(17);\n};\n","import { InsertionTarget } from '../types';\nimport { getSheet, makeStyleTag } from './dom';\nimport { SheetOptions, Tag } from './types';\n\n/** Create a CSSStyleSheet-like tag depending on the environment */\nexport const makeTag = ({ isServer, useCSSOMInjection, target }: SheetOptions) => {\n  if (isServer) {\n    return new VirtualTag(target);\n  } else if (useCSSOMInjection) {\n    return new CSSOMTag(target);\n  } else {\n    return new TextTag(target);\n  }\n};\n\nexport const CSSOMTag = class CSSOMTag implements Tag {\n  element: HTMLStyleElement;\n\n  sheet: CSSStyleSheet;\n\n  length: number;\n\n  constructor(target?: InsertionTarget | undefined) {\n    this.element = makeStyleTag(target);\n\n    // Avoid Edge bug where empty style elements don't create sheets\n    this.element.appendChild(document.createTextNode(''));\n\n    this.sheet = getSheet(this.element);\n    this.length = 0;\n  }\n\n  insertRule(index: number, rule: string): boolean {\n    try {\n      this.sheet.insertRule(rule, index);\n      this.length++;\n      return true;\n    } catch (_error) {\n      return false;\n    }\n  }\n\n  deleteRule(index: number): void {\n    this.sheet.deleteRule(index);\n    this.length--;\n  }\n\n  getRule(index: number): string {\n    const rule = this.sheet.cssRules[index];\n\n    // Avoid IE11 quirk where cssText is inaccessible on some invalid rules\n    if (rule && rule.cssText) {\n      return rule.cssText;\n    } else {\n      return '';\n    }\n  }\n};\n\n/** A Tag that emulates the CSSStyleSheet API but uses text nodes */\nexport const TextTag = class TextTag implements Tag {\n  element: HTMLStyleElement;\n  nodes: NodeListOf<Node>;\n  length: number;\n\n  constructor(target?: InsertionTarget | undefined) {\n    this.element = makeStyleTag(target);\n    this.nodes = this.element.childNodes;\n    this.length = 0;\n  }\n\n  insertRule(index: number, rule: string) {\n    if (index <= this.length && index >= 0) {\n      const node = document.createTextNode(rule);\n      const refNode = this.nodes[index];\n      this.element.insertBefore(node, refNode || null);\n      this.length++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  deleteRule(index: number) {\n    this.element.removeChild(this.nodes[index]);\n    this.length--;\n  }\n\n  getRule(index: number) {\n    if (index < this.length) {\n      return this.nodes[index].textContent as string;\n    } else {\n      return '';\n    }\n  }\n};\n\n/** A completely virtual (server-side) Tag that doesn't manipulate the DOM */\nexport const VirtualTag = class VirtualTag implements Tag {\n  rules: string[];\n\n  length: number;\n\n  constructor(_target?: InsertionTarget | undefined) {\n    this.rules = [];\n    this.length = 0;\n  }\n\n  insertRule(index: number, rule: string) {\n    if (index <= this.length) {\n      this.rules.splice(index, 0, rule);\n      this.length++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  deleteRule(index: number) {\n    this.rules.splice(index, 1);\n    this.length--;\n  }\n\n  getRule(index: number) {\n    if (index < this.length) {\n      return this.rules[index];\n    } else {\n      return '';\n    }\n  }\n};\n","import { DISABLE_SPEEDY, IS_BROWSER } from '../constants';\nimport { InsertionTarget } from '../types';\nimport { EMPTY_OBJECT } from '../utils/empties';\nimport { setToString } from '../utils/setToString';\nimport { makeGroupedTag } from './GroupedTag';\nimport { getGroupForId } from './GroupIDAllocator';\nimport { outputSheet, rehydrateSheet } from './Rehydration';\nimport { makeTag } from './Tag';\nimport { GroupedTag, Sheet, SheetOptions } from './types';\n\nlet SHOULD_REHYDRATE = IS_BROWSER;\n\ntype SheetConstructorArgs = {\n  isServer?: boolean;\n  useCSSOMInjection?: boolean;\n  target?: InsertionTarget | undefined;\n};\n\ntype GlobalStylesAllocationMap = {\n  [key: string]: number;\n};\ntype NamesAllocationMap = Map<string, Set<string>>;\n\nconst defaultOptions: SheetOptions = {\n  isServer: !IS_BROWSER,\n  useCSSOMInjection: !DISABLE_SPEEDY,\n};\n\n/** Contains the main stylesheet logic for stringification and caching */\nexport default class StyleSheet implements Sheet {\n  gs: GlobalStylesAllocationMap;\n  names: NamesAllocationMap;\n  options: SheetOptions;\n  server: boolean;\n  tag?: GroupedTag | undefined;\n\n  /** Register a group ID to give it an index */\n  static registerId(id: string): number {\n    return getGroupForId(id);\n  }\n\n  constructor(\n    options: SheetConstructorArgs = EMPTY_OBJECT as Object,\n    globalStyles: GlobalStylesAllocationMap = {},\n    names?: NamesAllocationMap | undefined\n  ) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n\n    this.gs = globalStyles;\n    this.names = new Map(names as NamesAllocationMap);\n    this.server = !!options.isServer;\n\n    // We rehydrate only once and use the sheet that is created first\n    if (!this.server && IS_BROWSER && SHOULD_REHYDRATE) {\n      SHOULD_REHYDRATE = false;\n      rehydrateSheet(this);\n    }\n\n    setToString(this, () => outputSheet(this));\n  }\n\n  rehydrate(): void {\n    if (!this.server && IS_BROWSER) {\n      rehydrateSheet(this);\n    }\n  }\n\n  reconstructWithOptions(options: SheetConstructorArgs, withNames = true) {\n    return new StyleSheet(\n      { ...this.options, ...options },\n      this.gs,\n      (withNames && this.names) || undefined\n    );\n  }\n\n  allocateGSInstance(id: string) {\n    return (this.gs[id] = (this.gs[id] || 0) + 1);\n  }\n\n  /** Lazily initialises a GroupedTag for when it's actually needed */\n  getTag() {\n    return this.tag || (this.tag = makeGroupedTag(makeTag(this.options)));\n  }\n\n  /** Check whether a name is known for caching */\n  hasNameForId(id: string, name: string): boolean {\n    return this.names.has(id) && (this.names.get(id) as any).has(name);\n  }\n\n  /** Mark a group's name as known for caching */\n  registerName(id: string, name: string) {\n    getGroupForId(id);\n\n    if (!this.names.has(id)) {\n      const groupNames = new Set<string>();\n      groupNames.add(name);\n      this.names.set(id, groupNames);\n    } else {\n      (this.names.get(id) as any).add(name);\n    }\n  }\n\n  /** Insert new rules which also marks the name as known */\n  insertRules(id: string, name: string, rules: string | string[]) {\n    this.registerName(id, name);\n    this.getTag().insertRules(getGroupForId(id), rules);\n  }\n\n  /** Clears all cached names for a given group ID */\n  clearNames(id: string) {\n    if (this.names.has(id)) {\n      (this.names.get(id) as any).clear();\n    }\n  }\n\n  /** Clears all rules for a given group ID */\n  clearRules(id: string) {\n    this.getTag().clearGroup(getGroupForId(id));\n    this.clearNames(id);\n  }\n\n  /** Clears the entire tag which deletes all rules but not its names */\n  clearTag() {\n    // NOTE: This does not clear the names, since it's only used during SSR\n    // so that we can continuously output only new rules\n    this.tag = undefined;\n  }\n}\n","import * as stylis from 'stylis';\nimport { Stringifier } from '../types';\nimport { EMPTY_ARRAY, EMPTY_OBJECT } from './empties';\nimport throwStyledError from './error';\nimport { SEED, phash } from './hash';\n\nconst AMP_REGEX = /&/g;\nconst COMMENT_REGEX = /^\\s*\\/\\/.*$/gm;\n\nexport type ICreateStylisInstance = {\n  options?: { namespace?: string | undefined; prefix?: boolean | undefined } | undefined;\n  plugins?: stylis.Middleware[] | undefined;\n};\n\n/**\n * Takes an element and recurses through it's rules added the namespace to the start of each selector.\n * Takes into account media queries by recursing through child rules if they are present.\n */\nfunction recursivelySetNamepace(compiled: stylis.Element[], namespace: String): stylis.Element[] {\n  return compiled.map(rule => {\n    if (rule.type === 'rule') {\n      // add the namespace to the start\n      rule.value = `${namespace} ${rule.value}`;\n      // add the namespace after each comma for subsequent selectors.\n      rule.value = rule.value.replaceAll(',', `,${namespace} `);\n      rule.props = (rule.props as string[]).map(prop => {\n        return `${namespace} ${prop}`;\n      });\n    }\n\n    if (Array.isArray(rule.children) && rule.type !== '@keyframes') {\n      rule.children = recursivelySetNamepace(rule.children, namespace);\n    }\n    return rule;\n  });\n}\n\nexport default function createStylisInstance(\n  {\n    options = EMPTY_OBJECT as object,\n    plugins = EMPTY_ARRAY as unknown as stylis.Middleware[],\n  }: ICreateStylisInstance = EMPTY_OBJECT as object\n) {\n  let _componentId: string;\n  let _selector: string;\n  let _selectorRegexp: RegExp;\n\n  const selfReferenceReplacer = (match: string, offset: number, string: string) => {\n    if (\n      /**\n       * We only want to refer to the static class directly if the selector is part of a\n       * self-reference selector `& + & { color: red; }`\n       */\n      string.startsWith(_selector) &&\n      string.endsWith(_selector) &&\n      string.replaceAll(_selector, '').length > 0\n    ) {\n      return `.${_componentId}`;\n    }\n\n    return match;\n  };\n\n  /**\n   * When writing a style like\n   *\n   * & + & {\n   *   color: red;\n   * }\n   *\n   * The second ampersand should be a reference to the static component class. stylis\n   * has no knowledge of static class so we have to intelligently replace the base selector.\n   *\n   * https://github.com/thysultan/stylis.js/tree/v4.0.2#abstract-syntax-structure\n   */\n  const selfReferenceReplacementPlugin: stylis.Middleware = element => {\n    if (element.type === stylis.RULESET && element.value.includes('&')) {\n      (element.props as string[])[0] = element.props[0]\n        // catch any hanging references that stylis missed\n        .replace(AMP_REGEX, _selector)\n        .replace(_selectorRegexp, selfReferenceReplacer);\n    }\n  };\n\n  const middlewares = plugins.slice();\n\n  middlewares.push(selfReferenceReplacementPlugin);\n\n  /**\n   * Enables automatic vendor-prefixing for styles.\n   */\n  if (options.prefix) {\n    middlewares.push(stylis.prefixer);\n  }\n\n  middlewares.push(stylis.stringify);\n\n  const stringifyRules: Stringifier = (\n    css: string,\n    selector = '',\n    /**\n     * This \"prefix\" referes to a _selector_ prefix.\n     */\n    prefix = '',\n    componentId = '&'\n  ) => {\n    // stylis has no concept of state to be passed to plugins\n    // but since JS is single-threaded, we can rely on that to ensure\n    // these properties stay in sync with the current stylis run\n    _componentId = componentId;\n    _selector = selector;\n    _selectorRegexp = new RegExp(`\\\\${_selector}\\\\b`, 'g');\n\n    const flatCSS = css.replace(COMMENT_REGEX, '');\n    let compiled = stylis.compile(\n      prefix || selector ? `${prefix} ${selector} { ${flatCSS} }` : flatCSS\n    );\n\n    if (options.namespace) {\n      compiled = recursivelySetNamepace(compiled, options.namespace);\n    }\n\n    const stack: string[] = [];\n\n    stylis.serialize(\n      compiled,\n      stylis.middleware(middlewares.concat(stylis.rulesheet(value => stack.push(value))))\n    );\n\n    return stack;\n  };\n\n  stringifyRules.hash = plugins.length\n    ? plugins\n        .reduce((acc, plugin) => {\n          if (!plugin.name) {\n            throwStyledError(15);\n          }\n\n          return phash(acc, plugin.name);\n        }, SEED)\n        .toString()\n    : '';\n\n  return stringifyRules;\n}\n","import React, { useContext, useEffect, useMemo, useState } from 'react';\nimport shallowequal from 'shallowequal';\nimport type stylis from 'stylis';\nimport StyleSheet from '../sheet';\nimport { InsertionTarget, ShouldForwardProp, Stringifier } from '../types';\nimport createStylisInstance from '../utils/stylis';\n\nexport const mainSheet: StyleSheet = new StyleSheet();\nexport const mainStylis: Stringifier = createStylisInstance();\n\nexport type IStyleSheetContext = {\n  shouldForwardProp?: ShouldForwardProp<'web'> | undefined;\n  styleSheet: StyleSheet;\n  stylis: Stringifier;\n};\n\nexport const StyleSheetContext = React.createContext<IStyleSheetContext>({\n  shouldForwardProp: undefined,\n  styleSheet: mainSheet,\n  stylis: mainStylis,\n});\n\nexport const StyleSheetConsumer = StyleSheetContext.Consumer;\n\nexport type IStylisContext = Stringifier | void;\nexport const StylisContext = React.createContext<IStylisContext>(undefined);\nexport const StylisConsumer = StylisContext.Consumer;\n\nexport function useStyleSheetContext() {\n  return useContext(StyleSheetContext);\n}\n\nexport type IStyleSheetManager = React.PropsWithChildren<{\n  /**\n   * If desired, you can pass this prop to disable \"speedy\" insertion mode, which\n   * uses the browser [CSSOM APIs](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet).\n   * When disabled, rules are inserted as simple text into style blocks.\n   */\n  disableCSSOMInjection?: undefined | boolean;\n  /**\n   * If you are working exclusively with modern browsers, vendor prefixes can often be omitted\n   * to reduce the weight of CSS on the page.\n   */\n  enableVendorPrefixes?: undefined | boolean;\n  /**\n   * Provide an optional selector to be prepended to all generated style rules.\n   */\n  namespace?: undefined | string;\n  /**\n   * Create and provide your own `StyleSheet` if necessary for advanced SSR scenarios.\n   */\n  sheet?: undefined | StyleSheet;\n  /**\n   * Starting in v6, styled-components no longer does its own prop validation\n   * and recommends use of transient props \"$prop\" to pass style-only props to\n   * components. If for some reason you are not able to use transient props, a\n   * prop validation function can be provided via `StyleSheetManager`, such as\n   * `@emotion/is-prop-valid`.\n   *\n   * When the return value is `true`, props will be forwarded to the DOM/underlying\n   * component. If return value is `false`, the prop will be discarded after styles\n   * are calculated.\n   *\n   * Manually composing `styled.{element}.withConfig({shouldForwardProp})` will\n   * override this default.\n   */\n  shouldForwardProp?: undefined | IStyleSheetContext['shouldForwardProp'];\n  /**\n   * An array of plugins to be run by stylis (style processor) during compilation.\n   * Check out [what's available on npm*](https://www.npmjs.com/search?q=keywords%3Astylis).\n   *\n   * \\* The plugin(s) must be compatible with stylis v4 or above.\n   */\n  stylisPlugins?: undefined | stylis.Middleware[];\n  /**\n   * Provide an alternate DOM node to host generated styles; useful for iframes.\n   */\n  target?: undefined | InsertionTarget;\n}>;\n\nexport function StyleSheetManager(props: IStyleSheetManager): React.JSX.Element {\n  const [plugins, setPlugins] = useState(props.stylisPlugins);\n  const { styleSheet } = useStyleSheetContext();\n\n  const resolvedStyleSheet = useMemo(() => {\n    let sheet = styleSheet;\n\n    if (props.sheet) {\n      sheet = props.sheet;\n    } else if (props.target) {\n      sheet = sheet.reconstructWithOptions({ target: props.target }, false);\n    }\n\n    if (props.disableCSSOMInjection) {\n      sheet = sheet.reconstructWithOptions({ useCSSOMInjection: false });\n    }\n\n    return sheet;\n  }, [props.disableCSSOMInjection, props.sheet, props.target, styleSheet]);\n\n  const stylis = useMemo(\n    () =>\n      createStylisInstance({\n        options: { namespace: props.namespace, prefix: props.enableVendorPrefixes },\n        plugins,\n      }),\n    [props.enableVendorPrefixes, props.namespace, plugins]\n  );\n\n  useEffect(() => {\n    if (!shallowequal(plugins, props.stylisPlugins)) setPlugins(props.stylisPlugins);\n  }, [props.stylisPlugins]);\n\n  const styleSheetContextValue = useMemo(\n    () => ({\n      shouldForwardProp: props.shouldForwardProp,\n      styleSheet: resolvedStyleSheet,\n      stylis,\n    }),\n    [props.shouldForwardProp, resolvedStyleSheet, stylis]\n  );\n\n  return (\n    <StyleSheetContext.Provider value={styleSheetContextValue}>\n      <StylisContext.Provider value={stylis}>{props.children}</StylisContext.Provider>\n    </StyleSheetContext.Provider>\n  );\n}\n","import StyleSheet from '../sheet';\nimport { Keyframes as KeyframesType, Stringifier } from '../types';\nimport styledError from '../utils/error';\nimport { setToString } from '../utils/setToString';\nimport { mainStylis } from './StyleSheetManager';\n\nexport default class Keyframes implements KeyframesType {\n  id: string;\n  name: string;\n  rules: string;\n\n  constructor(name: string, rules: string) {\n    this.name = name;\n    this.id = `sc-keyframes-${name}`;\n    this.rules = rules;\n\n    setToString(this, () => {\n      throw styledError(12, String(this.name));\n    });\n  }\n\n  inject = (styleSheet: StyleSheet, stylisInstance: Stringifier = mainStylis): void => {\n    const resolvedName = this.name + stylisInstance.hash;\n\n    if (!styleSheet.hasNameForId(this.id, resolvedName)) {\n      styleSheet.insertRules(\n        this.id,\n        resolvedName,\n        stylisInstance(this.rules, resolvedName, '@keyframes')\n      );\n    }\n  };\n\n  getName(stylisInstance: Stringifier = mainStylis): string {\n    return this.name + stylisInstance.hash;\n  }\n}\n","const isUpper = (c: string) => c >= 'A' && c <= 'Z';\n\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n */\nexport default function hyphenateStyleName(string: string): string {\n  let output = '';\n\n  for (let i = 0; i < string.length; i++) {\n    const c = string[i];\n    // Check for CSS variable prefix\n    if (i === 1 && c === '-' && string[0] === '-') {\n      return string;\n    }\n\n    if (isUpper(c)) {\n      output += '-' + c.toLowerCase();\n    } else {\n      output += c;\n    }\n  }\n\n  return output.startsWith('ms-') ? '-' + output : output;\n}\n","import Keyframes from '../models/Keyframes';\nimport StyleSheet from '../sheet';\nimport {\n  AnyComponent,\n  Dict,\n  ExecutionContext,\n  Interpolation,\n  IStyledComponent,\n  RuleSet,\n  Stringifier,\n  StyledObject,\n} from '../types';\nimport addUnitIfNeeded from './addUnitIfNeeded';\nimport { EMPTY_ARRAY } from './empties';\nimport getComponentName from './getComponentName';\nimport hyphenate from './hyphenateStyleName';\nimport isFunction from './isFunction';\nimport isPlainObject from './isPlainObject';\nimport isStatelessFunction from './isStatelessFunction';\nimport isStyledComponent from './isStyledComponent';\n\n/**\n * It's falsish not falsy because 0 is allowed.\n */\nconst isFalsish = (chunk: any): chunk is undefined | null | false | '' =>\n  chunk === undefined || chunk === null || chunk === false || chunk === '';\n\nexport const objToCssArray = (obj: Dict<any>): string[] => {\n  const rules = [];\n\n  for (const key in obj) {\n    const val = obj[key];\n    if (!obj.hasOwnProperty(key) || isFalsish(val)) continue;\n\n    // @ts-expect-error Property 'isCss' does not exist on type 'any[]'\n    if ((Array.isArray(val) && val.isCss) || isFunction(val)) {\n      rules.push(`${hyphenate(key)}:`, val, ';');\n    } else if (isPlainObject(val)) {\n      rules.push(`${key} {`, ...objToCssArray(val), '}');\n    } else {\n      rules.push(`${hyphenate(key)}: ${addUnitIfNeeded(key, val)};`);\n    }\n  }\n\n  return rules;\n};\n\nexport default function flatten<Props extends object>(\n  chunk: Interpolation<object>,\n  executionContext?: (ExecutionContext & Props) | undefined,\n  styleSheet?: StyleSheet | undefined,\n  stylisInstance?: Stringifier | undefined\n): RuleSet<Props> {\n  if (isFalsish(chunk)) {\n    return [];\n  }\n\n  /* Handle other components */\n  if (isStyledComponent(chunk)) {\n    return [`.${(chunk as unknown as IStyledComponent<'web', any>).styledComponentId}`];\n  }\n\n  /* Either execute or defer the function */\n  if (isFunction(chunk)) {\n    if (isStatelessFunction(chunk) && executionContext) {\n      const result = chunk(executionContext);\n\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        typeof result === 'object' &&\n        !Array.isArray(result) &&\n        !(result instanceof Keyframes) &&\n        !isPlainObject(result) &&\n        result !== null\n      ) {\n        console.error(\n          `${getComponentName(\n            chunk as AnyComponent\n          )} is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.`\n        );\n      }\n\n      return flatten<Props>(result, executionContext, styleSheet, stylisInstance);\n    } else {\n      return [chunk as unknown as IStyledComponent<'web'>];\n    }\n  }\n\n  if (chunk instanceof Keyframes) {\n    if (styleSheet) {\n      chunk.inject(styleSheet, stylisInstance);\n      return [chunk.getName(stylisInstance)];\n    } else {\n      return [chunk];\n    }\n  }\n\n  /* Handle objects */\n  if (isPlainObject(chunk)) {\n    return objToCssArray(chunk as StyledObject<Props>);\n  }\n\n  if (!Array.isArray(chunk)) {\n    return [chunk.toString()];\n  }\n\n  return flatMap(chunk, chunklet =>\n    flatten<Props>(chunklet, executionContext, styleSheet, stylisInstance)\n  );\n}\n\nfunction flatMap<T, U>(array: T[], transform: (value: T, index: number, array: T[]) => U[]): U[] {\n  return Array.prototype.concat.apply(EMPTY_ARRAY, array.map(transform));\n}\n","import unitless from '@emotion/unitless';\n\n// Taken from https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/dangerousStyleValue.js\nexport default function addUnitIfNeeded(name: string, value: any) {\n  // https://github.com/amilajack/eslint-plugin-flowtype-errors/issues/133\n  if (value == null || typeof value === 'boolean' || value === '') {\n    return '';\n  }\n\n  if (typeof value === 'number' && value !== 0 && !(name in unitless) && !name.startsWith('--')) {\n    return `${value}px`; // Presumes implicit 'px' suffix for unitless numbers except for CSS variables\n  }\n\n  return String(value).trim();\n}\n","import isFunction from './isFunction';\n\nexport default function isStatelessFunction(test: any): test is Function {\n  return isFunction(test) && !(test.prototype && test.prototype.isReactComponent);\n}\n","import { RuleSet } from '../types';\nimport isFunction from './isFunction';\nimport isStyledComponent from './isStyledComponent';\n\nexport default function isStaticRules<Props extends object>(rules: RuleSet<Props>) {\n  for (let i = 0; i < rules.length; i += 1) {\n    const rule = rules[i];\n\n    if (isFunction(rule) && !isStyledComponent(rule)) {\n      // functions are allowed to be static if they're just being\n      // used to get the classname of a nested styled component\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { SC_VERSION } from '../constants';\nimport StyleSheet from '../sheet';\nimport { ExecutionContext, RuleSet, Stringifier } from '../types';\nimport flatten from '../utils/flatten';\nimport generateName from '../utils/generateAlphabeticName';\nimport { hash, phash } from '../utils/hash';\nimport isStaticRules from '../utils/isStaticRules';\nimport { joinStringArray, joinStrings } from '../utils/joinStrings';\n\nconst SEED = hash(SC_VERSION);\n\n/**\n * ComponentStyle is all the CSS-specific stuff, not the React-specific stuff.\n */\nexport default class ComponentStyle {\n  baseHash: number;\n  baseStyle: ComponentStyle | null | undefined;\n  componentId: string;\n  isStatic: boolean;\n  rules: RuleSet<any>;\n  staticRulesId: string;\n\n  constructor(rules: RuleSet<any>, componentId: string, baseStyle?: ComponentStyle | undefined) {\n    this.rules = rules;\n    this.staticRulesId = '';\n    this.isStatic =\n      process.env.NODE_ENV === 'production' &&\n      (baseStyle === undefined || baseStyle.isStatic) &&\n      isStaticRules(rules);\n    this.componentId = componentId;\n    this.baseHash = phash(SEED, componentId);\n    this.baseStyle = baseStyle;\n\n    // NOTE: This registers the componentId, which ensures a consistent order\n    // for this component's styles compared to others\n    StyleSheet.registerId(componentId);\n  }\n\n  generateAndInjectStyles(\n    executionContext: ExecutionContext,\n    styleSheet: StyleSheet,\n    stylis: Stringifier\n  ): string {\n    let names = this.baseStyle\n      ? this.baseStyle.generateAndInjectStyles(executionContext, styleSheet, stylis)\n      : '';\n\n    // force dynamic classnames if user-supplied stylis plugins are in use\n    if (this.isStatic && !stylis.hash) {\n      if (this.staticRulesId && styleSheet.hasNameForId(this.componentId, this.staticRulesId)) {\n        names = joinStrings(names, this.staticRulesId);\n      } else {\n        const cssStatic = joinStringArray(\n          flatten(this.rules, executionContext, styleSheet, stylis) as string[]\n        );\n        const name = generateName(phash(this.baseHash, cssStatic) >>> 0);\n\n        if (!styleSheet.hasNameForId(this.componentId, name)) {\n          const cssStaticFormatted = stylis(cssStatic, `.${name}`, undefined, this.componentId);\n          styleSheet.insertRules(this.componentId, name, cssStaticFormatted);\n        }\n\n        names = joinStrings(names, name);\n        this.staticRulesId = name;\n      }\n    } else {\n      let dynamicHash = phash(this.baseHash, stylis.hash);\n      let css = '';\n\n      for (let i = 0; i < this.rules.length; i++) {\n        const partRule = this.rules[i];\n\n        if (typeof partRule === 'string') {\n          css += partRule;\n\n          if (process.env.NODE_ENV !== 'production') dynamicHash = phash(dynamicHash, partRule);\n        } else if (partRule) {\n          const partString = joinStringArray(\n            flatten(partRule, executionContext, styleSheet, stylis) as string[]\n          );\n          // The same value can switch positions in the array, so we include \"i\" in the hash.\n          dynamicHash = phash(dynamicHash, partString + i);\n          css += partString;\n        }\n      }\n\n      if (css) {\n        const name = generateName(dynamicHash >>> 0);\n\n        if (!styleSheet.hasNameForId(this.componentId, name)) {\n          styleSheet.insertRules(\n            this.componentId,\n            name,\n            stylis(css, `.${name}`, undefined, this.componentId)\n          );\n        }\n\n        names = joinStrings(names, name);\n      }\n    }\n\n    return names;\n  }\n}\n","import React, { useContext, useMemo } from 'react';\nimport styledError from '../utils/error';\nimport isFunction from '../utils/isFunction';\n\n/**\n * Override DefaultTheme to get accurate typings for your project.\n *\n * ```\n * // create styled-components.d.ts in your project source\n * // if it isn't being picked up, check tsconfig compilerOptions.types\n * import type { CSSProp } from \"styled-components\";\n * import Theme from './theme';\n *\n * type ThemeType = typeof Theme;\n *\n * declare module \"styled-components\" {\n *  export interface DefaultTheme extends ThemeType {}\n * }\n *\n * declare module \"react\" {\n *  interface DOMAttributes<T> {\n *    css?: CSSProp;\n *  }\n * }\n * ```\n */\nexport interface DefaultTheme {\n  [key: string]: any;\n}\n\ntype ThemeFn = (outerTheme?: DefaultTheme | undefined) => DefaultTheme;\ntype ThemeArgument = DefaultTheme | ThemeFn;\n\ntype Props = {\n  children?: React.ReactNode;\n  theme: ThemeArgument;\n};\n\nexport const ThemeContext = React.createContext<DefaultTheme | undefined>(undefined);\n\nexport const ThemeConsumer = ThemeContext.Consumer;\n\nfunction mergeTheme(theme: ThemeArgument, outerTheme?: DefaultTheme | undefined): DefaultTheme {\n  if (!theme) {\n    throw styledError(14);\n  }\n\n  if (isFunction(theme)) {\n    const themeFn = theme as ThemeFn;\n    const mergedTheme = themeFn(outerTheme);\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      (mergedTheme === null || Array.isArray(mergedTheme) || typeof mergedTheme !== 'object')\n    ) {\n      throw styledError(7);\n    }\n\n    return mergedTheme;\n  }\n\n  if (Array.isArray(theme) || typeof theme !== 'object') {\n    throw styledError(8);\n  }\n\n  return outerTheme ? { ...outerTheme, ...theme } : theme;\n}\n\n/**\n * Returns the current theme (as provided by the closest ancestor `ThemeProvider`.)\n *\n * If no `ThemeProvider` is found, the function will error. If you need access to the theme in an\n * uncertain composition scenario, `React.useContext(ThemeContext)` will not emit an error if there\n * is no `ThemeProvider` ancestor.\n */\nexport function useTheme(): DefaultTheme {\n  const theme = useContext(ThemeContext);\n\n  if (!theme) {\n    throw styledError(18);\n  }\n\n  return theme;\n}\n\n/**\n * Provide a theme to an entire react component tree via context\n */\nexport default function ThemeProvider(props: Props): React.JSX.Element | null {\n  const outerTheme = React.useContext(ThemeContext);\n  const themeContext = useMemo(\n    () => mergeTheme(props.theme, outerTheme),\n    [props.theme, outerTheme]\n  );\n\n  if (!props.children) {\n    return null;\n  }\n\n  return <ThemeContext.Provider value={themeContext}>{props.children}</ThemeContext.Provider>;\n}\n","import isPropValid from '@emotion/is-prop-valid';\nimport React, { createElement, Ref, useDebugValue } from 'react';\nimport { SC_VERSION } from '../constants';\nimport type {\n  AnyComponent,\n  Attrs,\n  BaseObject,\n  Dict,\n  ExecutionContext,\n  ExecutionProps,\n  IStyledComponent,\n  IStyledComponentFactory,\n  IStyledStatics,\n  OmitNever,\n  RuleSet,\n  StyledOptions,\n  WebTarget,\n} from '../types';\nimport { checkDynamicCreation } from '../utils/checkDynamicCreation';\nimport createWarnTooManyClasses from '../utils/createWarnTooManyClasses';\nimport determineTheme from '../utils/determineTheme';\nimport domElements from '../utils/domElements';\nimport { EMPTY_ARRAY, EMPTY_OBJECT } from '../utils/empties';\nimport escape from '../utils/escape';\nimport generateComponentId from '../utils/generateComponentId';\nimport generateDisplayName from '../utils/generateDisplayName';\nimport hoist from '../utils/hoist';\nimport isFunction from '../utils/isFunction';\nimport isStyledComponent from '../utils/isStyledComponent';\nimport isTag from '../utils/isTag';\nimport { joinStrings } from '../utils/joinStrings';\nimport merge from '../utils/mixinDeep';\nimport { setToString } from '../utils/setToString';\nimport ComponentStyle from './ComponentStyle';\nimport { useStyleSheetContext } from './StyleSheetManager';\nimport { DefaultTheme, ThemeContext } from './ThemeProvider';\n\nconst identifiers: { [key: string]: number } = {};\n\n/* We depend on components having unique IDs */\nfunction generateId(\n  displayName?: string | undefined,\n  parentComponentId?: string | undefined\n): string {\n  const name = typeof displayName !== 'string' ? 'sc' : escape(displayName);\n  // Ensure that no displayName can lead to duplicate componentIds\n  identifiers[name] = (identifiers[name] || 0) + 1;\n\n  const componentId = `${name}-${generateComponentId(\n    // SC_VERSION gives us isolation between multiple runtimes on the page at once\n    // this is improved further with use of the babel plugin \"namespace\" feature\n    SC_VERSION + name + identifiers[name]\n  )}`;\n\n  return parentComponentId ? `${parentComponentId}-${componentId}` : componentId;\n}\n\nfunction useInjectedStyle<T extends ExecutionContext>(\n  componentStyle: ComponentStyle,\n  resolvedAttrs: T\n) {\n  const ssc = useStyleSheetContext();\n\n  const className = componentStyle.generateAndInjectStyles(\n    resolvedAttrs,\n    ssc.styleSheet,\n    ssc.stylis\n  );\n\n  if (process.env.NODE_ENV !== 'production') useDebugValue(className);\n\n  return className;\n}\n\nfunction resolveContext<Props extends object>(\n  attrs: Attrs<React.HTMLAttributes<Element> & Props>[],\n  props: React.HTMLAttributes<Element> & ExecutionProps & Props,\n  theme: DefaultTheme\n) {\n  const context: React.HTMLAttributes<Element> &\n    ExecutionContext &\n    Props & { [key: string]: any; class?: string; ref?: React.Ref<any> } = {\n    ...props,\n    // unset, add `props.className` back at the end so props always \"wins\"\n    className: undefined,\n    theme,\n  };\n  let attrDef;\n\n  for (let i = 0; i < attrs.length; i += 1) {\n    attrDef = attrs[i];\n    const resolvedAttrDef = isFunction(attrDef) ? attrDef(context) : attrDef;\n\n    for (const key in resolvedAttrDef) {\n      context[key as keyof typeof context] =\n        key === 'className'\n          ? joinStrings(context[key] as string | undefined, resolvedAttrDef[key] as string)\n          : key === 'style'\n            ? { ...context[key], ...resolvedAttrDef[key] }\n            : resolvedAttrDef[key as keyof typeof resolvedAttrDef];\n    }\n  }\n\n  if (props.className) {\n    context.className = joinStrings(context.className, props.className);\n  }\n\n  return context;\n}\n\nlet seenUnknownProps = new Set();\n\nfunction useStyledComponentImpl<Props extends object>(\n  forwardedComponent: IStyledComponent<'web', Props>,\n  props: ExecutionProps & Props,\n  forwardedRef: Ref<Element>\n) {\n  const {\n    attrs: componentAttrs,\n    componentStyle,\n    defaultProps,\n    foldedComponentIds,\n    styledComponentId,\n    target,\n  } = forwardedComponent;\n\n  const contextTheme = React.useContext(ThemeContext);\n  const ssc = useStyleSheetContext();\n  const shouldForwardProp = forwardedComponent.shouldForwardProp || ssc.shouldForwardProp;\n\n  if (process.env.NODE_ENV !== 'production') useDebugValue(styledComponentId);\n\n  // NOTE: the non-hooks version only subscribes to this when !componentStyle.isStatic,\n  // but that'd be against the rules-of-hooks. We could be naughty and do it anyway as it\n  // should be an immutable value, but behave for now.\n  const theme = determineTheme(props, contextTheme, defaultProps) || EMPTY_OBJECT;\n\n  const context = resolveContext<Props>(componentAttrs, props, theme);\n  const elementToBeCreated: WebTarget = context.as || target;\n  const propsForElement: Dict<any> = {};\n\n  for (const key in context) {\n    if (context[key] === undefined) {\n      // Omit undefined values from props passed to wrapped element.\n      // This enables using .attrs() to remove props, for example.\n    } else if (key[0] === '$' || key === 'as' || (key === 'theme' && context.theme === theme)) {\n      // Omit transient props and execution props.\n    } else if (key === 'forwardedAs') {\n      propsForElement.as = context.forwardedAs;\n    } else if (!shouldForwardProp || shouldForwardProp(key, elementToBeCreated)) {\n      propsForElement[key] = context[key];\n\n      if (\n        !shouldForwardProp &&\n        process.env.NODE_ENV === 'development' &&\n        !isPropValid(key) &&\n        !seenUnknownProps.has(key) &&\n        // Only warn on DOM Element.\n        domElements.has(elementToBeCreated as any)\n      ) {\n        seenUnknownProps.add(key);\n        console.warn(\n          `styled-components: it looks like an unknown prop \"${key}\" is being sent through to the DOM, which will likely trigger a React console error. If you would like automatic filtering of unknown props, you can opt-into that behavior via \\`<StyleSheetManager shouldForwardProp={...}>\\` (connect an API like \\`@emotion/is-prop-valid\\`) or consider using transient props (\\`$\\` prefix for automatic filtering.)`\n        );\n      }\n    }\n  }\n\n  const generatedClassName = useInjectedStyle(componentStyle, context);\n\n  if (process.env.NODE_ENV !== 'production' && forwardedComponent.warnTooManyClasses) {\n    forwardedComponent.warnTooManyClasses(generatedClassName);\n  }\n\n  let classString = joinStrings(foldedComponentIds, styledComponentId);\n  if (generatedClassName) {\n    classString += ' ' + generatedClassName;\n  }\n  if (context.className) {\n    classString += ' ' + context.className;\n  }\n\n  propsForElement[\n    // handle custom elements which React doesn't properly alias\n    isTag(elementToBeCreated) &&\n    !domElements.has(elementToBeCreated as Extract<typeof domElements, string>)\n      ? 'class'\n      : 'className'\n  ] = classString;\n\n  // forwardedRef is coming from React.forwardRef.\n  // But it might not exist. Since React 19 handles `ref` like a prop, it only define it if there is a value.\n  // We don't want to inject an empty ref.\n  if (forwardedRef) {\n    propsForElement.ref = forwardedRef;\n  }\n\n  return createElement(elementToBeCreated, propsForElement);\n}\n\nfunction createStyledComponent<\n  Target extends WebTarget,\n  OuterProps extends object,\n  Statics extends object = BaseObject,\n>(\n  target: Target,\n  options: StyledOptions<'web', OuterProps>,\n  rules: RuleSet<OuterProps>\n): ReturnType<IStyledComponentFactory<'web', Target, OuterProps, Statics>> {\n  const isTargetStyledComp = isStyledComponent(target);\n  const styledComponentTarget = target as IStyledComponent<'web', OuterProps>;\n  const isCompositeComponent = !isTag(target);\n\n  const {\n    attrs = EMPTY_ARRAY,\n    componentId = generateId(options.displayName, options.parentComponentId),\n    displayName = generateDisplayName(target),\n  } = options;\n\n  const styledComponentId =\n    options.displayName && options.componentId\n      ? `${escape(options.displayName)}-${options.componentId}`\n      : options.componentId || componentId;\n\n  // fold the underlying StyledComponent attrs up (implicit extend)\n  const finalAttrs =\n    isTargetStyledComp && styledComponentTarget.attrs\n      ? styledComponentTarget.attrs.concat(attrs as unknown as Attrs<OuterProps>[]).filter(Boolean)\n      : (attrs as Attrs<OuterProps>[]);\n\n  let { shouldForwardProp } = options;\n\n  if (isTargetStyledComp && styledComponentTarget.shouldForwardProp) {\n    const shouldForwardPropFn = styledComponentTarget.shouldForwardProp;\n\n    if (options.shouldForwardProp) {\n      const passedShouldForwardPropFn = options.shouldForwardProp;\n\n      // compose nested shouldForwardProp calls\n      shouldForwardProp = (prop, elementToBeCreated) =>\n        shouldForwardPropFn(prop, elementToBeCreated) &&\n        passedShouldForwardPropFn(prop, elementToBeCreated);\n    } else {\n      shouldForwardProp = shouldForwardPropFn;\n    }\n  }\n\n  const componentStyle = new ComponentStyle(\n    rules,\n    styledComponentId,\n    isTargetStyledComp ? (styledComponentTarget.componentStyle as ComponentStyle) : undefined\n  );\n\n  function forwardRefRender(props: ExecutionProps & OuterProps, ref: Ref<Element>) {\n    return useStyledComponentImpl<OuterProps>(WrappedStyledComponent, props, ref);\n  }\n\n  forwardRefRender.displayName = displayName;\n\n  /**\n   * forwardRef creates a new interim component, which we'll take advantage of\n   * instead of extending ParentComponent to create _another_ interim class\n   */\n  let WrappedStyledComponent = React.forwardRef(forwardRefRender) as unknown as IStyledComponent<\n    'web',\n    any\n  > &\n    Statics;\n  WrappedStyledComponent.attrs = finalAttrs;\n  WrappedStyledComponent.componentStyle = componentStyle;\n  WrappedStyledComponent.displayName = displayName;\n  WrappedStyledComponent.shouldForwardProp = shouldForwardProp;\n\n  // this static is used to preserve the cascade of static classes for component selector\n  // purposes; this is especially important with usage of the css prop\n  WrappedStyledComponent.foldedComponentIds = isTargetStyledComp\n    ? joinStrings(styledComponentTarget.foldedComponentIds, styledComponentTarget.styledComponentId)\n    : '';\n\n  WrappedStyledComponent.styledComponentId = styledComponentId;\n\n  // fold the underlying StyledComponent target up since we folded the styles\n  WrappedStyledComponent.target = isTargetStyledComp ? styledComponentTarget.target : target;\n\n  Object.defineProperty(WrappedStyledComponent, 'defaultProps', {\n    get() {\n      return this._foldedDefaultProps;\n    },\n\n    set(obj) {\n      this._foldedDefaultProps = isTargetStyledComp\n        ? merge({}, styledComponentTarget.defaultProps, obj)\n        : obj;\n    },\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    checkDynamicCreation(displayName, styledComponentId);\n\n    WrappedStyledComponent.warnTooManyClasses = createWarnTooManyClasses(\n      displayName,\n      styledComponentId\n    );\n  }\n\n  setToString(WrappedStyledComponent, () => `.${WrappedStyledComponent.styledComponentId}`);\n\n  if (isCompositeComponent) {\n    const compositeComponentTarget = target as AnyComponent;\n\n    hoist<typeof WrappedStyledComponent, typeof compositeComponentTarget>(\n      WrappedStyledComponent,\n      compositeComponentTarget,\n      {\n        // all SC-specific things should not be hoisted\n        attrs: true,\n        componentStyle: true,\n        displayName: true,\n        foldedComponentIds: true,\n        shouldForwardProp: true,\n        styledComponentId: true,\n        target: true,\n      } as { [key in keyof OmitNever<IStyledStatics<'web', OuterProps>>]: true }\n    );\n  }\n\n  return WrappedStyledComponent;\n}\n\nexport default createStyledComponent;\n","import { StyledTarget } from '../types';\nimport getComponentName from './getComponentName';\nimport isTag from './isTag';\n\nexport default function generateDisplayName(target: StyledTarget<any>) {\n  return isTag(target) ? `styled.${target}` : `Styled(${getComponentName(target)})`;\n}\n","import { Interpolation } from '../types';\n\nexport default function interleave<Props extends object>(\n  strings: readonly string[],\n  interpolations: Interpolation<Props>[]\n): Interpolation<Props>[] {\n  const result: Interpolation<Props>[] = [strings[0]];\n\n  for (let i = 0, len = interpolations.length; i < len; i += 1) {\n    result.push(interpolations[i], strings[i + 1]);\n  }\n\n  return result;\n}\n","import {\n  BaseObject,\n  Interpolation,\n  NoInfer,\n  RuleSet,\n  StyledObject,\n  StyleFunction,\n  Styles,\n} from '../types';\nimport { EMPTY_ARRAY } from '../utils/empties';\nimport flatten from '../utils/flatten';\nimport interleave from '../utils/interleave';\nimport isFunction from '../utils/isFunction';\nimport isPlainObject from '../utils/isPlainObject';\n\n/**\n * Used when flattening object styles to determine if we should\n * expand an array of styles.\n */\nconst addTag = <T extends RuleSet<any>>(arg: T): T & { isCss: true } =>\n  Object.assign(arg, { isCss: true } as const);\n\nfunction css(styles: Styles<object>, ...interpolations: Interpolation<object>[]): RuleSet<object>;\nfunction css<Props extends object>(\n  styles: Styles<NoInfer<Props>>,\n  ...interpolations: Interpolation<NoInfer<Props>>[]\n): RuleSet<NoInfer<Props>>;\nfunction css<Props extends object = BaseObject>(\n  styles: Styles<NoInfer<Props>>,\n  ...interpolations: Interpolation<NoInfer<Props>>[]\n): RuleSet<NoInfer<Props>> {\n  if (isFunction(styles) || isPlainObject(styles)) {\n    const styleFunctionOrObject = styles as StyleFunction<Props> | StyledObject<Props>;\n\n    return addTag(\n      flatten<Props>(\n        interleave<Props>(EMPTY_ARRAY, [\n          styleFunctionOrObject,\n          ...interpolations,\n        ]) as Interpolation<object>\n      )\n    );\n  }\n\n  const styleStringArray = styles as TemplateStringsArray;\n\n  if (\n    interpolations.length === 0 &&\n    styleStringArray.length === 1 &&\n    typeof styleStringArray[0] === 'string'\n  ) {\n    return flatten<Props>(styleStringArray);\n  }\n\n  return addTag(\n    flatten<Props>(interleave<Props>(styleStringArray, interpolations) as Interpolation<object>)\n  );\n}\n\nexport default css;\n","import {\n  Attrs,\n  BaseObject,\n  ExecutionProps,\n  Interpolation,\n  IStyledComponent,\n  IStyledComponentFactory,\n  KnownTarget,\n  NoInfer,\n  Runtime,\n  StyledOptions,\n  StyledTarget,\n  Styles,\n  Substitute,\n} from '../types';\nimport { EMPTY_OBJECT } from '../utils/empties';\nimport styledError from '../utils/error';\nimport css from './css';\n\ntype AttrsResult<T extends Attrs<any>> = T extends (...args: any) => infer P\n  ? P extends object\n    ? P\n    : never\n  : T extends object\n    ? T\n    : never;\n\n/**\n * Based on Attrs being a simple object or function that returns\n * a prop object, inspect the attrs result and attempt to extract\n * any \"as\" prop usage to modify the runtime target.\n */\ntype AttrsTarget<\n  R extends Runtime,\n  T extends Attrs<any>,\n  FallbackTarget extends StyledTarget<R>,\n  Result extends ExecutionProps = AttrsResult<T>,\n> = Result extends { as: infer RuntimeTarget }\n  ? RuntimeTarget extends KnownTarget\n    ? RuntimeTarget\n    : FallbackTarget\n  : FallbackTarget;\n\nexport interface Styled<\n  R extends Runtime,\n  Target extends StyledTarget<R>,\n  OuterProps extends object,\n  OuterStatics extends object = BaseObject,\n> {\n  <Props extends object = BaseObject, Statics extends object = BaseObject>(\n    initialStyles: Styles<Substitute<OuterProps, NoInfer<Props>>>,\n    ...interpolations: Interpolation<Substitute<OuterProps, NoInfer<Props>>>[]\n  ): IStyledComponent<R, Substitute<OuterProps, Props>> &\n    OuterStatics &\n    Statics &\n    (R extends 'web'\n      ? Target extends string\n        ? {}\n        : Omit<Target, keyof React.Component<any>>\n      : {});\n\n  attrs: <\n    Props extends object = BaseObject,\n    PrivateMergedProps extends object = Substitute<OuterProps, Props>,\n    PrivateAttrsArg extends Attrs<PrivateMergedProps> = Attrs<PrivateMergedProps>,\n    PrivateResolvedTarget extends StyledTarget<R> = AttrsTarget<R, PrivateAttrsArg, Target>,\n  >(\n    attrs: PrivateAttrsArg\n  ) => Styled<\n    R,\n    PrivateResolvedTarget,\n    PrivateResolvedTarget extends KnownTarget\n      ? Substitute<\n          Substitute<OuterProps, React.ComponentPropsWithRef<PrivateResolvedTarget>>,\n          Props\n        >\n      : PrivateMergedProps,\n    OuterStatics\n  >;\n\n  withConfig: (config: StyledOptions<R, OuterProps>) => Styled<R, Target, OuterProps, OuterStatics>;\n}\n\nexport default function constructWithOptions<\n  R extends Runtime,\n  Target extends StyledTarget<R>,\n  OuterProps extends object = Target extends KnownTarget\n    ? React.ComponentPropsWithRef<Target>\n    : BaseObject,\n  OuterStatics extends object = BaseObject,\n>(\n  componentConstructor: IStyledComponentFactory<R, StyledTarget<R>, object, any>,\n  tag: StyledTarget<R>,\n  options: StyledOptions<R, OuterProps> = EMPTY_OBJECT\n): Styled<R, Target, OuterProps, OuterStatics> {\n  /**\n   * We trust that the tag is a valid component as long as it isn't\n   * falsish. Typically the tag here is a string or function (i.e.\n   * class or pure function component), however a component may also be\n   * an object if it uses another utility, e.g. React.memo. React will\n   * output an appropriate warning however if the `tag` isn't valid.\n   */\n  if (!tag) {\n    throw styledError(1, tag);\n  }\n\n  /* This is callable directly as a template function */\n  const templateFunction = <Props extends object = BaseObject, Statics extends object = BaseObject>(\n    initialStyles: Styles<Substitute<OuterProps, Props>>,\n    ...interpolations: Interpolation<Substitute<OuterProps, Props>>[]\n  ) =>\n    componentConstructor<Substitute<OuterProps, Props>, Statics>(\n      tag,\n      options as StyledOptions<R, Substitute<OuterProps, Props>>,\n      css<Substitute<OuterProps, Props>>(initialStyles, ...interpolations)\n    );\n\n  /**\n   * Attrs allows for accomplishing two goals:\n   *\n   * 1. Backfilling props at runtime more expressively than defaultProps\n   * 2. Amending the prop interface of a wrapped styled component\n   */\n  templateFunction.attrs = <\n    Props extends object = BaseObject,\n    PrivateMergedProps extends object = Substitute<OuterProps, Props>,\n    PrivateAttrsArg extends Attrs<PrivateMergedProps> = Attrs<PrivateMergedProps>,\n    PrivateResolvedTarget extends StyledTarget<R> = AttrsTarget<R, PrivateAttrsArg, Target>,\n  >(\n    attrs: PrivateAttrsArg\n  ) =>\n    constructWithOptions<\n      R,\n      PrivateResolvedTarget,\n      PrivateResolvedTarget extends KnownTarget\n        ? Substitute<\n            Substitute<OuterProps, React.ComponentPropsWithRef<PrivateResolvedTarget>>,\n            Props\n          >\n        : PrivateMergedProps,\n      OuterStatics\n    >(componentConstructor, tag, {\n      ...options,\n      attrs: Array.prototype.concat(options.attrs, attrs).filter(Boolean),\n    });\n\n  /**\n   * If config methods are called, wrap up a new template function\n   * and merge options.\n   */\n  templateFunction.withConfig = (config: StyledOptions<R, OuterProps>) =>\n    constructWithOptions<R, Target, OuterProps, OuterStatics>(componentConstructor, tag, {\n      ...options,\n      ...config,\n    });\n\n  return templateFunction;\n}\n","import * as React from 'react';\nimport createStyledComponent from '../models/StyledComponent';\nimport { BaseObject, KnownTarget, WebTarget } from '../types';\nimport domElements, { SupportedHTMLElements } from '../utils/domElements';\nimport constructWithOptions, { Styled as StyledInstance } from './constructWithOptions';\n\nconst baseStyled = <Target extends WebTarget, InjectedProps extends object = BaseObject>(\n  tag: Target\n) =>\n  constructWithOptions<\n    'web',\n    Target,\n    Target extends KnownTarget ? React.ComponentPropsWithRef<Target> & InjectedProps : InjectedProps\n  >(createStyledComponent, tag);\n\nconst styled = baseStyled as typeof baseStyled & {\n  [E in SupportedHTMLElements]: StyledInstance<'web', E, React.JSX.IntrinsicElements[E]>;\n};\n\n// Shorthands for all valid HTML Elements\ndomElements.forEach(domElement => {\n  // @ts-expect-error some react typing bs\n  styled[domElement] = baseStyled<typeof domElement>(domElement);\n});\n\nexport default styled;\nexport { StyledInstance };\n\n/**\n * This is the type of the `styled` HOC.\n */\nexport type Styled = typeof styled;\n\n/**\n * Use this higher-order type for scenarios where you are wrapping `styled`\n * and providing extra props as a third-party library.\n */\nexport type LibraryStyled<LibraryProps extends object = BaseObject> = <Target extends WebTarget>(\n  tag: Target\n) => typeof baseStyled<Target, LibraryProps>;\n","import StyleSheet from '../sheet';\nimport { ExecutionContext, RuleSet, Stringifier } from '../types';\nimport flatten from '../utils/flatten';\nimport isStaticRules from '../utils/isStaticRules';\nimport { joinStringArray } from '../utils/joinStrings';\n\nexport default class GlobalStyle<Props extends object> {\n  componentId: string;\n  isStatic: boolean;\n  rules: RuleSet<Props>;\n\n  constructor(rules: RuleSet<Props>, componentId: string) {\n    this.rules = rules;\n    this.componentId = componentId;\n    this.isStatic = isStaticRules(rules);\n\n    // pre-register the first instance to ensure global styles\n    // load before component ones\n    StyleSheet.registerId(this.componentId + 1);\n  }\n\n  createStyles(\n    instance: number,\n    executionContext: ExecutionContext & Props,\n    styleSheet: StyleSheet,\n    stylis: Stringifier\n  ): void {\n    const flatCSS = joinStringArray(\n      flatten(this.rules as RuleSet<object>, executionContext, styleSheet, stylis) as string[]\n    );\n    const css = stylis(flatCSS, '');\n    const id = this.componentId + instance;\n\n    // NOTE: We use the id as a name as well, since these rules never change\n    styleSheet.insertRules(id, id, css);\n  }\n\n  removeStyles(instance: number, styleSheet: StyleSheet): void {\n    styleSheet.clearRules(this.componentId + instance);\n  }\n\n  renderStyles(\n    instance: number,\n    executionContext: ExecutionContext & Props,\n    styleSheet: StyleSheet,\n    stylis: Stringifier\n  ): void {\n    if (instance > 2) StyleSheet.registerId(this.componentId + instance);\n\n    // NOTE: Remove old styles, then inject the new ones\n    this.removeStyles(instance, styleSheet);\n    this.createStyles(instance, executionContext, styleSheet, stylis);\n  }\n}\n","import React from 'react';\nimport type * as streamInternal from 'stream';\nimport { Readable } from 'stream';\nimport { IS_BROWSER, SC_ATTR, SC_ATTR_VERSION, SC_VERSION } from '../constants';\nimport StyleSheet from '../sheet';\nimport styledError from '../utils/error';\nimport { joinStringArray } from '../utils/joinStrings';\nimport getNonce from '../utils/nonce';\nimport { StyleSheetManager } from './StyleSheetManager';\n\ndeclare const __SERVER__: boolean;\n\nconst CLOSING_TAG_R = /^\\s*<\\/[a-z]/i;\n\nexport default class ServerStyleSheet {\n  instance: StyleSheet;\n  sealed: boolean;\n\n  constructor() {\n    this.instance = new StyleSheet({ isServer: true });\n    this.sealed = false;\n  }\n\n  _emitSheetCSS = (): string => {\n    const css = this.instance.toString();\n    if (!css) return '';\n    const nonce = getNonce();\n    const attrs = [\n      nonce && `nonce=\"${nonce}\"`,\n      `${SC_ATTR}=\"true\"`,\n      `${SC_ATTR_VERSION}=\"${SC_VERSION}\"`,\n    ];\n    const htmlAttr = joinStringArray(attrs.filter(Boolean) as string[], ' ');\n\n    return `<style ${htmlAttr}>${css}</style>`;\n  };\n\n  collectStyles(children: any): React.JSX.Element {\n    if (this.sealed) {\n      throw styledError(2);\n    }\n\n    return <StyleSheetManager sheet={this.instance}>{children}</StyleSheetManager>;\n  }\n\n  getStyleTags = (): string => {\n    if (this.sealed) {\n      throw styledError(2);\n    }\n\n    return this._emitSheetCSS();\n  };\n\n  getStyleElement = () => {\n    if (this.sealed) {\n      throw styledError(2);\n    }\n\n    const css = this.instance.toString();\n    if (!css) return [];\n\n    const props = {\n      [SC_ATTR]: '',\n      [SC_ATTR_VERSION]: SC_VERSION,\n      dangerouslySetInnerHTML: {\n        __html: css,\n      },\n    };\n\n    const nonce = getNonce();\n    if (nonce) {\n      (props as any).nonce = nonce;\n    }\n\n    // v4 returned an array for this fn, so we'll do the same for v5 for backward compat\n    return [<style {...props} key=\"sc-0-0\" />];\n  };\n\n  // @ts-expect-error alternate return types are not possible due to code transformation\n  interleaveWithNodeStream(input: Readable): streamInternal.Transform {\n    if (!__SERVER__ || IS_BROWSER) {\n      throw styledError(3);\n    } else if (this.sealed) {\n      throw styledError(2);\n    }\n\n    if (__SERVER__) {\n      this.seal();\n\n      const { Transform } = require('stream');\n\n      const readableStream: Readable = input;\n      const { instance: sheet, _emitSheetCSS } = this;\n\n      const transformer: streamInternal.Transform = new Transform({\n        transform: function appendStyleChunks(\n          chunk: string,\n          /* encoding */\n          _: string,\n          callback: Function\n        ) {\n          // Get the chunk and retrieve the sheet's CSS as an HTML chunk,\n          // then reset its rules so we get only new ones for the next chunk\n          const renderedHtml = chunk.toString();\n          const html = _emitSheetCSS();\n\n          sheet.clearTag();\n\n          // prepend style html to chunk, unless the start of the chunk is a\n          // closing tag in which case append right after that\n          if (CLOSING_TAG_R.test(renderedHtml)) {\n            const endOfClosingTag = renderedHtml.indexOf('>') + 1;\n            const before = renderedHtml.slice(0, endOfClosingTag);\n            const after = renderedHtml.slice(endOfClosingTag);\n\n            this.push(before + html + after);\n          } else {\n            this.push(html + renderedHtml);\n          }\n\n          callback();\n        },\n      });\n\n      readableStream.on('error', err => {\n        // forward the error to the transform stream\n        transformer.emit('error', err);\n      });\n\n      return readableStream.pipe(transformer);\n    }\n  }\n\n  seal = (): void => {\n    this.sealed = true;\n  };\n}\n","/* Import singletons */\nimport { SC_ATTR, SC_VERSION } from './constants';\nimport createGlobalStyle from './constructors/createGlobalStyle';\nimport css from './constructors/css';\nimport keyframes from './constructors/keyframes';\n/* Import Higher Order Components */\nimport withTheme from './hoc/withTheme';\n/* Import hooks */\nimport ServerStyleSheet from './models/ServerStyleSheet';\nimport {\n  IStyleSheetContext,\n  IStyleSheetManager,\n  IStylisContext,\n  StyleSheetConsumer,\n  StyleSheetContext,\n  StyleSheetManager,\n} from './models/StyleSheetManager';\n/* Import components */\nimport ThemeProvider, { ThemeConsumer, ThemeContext, useTheme } from './models/ThemeProvider';\nimport isStyledComponent from './utils/isStyledComponent';\n\n/* Warning if you've imported this file on React Native */\nif (\n  process.env.NODE_ENV !== 'production' &&\n  typeof navigator !== 'undefined' &&\n  navigator.product === 'ReactNative'\n) {\n  console.warn(\n    `It looks like you've imported 'styled-components' on React Native.\\nPerhaps you're looking to import 'styled-components/native'?\\nRead more about this at https://www.styled-components.com/docs/basics#react-native`\n  );\n}\n\nconst windowGlobalKey = `__sc-${SC_ATTR}__`;\n\n/* Warning if there are several instances of styled-components */\nif (\n  process.env.NODE_ENV !== 'production' &&\n  process.env.NODE_ENV !== 'test' &&\n  typeof window !== 'undefined'\n) {\n  // @ts-expect-error dynamic key not in window object\n  window[windowGlobalKey] ||= 0;\n\n  // @ts-expect-error dynamic key not in window object\n  if (window[windowGlobalKey] === 1) {\n    console.warn(\n      `It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\\n\\nSee https://s-c.sh/2BAXzed for more info.`\n    );\n  }\n\n  // @ts-expect-error dynamic key not in window object\n  window[windowGlobalKey] += 1;\n}\n\n/* Export everything */\nexport * from './secretInternals';\nexport { Attrs, DefaultTheme, ShouldForwardProp } from './types';\nexport {\n  IStyleSheetContext,\n  IStyleSheetManager,\n  IStylisContext,\n  ServerStyleSheet,\n  StyleSheetConsumer,\n  StyleSheetContext,\n  StyleSheetManager,\n  ThemeConsumer,\n  ThemeContext,\n  ThemeProvider,\n  createGlobalStyle,\n  css,\n  isStyledComponent,\n  keyframes,\n  useTheme,\n  SC_VERSION as version,\n  withTheme,\n};\n","import styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  background-color: #4d4d61;\r\n  border: none;\r\n  border-radius: 5px;\r\n  border: 1px solid gray;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  color: white;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  padding: 12px 10px;\r\n  transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s;\r\n\r\n  &:hover {\r\n    background-color: #2ba7bd;\r\n    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);\r\n    transform: translateX(3px);\r\n  }\r\n\r\n  &:active {\r\n      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n      transform: translateX(0px) scale(1);\r\n  }\r\n`;\r\n\r\nexport const S = {\r\n  Button,\r\n}","import { S } from \"./Button.styles\";\r\n\r\nconst Button = ({ type, title, onClick, className }) => {\r\n  return (\r\n    <S.Button className={className} onClick={onClick} type={type}>\r\n      {title}\r\n    </S.Button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import styled from \"styled-components\";\r\n\r\nconst Form = styled.form`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\r\n  grid-gap: 15px;\r\n  margin-top: 20px;\r\n  text-align: center;\r\n\r\n  div {\r\n    min-width: 300px;\r\n    width: 100%;\r\n  }\r\n\r\n  input,\r\n  textarea,\r\n  select {\r\n    width: -webkit-fill-available;\r\n  }\r\n`;\r\n\r\nexport const S = {\r\n  Form\r\n}","import { useState } from \"react\";\r\nimport Button from \"../buttons/Button\";\r\nimport { S } from \"./NoteForm.styles\";\r\n\r\nexport const NoteForm = ({ addNote }) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [type, setType] = useState(\"notes\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const newNote = {\r\n      id: Date.now(),\r\n      title,\r\n      content,\r\n      category,\r\n      type,\r\n    };\r\n    addNote(newNote);\r\n    setTitle(\"\");\r\n    setContent(\"\");\r\n    setCategory(\"\");\r\n  };\r\n\r\n  return (\r\n    <S.Form onSubmit={handleSubmit}>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          value={title}\r\n          required\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <textarea\r\n          placeholder=\"Content\"\r\n          value={content}\r\n          required\r\n          onChange={(e) => setContent(e.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Category\"\r\n          value={category}\r\n          required\r\n          onChange={(e) => setCategory(e.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <select value={type} onChange={(e) => setType(e.target.value)}>\r\n          <option value=\"notes\">Notes</option>\r\n          <option value=\"article\">Article</option>\r\n          <option value=\"site\">Site</option>\r\n          <option value=\"link\">Links</option>\r\n          <option value=\"code\">Code</option>\r\n          <option value=\"image\">Image</option>\r\n          <option value=\"video\">Video</option>\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <Button type=\"submit\" title=\"Add note\" />\r\n      </div>\r\n    </S.Form>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nconst Header = styled.header`\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-content: center;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n`\r\n\r\nexport const S = {\r\n  Header\r\n}","import { useState, useEffect } from 'react';\r\nimport { NoteForm } from \"../forms/NoteForm\";\r\nimport { S } from './Header.styles';\r\n\r\nexport const Header = () => {\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  // Загрузка заметок из localStorage при монтировании компонента\r\n  useEffect(() => {\r\n    const storedNotes = localStorage.getItem(\"notes\");\r\n    if (storedNotes) {\r\n      setNotes(JSON.parse(storedNotes));\r\n    }\r\n  }, []);\r\n\r\n  // Сохранение заметок в localStorage при их изменении\r\n  useEffect(() => {\r\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\r\n  }, [notes]);\r\n\r\n  const addNote = (note) => {\r\n    setNotes([...notes, note]);\r\n  };\r\n\r\n  return (\r\n    <S.Header>\r\n      <h2>Programming Notes</h2>\r\n      <NoteForm addNote={addNote} />\r\n    </S.Header>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst Line = styled.div`\r\n  margin-top: 30px;\r\n  margin-bottom: 0;\r\n  width: 100%;\r\n`;\r\n\r\nexport const S = {\r\n    Line\r\n}","import { S } from \"./Line.styles\";\r\n\r\nexport const Line = () => {\r\n  return (\r\n    <S.Line>\r\n      <hr />\r\n      <br />\r\n    </S.Line>\r\n  );\r\n};\r\n","export const CodeModule = {\r\n  id: 207,\r\n  title: \"код\",\r\n  children: [\r\n    {\r\n      title: \"Код с описанием и заголовком\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример добавления обработчика события клика:</p>\r\n          `,\r\n      code: `\r\nconst button = document.getElementById('myButton');\r\n\r\nbutton.addEventListener('click', function(event) {\r\nconsole.log('Кнопка нажата!');\r\n}, {\r\ncapture: false,\r\nonce: true\r\n});\r\n          `,\r\n    },\r\n    {\r\n      title: \"Код с заголовком без описания\",\r\n      type: \"text\",\r\n      code: `\r\nconst button = document.getElementById('myButton');\r\n\r\nbutton.addEventListener('click', function(event) {\r\nconsole.log('Кнопка нажата!');\r\n}, {\r\ncapture: false,\r\nonce: true\r\n});\r\n          `,\r\n    },\r\n    {\r\n      title: \"\", // Код без заголовка и описания\r\n      type: \"text\",\r\n      code: `\r\nconst button = document.getElementById('myButton');\r\n\r\nbutton.addEventListener('click', function(event) {\r\nconsole.log('Кнопка нажата!');\r\n}, {\r\ncapture: false,\r\nonce: true\r\n});\r\n          `,\r\n    },\r\n    {\r\n      title:\r\n        \"Код с заголовком, описанием в виде списков и каких других структур текста\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><strong>глобальный селектор *</strong>: не имеет веса</li>\r\n              <li><strong>Инлайновые стили</strong>: 1000</li>\r\n              <li><strong>ID-селекторы</strong>: 100</li>\r\n              <li><strong>Классы, атрибуты и псевдоклассы</strong>: 10</li>\r\n              <li><strong>Теги и псевдоэлементы</strong>: 1</li>\r\n            </ul>\r\n            <p>Пример:</p>\r\n          `,\r\n      code: `\r\n// Специфичность: 0 (глобальный селектор)\r\n* {\r\ncolor: black;\r\n}                    \r\n\r\n/* Специфичность: 1 (тег) */\r\np {\r\ncolor: blue;\r\n}\r\n\r\n/* Специфичность: 10 (класс) */\r\n.myClass {\r\ncolor: red;\r\n}\r\n\r\n/* Специфичность: 100 (ID) */\r\n#myId {\r\ncolor: green;\r\n}\r\n\r\n/* Специфичность: 1000 (инлайн стиль) */\r\n&lt;p style=\"color: yellow;\"&gt;Hello&lt;/p&gt;\r\n          `,\r\n    },\r\n    {\r\n      title: \"Код с заголовком без описания с ссылкой и телом ссылки\",\r\n      type: \"text\",\r\n      code: `\r\nconst button = document.getElementById('myButton');\r\n\r\nbutton.addEventListener('click', function(event) {\r\nconsole.log('Кнопка нажата!');\r\n}, {\r\ncapture: false,\r\nonce: true\r\n});\r\n          `,\r\n      link: \"ссылка\",\r\n      url: \"https://learn.javascript.ru/promise-basics\",\r\n    },\r\n    {\r\n      title: \"Код с заголовком без описания с неправильной ссылкой\",\r\n      type: \"text\",\r\n      code: `\r\nbutton.addEventListener('click', function(event) {\r\nconsole.log('Кнопка нажата!');\r\n}              \r\n          `,\r\n      link: \"ссылка\",\r\n      url: \"http:\",\r\n    },\r\n    {\r\n      title: \"Код с заголовком без описания с пустой ссылкой\",\r\n      type: \"text\",\r\n      code: `\r\nbutton.addEventListener('click', function(event) {\r\nconsole.log('Кнопка нажата!');\r\n}              \r\n          `,\r\n      link: \"ссылка\",\r\n      url: \"\",\r\n    },\r\n  ],\r\n};\r\n","export const ListModule = {\r\n  id: 206,\r\n  title: \"список\",\r\n  children: [\r\n    {\r\n      title: \"список с заголовком и описанием\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Использование <code><strong>Set</strong></code> имеет несколько преимуществ:</p>\r\n            <ul>\r\n              <li>Уникальность значений: автоматически удаляет дубликаты.</li>\r\n              <li>Быстрые операции: добавление, удаление и проверка наличия значений выполняется быстро.</li>\r\n              <li>Поддержка любых типов данных, включая объекты.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"список с заголовком, описанием и ссылкой\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Использование <code><strong>Set</strong></code> имеет несколько преимуществ:</p>\r\n            <ul>\r\n              <li>Уникальность значений: автоматически удаляет дубликаты.</li>\r\n              <li>Быстрые операции: добавление, удаление и проверка наличия значений выполняется быстро.</li>\r\n              <li>Поддержка любых типов данных, включая объекты.</li>\r\n            </ul>\r\n          `,\r\n      url: \"https://\",\r\n      link: \"ссылка\",\r\n    },\r\n    {\r\n      title: \"список с заголовком, описанием и неправильной ссылкой\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Использование <code><strong>Set</strong></code> имеет несколько преимуществ:</p>\r\n            <ul>\r\n              <li>Уникальность значений: автоматически удаляет дубликаты.</li>\r\n              <li>Быстрые операции: добавление, удаление и проверка наличия значений выполняется быстро.</li>\r\n              <li>Поддержка любых типов данных, включая объекты.</li>\r\n            </ul>\r\n          `,\r\n      url: \"http://\",\r\n      link: \"ссылка\",\r\n    },\r\n    {\r\n      title: \"список с заголовком, описанием и пустой ссылкой\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Использование <code><strong>Set</strong></code> имеет несколько преимуществ:</p>\r\n            <ul>\r\n              <li>Уникальность значений: автоматически удаляет дубликаты.</li>\r\n              <li>Быстрые операции: добавление, удаление и проверка наличия значений выполняется быстро.</li>\r\n              <li>Поддержка любых типов данных, включая объекты.</li>\r\n            </ul>\r\n          `,\r\n      url: \"\",\r\n      link: \"ссылка\",\r\n    },\r\n    {\r\n      title: \"список с заголовком и описанием\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Использование <code><strong>Set</strong></code> имеет несколько преимуществ:</p>\r\n            <ul>\r\n              <li>Уникальность значений: автоматически удаляет дубликаты.</li>\r\n              <li>Быстрые операции: добавление, удаление и проверка наличия значений выполняется быстро.</li>\r\n              <li>Поддержка любых типов данных, включая объекты:</li>\r\n                <ul>\r\n                  <li>Уникальность значений: автоматически удаляет дубликаты.</li>\r\n                  <li>Быстрые операции: добавление, удаление и проверка наличия значений выполняется быстро.</li>\r\n                  <li>Поддержка любых типов данных, включая объекты.</li>\r\n                </ul>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"нумерованный список с заголовком и описанием\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Использование <code><strong>Set</strong></code> имеет несколько преимуществ:</p>\r\n            <ol>\r\n              <li>Уникальность значений: автоматически удаляет дубликаты.</li>\r\n              <li>Быстрые операции: добавление, удаление и проверка наличия значений выполняется быстро.</li>\r\n              <li>Поддержка любых типов данных, включая объекты:</li>\r\n                <ul>\r\n                  <li>Уникальность значений: автоматически удаляет дубликаты.</li>\r\n                  <li>Быстрые операции: добавление, удаление и проверка наличия значений выполняется быстро.</li>\r\n                  <li>Поддержка любых типов данных, включая объекты.</li>\r\n                </ul>\r\n            </ol>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const TextModule = {\r\n  id: 205,\r\n  title: \"Текст\",\r\n  children: [\r\n    {\r\n      title: \"Заголовок текста с описанием\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><code><strong>Set</strong></code> — это встроенный объект в JavaScript, который позволяет хранить коллекцию уникальных значений. Это означает, что в одном <code>Set</code> не может быть дубликатов. Значения могут быть любого типа, включая объекты и примитивы.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: `без заголовка просто описание = JSON.parse(text, reviver): Преобразует строку JSON в значение.`,\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: `без заголовка описание и ссылка = JSON.parse(text, reviver): Преобразует строку JSON в значение.`,\r\n      link: \"ссылка\",\r\n      url: \"https://learn.javascript.ru/promise-basics\",\r\n    },\r\n    {\r\n      title: \"Заголовок текста\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><code><strong>Get</strong></code> — это встроенный объект в JavaScript, который позволяет получить значение свойства объекта по его имени.</p>\r\n          `,\r\n      link: \"ссылка\",\r\n      url: \"https://learn.javascript.ru/promise-basics\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: `без заголовка описание и неверная ссылка = JSON.parse(text, reviver): Преобразует строку JSON в значение.`,\r\n      link: \"ссылка\",\r\n      url: \"http:\",\r\n    },\r\n  ],\r\n};\r\n","import { CodeModule } from \"./CodeModule/CodeModule\";\r\nimport { ImageModule } from \"./ImageModule/ImageModule\";\r\nimport { LinkModule } from \"./LinkModule/LinkModule\";\r\nimport { ListModule } from \"./ListModule/ListModule\";\r\nimport { TextModule } from \"./TextModule/TextModule\";\r\nimport { VideoModule } from \"./VideoModule/VideoModule\";\r\n\r\nexport const demo = {\r\n  id: 19,\r\n  title: \"< demo >\",\r\n  children: [\r\n    LinkModule,\r\n    ImageModule,\r\n    VideoModule,\r\n    TextModule,\r\n    ListModule,\r\n    CodeModule,\r\n  ],\r\n};\r\n","export const LinkModule = {\r\n  id: 202,\r\n  title: \"ссылки\",\r\n  children: [\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"ссылка рабочая\",\r\n      url: \"https://learn.javascript.ru\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"ссылка пустая\",\r\n      url: \"\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"ссылка с неверным URL\",\r\n      url: \"http://learn.javascript.ru\",\r\n    },\r\n  ],\r\n};\r\n","export const ImageModule = {\r\n  id: 203,\r\n  title: \"картинки\",\r\n  children: [\r\n    {\r\n      title: \"Заголовок картинки\",\r\n      type: \"image\",\r\n      url: \"https://i.pinimg.com/enabled_hi/564x/54/e9/87/54e98761c2348545244bf25487c5be23.jpg\",\r\n    },\r\n    {\r\n      title: \"\", // можем оставить поле заголовка пустым\r\n      type: \"image\",\r\n      url: \"https://i.pinimg.com/enabled_hi/564x/54/e9/87/54e98761c2348545244bf25487c5be23.jpg\",\r\n    },\r\n    {\r\n      title: \"Заголовок картинки\",\r\n      type: \"image\",\r\n      url: \"\", // если адрес не корректный или мы вовсе в объекте не указали url,\r\n      // то возвращает alt атрибут и его содержимое ({data.title})\r\n    },\r\n  ],\r\n};\r\n","export const VideoModule = {\r\n  id: 204,\r\n  title: \"видео\",\r\n  children: [\r\n    {\r\n      title: \"Заголовок видео\",\r\n      type: \"video\",\r\n      url: \"https://www.youtube.com/embed/gVxyTOPPEPc\",\r\n    },\r\n    {\r\n      title: \"\", // если не требуется заголовок видео, то выводим лишь само видео\r\n      type: \"video\",\r\n      url: \"https://www.youtube.com/embed/gVxyTOPPEPc\",\r\n    },\r\n    {\r\n      title: \"Заголовок видео\",\r\n      type: \"video\",\r\n      description: \"Описание видео\", // {/* нужно ли описание к видео??? */}\r\n      url: \"https://www.youtube.com/embed/gVxyTOPPEPc\",\r\n    },\r\n    {\r\n      title: \"Заголовок видео\",\r\n      type: \"video\",\r\n      url: \"\", // если нет свойства url или нет адреса в объекте или он не верен,\r\n      // то возвращаем сообщение об ошибке в виде параграфа\r\n    },\r\n  ],\r\n};\r\n","import { PyCharm } from \"./PyCharm/PyCharm\";\r\nimport { SublimeText3 } from \"./SublimeText3/SublimeText3\";\r\nimport { VSCode } from \"./VSCode/VSCode\";\r\nimport { WebStorm } from \"./WebStorm/WebStorm\";\r\n\r\nexport const IDE = {\r\n  id: 18,\r\n  title: \"IDE\",\r\n  children: [\r\n    PyCharm,\r\n    SublimeText3,\r\n    VSCode,\r\n    WebStorm,\r\n  ],\r\n};\r\n","export const PyCharm = {\r\n  id: 201,\r\n  title: \"PyCharm\",\r\n  children: [\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"PyCharm Справка по горячим клавишам\",\r\n      url: \"https://hotkeycheatsheet.com/ru/hotkey-cheatsheet/pycharm\",\r\n    },\r\n  ],\r\n};\r\n","export const SublimeText3 = {\r\n  id: 200,\r\n  title: \"Sublime Text 3\",\r\n  children: [\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"Sublime Text 3 Справка по горячим клавишам\",\r\n      url: \"https://hotkeycheatsheet.com/ru/hotkey-cheatsheet/sublime-text-3\",\r\n    },\r\n  ],\r\n};\r\n","export const VSCode = {\r\n  id: 198,\r\n  title: \"VS Code\",\r\n  children: [\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"Visual Studio Code Справка по горячим клавишам\",\r\n      url: \"https://hotkeycheatsheet.com/ru/hotkey-cheatsheet/vscode\",\r\n    },\r\n  ],\r\n};\r\n","export const WebStorm = {\r\n  id: 199,\r\n  title: \"WebStorm\",\r\n  children: [\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"WebStorm Справка по горячим клавишам\",\r\n      url: \"https://hotkeycheatsheet.com/ru/hotkey-cheatsheet/webstorm\",\r\n    },\r\n  ],\r\n};\r\n","export const Definitions = {\r\n  id: 537,\r\n  title: \"Definitions\",\r\n  children: [\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: `<strong>BEM</strong> — это парадигма, которая используется для описания структуры элементов интерфейса.`,\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: `<strong>DOM</strong> — Document Object Model, представляет структуру документа в виде дерева объектов, позволяя JavaScript взаимодействовать с HTML и CSS.`,\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: `<strong>BOM</strong> — Browser Object Model, предоставляет объекты и методы для взаимодействия с браузером, такими как окно браузера, история посещений и другие возможности.`\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: `<strong>Functional programming</strong> — это парадигма программирования, в которой основное внимание уделяется использованию функций и избеганию изменения состояния и данных.`,\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Reducer</strong> - чистая функция, которая принимает старый 'state' и 'action', и возвращает новое модифицированное состояние если это нужно. По правилам иммутабельности работает лишь с копией state.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Actions</strong> - объект, который содержит тип и payload, которые передаются в reducer.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Thunk</strong> - функция, которая возвращает другую функцию.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Middleware</strong> - функция, которая принимает store и next и возвращает функцию, которая принимает action и вызывает next(action).\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Selectors</strong> - функция, которая принимает state и возвращает его часть.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>HOC</strong> - Higher Order Component - функция, которая принимает компонент и возвращает новый компонент.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Hooks</strong> - функции, которые позволяют использовать состояние и действия в функциональном компоненте.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        '<strong>Promise</strong> - объект, который представляет асинхронное выполнение. Он может быть в состояниях \"pending\", \"fulfilled\" и \"rejected.\"',\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Callback</strong> - функция, которая вызывается после завершения асинхронного действия.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>BLL</strong> - Business Logic Layer (слой бизнес логики).\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>DAL</strong> - Data Access Layer (слой доступа к данным).\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>UI</strong> - User Interface (пользовательский интерфейс).\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>API</strong> - Application Programming Interface (интерфейс программного обеспечения).\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>REST API</strong> - Representational State Transfer API (REST API).\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Side Effects</strong> - эффекты, которые происходят в результате выполнения асинхронного действия.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>OOP</strong> - Объектно-ориентированное программирование.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Encapsulation</strong> - инкапсуляция, которая предотвращает доступ к необходимому коду извне.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Polymorphism</strong> - это представление одного интерфейса для разных типов данных.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Inheritance</strong> - наследование, которое позволяет создавать новые классы на основе существующих.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Constructor</strong> - конструктор, который вызывается при создании объекта.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Super</strong> - ключевое слово, которое вызывается в конструкторе родительского класса.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>This</strong> - ключевое слово, которое ссылается на текущий объект.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Prototype</strong> - объект, который хранит ссылки на другие объекты.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Bind</strong> - метод, который привязывает функцию к объекту.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Component</strong> - это функциональный компонент React, который возвращает JSX.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>ComponentDidMount</strong> - это жизненный цикл компонента, который вызывается после его рендеринга.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>__proto__</strong> - это свойство объекта, которое хранит ссылки на другие объекты.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>SOLID</strong> - это принципы ООП, которые помогают разработчикам создавать простые и удобные программы.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>KISS (Keep It Simple, Stupid)</strong> - это принцип, который подразумевает, что системы следует проектировать максимально просто; избегать ненужной сложности.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>DRY (Don't Repeat Yourself)</strong> - Принцип, согласно которому информация и логика не должны повторяться в коде, чтобы уменьшить дублирование и облегчить поддержку.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>YAGNI (You Aren't Gonna Need It)</strong> - Принцип, который гласит, что не следует добавлять функциональности, пока не возникнет реальная необходимость, чтобы избежать излишней сложности.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Clean code</strong> - Это код, который легко читать, понимать и поддерживать. Он следует стандартам стиля, хорошо структурирован и документирован.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Continuous Integration (CI)</strong> -  Это практика разработки, при которой изменения в коде автоматически интегрируются и тестируются в основном репозитории, что позволяет выявлять и устранять ошибки на ранних стадиях.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Delivery (Continuous Delivery)</strong> - Это подход, при котором код всегда готов к выпуску в продакшн. Это позволяет быстро и предсказуемо разворачивать обновления.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Deployments</strong> - Этот процесс включает в себя развертывание приложения или обновлений на продуктивном сервере для его использования конечными пользователями.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Agile</strong> - Методология разработки программного обеспечения, ориентированная на гибкость и адаптивность, которая подчеркивает необходимость быстрой поставки частичных и готовых продуктов.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Scrum</strong> - Фреймворк для управления проектами в Agile, который организует команды в спринты для быстрой разработки, обратной связи и улучшения процессов.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>Kanban</strong> - Метод управления, который использует визуальные доски и карточки для отслеживания и управления потоком работы, акцентируя внимание на оптимизации процессов и сокращении времени выполнения задач.\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:`\r\n        <strong>CORS</strong> - Это механизм, который позволяет веб-страницам запрашивать ресурсы с другого домена, отличного от домена.`\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:`\r\n        <strong>Obfuscate / Обфускация</strong> — делать неочевидным, запутанным, сбивать с толку) или запутывание кода — приведение исходного кода или исполняемого кода программы к виду, сохраняющему её функциональность, но затрудняющему анализ, понимание алгоритмов работы и модификацию при декомпиляции.`\r\n    },\r\n  ],\r\n};\r\n","export const JSQuestions = {\r\n  id: 513,\r\n  title: \"JS questions\",\r\n  children: [\r\n    {\r\n      title: \"Основные концепции\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Типы данных.</li>\r\n                  <li>NaN.</li>\r\n                  <li>Разница и схожесть между null и undefined.</li>\r\n                  <li>Как объекты превращаются в примитивы?</li>\r\n                  <li>Оператор typeof.</li>\r\n                  <li>Преобразования типов данных.</li>\r\n                  <li>Переменные let, const, var.</li>\r\n                  <li>this.</li>\r\n                  <li>Descriptors, Getters, and Setters.</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Функции\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Функция declaration and expression, arrow function.</li>\r\n                  <li>Что такое функции высшего порядка.</li>\r\n                  <li>Для чего используется директива «use strict».</li>\r\n                  <li>Почему результатом сравнения двух похожих объектов является false.</li>\r\n                  <li>Как создать объект, не имеющий прототипа.</li>\r\n                  <li>Что такое замыкания и как они работают?</li>\r\n                  <li>Что такое this в JavaScript?</li>\r\n                  <li>Что такое стрелочные функции?</li>\r\n                  <li>Какие существуют способы передачи функции в качестве аргумента?</li>\r\n                  <li>Что такое «call()» и как они работают?</li>\r\n                  <li>Что такое «apply()» и как они работают?</li>\r\n                  <li>Что такое «bind()» и как они работают?</li>\r\n                  <li>Какие аргументы у addEventListener()?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Наследование и замыкания\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Посредством чего в JS реализуются наследования?</li>\r\n                  <li>Что такое замыкание (closure) и какие сценарии его использования?</li>\r\n                  <li>Как определить наличие свойства в объекте?</li>\r\n                  <li>Что такое прототипное наследование?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Promise и колбэки\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Promise.</li>\r\n                  <li>Что такое async/await.</li>\r\n                  <li>Как работают колбэки.</li>\r\n                  <li>Как обрабатывать ошибки в Promise?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Структуры данных\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Чем отличается Map от WeakMap?</li>\r\n                  <li>Чем отличается Set от WeakSet?</li>\r\n                  <li>Как работает сборщик мусора в JS?</li>\r\n                  <li>Живые и неживые коллекции?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Взаимодействие с DOM\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Как получить доступ к элементу DOM?</li>\r\n                  <li>Как отследить изменения поля объекта в функциональном компоненте?</li>\r\n                  <li>Как добавить и удалить элементы из DOM?</li>\r\n                  <li>Фазы событий в DOM?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Алгоритмы и модели\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>В чем разница между spread-оператором и rest-оператором?</li>\r\n                  <li>Случай переключателя — примеры, где это может быть полезно.</li>\r\n                  <li>Циклы - for, while, do while.</li>\r\n                  <li>Строгое и нестрогое сравнение.</li>\r\n                  <li>Тернарные, нулевое объединение, необязательное связывание и логические операторы – синтаксис и варианты использования.</li>\r\n                  <li>Императивное и декларативное программирование.</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Безопасность\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Что такое XSS (Cross-Site Scripting)?</li>\r\n                  <li>В чем разница между методами call, apply, bind?</li>\r\n                  <li>Что такое CSRF (Cross-Site Request Forgery)?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Частые вопросы\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Как работает механизм замыкания?</li>\r\n                  <li>Каковы особенности работы с асинхронным кодом?</li>\r\n                  <li>Что такое Event Loop в JavaScript?</li>\r\n                  <li>Отмена всплытия и погружения событий?</li>\r\n                  <li>Как работает прототипная подстановка?</li>\r\n                  <li>Отмена действий браузера по умолчанию?</li>\r\n                  <li>Делегирование событий?</li>\r\n                  <li>CRP (Cross-Origin Resource Policy)?</li>\r\n                  <li>Как работают заголовки CORS?</li>\r\n                  <li>Глобальный объект window и его свойства и методы?</li>\r\n                  <li>Что такое Scope?</li>\r\n                  <li>Что такое hoisting и как он работает?</li>\r\n                  <li>Что такое Temporal Dead Zone?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Остальные вопросы\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Bind, call, apply можно использовать на стрелочных функциях ?</li>\r\n                  <li>Какой контекст берет стрелочная функция в объекте / в классе?</li>\r\n                  <li></li>\r\n                  <li></li>\r\n                </ul>\r\n              `,\r\n    },\r\n  ],\r\n};\r\n","export const CommonQuestionsList = {\r\n  title: \"Общие вопросы\",\r\n  id: 512,\r\n  children: [\r\n    {\r\n      title: \"Основные концепции\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>SOLID.</li>\r\n                  <li>Как работает браузер?</li>\r\n                  <li>Что такое DOM?</li>\r\n                  <li>Из чего состоит HTTP запрос?</li>\r\n                  <li>Основы ООП.</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Структуры данных и алгоритмы\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Основные структуры данных и их организация (массив, список, стек, очередь, дерево, хеш-таблица и т.д.).</li>\r\n                  <li>Основные алгоритмы сортировки и поиска.</li>\r\n                  <li>Что такое двоичная система счисления?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Хранение данных\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Разница между cookie, sessionStorage и localStorage.</li>\r\n                  <li>Что такое линтеры?</li>\r\n                  <li>Что такое Prettier?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Программирование и методологии\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Функциональное программирование.</li>\r\n                  <li>Шаблоны проектирования.</li>\r\n                  <li>Антипаттерны.</li>\r\n                  <li>Continuous Integration (CI) vs Continuous Deployment (CD) vs Delivery Pipeline (DP).</li>\r\n                  <li>Методология Agile.</li>\r\n                  <li>Методология Scrum.</li>\r\n                  <li>Методология Kanban.</li>\r\n                </ul>\r\n              `,\r\n    },\r\n  ],\r\n};\r\n","export const HTMLCSS = {\r\n  id: 514,\r\n  title: \"HTML/CSS\",\r\n  children: [\r\n    {\r\n      title: \"Основные концепции\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Структура HTML документа.</li>\r\n                  <li>Способы подключения стилей в HTML.</li>\r\n                  <li>На что нужно обратить внимание при разработке мультиязычных сайтов?</li>\r\n                  <li>Что такое DOCTYPE и зачем он нужен?</li>\r\n                  <li>Что такое BEM?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"CSS\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Вес селектора или что такое специфичность в CSS.</li>\r\n                  <li>Псевдоклассы и псевдоэлементы.</li>\r\n                  <li>Коробчатая модель (box-sizing).</li>\r\n                  <li>em против rem, относительные и абсолютные значения.</li>\r\n                  <li>Разница между блочными и строчными элементами.</li>\r\n                  <li>Флексбокс.</li>\r\n                  <li>CSS Grid (Сетка).</li>\r\n                  <li>Как использовать CSS-переменные?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Семантика\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Какие существуют принципы семантической верстки?</li>\r\n                  <li>Что такое #shadow-root в инспекторе HTML-страницы?</li>\r\n                  <li>Как правильно использовать HTML5-теги?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Прочее\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Что такое прогрессивная развертка?</li>\r\n                  <li>Объясни разницу между script, script async и script defer.</li>\r\n                  <li>Как изменить цвет в SVG файле?</li>\r\n                  <li>Что такое адаптивный и отзывчивый дизайн?</li>\r\n                  <li>Как использовать медиа-запросы в CSS?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n  ],\r\n};\r\n","export const Network = {\r\n  id: 523,\r\n  title: \"Network\",\r\n  children: [\r\n    {\r\n      title: \"Основы протоколов\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>HTTP и HTTPS</li>\r\n                  <li>версии протокола HTTP 1.x и разница между ними</li>\r\n                  <li>протокол TCP и UDP</li>\r\n                  <li>модель OSI</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Методы HTTP\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>какие методы есть?</li>\r\n                  <li>GET и POST</li>\r\n                  <li>PATCH и PUT</li>\r\n                  <li>DELETE</li>\r\n                  <li>OPTIONS</li>\r\n                  <li>метод CONNECT</li>\r\n                  <li>идемпотентные методы HTTP</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Запросы и ответы\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>request / response</li>\r\n                  <li>Response codes</li>\r\n                  <li>заголовки HTTP</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Технологии взаимодействия\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>JWT</li>\r\n                  <li>простые и сложные запросы</li>\r\n                  <li>Long Polling / Short Polling requests</li>\r\n                  <li>Websocket</li>\r\n                  <li>SSE</li>\r\n                  <li>CORS</li>\r\n                  <li>CRP</li>\r\n                  <li>REST</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Безопасность и угрозы\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Web-угрозы</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Частые вопросы\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Что такое CORS и как он работает?</li>\r\n                  <li>В чем разница между GET и POST?</li>\r\n                  <li>Что такое RESTful API?</li>\r\n                  <li>Как работает механизм JWT?</li>\r\n                  <li>Что такое идемпотентность и когда она важна?</li>\r\n                  <li>Как обрабатывать ошибки в HTTP?</li>\r\n                  <li>Что происходит когда пользователь переходит по ссылке?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Обязательные темы для собеседований\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Основы HTTP/HTTPS</li>\r\n                  <li>Различия между методами HTTP</li>\r\n                  <li>Коды ответов HTTP</li>\r\n                  <li>Принципы REST и архитектура API</li>\r\n                  <li>Безопасность веб-приложений</li>\r\n                  <li>CORS и его применение</li>\r\n                </ul>\r\n              `,\r\n    },\r\n  ],\r\n};\r\n","export const ReactInterview = {\r\n  id: 538,\r\n  title: \"React\",\r\n  children: [\r\n    {\r\n      title: \"Основные концепции\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Что такое JSX?</li>\r\n                  <li>Что такое JSX-компоненты?</li>\r\n                  <li>Что такое виртуальный DOM?</li>\r\n                  <li>Что такое реквизиты в React?</li>\r\n                  <li>Что такое фрагмент React?</li>\r\n                  <li>Что такое children в React?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Компоненты\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Что такое Portal?</li>\r\n                  <li>В чем разница между классовыми и функциональными компонентами?</li>\r\n                  <li>Чем управляемые компоненты отличаются от неуправляемых?</li>\r\n                  <li>Как выполнить рендеринг элементов массива?</li>\r\n                  <li>Что такое методы жизненного цикла компонента?</li>\r\n                  <li>Как работают условный рендеринг элементов?</li>\r\n                  <li>Как отследить размонтирование функционального компонента?</li>\r\n                  <li>Что такое пользовательский хук?</li>\r\n                  <li>Перечислите правила создания пользовательского хука.</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Хуки\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Какие хуки вы знаете?</li>\r\n                  <li>В чем заключаются особенности использования useState?</li>\r\n                  <li>В чем заключаются особенности использования useEffect?</li>\r\n                  <li>Для чего и как используется useMemo?</li>\r\n                  <li>Для чего используется useCallback и как он работает?</li>\r\n                  <li>В чем разница между useMemo и useCallback?</li>\r\n                  <li>Для чего используется useRef и как он работает?</li>\r\n                  <li>Для чего используется useContext и как он работает?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Состояние\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Что такое менеджер состояний и с какими из них вы работали?</li>\r\n                  <li>В каких случаях можно использовать локальное состояние, а когда следует использовать глобальное состояние?</li>\r\n                  <li>Что такое reducer в Redux и какие параметры он принимает?</li>\r\n                  <li>Какой паттерн реализует Redux?</li>\r\n                  <li>Что такое Redux?</li>\r\n                  <li>В чем разница между Redux и MobX?</li>\r\n                  <li>Что такое store?</li>\r\n                  <li>Что такое action?</li>\r\n                  <li>Что такое reducer?</li>\r\n                  <li>Что такое middleware?</li>\r\n                  <li>Что такое dispatch?</li>\r\n                  <li>Что такое subscribe?</li>\r\n                  <li>Что такое bindActionCreators?</li>\r\n                  <li>Что такое действие и как можно изменить состояние в Redux?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Архитектура\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Как бы вы построили хорошую архитектуру проекта на React?</li>\r\n                  <li>Что такое Feature-Sliced Design?</li>\r\n                  <li>Как выполняется валидация данных в React-приложении?</li>\r\n                  <li>Какие архитектурные решения для React вы знаете?</li>\r\n                  <li>Расскажите об основных библиотеках React, которые вы знаете. Какие у них плюсы и минусы?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Другие аспекты\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Как отследить изменения поля объекта в функциональном компоненте?</li>\r\n                  <li>Как получить доступ к элементу DOM?</li>\r\n                  <li>Как обрабатывать асинхронные действия в Redux Thunk?</li>\r\n                  <li>Зачем нужны ключи в списках при использовании map()?</li>\r\n                  <li>Что такое React.memo()?</li>\r\n                  <li>Что такое React Reconciliation?</li>\r\n                  <li>Что такое публичный API?</li>\r\n                  <li>Как оптимизировать производительность React-приложения?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Частые вопросы\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>В чем разница между controlled и uncontrolled компонентами?</li>\r\n                  <li>Как работает механизм контекста в React?</li>\r\n                  <li>Что такое HOC (Higher-Order Component)?</li>\r\n                  <li>Как использовать React Router?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n  ],\r\n};\r\n","export const TypeScript = {\r\n  id: 539,\r\n  title: \"TypeScript\",\r\n  children: [\r\n    {\r\n      title: \"Основные концепции\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Что такое TypeScript и чем он отличается от JavaScript?</li>\r\n                  <li>Преимущества использования TypeScript.</li>\r\n                  <li>Типы данных в TypeScript: примитивные и сложные.</li>\r\n                  <li>Что такое интерфейсы и как они работают?</li>\r\n                  <li>Что такое типы объединения (Union Types) и пересечения (Intersection Types)?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Типизация\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Как объявить типы переменных?</li>\r\n                  <li>Что такое типы по умолчанию?</li>\r\n                  <li>Как использовать типы для функций?</li>\r\n                  <li>Как создать пользовательские типы?</li>\r\n                  <li>Типизация массивов и кортежей.</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Классы и интерфейсы\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Что такое классы в TypeScript?</li>\r\n                  <li>Как работает наследование классов?</li>\r\n                  <li>Что такое модификаторы доступа (public, private, protected)?</li>\r\n                  <li>Как использовать интерфейсы для описания структуры объектов?</li>\r\n                  <li>Что такое абстрактные классы?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Функции и дженерики\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Как объявить функции с типами параметров и возвращаемым типом?</li>\r\n                  <li>Что такое дженерики и как они работают?</li>\r\n                  <li>Как использовать дженерики с интерфейсами и классами?</li>\r\n                  <li>Типизация колбеков и промисов.</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Интеграция с JavaScript\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Как использовать JavaScript-библиотеки в TypeScript?</li>\r\n                  <li>Что такое DefinitelyTyped и как его использовать?</li>\r\n                  <li>Как писать декларации типов для сторонних библиотек?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Инструменты и конфигурация\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Как настроить TypeScript в проекте?</li>\r\n                  <li>Что такое tsconfig.json и какие параметры можно настроить?</li>\r\n                  <li>Интеграция TypeScript с инструментами сборки (Webpack, Parcel и др.).</li>\r\n                </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Частые вопросы\",\r\n      type: \"text\",\r\n      description: `\r\n                <ul>\r\n                  <li>Каковы основные различия между TypeScript и Flow?</li>\r\n                  <li>Как обрабатывать ошибки типов в TypeScript?</li>\r\n                  <li>Как использовать TypeScript с React?</li>\r\n                  <li>Что такое \"type assertion\" и когда его использовать?</li>\r\n                </ul>\r\n              `,\r\n    },\r\n  ],\r\n};\r\n","import { Definitions } from \"./Definitions/Definitions\";\r\nimport { JSQuestions } from \"./JSQuestions/JSQuestions\";\r\nimport { CommonQuestionsList } from \"./CommonQuestions/CommonQuestions\";\r\nimport { HTMLCSS } from \"./HTMLCSS/HTMLCSS\";\r\nimport { Network } from \"./Network/Network\";\r\nimport { ReactInterview } from \"./ReactInterview/ReactInterview\";\r\nimport { TypeScript } from \"./TypeScript/TypeScript\";\r\n\r\nexport const ThemeFrontend = {\r\n  id: 195,\r\n  title: \"Theme Frontend\",\r\n  children: [\r\n    Definitions,\r\n    CommonQuestionsList,\r\n    Network,\r\n    HTMLCSS,\r\n    JSQuestions,\r\n    TypeScript,\r\n    ReactInterview,\r\n  ],\r\n};\r\n","import { ThemeBackend } from \"./ThemeBackend/ThemeBackend\";\r\nimport { ThemeFrontend } from \"./ThemeFrontend/ThemeFrontend\";\r\n\r\nexport const Interview = {\r\n  id: 17,\r\n  title: \"Interview\",\r\n  children: [\r\n    ThemeBackend,\r\n    ThemeFrontend,\r\n  ],\r\n};\r\n","export const ThemeBackend = {\r\n  id: 196,\r\n  title: \"Theme Backend\",\r\n  children: [],\r\n};\r\n","export const AddEventListenerFunction = {\r\n  id: 131,\r\n  title: \"addEventListener() method arguments\",\r\n  children: [\r\n    {\r\n      title: \"1. event\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Название события, которое вы хотите отслеживать (например, <code>'click'</code>, <code>'keyup'</code>, <code>'load'</code>).</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"2. handler\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Функция, которая будет вызвана при возникновении события. Она принимает объект события в качестве первого аргумента.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"3. options\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Опциональный аргумент, который может быть:</p>\r\n            <ul>\r\n              <li><strong>boolean:</strong> Если <code>true</code>, обработчик будет вызван на фазе захвата.</li>\r\n              <li><strong>object:</strong> Объект с параметрами:</li>\r\n              <ul>\r\n                <li><code>capture</code>: Если <code>true</code>, обработчик срабатывает на фазе захвата.</li>\r\n                <li><code>once</code>: Если <code>true</code>, обработчик вызовется только один раз.</li>\r\n                <li><code>passive</code>: Если <code>true</code>, обработчик не вызовет <code>preventDefault()</code>.</li>\r\n              </ul>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Пример использования\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример добавления обработчика события клика:</p>\r\n          `,\r\n      code: `\r\nconst button = document.getElementById('myButton');\r\n\r\nbutton.addEventListener('click', function(event) {\r\nconsole.log('Кнопка нажата!');\r\n}, {\r\ncapture: false,\r\nonce: true\r\n});\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const ArraysJavaScript = {\r\n  id: 525,\r\n  title: \"Arrays in JS\",\r\n  children: [\r\n    {\r\n      title: \"Создание массивов\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>1. Литеральная нотация:</strong></p>\r\n          <pre><code>const fruits = ['apple', 'banana', 'orange'];</code></pre>\r\n  \r\n          <p><strong>2. Через конструктор Array:</strong></p>\r\n          <pre><code>const numbers = new Array(1, 2, 3); // [1, 2, 3]\r\n  const emptyArray = new Array(5); // Создаёт массив длиной 5 (пустые слоты)</code></pre>\r\n  \r\n          <p><strong>3. Из итерируемых объектов:</strong></p>\r\n          <pre><code>const fromString = Array.from('hello'); // ['h', 'e', 'l', 'l', 'o']\r\n  const fromSet = Array.from(new Set([1, 2, 1])); // [1, 2]</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Базовые операции\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Доступ к элементам:</strong></p>\r\n          <pre><code>fruits[0]; // 'apple' (индексация с 0)\r\n  fruits.at(-1); // 'orange' (новый метод, отрицательные индексы)</code></pre>\r\n  \r\n          <p><strong>Изменение длины:</strong></p>\r\n          <pre><code>fruits.length = 2; // Удаляет последний элемент\r\n  fruits.length = 5; // Добавляет пустые слоты</code></pre>\r\n  \r\n          <p><strong>Проверка массива:</strong></p>\r\n          <pre><code>Array.isArray(fruits); // true\r\n  fruits instanceof Array; // true</code></pre>\r\n  \r\n          <p><strong>Преобразование массива в строку:</strong></p>\r\n          <pre><code>fruits.toString(); // \"apple,banana,orange\"\r\n  fruits.join(' | '); // \"apple | banana | orange\"</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Методы массивов\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>1. Добавление/удаление элементов:</strong></p>\r\n          <ul>\r\n            <li><code>push()</code> - добавить в конец</li>\r\n            <li><code>pop()</code> - удалить с конца</li>\r\n            <li><code>unshift()</code> - добавить в начало</li>\r\n            <li><code>shift()</code> - удалить с начала</li>\r\n            <li><code>splice()</code> - универсальный метод</li>\r\n          </ul>\r\n          <pre><code>const arr = [1, 2, 3];\r\n  arr.push(4); // [1, 2, 3, 4]\r\n  arr.splice(1, 1, 'a', 'b'); // [1, 'a', 'b', 3, 4]</code></pre>\r\n  \r\n          <p><strong>2. Поиск элементов:</strong></p>\r\n          <ul>\r\n            <li><code>indexOf()</code> - индекс элемента</li>\r\n            <li><code>includes()</code> - проверка наличия</li>\r\n            <li><code>find()</code> - поиск по условию</li>\r\n            <li><code>findIndex()</code> - индекс по условию</li>\r\n          </ul>\r\n          <pre><code>const numbers = [5, 12, 8, 130, 44];\r\n  numbers.find(n => n > 10); // 12\r\n  numbers.includes(8); // true</code></pre>\r\n  \r\n          <p><strong>3. Сортировка и изменение порядка:</strong></p>\r\n          <ul>\r\n            <li><code>sort()</code> - сортирует массив на месте</li>\r\n            <li><code>reverse()</code> - меняет порядок элементов на обратный</li>\r\n          </ul>\r\n          <pre><code>const sorted = [40, 1, 5, 200].sort((a, b) => a - b); // [1, 5, 40, 200]\r\n  const reversed = [1, 2, 3].reverse(); // [3, 2, 1]</code></pre>\r\n  \r\n          <p><strong>4. Заполнение массива:</strong></p>\r\n          <ul>\r\n            <li><code>fill()</code> - заполняет массив указанным значением</li>\r\n            <li><code>copyWithin()</code> - копирует часть массива внутри себя</li>\r\n          </ul>\r\n          <pre><code>[1, 2, 3, 4].fill(0, 1, 3); // [1, 0, 0, 4]\r\n  [1, 2, 3, 4].copyWithin(0, 2, 4); // [3, 4, 3, 4]</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Итерация по массиву\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>1. forEach:</strong> Выполняет функцию для каждого элемента</p>\r\n          <pre><code>fruits.forEach((fruit, index) => {\r\n    console.log(\\`\\${index}: \\${fruit}\\`);\r\n  });\r\n  // 0: apple\r\n  // 1: banana\r\n  // 2: orange</code></pre>\r\n  \r\n          <p><strong>2. map:</strong> Создаёт новый массив, преобразуя элементы</p>\r\n          <pre><code>const lengths = fruits.map(fruit => fruit.length); // [5, 6, 6]</code></pre>\r\n  \r\n          <p><strong>3. filter:</strong> Фильтрует элементы по условию</p>\r\n          <pre><code>const longFruits = fruits.filter(fruit => fruit.length > 5); // ['banana', 'orange']</code></pre>\r\n  \r\n          <p><strong>4. reduce:</strong> Сводит массив к одному значению</p>\r\n          <pre><code>const sum = [1, 2, 3].reduce((acc, num) => acc + num, 0); // 6</code></pre>\r\n  \r\n          <p><strong>5. find и findIndex:</strong> Поиск по условию</p>\r\n          <pre><code>const found = numbers.find(n => n > 10); // 12\r\n  const index = numbers.findIndex(n => n > 10); // 1</code></pre>\r\n  \r\n          <p><strong>6. every и some:</strong> Проверка условий</p>\r\n          <pre><code>numbers.every(n => n > 0); // true\r\n  numbers.some(n => n > 100); // true</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Деструктуризация массивов\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Деструктуризация</strong> — это удобный способ извлечения значений из массива или объекта.</p>\r\n  \r\n          <p><strong>1. Базовый пример:</strong></p>\r\n          <pre><code>const [first, second] = fruits;\r\n  console.log(first, second); // 'apple' 'banana'</code></pre>\r\n  \r\n          <p><strong>2. Пропуск элементов:</strong></p>\r\n          <pre><code>const [first, , third] = fruits; // Пропускаем второй элемент\r\n  console.log(first, third); // 'apple' 'orange'</code></pre>\r\n  \r\n          <p><strong>3. Остаточные параметры:</strong></p>\r\n          <pre><code>const [first, ...rest] = fruits; // rest = ['banana', 'orange']\r\n  console.log(rest); // ['banana', 'orange']</code></pre>\r\n  \r\n          <p><strong>4. Значения по умолчанию:</strong></p>\r\n          <pre><code>const [a = 1, b = 2] = [10]; // a = 10, b = 2</code></pre>\r\n  \r\n          <p><strong>5. Вложенные массивы:</strong></p>\r\n          <pre><code>const nested = [1, [2, 3]];\r\n  const [x, [y, z]] = nested;\r\n  console.log(x, y, z); // 1 2 3</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Spread оператор\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>1. Копирование массива:</strong></p>\r\n          <pre><code>const newFruits = [...fruits]; // Полная копия массива</code></pre>\r\n  \r\n          <p><strong>2. Объединение массивов:</strong></p>\r\n          <pre><code>const vegetables = ['carrot', 'broccoli'];\r\n  const combined = [...fruits, ...vegetables]; // ['apple', 'banana', 'orange', 'carrot', 'broccoli']</code></pre>\r\n  \r\n          <p><strong>3. Передача элементов в функцию:</strong></p>\r\n          <pre><code>Math.max(...[1, 2, 3]); // Аналог Math.max(1, 2, 3)</code></pre>\r\n  \r\n          <p><strong>4. Преобразование итерируемых объектов:</strong></p>\r\n          <pre><code>const chars = [...'hello']; // ['h', 'e', 'l', 'l', 'o']</code></pre>\r\n  \r\n          <p><strong>5. Разбиение массива на аргументы:</strong></p>\r\n          <pre><code>function sum(a, b, c) {\r\n    return a + b + c;\r\n  }\r\n  const numbers = [1, 2, 3];\r\n  console.log(sum(...numbers)); // 6</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Полезные методы\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>1. slice():</strong> Копирует часть массива</p>\r\n          <pre><code>const copy = fruits.slice(); // Полная копия\r\n  const part = fruits.slice(1, 3); // ['banana', 'orange']</code></pre>\r\n  \r\n          <p><strong>2. concat():</strong> Объединяет массивы</p>\r\n          <pre><code>const newArray = fruits.concat(['kiwi', 'mango']); // ['apple', 'banana', 'orange', 'kiwi', 'mango']</code></pre>\r\n  \r\n          <p><strong>3. flat():</strong> \"Выравнивает\" вложенные массивы</p>\r\n          <pre><code>[1, [2, [3]]].flat(2); // [1, 2, 3]</code></pre>\r\n  \r\n          <p><strong>4. flatMap():</strong> Комбинация map и flat</p>\r\n          <pre><code>const sentences = ['hello world', 'foo bar'];\r\n  const words = sentences.flatMap(sentence => sentence.split(' '));\r\n  console.log(words); // ['hello', 'world', 'foo', 'bar']</code></pre>\r\n  \r\n          <p><strong>5. toSorted() и toReversed():</strong> Новые методы (ES2023)</p>\r\n          <pre><code>const sorted = [3, 1, 2].toSorted(); // [1, 2, 3]\r\n  const reversed = [1, 2, 3].toReversed(); // [3, 2, 1]</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Полезные ссылки\",\r\n      type: \"text\",\r\n      description: `\r\n          <p>Для более глубокого изучения:</p>\r\n          <ul>\r\n            <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"  target=\"_blank\">MDN Web Docs: Array</a></li>\r\n            <li><a href=\"https://learn.javascript.ru/array-methods\"  target=\"_blank\">Learn JavaScript: Методы массива</a></li>\r\n            <li><a href=\"https://javascript.info/array\"  target=\"_blank\">JavaScript.info: Массивы</a></li>\r\n          </ul>\r\n        `,\r\n    },\r\n  ],\r\n};\r\n","export const AsynchronousProgramming = {\r\n  id: 166,\r\n  title: \"Asynchronous Programming\",\r\n  children: [\r\n    {\r\n      title: \"Basics of async programming\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Асинхронное программирование</strong> — это парадигма, позволяющая выполнять операции, не блокируя основной поток выполнения. Это особенно полезно для задач, которые могут занять продолжительное время, таких как сетевые запросы или операции с файлами.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Key Concepts\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Основные концепции асинхронного программирования:</p>\r\n            <ul>\r\n              <li><strong>Callbacks</strong>: Функции обратного вызова, которые передаются в другие функции и вызываются после завершения асинхронной операции.</li>\r\n              <li><strong>Promises</strong>: Объекты, представляющие результат асинхронной операции, которые могут быть в состоянии ожидания (pending), выполнены (fulfilled) или отклонены (rejected).</li>\r\n              <li><strong>Async/Await</strong>: Синтаксический сахар над промисами, позволяющий писать асинхронный код, который выглядит как синхронный.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Callback\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример использования колбеков:</p>\r\n          `,\r\n      code: `\r\nfunction fetchData(callback) {\r\nsetTimeout(() => {\r\ncallback('Data received');\r\n}, 1000);\r\n}\r\n\r\nfetchData((data) => {\r\nconsole.log(data); // 'Data received'\r\n});\r\n          `,\r\n    },\r\n    {\r\n      title: \"Promise\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример использования промисов:</p>\r\n          `,\r\n      code: `\r\nfunction fetchData() {\r\nreturn new Promise((resolve, reject) => {\r\nsetTimeout(() => {\r\n  resolve('Data received');\r\n}, 1000);\r\n});\r\n}\r\n\r\nfetchData().then(data => {\r\nconsole.log(data); // 'Data received'\r\n});\r\n          `,\r\n    },\r\n    {\r\n      title: \"Async/Await\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример использования async/await:</p>\r\n          `,\r\n      code: `\r\nasync function fetchData() {\r\nreturn new Promise((resolve) => {\r\n  setTimeout(() => {\r\n    resolve('Data received');\r\n  }, 1000);\r\n});\r\n}\r\n\r\nasync function getData() {\r\nconst data = await fetchData();\r\nconsole.log(data); // 'Data received'\r\n}\r\n\r\ngetData();\r\n          `,\r\n    },\r\n    {\r\n      title: \"Benefits of Asynchronous Programming\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Преимущества асинхронного программирования:</p>\r\n            <ul>\r\n              <li><strong>Улучшенная производительность</strong>: Не блокирует основной поток выполнения, что позволяет выполнять другие задачи.</li>\r\n              <li><strong>Лучшая отзывчивость приложения</strong>: Пользовательский интерфейс остается активным во время выполнения длительных операций.</li>\r\n              <li><strong>Упрощение кода</strong>: Использование async/await делает код более читаемым и понятным.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const CancelAscentAndDive = {\r\n  id: 134,\r\n  title: \"Cancel ascent and dive / Отмена всплытия и погружения\",\r\n  children: [\r\n    {\r\n      title: \"1. Всплытие событий\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Всплытие - это процесс, при котором событие движется от целевого элемента к корню документа.</p>\r\n            <p>По умолчанию события всплывают, позволяя родительским элементам обрабатывать их.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"2. Погружение событий\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Погружение (или захват) - это процесс, при котором событие движется от корня документа к целевому элементу.</p>\r\n            <p>Этот процесс выполняется только при установке соответствующего параметра в <code>addEventListener</code>.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"3. Отмена всплытия\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Чтобы отменить всплытие события, используйте метод <code>event.stopPropagation()</code>.</p>\r\n            <p>Этот метод предотвращает дальнейшее распространение события по дереву DOM.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"4. Отмена погружения\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Чтобы отменить погружение события, используйте метод <code>event.stopImmediatePropagation()</code>.</p>\r\n            <p>Этот метод не только предотвращает дальнейшее распространение, но и останавливает выполнение других обработчиков события на текущем элементе.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Пример отмены всплытия\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример отмены всплытия события:</p>\r\n          `,\r\n      code: `\r\n    button.addEventListener('click', function(event) {\r\n      event.stopPropagation(); // Отменяет всплытие события\r\n      console.log('Кнопка нажата, всплытие отменено!');\r\n    });\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const ReadMoreAboutMemoryLeaksClosures = {\r\n  id: 515,\r\n  title: \"Подробнее о производительности и утечках памяти Замыкания\",\r\n  children: [\r\n    {\r\n      title: \"Способы улучшить работу с замыканиями\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Чтобы избежать утечек памяти при использовании замыканий (closures) в JavaScript, важно правильно освобождать ссылки на внешние переменные, которые больше не нужны. Вот основные способы:</p>\r\n        <ul>\r\n          <li><strong>Явный сброс ссылок:</strong> Освобождение ссылок на замыкания, когда они больше не нужны.</li>\r\n          <li><strong>Осторожность с DOM-элементами:</strong> Избегание сохранения ссылок на DOM-узлы, которые могут быть удалены.</li>\r\n          <li><strong>Использование WeakMap и WeakSet:</strong> Эти структуры данных позволяют создавать слабые ссылки, которые не мешают сборке мусора.</li>\r\n          <li><strong>Избегание ненужных замыканий:</strong> Минимизация создания лишних замыканий, особенно в циклах или обработчиках событий.</li>\r\n          <li><strong>Инструменты для отладки утечек памяти:</strong> Использование инструментов разработчика для анализа памяти.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Явный сброс ссылок\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Если замыкание сохраняется (например, в переменной или объекте), можно явно обнулить ссылку, когда она больше не нужна. Это позволяет сборщику мусора (Garbage Collector, GC) очистить память.</p>\r\n      `,\r\n      code: `\r\nfunction createHeavyClosure() {\r\n  const bigData = new Array(1000000).fill(\"Данные\"); // Большие данные\r\n  return () => {\r\n    console.log(bigData.length);\r\n  };\r\n}\r\n\r\nconst closure = createHeavyClosure();\r\nclosure(); // Используем замыкание\r\n\r\n// Когда замыкание больше не нужно:\r\nclosure = null; // ✅ Сбрасываем ссылку, разрешая сборку мусора (GC)\r\n      `,\r\n    },\r\n    {\r\n      title: \"Осторожность с DOM-элементами\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Замыкания, ссылающиеся на DOM-узлы, могут вызывать утечки памяти, особенно если элемент удаляется со страницы, но остаётся в памяти из-за замыкания. Решение — использовать слабые ссылки (WeakRef) или явно удалять обработчики событий.</p>\r\n      `,\r\n      code: `\r\nfunction setupButton() {\r\n  const button = document.getElementById('myButton');\r\n  \r\n  const onClick = () => {\r\n    console.log(button.id); // Замыкание хранит ссылку на 'button'\r\n  };\r\n\r\n  button.addEventListener('click', onClick);\r\n\r\n  // При удалении кнопки:\r\n  button.removeEventListener('click', onClick); // ✅ Важно для GC\r\n}\r\n      `,\r\n      explanation: `\r\n        <p>Альтернативное решение — использование <code>WeakRef</code>, чтобы избежать сильных ссылок на DOM-узлы:</p>\r\n      `,\r\n      alternativeCode: `\r\nfunction setupButton() {\r\n  const button = document.getElementById('myButton');\r\n  const weakButton = new WeakRef(button); // Слабая ссылка\r\n\r\n  const onClick = () => {\r\n    const button = weakButton.deref();\r\n    if (button) {\r\n      console.log(button.id);\r\n    }\r\n  };\r\n\r\n  button.addEventListener('click', onClick);\r\n\r\n  // При удалении кнопки:\r\n  button.removeEventListener('click', onClick); // ✅ Удаление обработчика\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Использование WeakMap и WeakSet\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>WeakMap</strong> и <strong>WeakSet</strong> — это структуры данных, которые позволяют создавать слабые ссылки на объекты. Они не препятствуют сборке мусора для своих ключей/значений, что делает их полезными для управления памятью.</p>\r\n      `,\r\n      code: `\r\nconst weakMap = new WeakMap();\r\n\r\nfunction createClosure() {\r\n  const key = {}; // Объект как ключ\r\n  const bigData = new Array(1000000).fill(\"Данные\");\r\n\r\n  weakMap.set(key, bigData); // Слабая ссылка на bigData\r\n\r\n  return () => {\r\n    console.log(weakMap.get(key));\r\n  };\r\n}\r\n\r\nconst closure = createClosure();\r\nclosure();\r\n\r\n// Когда key удаляется (например, выходит из scope), bigData тоже может быть собрана GC.\r\n      `,\r\n    },\r\n    {\r\n      title: \"Избегание ненужных замыканий\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Иногда замыкания создаются случайно, например, в циклах или при обработке событий. Это может привести к ошибкам или утечкам памяти. Вот пример проблемы и её решения:</p>\r\n      `,\r\n      code: `\r\n// Проблема:\r\nfor (var i = 0; i < 10; i++) {\r\n  setTimeout(() => console.log(i), 100); // Все таймеры выводят 10 (из-за замыкания на общую 'i')\r\n}\r\n\r\n// Решение:\r\n// Используйте let вместо var (блочная область видимости)\r\nfor (let i = 0; i < 10; i++) {\r\n  setTimeout(() => console.log(i), 100); // ✅ 0, 1, 2, ..., 9\r\n}\r\n\r\n// Или с явным созданием scope:\r\nfor (var i = 0; i < 10; i++) {\r\n  (function(j) {\r\n    setTimeout(() => console.log(j), 100); // ✅ Каждое замыкание получает свою копию 'j'\r\n  })(i);\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Инструменты для отладки утечек памяти\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Для диагностики утечек памяти можно использовать следующие инструменты:</p>\r\n        <ul>\r\n          <li><strong>Chrome DevTools:</strong> Вкладка <strong>Memory</strong> позволяет делать снимки памяти (<strong>Heap Snapshots</strong>) и анализировать их.</li>\r\n          <li><strong>WeakRef и FinalizationRegistry (ES2021):</strong> Позволяют отслеживать сборку мусора для объектов.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nconst registry = new FinalizationRegistry((heldValue) => {\r\n  console.log(\\`Объект \\${heldValue} был удалён GC\\`);\r\n});\r\n\r\nfunction trackObject(obj) {\r\n  registry.register(obj, obj.name);\r\n}\r\n\r\n// Пример использования:\r\nconst obj = { name: 'Example' };\r\ntrackObject(obj);\r\n\r\nobj = null; // ✅ После этого GC удалит объект, и будет вызван коллбэк из FinalizationRegistry\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","import { ReadMoreAboutMemoryLeaksClosures } from \"./ReadMoreAboutMemoryLeaksClosures/ReadMoreAboutMemoryLeaksClosures\";\r\n\r\nexport const Closure = {\r\n  id: 135,\r\n  title: \"Closure (Замыкания)\",\r\n  children: [\r\n    {\r\n      title: \"Определение замыкания\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Замыкание (closure)</strong> — это функция, которая запоминает свою внешнюю (лексическую) область видимости (<code>scope</code>) и сохраняет доступ к переменным этой области, даже после того, как внешняя функция завершила выполнение.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Как работает замыкание?\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Когда функция создаётся в JavaScript, она \"захватывает\" переменные из своей внешней области видимости. Даже если внешняя функция завершила выполнение, замыкание сохраняет ссылку на эти переменные.</p>\r\n            <p>Это происходит благодаря тому, что JavaScript использует механизм <strong>лексической области видимости</strong>, где функции имеют доступ к переменным из контекста, в котором они были созданы.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Зачем нам замыкание?\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Замыкания часто используются для:</p>\r\n            <ul>\r\n              <li><strong>Инкапсуляция данных (Data Encapsulation):</strong> Скрывает переменные от внешнего кода, создавая \"приватные\" свойства.</li>\r\n              <li><strong>Сохранение состояния (State Persistence):</strong> Позволяет функции \"помнить\" данные между вызовами без глобальных переменных.</li>\r\n              <li><strong>Функциональное программирование (Currying & FP):</strong> Каррирование (преобразование функции от многих аргументов в цепочку функций от одного аргумента). Создание функций с предустановленными параметрами (частичное применение).</li>\r\n              <li><strong>Обработка событий (Event Handlers):</strong> Сохранение контекста (например, ID элемента) для асинхронных операций.</li>\r\n              <li><strong>Модульный дизайн:</strong> Создание модулей с инкапсулированными данными и методами.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Пример замыкания\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример замыкания:</p>\r\n          `,\r\n      code: `\r\nfunction outerFunction() {\r\n  let outerVar = 'I am outside!';\r\n\r\n  function innerFunction() {\r\n    console.log(outerVar); // Доступ к outerVar\r\n  }\r\n\r\n  return innerFunction;\r\n}\r\n\r\nconst myInnerFunction = outerFunction();\r\nmyInnerFunction(); // Вывод: \"I am outside!\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"Пример использования замыкания для приватных переменных\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример создания приватной переменной:</p>\r\n          `,\r\n      code: `\r\nfunction createCounter() {\r\n  let _count = 0; // Условная приватная переменная\r\n\r\n  return {\r\n    increment: function() {\r\n      _count++;\r\n      return _count;\r\n    },\r\n    decrement: function() {\r\n      _count--;\r\n      return _count;\r\n    },\r\n    getCount: function() {\r\n      return _count;\r\n    }\r\n  };\r\n}\r\n\r\nconst counter = createCounter();\r\nconsole.log(counter.increment()); // 1\r\nconsole.log(counter.increment()); // 2\r\nconsole.log(counter.getCount()); // 2\r\nconsole.log(counter.decrement()); // 1\r\n          `,\r\n    },\r\n    {\r\n      title: \"Замыкания и производительность\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Хотя замыкания — мощный инструмент, они могут повлиять на производительность, если используются неправильно:</p>\r\n            <ul>\r\n              <li><strong>Утечки памяти:</strong> Если замыкание сохраняет ссылки на большие объекты или DOM-элементы, это может привести к утечкам памяти.</li>\r\n              <li><strong>Нагрузка на память:</strong> Замыкания хранят ссылки на внешние переменные, что увеличивает использование памяти.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Распространённые ошибки при использовании замыканий\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>При работе с замыканиями важно избегать следующих ошибок:</p>\r\n            <ul>\r\n              <li><strong>Неосвобожденные ссылки:</strong> Если замыкание продолжает ссылаться на большие объекты, они не будут удалены сборщиком мусора.</li>\r\n              <li><strong>Перезапись переменных:</strong> В циклах или асинхронных операциях можно случайно перезаписать переменные, что приведёт к ошибкам.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Пример ошибки с замыканиями в цикле\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример распространённой ошибки с замыканиями в цикле:</p>\r\n          `,\r\n      code: `\r\nfor (var i = 0; i < 3; i++) {\r\n  setTimeout(function() {\r\n    console.log(i); // Вывод: 3, 3, 3\r\n  }, 1000);\r\n}\r\n          `,\r\n      explanation: `\r\n            <p>Эта ошибка возникает потому, что переменная <code>i</code> является общей для всех итераций цикла. К моменту выполнения <code>setTimeout</code>, цикл уже завершился, и значение <code>i</code> равно 3.</p>\r\n            <p>Исправление с помощью <code>let</code>:</p>\r\n          `,\r\n      fixedCode: `\r\nfor (let i = 0; i < 3; i++) {\r\n  setTimeout(function() {\r\n    console.log(i); // Вывод: 0, 1, 2\r\n  }, 1000);\r\n}\r\n          `,\r\n    },\r\n    ReadMoreAboutMemoryLeaksClosures,\r\n  ],\r\n};\r\n","export const Task_1 = {\r\n  title: \"Task 1\",\r\n  id: 1000,\r\n  children: [\r\n    {\r\n      title: \"Count Odd Numbers below n\",\r\n      type: \"text\",\r\n      description: `\r\n              Given a number n, return the number of positive odd numbers below n, EASY!\r\n\r\n              Examples (Input -> Output)\r\n              7  -> 3 (because odd numbers below 7 are [1, 3, 5])\r\n              15 -> 7 (because odd numbers below 15 are [1, 3, 5, 7, 9, 11, 13])\r\n              Expect large Inputs!\r\n            `,\r\n      code: `\r\nfunction oddCount(n){\r\nif (n <= 0){\r\nreturn 0\r\n}\r\nif (n % 2 === 0){\r\nreturn n / 2\r\n} else {\r\nreturn (n - 1) / 2\r\n}\r\n}\r\n\r\n// or\r\n\r\nfunction oddCount(n){\r\nreturn n % 2 === 0 ? n / 2 : (n - 1) / 2 \r\n}\r\n\r\n// or \r\n\r\nconst oddCount = n => n % 2 === 0 ? n / 2 : (n - 1) / 2\r\n            `,\r\n    },\r\n  ],\r\n};\r\n","export const Task_10 = {\r\n  title: \"Task 10\",\r\n  id: 1009,\r\n  children: [\r\n    {\r\n      title: \"title\",\r\n      type: \"text\",\r\n      description: `\r\n              word\r\n            `,\r\n      code: `\r\n            // code \r\n            `,\r\n    },\r\n  ],\r\n};\r\n","export const Task_11 = {\r\n  title: \"Task 11\",\r\n  id: 1010,\r\n  children: [\r\n    {\r\n      title: \"title\",\r\n      type: \"text\",\r\n      description: `\r\n              word\r\n            `,\r\n      code: `\r\n            // code \r\n            `,\r\n    },\r\n  ],\r\n};\r\n","export const Task_12 = {\r\n  title: \"Task 12\",\r\n  id: 1011,\r\n  children: [\r\n    {\r\n      title: \"title\",\r\n      type: \"text\",\r\n      description: `\r\n              word\r\n            `,\r\n      code: `\r\n            // code \r\n            `,\r\n    },\r\n  ],\r\n};\r\n","export const Task_13 = {\r\n  title: \"Task 13\",\r\n  id: 1012,\r\n  children: [\r\n    {\r\n      title: \"title\",\r\n      type: \"text\",\r\n      description: `\r\n              word\r\n            `,\r\n      code: `\r\n            // code \r\n            `,\r\n    },\r\n  ],\r\n};\r\n","export const Task_14 = {\r\n  title: \"Task 14\",\r\n  id: 1013,\r\n  children: [\r\n    {\r\n      title: \"title\",\r\n      type: \"text\",\r\n      description: `\r\n              word\r\n            `,\r\n      code: `\r\n            // code \r\n            `,\r\n    },\r\n  ],\r\n};\r\n","export const Task_15 = {\r\n  title: \"Task 15\",\r\n  id: 1014,\r\n  children: [\r\n    {\r\n      title: \"title\",\r\n      type: \"text\",\r\n      description: `\r\n              word\r\n            `,\r\n      code: `\r\n            // code \r\n            `,\r\n    },\r\n  ],\r\n};\r\n","export const Task_2 = {\r\n  title: \"Task 2\",\r\n  id: 1001,\r\n  children: [\r\n    {\r\n      title: \"Pole Vault Starting Marks\",\r\n      type: \"text\",\r\n      description: `\r\n            For a pole vaulter, it is very important to begin the approach run at the best possible starting mark. This is affected by numerous factors and requires fine-tuning in practice. But there is a guideline that will help a beginning vaulter start at approximately the right location for the so-called \"three-step approach,\" based on the vaulter's body height.\r\n            This guideline was taught to me in feet and inches, but due to the international nature of Codewars, I am creating this kata to use metric units instead.\r\n            You are given the following two guidelines to begin with: (1) A vaulter with a height of 1.52 meters should start at 9.45 meters on the runway. (2) A vaulter with a height of 1.83 meters should start at 10.67 meters on the runway.\r\n            You will receive a vaulter's height in meters (which will always lie in a range between a minimum of 1.22 meters and a maximum of 2.13 meters). Your job is to return the best starting mark in meters, rounded to two decimal places.\r\n            Hint: Based on the two guidelines given above, you will want to account for the change in starting mark per change in body height. This involves a linear relationship. (If you're not clear on that, search online for \"linear equation.\") But there is also a constant offset involved. If you can determine the rate of change described above, you should be able to determine that constant offset.\r\n            `,\r\n      code: `\r\n// Remember: Body height of 1.52 m --> starting mark: 9.45 m\r\n//           Body height of 1.83 m --> starting mark: 10.67 m\r\n// All other starting marks are based on these guidelines!\r\n\r\nfunction startingMark(bodyHeight){\r\nconst slope = (10.67 - 9.45) / (1.83 - 1.52)\r\nconst freeMember = 9.45 - (slope * 1.52)\r\nconst result = slope * bodyHeight + freeMember\r\nreturn parseFloat(result.toFixed(2))\r\n}\r\n\r\n// or\r\n\r\nconst startingMark = bodyHeight => {\r\nconst slope = (10.67 - 9.45)/(1.83 - 1.52);\r\nconst freeMember = 9.45 - (slope * 1.52);\r\nconst x = slope * bodyHeight + freeMember;\r\nreturn parseFloat(x.toFixed(2)) \r\n}\r\n\r\n// or \r\n\r\nfunction startingMark(bodyHeight) {\r\nlet a = {x: 1.52, y: 9.45},\r\nb = {x: 1.83, y: 10.67},\r\nslope = (b.y - a.y) / (b.x - a.x);\r\nreturn Math.round((slope * bodyHeight + b.y - slope * b.x) * 100) / 100;\r\n}\r\n            `,\r\n    },\r\n  ],\r\n};\r\n","export const Task_3 = {\r\n  title: \"Task 3\",\r\n  id: 1002,\r\n  children: [\r\n    {\r\n      title: \"Playing with cubes II\",\r\n      type: \"text\",\r\n      description: `\r\n            Hey Codewarrior!\r\n            In the previous kata, you have implemented a Cube class, but now we need your help again! I'm talking about constructors. We don't have one. Let's code one (or more) such that one can instantiate an object via it, handling either no arguments or a single integer. \r\n            Also we got a problem with negative values. Correct the code so negative values will be switched to positive ones!    \r\n            The constructor taking no arguments should assign 0 to Cube's Side property.\r\n            `,\r\n      code: `\r\n// This Cube class needs help\r\n// Implement the constructor so that it can take an integer for the side or no args\r\nclass Cube {\r\nconstructor(side){\r\nthis.side = (side !== undefined) ? Math.abs(side) : 0\r\n}\r\ngetSide() {\r\nreturn this.side; \r\n}\r\nsetSide(n) {\r\nthis.side = Math.abs(n);\r\n}\r\n}\r\n\r\n// or\r\n\r\nclass Cube {\r\nconstructor(side){\r\nthis.setSide(side)\r\n}\r\ngetSide() {\r\nreturn this.side; \r\n}\r\nsetSide(n = 0) {\r\nthis.side = Math.abs(n);\r\n}\r\n}\r\n            `,\r\n    },\r\n  ],\r\n};\r\n","export const Task_4 = {\r\n  title: \"Task 4\",\r\n  id: 1003,\r\n  children: [\r\n    {\r\n      title: \"Polish alphabet\",\r\n      type: \"text\",\r\n      description: `\r\n            There are 32 letters in the Polish alphabet: 9 vowels and 23 consonants.\r\n            Your task is to change the letters with diacritics:\r\n            ą -> a,\r\n            ć -> c,\r\n            ę -> e,\r\n            ł -> l,\r\n            ń -> n,\r\n            ó -> o,\r\n            ś -> s,\r\n            ź -> z,\r\n            ż -> z\r\n            and print out the string without the use of the Polish letters.\r\n            For example:\r\n            \"Jędrzej Błądziński\"  -->  \"Jedrzej Bladzinski\"\r\n            `,\r\n      code: `\r\nfunction correctPolishLetters (string) {\r\nconst ArrayDiacriticsLetters = [\r\n{ key: 'ą', value: 'a' },\r\n{ key: 'ć', value: 'c' },\r\n{ key: 'ę', value: 'e' },\r\n{ key: 'ł', value: 'l' },\r\n{ key: 'ń', value: 'n' },\r\n{ key: 'ó', value: 'o' },\r\n{ key: 'ś', value: 's' },\r\n{ key: 'ź', value: 'z' },\r\n{ key: 'ż', value: 'z' }\r\n]\r\n\r\nlet spreadString = [...string]\r\nlet result = []\r\nfor(let i = 0; i < string.length; i++){\r\nfor(let j = 0; j < ArrayDiacriticsLetters.length; j++){\r\nif(spreadString[i] === ArrayDiacriticsLetters[j].key){\r\n  result.push(ArrayDiacriticsLetters[j].value)\r\n}\r\n}\r\nif(!(result[i]) === true){\r\nresult.push(spreadString[i])\r\n} \r\n}\r\n\r\nreturn result.join('')\r\n}\r\n\r\n// or\r\n\r\nfunction correctPolishLetters (str) {\r\nreturn str\r\n.replace(/ą/g, 'a')\r\n.replace(/ć/g, 'c')\r\n.replace(/ę/g, 'e')\r\n.replace(/ł/g, 'l')\r\n.replace(/ń/g, 'n')\r\n.replace(/ó/g, 'o')\r\n.replace(/ś/g, 's')\r\n.replace(/ź/g, 'z')\r\n.replace(/ż/g, 'z')\r\n}\r\n\r\n// or\r\n\r\ndescribe(\"Tests\", () => {\r\nit(\"test\", () => {\r\nassert.strictEqual(correctPolishLetters(\"Jędrzej Błądziński\"), \"Jedrzej Bladzinski\");\r\nassert.strictEqual(correctPolishLetters(\"Lech Wałęsa\"), \"Lech Walesa\");\r\nassert.strictEqual(correctPolishLetters(\"Maria Skłodowska-Curie\"), \"Maria Sklodowska-Curie\");\r\n});\r\n});\r\n\r\n// or\r\n\r\nconst correctPolishLetters = str => {\r\nconst diacritics = {'ą':'a','ć':'c','ę':'e','ł':'l','ń':'n','ó':'o','ś':'s','ź':'z','ż':'z'};\r\n\r\nreturn str.replace(/[ąćęłńóśźż]/g, match => diacritics[match])\r\n}\r\n            `,\r\n    },\r\n  ],\r\n};\r\n","export const Task_5 = {\r\n  title: \"Task 5\",\r\n  id: 1004,\r\n  children: [\r\n    {\r\n      title: \"Who is going to pay for the wall?\",\r\n      type: \"text\",\r\n      description: `\r\n              Don Drumphet lives in a nice neighborhood, but one of his neighbors has started to let his house go. Don Drumphet wants to build a wall between his house and his neighbor’s, and is trying to get the neighborhood association to pay for it. He begins to solicit his neighbors to petition to get the association to build the wall. Unfortunately for Don Drumphet, he cannot read very well, has a very limited attention span, and can only remember two letters from each of his neighbors’ names. As he collects signatures, he insists that his neighbors keep truncating their names until two letters remain, and he can finally read them.\r\n              Your code will show Full name of the neighbor and the truncated version of the name as an array. If the number of the characters in name is less than or equal to two, it will return an array containing only the name as is.\r\n            `,\r\n      code: `\r\nfunction whoIsPaying(name){\r\nconst sliceName = name.slice(0, 2)\r\nif(name.length > 2){\r\nreturn [name, sliceName]\r\n}\r\nreturn [name]\r\n}\r\n\r\n// or \r\n\r\nconst whoIsPaying = name => name.length > 2 ? ([name, name.substr(0, 2)]) : [name]\r\n            `,\r\n    },\r\n  ],\r\n};\r\n","export const Task_6 = {\r\n  title: \"Task 6\",\r\n  id: 1005,\r\n  children: [\r\n    {\r\n      title: \"Smallest unused ID\",\r\n      type: \"text\",\r\n      description: `\r\n              Hey awesome programmer!\r\n\r\n              You've got much data to manage and of course you use zero-based and non-negative ID's to make each data item unique!\r\n\r\n              Therefore you need a method, which returns the smallest unused ID for your next new data item...\r\n\r\n              Note: The given array of used IDs may be unsorted. For test reasons there may be duplicate IDs, but you don't have to find or remove them!\r\n\r\n              Go on and code some pure awesomeness!\r\n            `,\r\n      code: `\r\nfunction nextId(ids){\r\nlet maxId = Math.max(...ids)\r\nfor(let i = 0; i <= maxId; i++){\r\nif(!ids.includes(i)){\r\nreturn i\r\n}\r\n}\r\nreturn maxId + 1\r\n} \r\n\r\n// or \r\n\r\nfunction nextId(ids){\r\nvar x = 0;\r\nwhile (ids.includes(x)) x++;\r\nreturn x;\r\n}\r\n\r\n// or \r\n\r\nfunction nextId(ids){\r\nconst used = new Set(ids);\r\nfor (let i = 0; i <= ids.length; i++) {\r\nif (!used.has(i)) return i;\r\n}\r\n}\r\n            `,\r\n    },\r\n  ],\r\n};\r\n","export const Task_7 = {\r\n  title: \"Task 7\",\r\n  id: 1006,\r\n  children: [\r\n    {\r\n      title: \"Did she say hallo?\",\r\n      type: \"text\",\r\n      description: `\r\nYou received a whats up message from an unknown number. Could it be from that girl/boy with a foreign accent you met yesterday evening?\r\n\r\nWrite a simple function to check if the string contains the word hallo in different languages.\r\n\r\nThese are the languages of the possible people you met the night before:\r\n\r\nhello - english\r\nciao - italian\r\nsalut - french\r\nhallo - german\r\nhola - spanish\r\nahoj - czech republic\r\nczesc - polish\r\nNotes\r\n\r\nyou can assume the input is a string.\r\nto keep this a beginner exercise you don't need to check if the greeting is a subset of word (Halloween can pass the test)\r\nfunction should be case insensitive to pass the tests\r\n            `,\r\n      code: `\r\nfunction validateHello(str) {\r\nconst greetings = ['hello', 'ciao', 'salut', 'hallo', 'hola', 'ahoj', 'czesc'];\r\nconst lowerStr = str.toLowerCase()\r\nconst words = lowerStr.match(/\\\\w+/g)\r\nfor (let word of words){\r\nif(greetings.includes(word)){\r\nreturn true\r\n}\r\n}\r\nreturn false\r\n}\r\n\r\n// or \r\n\r\nconst validateHello = greetings => /h[ae]llo|ciao|salut|hola|ahoj|czesc/i.test(greetings);\r\n\r\n// or\r\n\r\nconst hellos = {\r\nhello: 'english',\r\nciao: 'italian',\r\nsalut: 'french',\r\nhallo: 'german',\r\nhola: 'spanish',\r\nahoj: 'czech republic',\r\nczesc: 'polish',\r\n}\r\n\r\nconst validateHello = greetings => {\r\nfor (key in hellos) {\r\nif (greetings.toLowerCase().includes(key)) {\r\nreturn true\r\n}\r\n}\r\nreturn false\r\n}\r\n\r\n// or\r\n\r\nconst vivas = ['hello', 'ciao', 'salut', 'hallo', 'hola', 'ahoj', 'czesc'];\r\nconst validateHello = message => new RegExp(vivas.join('|'), 'i').test(message);\r\n            `,\r\n    },\r\n  ],\r\n};\r\n","export const Task_8 = {\r\n  title: \"Task 8\",\r\n  id: 1007,\r\n  children: [\r\n    {\r\n      title: \"title\",\r\n      type: \"text\",\r\n      description: `\r\n              word\r\n            `,\r\n      code: `\r\n            // code \r\n            `,\r\n    },\r\n  ],\r\n};\r\n","export const Task_9 = {\r\n  title: \"Task 9\",\r\n  id: 1008,\r\n  children: [\r\n    {\r\n      title: \"title\",\r\n      type: \"text\",\r\n      description: `\r\n              word\r\n            `,\r\n      code: `\r\n            // code \r\n            `,\r\n    },\r\n  ],\r\n};\r\n","import { Task_1 } from \"./Task1/Task1\";\r\nimport { Task_10 } from \"./Task10/Task10\";\r\nimport { Task_11 } from \"./Task11/Task11\";\r\nimport { Task_12 } from \"./Task12/Task12\";\r\nimport { Task_13 } from \"./Task13/Task13\";\r\nimport { Task_14 } from \"./Task14/Task14\";\r\nimport { Task_15 } from \"./Task15/Task15\";\r\nimport { Task_2 } from \"./Task2/Task2\";\r\nimport { Task_3 } from \"./Task3/Task3\";\r\nimport { Task_4 } from \"./Task4/Task4\";\r\nimport { Task_5 } from \"./Task5/Task5\";\r\nimport { Task_6 } from \"./Task6/Task6\";\r\nimport { Task_7 } from \"./Task7/Task7\";\r\nimport { Task_8 } from \"./Task8/Task8\";\r\nimport { Task_9 } from \"./Task9/Task9\";\r\n\r\nexport const Codewars = {\r\n  id: 174,\r\n  title: \"Codewars\",\r\n  children: [\r\n    Task_1,\r\n    Task_2,\r\n    Task_3,\r\n    Task_4,\r\n    Task_5,\r\n    Task_6,\r\n    Task_7,\r\n    Task_8,\r\n    Task_9,\r\n    Task_10,\r\n    Task_11,\r\n    Task_12,\r\n    Task_13,\r\n    Task_14,\r\n    Task_15,\r\n  ],\r\n};\r\n","export const thisAndCallApplyBind = {\r\n  id: 521,\r\n  title: \"this и методы функций (call, apply, bind)\",\r\n  children: [\r\n    {\r\n      title: \"Основы this\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Где определяется this:</strong></p>\r\n        <ul>\r\n          <li><strong>Обычная функция:</strong> Зависит от способа вызова функции.</li>\r\n          <li><strong>Стрелочная функция:</strong> Наследует <code>this</code> из внешнего лексического контекста.</li>\r\n          <li><strong>Метод объекта:</strong> Ссылается на объект, в контексте которого вызван метод.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Метод call()\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>call(thisArg, ...args)</strong> — вызывает функцию с указанным <code>this</code> и аргументами.</p>\r\n        <p>Используется для явного задания контекста выполнения функции.</p>\r\n      `,\r\n      code: `\r\nconst person = { name: 'Alex' };\r\n\r\nfunction greet(greeting) {\r\n  console.log(\\`\\${greeting}, \\${this.name}!\\`);\r\n}\r\n\r\ngreet.call(person, 'Hello'); // Hello, Alex!\r\n\r\n// Пример с наследованием:\r\nfunction Product(name, price) {\r\n  this.name = name;\r\n  this.price = price;\r\n}\r\n\r\nfunction Food(name, price) {\r\n  Product.call(this, name, price); // Наследуем конструктор\r\n  this.category = 'food';\r\n}\r\n\r\nconsole.log(new Food('Cheese', 5).name); // Cheese\r\n      `,\r\n    },\r\n    {\r\n      title: \"Метод apply()\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>apply(thisArg, [argsArray])</strong> — аналогичен <code>call</code>, но аргументы передаются массивом.</p>\r\n        <p>Часто используется для передачи динамических списков аргументов.</p>\r\n      `,\r\n      code: `\r\nconst numbers = [5, 6, 2, 3, 7];\r\nMath.max.apply(null, numbers); // 7\r\n\r\n// Современная замена:\r\nMath.max(...numbers); // 7 (spread оператор)\r\n\r\n// Пример с аргументами:\r\nconst person = { name: 'Alice' };\r\n\r\nfunction introduce(age, city) {\r\n  console.log(\\`I'm \\${this.name}, \\${age}, from \\${city}\\`);\r\n}\r\n\r\nintroduce.apply(person, [25, 'Moscow']); // I'm Alice, 25, from Moscow\r\n      `,\r\n    },\r\n    {\r\n      title: \"Метод bind()\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>bind(thisArg, ...args)</strong> — создает новую функцию с привязанным <code>this</code> и аргументами.</p>\r\n        <p>Часто используется для сохранения контекста, например, в обработчиках событий или колбэках.</p>\r\n      `,\r\n      code: `\r\nconst user = {\r\n  name: 'John',\r\n  sayHi() {\r\n    console.log(\\`Hi, \\${this.name}!\\`);\r\n  }\r\n};\r\n\r\nsetTimeout(user.sayHi.bind(user), 1000); // Hi, John! (через 1 сек)\r\n\r\n// Частичное применение:\r\nfunction multiply(a, b) {\r\n  return a * b;\r\n}\r\n\r\nconst double = multiply.bind(null, 2);\r\nconsole.log(double(3)); // 6 (2 * 3)\r\n      `,\r\n    },\r\n    {\r\n      title: \"Сравнение методов\",\r\n      type: \"text\",\r\n      description: `\r\n        <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n          <tr>\r\n            <th>Метод</th>\r\n            <th>Вызов</th>\r\n            <th>Аргументы</th>\r\n            <th>Результат</th>\r\n          </tr>\r\n          <tr>\r\n            <td><code>call()</code></td>\r\n            <td>Сразу</td>\r\n            <td>Через запятую</td>\r\n            <td>Результат функции</td>\r\n          </tr>\r\n          <tr>\r\n            <td><code>apply()</code></td>\r\n            <td>Сразу</td>\r\n            <td>Массив</td>\r\n            <td>Результат функции</td>\r\n          </tr>\r\n          <tr>\r\n            <td><code>bind()</code></td>\r\n            <td>Позже</td>\r\n            <td>Через запятую</td>\r\n            <td>Новая функция</td>\r\n          </tr>\r\n        </table>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Практические примеры\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Делегирование методов:</strong></p>\r\n        <pre><code>const objA = { name: 'A' };\r\nconst objB = {\r\n  name: 'B',\r\n  sayName() {\r\n    console.log(this.name);\r\n  }\r\n};\r\n\r\nobjB.sayName.call(objA); // A (заимствуем метод)</code></pre>\r\n\r\n        <p><strong>2. Каррирование с bind:</strong></p>\r\n        <pre><code>function log(level, message) {\r\n  console.log(\\`[\\${level}] \\${message}\\`);\r\n}\r\n\r\nconst logError = log.bind(null, 'ERROR');\r\nlogError('Something broke!'); // [ERROR] Something broke!</code></pre>\r\n\r\n        <p><strong>3. Привязка контекста в классах:</strong></p>\r\n        <pre><code>class Button {\r\n  constructor() {\r\n    this.click = this.click.bind(this);\r\n  }\r\n\r\n  click() {\r\n    console.log(this); // Всегда экземпляр Button\r\n  }\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Стрелочные функции и this\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Стрелочные функции <strong>не имеют своего this</strong> — они наследуют его из внешнего лексического контекста.</p>\r\n        <p>Это делает их особенно полезными в обработчиках событий и колбэках.</p>\r\n      `,\r\n      code: `\r\nconst group = {\r\n  title: \"Our Group\",\r\n  students: [\"John\", \"Pete\", \"Alice\"],\r\n\r\n  showList() {\r\n    this.students.forEach(\r\n      student => console.log(this.title + ': ' + student)\r\n    );\r\n    // Our Group: John\r\n    // Our Group: Pete\r\n    // Our Group: Alice\r\n  }\r\n};\r\n\r\ngroup.showList();\r\n\r\n// Нельзя изменить this стрелочной функции:\r\nconst f = () => console.log(this);\r\nf.call({ name: 'Alex' }); // window/global (контекст остался прежним)\r\n      `,\r\n    },\r\n    {\r\n      title: \"Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Методы <code>call</code>, <code>apply</code> и <code>bind</code> позволяют явно контролировать значение <code>this</code>, что важно для написания гибкого и надежного кода. Стрелочные функции упрощают работу с контекстом, так как не имеют собственного <code>this</code>.</p>\r\n        <p>Правильное понимание этих концепций поможет избежать ошибок и писать более эффективный JavaScript-код.</p>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","import { thisAndCallApplyBind } from \"./thisAndCallApplyBind/thisAndCallApplyBind\";\r\n\r\nexport const ContextThis = {\r\n  id: 133,\r\n  title: \"Context This (Контекст this)\",\r\n  children: [\r\n    {\r\n      title: \"Описание\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>this</strong> — это специальное ключевое слово в JavaScript, которое ссылается на объект, который в данный момент выполняет код. Значение <code>this</code> определяется не тем, как функция была объявлена, а тем, как она была вызвана.</p>\r\n        <p>Понимание контекста <code>this</code> важно для работы с объектами, классами, стрелочными функциями и методами управления контекстом (<code>.call()</code>, <code>.apply()</code>, <code>.bind()</code>).</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Контекст вызова\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Значение <code>this</code> зависит от контекста вызова функции. Вот основные правила:</p>\r\n        <ul>\r\n          <li><strong>Глобальный контекст:</strong> Вне функций <code>this</code> ссылается на глобальный объект (<code>window</code> в браузере или <code>global</code> в Node.js).</li>\r\n          <li><strong>Метод объекта:</strong> Внутри метода объекта <code>this</code> ссылается на сам объект, в контексте которого был вызван метод.</li>\r\n          <li><strong>Обычная функция:</strong> В обычной функции <code>this</code> ссылается на глобальный объект (или <code>undefined</code> в строгом режиме).</li>\r\n          <li><strong>Стрелочные функции:</strong> Стрелочные функции не имеют собственного <code>this</code> и наследуют его из родительского контекста.</li>\r\n          <li><strong>Классы:</strong> В классах <code>this</code> ссылается на экземпляр класса, созданный с помощью <code>new</code>.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// В глобальном контексте (вне функций) 'this' ссылается на глобальный объект (window в браузере).\r\nconsole.log(this); // window\r\n\r\n// В методе объекта 'this' ссылается на объект, в контексте которого был вызван метод:\r\nconst obj = {\r\n  name: 'Obj',\r\n  method: function() {\r\n    console.log(this.name);\r\n  }\r\n};\r\nobj.method(); // 'Obj'\r\n      `,\r\n    },\r\n    {\r\n      title: \"Значение this в функциях\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>В обычной функции <code>this</code> ссылается на глобальный объект (или <code>undefined</code> в строгом режиме). Это может привести к ошибкам, если контекст не контролируется явно.</p>\r\n      `,\r\n      code: `\r\nfunction showThis() {\r\n  console.log(this);\r\n}\r\n\r\nshowThis(); // window (или undefined в строгом режиме)\r\n      `,\r\n    },\r\n    {\r\n      title: \"Классы и this\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>В классах <code>this</code> ссылается на экземпляр класса, созданный с помощью ключевого слова <code>new</code>. Это позволяет работать с состоянием объекта через <code>this</code>.</p>\r\n      `,\r\n      code: `\r\nclass MyClass {\r\n  constructor(value) {\r\n    this.value = value;\r\n  }\r\n  showValue() {\r\n    console.log(this.value);\r\n  }\r\n}\r\n\r\nconst instance = new MyClass(10);\r\ninstance.showValue(); // 10\r\n      `,\r\n    },\r\n    {\r\n      title: \"Стрелочные функции и this\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Стрелочные функции не имеют собственного <code>this</code> и наследуют его из родительского контекста, в котором они были созданы. Это делает их особенно полезными в обработчиках событий и колбэках.</p>\r\n      `,\r\n      code: `\r\nconst obj = {\r\n  value: 20,\r\n  method: function() {\r\n    const arrowFunction = () => {\r\n      console.log(this.value);\r\n    };\r\n    arrowFunction();\r\n  }\r\n};\r\n\r\nobj.method(); // 20\r\n      `,\r\n    },\r\n    {\r\n      title: \"Способы контроля this\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Можно явно контролировать значение <code>this</code> с помощью методов <code>.call()</code>, <code>.apply()</code> и <code>.bind()</code>:</p>\r\n        <ul>\r\n          <li><strong>.call(thisArg, arg1, arg2, ...):</strong> Вызывает функцию с указанным значением <code>this</code> и аргументами.</li>\r\n          <li><strong>.apply(thisArg, [argsArray]):</strong> Аналогично <code>.call()</code>, но принимает массив аргументов.</li>\r\n          <li><strong>.bind(thisArg):</strong> Создает новую функцию с фиксированным значением <code>this</code>.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nfunction show() {  \r\n  console.log(this.name);\r\n}\r\n\r\nconst obj = { name: 'Test' };\r\nshow.call(obj);    // 'Test'\r\nshow.apply(obj);   // 'Test'\r\nconst boundShow = show.bind(obj);\r\nboundShow();       // 'Test'\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример ошибок с this\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Ошибки с <code>this</code> часто возникают, если контекст теряется, например, при передаче метода объекта как колбэка или в обработчиках событий.</p>\r\n      `,\r\n      code: `\r\nconst obj = {\r\n  value: 42,\r\n  method: function() {\r\n    setTimeout(function() {\r\n      console.log(this.value); // undefined (потерянный контекст)\r\n    }, 100);\r\n  }\r\n};\r\n\r\nobj.method();\r\n\r\n// Решение: использование стрелочной функции или .bind()\r\nconst obj = {\r\n  value: 42,\r\n  method: function() {\r\n    setTimeout(() => {\r\n      console.log(this.value); // 42 (наследует this из родительского контекста)\r\n    }, 100);\r\n  }\r\n};\r\n\r\nobj.method();\r\n      `,\r\n    },\r\n    {\r\n      title: \"Вывод\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Контекст <code>this</code> в JavaScript может быть сложным для понимания, но при правильном использовании он становится мощным инструментом. Важно понимать, как он работает в разных контекстах, чтобы избежать ошибок и писать надежный код.</p>\r\n      `,\r\n    },\r\n    thisAndCallApplyBind,\r\n  ],\r\n};\r\n","export const DataTypes = {\r\n  id: 136,\r\n  title: \"Data types (Типы данных)\",\r\n  children: [\r\n    {\r\n      title: \"1. Числа (Number)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Числа</strong> — это примитивный тип данных, используемый для представления как целых, так и дробных чисел.</p>\r\n        <ul>\r\n          <li><strong>Примеры:</strong> <code>42</code>, <code>3.14</code>.</li>\r\n          <li><strong>Особенности:</strong>\r\n            <ul>\r\n              <li>Поддержка специальных значений: <code>Infinity</code>, <code>-Infinity</code>, <code>NaN</code>.</li>\r\n              <li>Используется для математических операций (<code>+ - * / %</code>).</li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"2. Строки (String)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Строки</strong> — это последовательности символов, используемые для работы с текстом.</p>\r\n        <ul>\r\n          <li><strong>Примеры:</strong> <code>\"Hello, world!\"</code>, <code>'JavaScript'</code>.</li>\r\n          <li><strong>Методы:</strong>\r\n            <ul>\r\n              <li><code>length</code>: Возвращает длину строки.</li>\r\n              <li><code>toUpperCase()</code>: Преобразует строку в верхний регистр.</li>\r\n              <li><code>toLowerCase()</code>: Преобразует строку в нижний регистр.</li>\r\n              <li><code>substring(start, end)</code>: Извлекает подстроку.</li>\r\n            </ul>\r\n          </li>\r\n          <li><strong>Шаблонные строки:</strong> Используются для создания строк с интерполяцией переменных (<code>\\`Привет, \\${name}!\\`</code>).</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"3. Логические значения (Boolean)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Логические значения</strong> используются для представления истинности или ложности.</p>\r\n        <ul>\r\n          <li><strong>Примеры:</strong> <code>true</code>, <code>false</code>.</li>\r\n          <li><strong>Использование:</strong>\r\n            <ul>\r\n              <li>Условные выражения: <code>if (value === true) { ... }</code>.</li>\r\n              <li>Циклы: <code>while (condition) { ... }</code>.</li>\r\n            </ul>\r\n          </li>\r\n          <li><strong>Преобразование в Boolean:</strong> Значения, такие как <code>0</code>, <code>\"\"</code>, <code>null</code>, <code>undefined</code>, преобразуются в <code>false</code>.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"4. Объекты (Object)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Объекты</strong> — это сложные структуры данных, которые могут содержать пары ключ-значение.</p>\r\n        <ul>\r\n          <li><strong>Примеры:</strong> <code>{ name: \"Alice\", age: 25 }</code>, <code>new Date()</code>.</li>\r\n          <li><strong>Типы объектов:</strong>\r\n            <ul>\r\n              <li>Встроенные: <code>Array</code>, <code>Date</code>, <code>Math</code>.</li>\r\n              <li>Пользовательские: Созданные с помощью литералов объектов или классов.</li>\r\n            </ul>\r\n          </li>\r\n          <li><strong>Методы объектов:</strong> <code>Object.keys()</code>, <code>Object.values()</code>, <code>Object.entries()</code>.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"5. Массивы (Array)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Массивы</strong> — это специальный тип объекта, предназначенный для хранения упорядоченных коллекций значений.</p>\r\n        <ul>\r\n          <li><strong>Примеры:</strong> <code>[1, 2, 3]</code>, <code>[\"apple\", \"banana\"]</code>.</li>\r\n          <li><strong>Методы массивов:</strong>\r\n            <ul>\r\n              <li><code>push()</code>: Добавляет элемент в конец массива.</li>\r\n              <li><code>pop()</code>: Удаляет последний элемент массива.</li>\r\n              <li><code>map()</code>: Создает новый массив, применяя функцию к каждому элементу.</li>\r\n              <li><code>filter()</code>: Фильтрует массив по условию.</li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"6. Специальные значения\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Специальные значения</strong> — это уникальные типы данных, используемые для обозначения особых случаев.</p>\r\n        <ul>\r\n          <li><strong>undefined:</strong> Переменная объявлена, но не инициализирована.</li>\r\n          <li><strong>null:</strong> Явное указание на отсутствие значения.</li>\r\n          <li><strong>Symbol:</strong> Уникальные идентификаторы, доступные с ES6.</li>\r\n          <li><strong>BigInt:</strong> Целые числа произвольной длины, доступные с ES11.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"7. Примитивные и ссылочные типы\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>В JavaScript типы данных делятся на два вида:</p>\r\n        <ul>\r\n          <li><strong>Примитивные типы:</strong> <code>Number</code>, <code>String</code>, <code>Boolean</code>, <code>undefined</code>, <code>null</code>, <code>Symbol</code>, <code>BigInt</code>.</li>\r\n          <li><strong>Ссылочные типы:</strong> <code>Object</code>, <code>Array</code>, <code>Function</code>.</li>\r\n        </ul>\r\n        <p>Примитивные типы передаются по значению, а ссылочные — по ссылке.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"8. Проверка типов данных\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Для проверки типа данных можно использовать следующие методы:</p>\r\n        <ul>\r\n          <li><code>typeof</code>: Возвращает строку с типом данных (<code>typeof 42</code> → <code>\"number\"</code>).</li>\r\n          <li><code>Array.isArray()</code>: Проверяет, является ли значение массивом.</li>\r\n          <li><code>instanceof</code>: Проверяет принадлежность объекта к определенному классу.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nconsole.log(typeof 42); // \"number\"\r\nconsole.log(Array.isArray([1, 2, 3])); // true\r\nconsole.log([] instanceof Array); // true\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const Descriptors = {\r\n  id: 137,\r\n  title: \"Descriptors, Getters, and Setters\",\r\n  children: [\r\n    {\r\n      title: \"Определение дескрипторов\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Дескрипторы свойств — это объекты, которые содержат информацию о свойствах объектов в JavaScript, такие как возможность записи, перечисляемость и доступность.</p>\r\n            <p><strong>Дескрипторы объекта</strong> — это объекты, которые описывают свойства объекта, их поведение и характеристики. Они позволяют управлять тем, как свойства могут быть использованы и изменены.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Типы дескрипторов\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Существует два типа дескрипторов:</p>\r\n            <ul>\r\n              <li><strong>Данные дескриптора</strong>: хранят значение и могут быть настроены для записи.</li>\r\n              <li><strong>Accessor дескрипторы</strong>: используют геттеры и сеттеры для управления доступом к значениям.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Геттеры\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Геттеры — это специальные методы, которые позволяют получать значения свойств объекта. Они определяются с помощью ключевого слова <code>get</code>.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Пример геттера\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример использования геттера в объекте:</p>\r\n          `,\r\n      code: `\r\nconst person = {\r\nfirstName: 'John',\r\nlastName: 'Doe',\r\nget fullName() {\r\nreturn \\`\\${this.firstName} \\${this.lastName}\\`;\r\n}\r\n};\r\n\r\nconsole.log(person.fullName); // John Doe\r\n          `,\r\n    },\r\n    {\r\n      title: \"Сеттеры\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Сеттеры — это специальные методы, которые позволяют задавать значения свойств объекта. Они определяются с помощью ключевого слова <code>set</code>.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Пример сеттера\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример использования сеттера в объекте:</p>\r\n          `,\r\n      code: `\r\nconst person = {\r\nfirstName: 'John',\r\nlastName: 'Doe',\r\nset fullName(name) {\r\n[this.firstName, this.lastName] = name.split(' ');\r\n}\r\n};\r\n\r\nperson.fullName = 'Jane Smith';\r\nconsole.log(person.firstName); // Jane\r\nconsole.log(person.lastName); // Smith\r\n          `,\r\n    },\r\n    {\r\n      title: \"Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Дескрипторы, геттеры и сеттеры позволяют управлять доступом к свойствам объектов, обеспечивая более гибкий и контролируемый способ работы с данными в JavaScript.</p>\r\n          `,\r\n      link: \"Подробнее на learn.javascript.ru\",\r\n      url: \"https://learn.javascript.ru/descriptors-getters-setters\",\r\n    },\r\n  ],\r\n};\r\n","export const DestructuringInJS = {\r\n  id: 138,\r\n  title: \"Destructuring assignment / Деструктурирующее присваивание\",\r\n  children: [\r\n    {\r\n      title: \"Что такое деструктурирующее присваивание?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Деструктурирующее присваивание</strong> — это синтаксический сахар в JavaScript, который позволяет извлекать значения из массивов или свойства из объектов и присваивать их переменным. Это делает код более чистым и удобочитаемым.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример с массивами\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример деструктуризации массива:</strong></p>\r\n      `,\r\n      code: `\r\nconst numbers = [1, 2, 3];\r\n\r\n// Деструктурируем массив\r\nconst [first, second] = numbers;\r\n\r\nconsole.log(first); // 1\r\nconsole.log(second); // 2\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример с объектами\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример деструктуризации объекта:</strong></p>\r\n      `,\r\n      code: `\r\nconst person = {\r\n  name: 'John',\r\n  age: 30,\r\n};\r\n\r\n// Деструктурируем объект\r\nconst { name, age } = person;\r\n\r\nconsole.log(name); // John\r\nconsole.log(age); // 30\r\n      `,\r\n    },\r\n    {\r\n      title: \"Преимущества деструктурирующего присваивания\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li>Упрощает код: Уменьшает количество строк кода.</li>\r\n          <li>Улучшает читаемость: Легче понять, какие значения используются.</li>\r\n          <li>Можно задавать значения по умолчанию: Если значение отсутствует, можно указать значение по умолчанию.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Значения по умолчанию\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример значений по умолчанию:</strong></p>\r\n      `,\r\n      code: `\r\nconst settings = {\r\n  volume: 10,\r\n};\r\n\r\n// Деструктурируем с значением по умолчанию\r\nconst { volume, brightness = 50 } = settings;\r\n\r\nconsole.log(volume); // 10\r\nconsole.log(brightness); // 50\r\n      `,\r\n    },\r\n  ]\r\n}","export const DifferenceBetweenNullAndUndefined = {\r\n  id: 139,\r\n  title:\r\n    \"Difference between null and undefined\",\r\n  children: [\r\n    {\r\n      title: \"Описание null и undefined\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>null</strong>: Это специальное значение, указывающее на отсутствие какого-либо объектного значения. Оно явно назначается переменной, чтобы показать, что эта переменная не содержит ничего.</p>\r\n            <p><strong>undefined</strong>: Это значение автоматически назначается переменной, которая была объявлена, но не инициализирована. Также это происходит, если функция не возвращает значения.</p>\r\n            <ul>\r\n              <li>Оба значения представляют отсутствие значения, но в разных контекстах.</li>\r\n            </ul>\r\n          `,\r\n      code: `\r\n// Примеры null и undefined\r\nlet a = null;      // Явно задано значение null\r\nlet b;             // Не инициализирована, значение undefined\r\n\r\nconsole.log(a);   // null\r\nconsole.log(b);   // undefined\r\n\r\n// Проверка типов\r\nconsole.log(typeof a); // \"object\"\r\nconsole.log(typeof b); // \"undefined\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"Сравнение null и undefined\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Важно понимать, что при нестрогом сравнении они равны друг другу:</p>\r\n          `,\r\n      code: `\r\nconsole.log(null == undefined); // true (нестрогое сравнение)\r\nconsole.log(null === undefined); // false (строгое сравнение)\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const DragAndDrop = {\r\n  id: 140,\r\n  title: \"Drag and Drop / Перетаскивание\",\r\n  children: [\r\n    {\r\n      title: \"Основы Drag and Drop\",\r\n      type: \"text\",\r\n      description: `\r\n          <p>Drag and Drop — это способ улучшить интерфейс, позволяя пользователю перемещать элементы с помощью мыши. Это может быть полезно для копирования и перемещения документов, а также для других действий, таких как добавление элементов в корзину.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Алгоритм Drag and Drop\",\r\n      type: \"text\",\r\n      description: `\r\n          <p>Базовый алгоритм Drag and Drop включает следующие шаги:</p>\r\n            <ul>\r\n              <li><strong>mousedown</strong>: Подготовка элемента к перемещению.</li>\r\n              <li><strong>mousemove</strong>: Перемещение элемента на новые координаты.</li>\r\n              <li><strong>mouseup</strong>: Завершение перемещения элемента.</li>\r\n              </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Правильное позиционирование\",\r\n      type: \"text\",\r\n      description: `\r\n              <p>Чтобы избежать «прыжков» элемента при начале Drag and Drop, запоминаем расстояние от курсора до элемента и используем его при перемещении.</p>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Цели переноса (Droppable)\",\r\n      type: \"text\",\r\n      description: `\r\n              <p>Для реализации переноса элемента в другую цель, используйте метод <code>document.elementFromPoint</code> для определения, над каким элементом находится указатель.</p>\r\n              <ul>\r\n              <li>Подсвечивайте элементы, когда мышь находится над ними.</li>\r\n              <li>Обрабатывайте окончание переноса, чтобы выполнить действия с элементами.</li>\r\n              </ul>\r\n              `,\r\n    },\r\n    {\r\n      title: \"Пример кода\",\r\n      type: \"text\",\r\n      description: `\r\n              <p>Пример реализации Drag and Drop:</p>\r\n              `,\r\n      code: `\r\n// код для начала переноса\r\nball.onmousedown = function(event) {\r\n};\r\n\r\n// код для перемещения элемента\r\nfunction onMouseMove(event) {\r\n}\r\n              `,\r\n      link: \"Mouse Drag and Drop\",\r\n      url: \"https://learn.javascript.ru/mouse-drag-and-drop\",\r\n    },\r\n  ],\r\n};\r\n","export const EventLoop = {\r\n  id: 142,\r\n  title: \"Event Loop (Цикл событий)\",\r\n  children: [\r\n    {\r\n      title: \"Цикл событий (Event Loop)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Цикл событий</strong> — это механизм, который позволяет JavaScript выполнять асинхронные операции, не блокируя основной поток выполнения. Он состоит из следующих ключевых компонентов:</p>\r\n        \r\n        <h3>1. Call Stack (Стек вызовов)</h3>\r\n        <ul>\r\n          <li>Содержит текущий стек выполнения функций.</li>\r\n          <li>Когда функция вызывается, она добавляется в стек вызовов.</li>\r\n          <li>Когда выполнение функции завершается, она удаляется из стека.</li>\r\n          <li>JavaScript однопоточный — одновременно выполняется только одна функция из стека.</li>\r\n        </ul>\r\n        <p><strong>Принцип: LIFO (Last In, First Out)</strong> — последняя вошедшая функция выполняется первой.</p>\r\n        \r\n        <h3>2. Task Queue | Macro Tasks | Callback Queue</h3>\r\n        <ul>\r\n          <li>Когда асинхронная операция (например, <code>setTimeout</code>, запрос к серверу) завершается, её callback-функция помещается в эту очередь.</li>\r\n          <li>Очередь работает по принципу FIFO (First In - First Out).</li>\r\n          <li>Содержит callback'и от различных Web API (DOM events, сетевые запросы, таймеры).</li>\r\n        </ul>\r\n        <p><strong>Принцип: FIFO (First In, First Out)</strong> — первая добавленная задача выполняется первой.</p>\r\n\r\n        <h3>3. Micro Tasks (Микро задачи)</h3>\r\n        <ul>\r\n          <li>Когда асинхронная операция (например, <code>Promise</code>, <code>fetch</code>) завершается, она помещается в очередь микро задач.</li>\r\n          <li>Микро задачи выполняются сразу после текущего стека, перед макротасками.</li>\r\n          <li>Примеры: <code>Promise.then/catch/finally</code>, <code>MutationObserver</code>, <code>queueMicrotask</code>.</li>\r\n        </ul>\r\n        <p><strong>Принцип: FIFO (First In, First Out)</strong> — первая добавленная микрозадача выполняется первой.</p>\r\n\r\n        <h3>4. Event Loop (Цикл событий)</h3>\r\n        <ul>\r\n          <li>Непрерывно проверяет состояние стека вызовов.</li>\r\n          <li>Если стек пуст, берёт первую функцию из очереди обратных вызовов и помещает её в стек для выполнения.</li>\r\n          <li>Таким образом обеспечивается неблокирующее выполнение асинхронного кода.</li>\r\n        </ul>\r\n        \r\n        <h3>Пример работы:</h3>\r\n        <ol>\r\n          <li>Синхронный код выполняется сразу, попадая в стек вызовов.</li>\r\n          <li>Асинхронный код (например, <code>setTimeout</code>) передаётся Web API.</li>\r\n          <li>Когда Web API завершает операцию, callback попадает в очередь.</li>\r\n          <li>Event Loop переносит callback в стек (когда тот пуст) для выполнения.</li>\r\n        </ol>\r\n        \r\n        <p>Эта модель позволяет JavaScript эффективно обрабатывать пользовательские взаимодействия и сетевые операции без блокировки основного потока.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Микротаски и макротаски\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Микротаски</strong> (например, <code>Promise</code>, <code>fetch</code>) имеют высший приоритет и выполняются сразу после текущего стека, перед макротасками.</li>\r\n          <li><strong>Макротаски</strong> (например, <code>setTimeout</code>, <code>setInterval</code>, I/O) попадают в очередь обратных вызовов.</li>\r\n          <li>Event Loop сначала обрабатывает все микротаски, прежде чем взять следующую макротаску.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nconsole.log(\"Start\"); // Синхронный код\r\n\r\nsetTimeout(() => console.log(\"Timeout\"), 0); // Макротаска\r\n\r\nPromise.resolve().then(() => console.log(\"Promise\")); // Микротаска\r\n\r\nconsole.log(\"End\"); // Синхронный код\r\n\r\n// Вывод:\r\n// Start\r\n// End\r\n// Promise\r\n// Timeout\r\n      `,\r\n    },\r\n    {\r\n      title: \"Визуализация работы Event Loop\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Порядок выполнения:</p>\r\n        <ol>\r\n          <li>Выполняется весь синхронный код (Call Stack).</li>\r\n          <li>Выполняются все доступные микротаски.</li>\r\n          <li>Выполняется одна макротаска из очереди.</li>\r\n          <li>Снова проверяются микротаски (и выполняются, если есть).</li>\r\n          <li>Цикл повторяется.</li>\r\n        </ol>\r\n      `,\r\n      url: \"https://www.jsv9000.app/\",\r\n      link: \"Интерактивная визуализация Event Loop\",\r\n    },\r\n    {\r\n      title: \"Частые вопросы на собеседованиях\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Почему микротаски выполняются перед макротасками?</strong> — Микротаски имеют более высокий приоритет, чтобы обеспечить быстрое выполнение промисов и других важных асинхронных операций.</li>\r\n          <li><strong>Как работает <code>queueMicrotask</code>?</strong> — Это специальная функция, которая явно добавляет задачу в очередь микротасков.</li>\r\n          <li><strong>Как Event Loop взаимодействует с React?</strong> — React использует микротаски для обновления состояния и рендеринга компонентов.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const ArrowFunctions = {\r\n  id: 145,\r\n  title: \"Arrow functions\",\r\n  children: [\r\n    {\r\n      title: \"1. Синтаксис\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Стрелочные функции имеют более компактный синтаксис по сравнению с обычными функциями:</p>\r\n          `,\r\n      code: `\r\nconst add = (a, b) => a + b;\r\nconsole.log(add(2, 3)); // 5\r\n          `,\r\n    },\r\n    {\r\n      title: \"2. Лексическое значение this\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Стрелочные функции не имеют своего собственного <code>this</code>; вместо этого они используют <code>this</code> из окружающего контекста:</p>\r\n          `,\r\n      code: `\r\nfunction Person() {\r\nthis.age = 0;\r\n\r\nsetInterval(() => {\r\nthis.age++; // 'this' ссылается на объект Person\r\nconsole.log(this.age);\r\n}, 1000);\r\n}\r\n\r\nconst p = new Person(); // будет выводить возраст каждую секунду\r\n          `,\r\n    },\r\n    {\r\n      title: \"3. Отсутствие объекта arguments\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Стрелочные функции не имеют собственного объекта <code>arguments</code>. Для доступа к аргументам можно использовать оператор <code>rest</code>:</p>\r\n          `,\r\n      code: `\r\nconst sum = (...args) => args.reduce((a, b) => a + b, 0);\r\nconsole.log(sum(1, 2, 3, 4)); // 10\r\n          `,\r\n    },\r\n    {\r\n      title: \"4. Не могут быть использованы как конструкторы\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Стрелочные функции не могут быть использованы с оператором <code>new</code>:</p>\r\n          `,\r\n      code: `\r\nconst Person = () => {};\r\n// const p = new Person(); // ошибка: Person is not a constructor\r\n          `,\r\n    },\r\n    {\r\n      title: \"5. Не имеют свойства prototype\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Стрелочные функции не имеют свойства <code>prototype</code>, что делает их непригодными для создания методов объектов:</p>\r\n          `,\r\n      code: `\r\nconst arrowFunc = () => {};\r\nconsole.log(arrowFunc.prototype); // undefined\r\n          `,\r\n    },\r\n    {\r\n      title: \"6. Возврат значений\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Если стрелочная функция состоит из одного выражения, то фигурные скобки и ключевое слово <code>return</code> можно опустить:</p>\r\n          `,\r\n      code: `\r\nconst square = x => x * x;\r\nconsole.log(square(4)); // 16\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const Functions = {\r\n  id: 144,\r\n  title: \"Functions (Функции)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое функция?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Функция</strong> — это блок кода, который выполняет определенную задачу и может быть вызван многократно. Функции позволяют организовать код в логические блоки, что делает его более читаемым и переиспользуемым.</p>\r\n        <p>Функции могут принимать входные данные (аргументы) и возвращать результат.</p>\r\n      `,\r\n      code: `\r\nfunction greet(name) {\r\n  return \\`Hello, \\${name}!\\`;\r\n}\r\n\r\nconsole.log(greet(\"Alice\")); // Hello, Alice!\r\n      `,\r\n    },\r\n    {\r\n      title: \"Объявление функций\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Существует несколько способов объявления функций:</p>\r\n        <ul>\r\n          <li><strong>Function Declaration:</strong> Объявление функции с использованием ключевого слова <code>function</code>.</li>\r\n          <li><strong>Function Expression:</strong> Присваивание функции переменной.</li>\r\n          <li><strong>Arrow Function:</strong> Стрелочные функции, введенные в ES6.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Function Declaration\r\nfunction add(a, b) {\r\n  return a + b;\r\n}\r\n\r\n// Function Expression\r\nconst multiply = function(a, b) {\r\n  return a * b;\r\n};\r\n\r\n// Arrow Function\r\nconst subtract = (a, b) => a - b;\r\n\r\nconsole.log(add(2, 3));       // 5\r\nconsole.log(multiply(2, 3));  // 6\r\nconsole.log(subtract(5, 2));  // 3\r\n      `,\r\n    },\r\n    {\r\n      title: \"Параметры и аргументы\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Параметры</strong> — это переменные, указанные в определении функции. <strong>Аргументы</strong> — это значения, передаваемые в функцию при её вызове.</p>\r\n        <p>JavaScript позволяет использовать параметры по умолчанию и rest-параметры.</p>\r\n      `,\r\n      code: `\r\n// Параметры по умолчанию\r\nfunction greet(name = \"Guest\") {\r\n  return \\`Hello, \\${name}!\\`;\r\n}\r\n\r\nconsole.log(greet());         // Hello, Guest!\r\nconsole.log(greet(\"Alice\"));  // Hello, Alice!\r\n\r\n// Rest-параметры\r\nfunction sum(...numbers) {\r\n  return numbers.reduce((total, num) => total + num, 0);\r\n}\r\n\r\nconsole.log(sum(1, 2, 3, 4)); // 10\r\n      `,\r\n    },\r\n    {\r\n      title: \"Возврат значений\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Функции могут возвращать значения с помощью ключевого слова <code>return</code>. Если <code>return</code> отсутствует, функция возвращает <code>undefined</code>.</p>\r\n      `,\r\n      code: `\r\nfunction add(a, b) {\r\n  return a + b;\r\n}\r\n\r\nfunction logMessage(message) {\r\n  console.log(message);\r\n}\r\n\r\nconsole.log(add(2, 3)); // 5\r\nlogMessage(\"Hello!\");  // Hello!\r\n      `,\r\n    },\r\n    {\r\n      title: \"Функции как объекты\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>В JavaScript функции являются объектами первого класса. Это означает, что их можно:</p>\r\n        <ul>\r\n          <li>Присваивать переменным.</li>\r\n          <li>Передавать в качестве аргументов другим функциям.</li>\r\n          <li>Возвращать из других функций.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Передача функции как аргумента\r\nfunction applyOperation(a, b, operation) {\r\n  return operation(a, b);\r\n}\r\n\r\nconst add = (a, b) => a + b;\r\nconst multiply = (a, b) => a * b;\r\n\r\nconsole.log(applyOperation(2, 3, add));      // 5\r\nconsole.log(applyOperation(2, 3, multiply)); // 6\r\n\r\n// Возвращение функции\r\nfunction createMultiplier(factor) {\r\n  return function(value) {\r\n    return value * factor;\r\n  };\r\n}\r\n\r\nconst double = createMultiplier(2);\r\nconsole.log(double(5)); // 10\r\n      `,\r\n    },\r\n    {\r\n      title: \"Область видимости и замыкания\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Функции имеют свою собственную область видимости. Переменные, объявленные внутри функции, недоступны снаружи.</p>\r\n        <p><strong>Замыкание</strong> — это комбинация функции и лексического окружения, в котором она была объявлена. Замыкания позволяют функциям \"запоминать\" переменные из внешней области видимости.</p>\r\n      `,\r\n      code: `\r\nfunction createCounter() {\r\n  let count = 0;\r\n  return function() {\r\n    count++;\r\n    return count;\r\n  };\r\n}\r\n\r\nconst counter = createCounter();\r\nconsole.log(counter()); // 1\r\nconsole.log(counter()); // 2\r\nconsole.log(counter()); // 3\r\n      `,\r\n    },\r\n    {\r\n      title: \"Стрелочные функции\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Стрелочные функции (<code>=></code>) были введены в ES6. Они имеют более короткий синтаксис и не имеют собственного <code>this</code>.</p>\r\n        <ul>\r\n          <li>Подходят для колбэков и обработчиков событий.</li>\r\n          <li>Не подходят для методов объектов или конструкторов.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Обычная функция\r\nfunction greet(name) {\r\n  return \\`Hello, \\${name}!\\`;\r\n}\r\n\r\n// Стрелочная функция\r\nconst greetArrow = (name) => \\`Hello, \\${name}!\\`;\r\n\r\nconsole.log(greet(\"Alice\"));       // Hello, Alice!\r\nconsole.log(greetArrow(\"Alice\"));  // Hello, Alice!\r\n\r\n// Отсутствие собственного this\r\nconst obj = {\r\n  name: \"Alice\",\r\n  sayHi: function() {\r\n    setTimeout(() => {\r\n      console.log(\\`Hi, \\${this.name}!\\`);\r\n    }, 1000);\r\n  }\r\n};\r\n\r\nobj.sayHi(); // Hi, Alice!\r\n      `,\r\n    },\r\n    {\r\n      title: \"Рекурсия\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Рекурсия — это механизм, при котором функция вызывает сама себя для решения подзадач. Рекурсия часто используется вместо циклов.</p>\r\n      `,\r\n      code: `\r\nfunction factorial(n) {\r\n  if (n === 0) {\r\n    return 1; // Базовый случай\r\n  } else {\r\n    return n * factorial(n - 1); // Рекурсивный случай\r\n  }\r\n}\r\n\r\nconsole.log(factorial(5)); // 120\r\n      `,\r\n    },\r\n    {\r\n      title: \"Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Функции — это фундаментальная часть JavaScript, которая позволяет писать модульный, чистый и переиспользуемый код. Понимание различных типов функций, их областей видимости и замыканий поможет вам стать более эффективным разработчиком.</p>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const FunctionLevenshtein = {\r\n  id: 143,\r\n  title: \"Function Levenshtein / Функция Левенштейна\",\r\n  children: [\r\n    {\r\n      title: \"Function Levenshtein or Levenshtein Distance\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Функция Левенштейна, или расстояние Левенштейна, измеряет различие между двумя строками, \r\n            определяя минимальное количество операций, необходимых для преобразования одной строки в другую.\r\n            </p>\r\n            <ul>Операциями могут быть:\r\n              <li>Замена: Заменить один символ на другой;</li>\r\n              <li>Удаление: Удалить символ из строки;</li>\r\n              <li>Вставка: Вставить символ в строку;</li>\r\n            </ul>\r\n            <p>Суть и применение</p>\r\n            <ul>\r\n              <li>Сравнение строк: Функция используется для нахождения «похожести» строк. Чем меньше расстояние Левенштейна, тем более похожи строки.</li>\r\n              <li>Поиск и исправление ошибок: Часто применяется в системах проверки правописания, для поиска похожих слов и исправления ошибок.</li>\r\n              <li>Обработка естественного языка: Используется в алгоритмах для сравнения слов и предложений, что может быть полезно в чат-ботах, поисковых системах и других NLP приложениях.</li>\r\n            </ul>\r\n                        `,\r\n      code: `\r\nfunction levenshtein(a, b) {\r\nif (a.length === 0) return b.length;\r\nif (b.length === 0) return a.length;\r\nconst matrix = [];\r\nfor (let i = 0; i <= b.length; matrix[i] = [i]) i++;\r\nfor (let j = 0; j <= a.length; matrix[0][j] = j++) j++;\r\nfor (let i = 1; i <= b.length; i++) {\r\nfor (let j = 1; j <= a.length; j++) {\r\n  matrix[i][j] = b[i - 1] === a[j - 1]\r\n    ? matrix[i - 1][j - 1]\r\n    : Math.min(\r\n      matrix[i - 1][j - 1] + 1,\r\n      Math.min(matrix[i][j - 1] + 1, matrix[i - 1][j] + 1)\r\n    );\r\n}\r\n}\r\nreturn matrix[b.length][a.length];\r\n}\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const GarbageCollection = {\r\n  id: 522,\r\n  title: \"Garbage Collection\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n              <p>Сборка мусора (GC) — это автоматический процесс освобождения памяти, занятой объектами, которые больше не используются программой. JavaScript (как и другие высокоуровневые языки) использует алгоритмы GC, чтобы избежать утечек памяти.</p>\r\n              <ul>\r\n                <strong>Что удаляет сборщик мусора?</strong>\r\n                <ul>\r\n                    <li>1.Объекты, которые становятся недостижимыми (на них нет ссылок из активного кода).</li>\r\n                    <li>2.Локальные переменные функции</li>\r\n                    <li>3.Переприсваивание ссылок</li>\r\n                    <li>4.Удаление элементов массива/объекта</li>\r\n                    <li>5.Завершение работы генераторов</li>\r\n                </ul>\r\n              </ul>\r\n            <ul>\r\n                <strong>Когда GC запускается?</strong>\r\n                <li>Автоматически когда движок решает что пора.</li>\r\n                <li>При нехватке памяти(например, когда выделено много временных объектов).</li>\r\n                <li>В фоновом режиме(не блокирует основной поток).</li>\r\n            </ul>\r\n        `,\r\n      code: `\r\n// пример 1 присвоили переменной 'ни-что'\r\nlet user = { name: \"Alex\" }; // Объект { name: \"Alex\" } достижим (есть ссылка \\`user\\`)\r\nuser = null;                 // Теперь объект недостижим → GC удалит его.\r\n\r\n// пример 2 локальные переменные функции\r\nfunction createTempData() {\r\n    const temp = { data: \"Временные данные\" }; // Создаётся объект\r\n    console.log(temp.data);\r\n} // Функция завершилась → \\`temp\\` становится недостижимым → GC удалит объект.\r\n\r\n// пример 3 Переприсваивание ссылок\r\nlet obj = { value: 1 };\r\nobj = { value: 2 }; // Старый объект { value: 1 } больше не достижим - GC удалит его.\r\n\r\n// пример 4 Удаление элементов массива/объекта\r\nconst arr = [1, 2, 3];\r\narr.length = 0; // Старые элементы становятся недостижимы - GC удалит их.\r\nconst user = { name: \"Alex\", age: 30};\r\ndelete user.age; // \\`age\\` удалено - GC может очистить его память.\r\n\r\n// пример 5 Завершение работы генераторов\r\nfunction* generateData() {\r\n    const data = \"big data\";\r\n    yield data;\r\n}\r\nconst gen = generateData();\r\ngen.next(); // получаем данные\r\ngen.return(); // принудительно завершаем генератор - \\`data\\` может быть удалена.\r\n        `,\r\n    },\r\n  ],\r\n};\r\n","export const GlobalWindowObject = {\r\n  id: 146,\r\n  title: \"Global window object\",\r\n  children: [\r\n    {\r\n      title: \"1. Что такое объект window?\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Объект <code>window</code> представляет собой глобальный объект в браузере, который является корнем для всех объектов и функций в JavaScript.</p>\r\n            <p>Он предоставляет доступ к свойствам и методам, связанным с окном браузера.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"2. Свойства объекта window\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Некоторые ключевые свойства объекта <code>window</code>:</p>\r\n            <ul>\r\n              <li><code>window.document</code> - доступ к DOM-документу.</li>\r\n              <li><code>window.location</code> - информация о текущем URL.</li>\r\n              <li><code>window.history</code> - управление историей браузера.</li>\r\n              <li><code>window.navigator</code> - информация о браузере и его версиях.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"3. Методы объекта window\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Некоторые полезные методы объекта <code>window</code>:</p>\r\n            <ul>\r\n              <li><code>window.alert()</code> - отображает простое окно с сообщением.</li>\r\n              <li><code>window.confirm()</code> - показывает диалоговое окно с вопросом и кнопками \"OK\" и \"Cancel\".</li>\r\n              <li><code>window.open()</code> - открывает новое окно или вкладку.</li>\r\n              <li><code>window.setTimeout()</code> - выполняет функцию через заданный интервал времени.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"4. Пример использования объекта window\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример использования объекта <code>window</code> для отображения сообщения:</p>\r\n          `,\r\n      code: `\r\nwindow.alert('Привет, мир!');\r\n          `,\r\n    },\r\n    {\r\n      title: \"5. Особенности объекта window\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Объект <code>window</code> является единственным экземпляром глобального объекта в браузере, что означает, что:</p>\r\n            <ul>\r\n              <li>Все глобальные переменные и функции доступны как свойства объекта <code>window</code>.</li>\r\n              <li>Вы можете обращаться к методам и свойствам через <code>this</code> в глобальном контексте.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const Hoisting =     {\r\n    id: 148,\r\n    title: \"Hoisting\",\r\n    children: [\r\n      {\r\n        title: \"1. Определение Hoisting\",\r\n        type: \"text\",\r\n        description: `\r\n            <p>Hoisting (поднятие) в JavaScript - это механизм, при котором объявления переменных и функций поднимаются в верхнюю часть своей области видимости во время выполнения кода.</p>\r\n          `,\r\n      },\r\n      {\r\n        title: \"2. Как работает Hoisting?\",\r\n        type: \"text\",\r\n        description: `\r\n            <p>При выполнении кода JavaScript сначала обрабатывает все объявления переменных и функций, а затем выполняет код. Это означает, что вы можете использовать функции и переменные до их фактического объявления в коде.</p>\r\n          `,\r\n      },\r\n      {\r\n        title: \"3. Пример Hoisting с функциями\",\r\n        type: \"text\",\r\n        description: `\r\n            <p>Пример поднятия функций:</p>\r\n          `,\r\n        code: `\r\nsayHello(); // Работает, выводит \"Hello!\"\r\n\r\nfunction sayHello() {\r\nconsole.log(\"Hello!\");\r\n}\r\n          `,\r\n      },\r\n      {\r\n        title: \"4. Пример Hoisting с переменными\",\r\n        type: \"text\",\r\n        description: `\r\n            <p>Пример поднятия переменных:</p>\r\n          `,\r\n        code: `\r\nconsole.log(myVar); // undefined\r\n\r\nvar myVar = 5;\r\nconsole.log(myVar); // 5\r\n          `,\r\n      },\r\n      {\r\n        title: \"5. Что происходит на самом деле?\",\r\n        type: \"text\",\r\n        description: `\r\n            <p>Когда код выполняется, JavaScript фактически обрабатывает его следующим образом:</p>\r\n            <pre>\r\n    var myVar; // Объявление переменной поднимается\r\n    console.log(myVar); // undefined\r\n    myVar = 5; // Инициализация переменной\r\n            </pre>\r\n          `,\r\n      },\r\n      {\r\n        title: \"6. Hoisting с let и const\",\r\n        type: \"text\",\r\n        description: `\r\n            <p>Переменные, объявленные с помощью <code>let</code> и <code>const</code>, также поднимаются, но они находятся в Temporal Dead Zone (TDZ) до их инициализации:</p>\r\n          `,\r\n      },\r\n      {\r\n        title: \"7. Пример Hoisting с let и const\",\r\n        type: \"text\",\r\n        description: `\r\n            <p>Пример с <code>let</code> и <code>const</code>:</p>\r\n          `,\r\n        code: `\r\nconsole.log(a); // ReferenceError: Cannot access 'a' before initialization\r\nlet a = 10;\r\n\r\nconsole.log(b); // ReferenceError: Cannot access 'b' before initialization\r\nconst b = 20;\r\n          `,\r\n      },\r\n      {\r\n        title: \"8. Важность понимания Hoisting\",\r\n        type: \"text\",\r\n        description: `\r\n            <p>Понимание Hoisting помогает избежать неожиданных ошибок и улучшает качество кода. Важно помнить, что хотя функции могут быть вызваны до их объявления, поведение переменных может привести к неожиданным результатам.</p>\r\n          `,\r\n      },\r\n    ],\r\n  }","export const HowObjectsBecomePrimitives = {\r\n  id: 147,\r\n  title: \"How objects become primitives\",\r\n  children: [\r\n    {\r\n      title: \"Преобразование объектов в примитивы\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>В JavaScript объекты могут быть автоматически преобразованы в примитивные значения в контекстах, таких как сравнение, арифметические операции или приведение типов. Процесс преобразования включает:</p>\r\n            <ul>\r\n              <li>Попытка вызова метода <strong>valueOf()</strong></li>\r\n              <li>Попытка вызова метода <strong>toString()</strong></li>\r\n            </ul>\r\n          `,\r\n      code: `\r\nconst obj = {\r\nvalueOf: function() {\r\nreturn 42;\r\n}\r\n};\r\n\r\nconsole.log(obj + 10); // 52 (вызывается obj.valueOf())\r\n          `,\r\n    },\r\n    {\r\n      title: \"Этапы преобразования\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Когда JavaScript пытается преобразовать объект в примитив, он выполняет следующие шаги:</p>\r\n            <ol>\r\n              <li>Вызывать метод <strong>valueOf()</strong>. Если он возвращает примитив, то это значение используется.</li>\r\n              <li>Если <strong>valueOf()</strong> возвращает объект, то JavaScript попытется вызвать <strong>toString()</strong>. Если <strong>toString()</strong> возвращает примитив, то это значение используется.</li>\r\n            </ol>\r\n          `,\r\n      code: `\r\nconst obj2 = {\r\ntoString: function() {\r\nreturn 'Hello';\r\n}\r\n};\r\n\r\nconsole.log(obj2 + ' World'); // \"Hello World\" (вызывается obj2.toString())\r\n          `,\r\n    },\r\n    {\r\n      title: \"Примеры преобразования\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример объекта с реализацией обоих методов:</p>\r\n          `,\r\n      code: `\r\nconst obj3 = {\r\nvalueOf: function() {\r\nreturn 10;\r\n},\r\ntoString: function() {\r\nreturn 'I am an object';\r\n}\r\n};\r\n\r\nconsole.log(obj3 + 5); // 15 (вызывается valueOf)\r\nconsole.log(String(obj3)); // \"I am an object\" (вызывается toString)\r\n          `,\r\n    },\r\n    {\r\n      title: \"Использование операторов\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Объекты могут быть преобразованы в примитивы при использовании операторов:</p>\r\n            <ul>\r\n              <li>Сравнение: ==, ===</li>\r\n              <li>Арифметические операции: +, -, *, /</li>\r\n              <li>Приведение типов: String(), Number(), Boolean()</li>\r\n            </ul>\r\n          `,\r\n      code: `\r\nconsole.log([] + '1'); // \"1\" (вызывается toString)\r\nconsole.log([1] == 1); // true (нестрогое сравнение, вызывается valueOf)\r\n          `,\r\n    },\r\n    {\r\n      title: \"Вывод\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Объекты в JavaScript автоматически преобразуются в примитивные значения с использованием методов valueOf() и toString(). Контекст и ситуация определяют, какой метод будет вызван.</p>\r\n          `,\r\n      code: `\r\nconst obj4 = {\r\nvalueOf: function() {\r\nreturn '5';\r\n},\r\ntoString: function() {\r\nreturn 'I am an object';\r\n}\r\n};\r\n\r\nconsole.log(obj4 + 1); // \"51\" (вызывается valueOf)\r\nconsole.log(obj4 == '5'); // true (нестрогое сравнение, вызывается valueOf)\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const IIFE = {\r\n  id: 150,\r\n  title: \"IIFE (Immediately Invoked Function Expression)\",\r\n  children: [\r\n    {\r\n      title: \"Описание IIFE\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>\r\n              <strong>IIFE</strong>: Это функциональное выражение, которое выполняется сразу после его определения. Это позволяет создать локальную область видимости и изолировать переменные от глобальной области видимости.\r\n            </p>\r\n            <p>\r\n              IIFE часто используется для организации кода и предотвращения загрязнения глобального пространства имен.\r\n            </p>\r\n          `,\r\n      code: `\r\n(function() {\r\nvar localVariable = 'I am local';\r\nconsole.log(localVariable); // 'I am local'\r\n})();\r\n\r\n// console.log(localVariable); // Uncaught ReferenceError: localVariable is not defined\r\n          `,\r\n    },\r\n    {\r\n      title: \"Синтаксис IIFE\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Стандартный синтаксис включает в себя определение функции, заключенное в круглые скобки, и сразу же вызываемое с использованием дополнительных круглых скобок.</p>\r\n          `,\r\n      code: `\r\n(function() {\r\n// Код здесь\r\n})();\r\n\r\n// Или с использованием стрелочной функции\r\n(() => {\r\n// Код здесь\r\n})();\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества использования IIFE\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>\r\n              <strong>Преимущества:</strong>\r\n              <ul>\r\n                <li>Изолированная область видимости для переменных.</li>\r\n                <li>Предотвращение конфликтов переменных с глобальной областью видимости.</li>\r\n                <li>Помогает безопасно избегать переменных, которые могут повлиять на другие скрипты.</li>\r\n              </ul>\r\n            </p>\r\n          `,\r\n      code: `\r\n(function() {\r\nvar count = 0; // Локальная переменная, недоступная вне IIFE\r\nconsole.log(count); // 0\r\n})();\r\n\r\n// console.log(count); // Uncaught ReferenceError: count is not defined\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const Inheritance = {\r\n  id: 149,\r\n  title: \"Inheritance (наследование)\",\r\n  children: [\r\n    {\r\n      title: \"Прототипное наследование\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Прототипное наследование</strong>: В JavaScript объекты могут наследовать свойства и методы от других объектов через механизм прототипов. Каждый объект имеет внутреннюю ссылку на свой прототип, который может содержать свойства и методы, доступные наследуемым объектам.</p>\r\n        <p>Это характерно для JavaScript и позволяет разработчикам расширять возможности объектов без необходимости использовать классы.</p>\r\n      `,\r\n      code: `\r\n// Создаем объект родитель\r\nconst parent = {\r\n  greet: function() {\r\n    console.log(\"Hello from parent!\");\r\n  }\r\n};\r\n\r\n// Создаем объект child с наследованием от parent\r\nconst child = Object.create(parent);\r\nchild.greet(); // \"Hello from parent!\"\r\n      `,\r\n    },\r\n    {\r\n      title: \"Классы ES6\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Классы ES6</strong>: С появлением ES6 в JavaScript появилась возможность использования классов. Классы предоставляют более удобный и понятный синтаксис для реализации наследования. Классы также используют механизм прототипов под капотом.</p>\r\n      `,\r\n      code: `\r\nclass Parent {\r\n  greet() {\r\n    console.log(\"Hello from parent class!\");\r\n  }\r\n}\r\n\r\nclass Child extends Parent {\r\n  greet() {\r\n    console.log(\"Hello from child class!\");\r\n  }\r\n}\r\n\r\nconst childInstance = new Child();\r\nchildInstance.greet(); // \"Hello from child class!\"\r\n\r\nconst parentInstance = new Parent();\r\nparentInstance.greet(); // \"Hello from parent class!\"\r\n      `,\r\n    },\r\n    {\r\n      title: \"Наследование с использованием Object.setPrototypeOf\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Object.setPrototypeOf</strong>: Этот метод можно использовать для изменения прототипа существующего объекта. Это также позволяет реализовать наследование, но рекомендуется использовать в основном в особых случаях, т.к. может привести к ухудшению производительности.</p>\r\n      `,\r\n      code: `\r\nconst parent = {\r\n  greet: function() {\r\n    console.log(\"Hello from parent!\");\r\n  }\r\n};\r\n\r\nconst child = {};\r\nObject.setPrototypeOf(child, parent);\r\nchild.greet(); // \"Hello from parent!\"\r\n      `,\r\n    },\r\n    {\r\n      title: \"Сравнение различных способов наследования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Различные способы реализации наследования в JavaScript имеют свои преимущества и недостатки:</p>\r\n        <ul>\r\n          <li><strong>Прототипное наследование:</strong> Гибкость, но может быть сложнее для понимания начинающим.</li>\r\n          <li><strong>Классы ES6:</strong> Более читаемый и привычный синтаксис, похожий на другие языки программирования.</li>\r\n          <li><strong>Object.setPrototypeOf:</strong> Не рекомендуется для частого использования, так как имеет низкую производительность.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Обзор методов\r\nconsole.log(Object.getPrototypeOf(child) === parent); // true\r\nconsole.log(child instanceof Child); // true\r\nconsole.log(child instanceof Parent); // true\r\n      `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Используйте классы для наследования:</strong> Они более читаемы и поддерживаются большинством современных браузеров.</li>\r\n          <li><strong>Избегайте частого использования Object.setPrototypeOf:</strong> Он может замедлить работу программы.</li>\r\n          <li><strong>Организуйте общие методы в prototype:</strong> Это делает код более эффективным и читаемым.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Пример организации методов в prototype\r\nfunction Animal(type) {\r\n  this.type = type;\r\n}\r\n\r\nAnimal.prototype.makeSound = function () {\r\n  console.log('Some generic sound');\r\n};\r\n\r\nconst dog = new Animal('Dog');\r\ndog.makeSound(); // Some generic sound\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Прямое изменение __proto__:</strong></p>\r\n        <pre><code>// Плохо: медленно и считается устаревшим\r\nobj.__proto__ = someOtherObject;\r\n\r\n// Лучше: используйте Object.setPrototypeOf\r\nObject.setPrototypeOf(obj, someOtherObject);</code></pre>\r\n\r\n        <p><strong>2. Неправильное использование prototype:</strong></p>\r\n        <pre><code>// Плохо: добавление методов после создания экземпляра\r\nconst user = new User();\r\nUser.prototype.sayHi = function () { ... };\r\n\r\n// Лучше: определите все методы заранее</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Продвинутые паттерны\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Миксины:</strong></p>\r\n        <pre><code>const canEat = {\r\neat: function () {\r\n  console.log('Eating...');\r\n}\r\n};\r\n\r\nconst canWalk = {\r\nwalk: function () {\r\n  console.log('Walking...');\r\n}\r\n};\r\n\r\nfunction mixin(target, ...sources) {\r\nObject.assign(target, ...sources);\r\n}\r\n\r\nfunction Person(name) {\r\nthis.name = name;\r\n}\r\n\r\nmixin(Person.prototype, canEat, canWalk);\r\n\r\nconst person = new Person('Alice');\r\nperson.eat();  // Eating...\r\nperson.walk(); // Walking...\r\n</code></pre>\r\n\r\n        <p><strong>2. Композиция вместо наследования:</strong></p>\r\n        <pre><code>const createAnimal = (type) => ({\r\ntype,\r\nmakeSound: () => console.log('Some generic sound')\r\n});\r\n\r\nconst dog = createAnimal('Dog');\r\ndog.makeSound(); // Some generic sound\r\n</code></pre>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const LexicalEnvironment = {\r\n  id: 151,\r\n  title: \"Lexical Environment\",\r\n  children: [\r\n    {\r\n      title: \"1. Определение лексического окружения\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Лексическое окружение в JavaScript - это структура, которая хранит все переменные и функции, доступные в определённой области видимости. Оно создаётся во время исполнения кода и используется для определения, где и как переменные могут быть использованы.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"2. Составляющие лексического окружения\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Лексическое окружение состоит из двух основных частей:</p>\r\n            <ul>\r\n              <li><strong>Объект окружения:</strong> Содержит все переменные и функции, доступные в данной области видимости.</li>\r\n              <li><strong>Ссылка на внешнее окружение:</strong> Указывает на лексическое окружение, в котором была создана текущая функция. Это позволяет функции доступ к переменным из внешней области видимости.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"3. Пример лексического окружения\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример, иллюстрирующий лексическое окружение:</p>\r\n          `,\r\n      code: `\r\nfunction outerFunction() {\r\nlet outerVar = 'I am outside!';\r\n\r\nfunction innerFunction() {\r\nconsole.log(outerVar); // Доступ к переменной outerVar из внешнего окружения\r\n}\r\n\r\nreturn innerFunction;\r\n}\r\n\r\nconst myInnerFunction = outerFunction();\r\nmyInnerFunction(); // Вывод: \"I am outside!\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"4. Как лексическое окружение связано с замыканиями?\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Когда функция создаётся, она захватывает свое лексическое окружение. Это означает, что даже после завершения внешней функции, внутренние функции могут продолжать получать доступ к переменным, объявленным в этом окружении. Это и есть замыкание.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"5. Значение лексического окружения для производительности\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Лексическое окружение помогает JavaScript управлять памятью и областью видимости. Понимание этой концепции помогает разработчикам писать более эффективный и управляемый код.</p>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const LinearEquation = {\r\n  id: 153,\r\n  title: \"Linear equation\",\r\n  children: [\r\n    {\r\n      title: \"1. Определение линейного уравнения\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Линейное уравнение - это алгебраическое уравнение, в котором каждая переменная имеет степень 1. Общее уравнение с двумя переменными (x и y) имеет вид:</p>\r\n            <p><code>ax + by = c</code>,</p>\r\n            <p>где <code>a</code> и <code>b</code> - коэффициенты, <code>x</code> и <code>y</code> - переменные, <code>c</code> - константа.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"2. Графическое представление\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>График линейного уравнения представляет собой прямую линию в координатной плоскости. Угловой коэффициент определяет наклон этой линии, а y-перехват указывает, где линия пересекает ось y.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"3. Пример линейного уравнения\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример линейного уравнения в стандартной форме:</p>\r\n          `,\r\n      code: `\r\n2x + 3y = 6\r\n          `,\r\n    },\r\n    {\r\n      title: \"4. Преобразование в форму с угловым коэффициентом\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Преобразование стандартного уравнения в форму с угловым коэффициентом:</p>\r\n          `,\r\n      code: `\r\ny = -\\\\frac{2}{3}x + 2\r\n          `,\r\n    },\r\n    {\r\n      title: \"5. Пример кода для решения линейного уравнения\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример кода на JavaScript, который решает линейное уравнение:</p>\r\n          `,\r\n      code: `\r\nfunction solveLinearEquation(a, b, c) {\r\n// Решение уравнения ax + by = c для y\r\nlet y = (c - a) / b;\r\nreturn y;\r\n}\r\n\r\nlet a = 2;\r\nlet b = 3;\r\nlet c = 6;\r\n\r\nconsole.log(solveLinearEquation(a, b, c)); // Вывод: 0\r\n          `,\r\n    },\r\n    {\r\n      title: \"6. Применение линейных уравнений\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Линейные уравнения используются в различных областях, таких как экономика, физика и инженерное дело. Они помогают моделировать отношения между переменными и находить решения для различных задач.</p>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const LivingAndNonlivingCollections = {\r\n  id: 152,\r\n  title: \"Living and nonliving collections (Живые и неживые коллекции)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое коллекции в JavaScript?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Коллекции в JavaScript</strong> — это объекты, которые хранят группы элементов. Они могут быть <strong>живыми</strong> или <strong>неживыми</strong> в зависимости от их поведения при изменении DOM.</p>\r\n        <p>Живые коллекции автоматически обновляются при изменении DOM, тогда как неживые коллекции остаются неизменными после их создания.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Живые коллекции\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Живые коллекции</strong> автоматически обновляются при изменении DOM. Примеры:</p>\r\n        <ul>\r\n          <li><code>document.getElementsByTagName()</code></li>\r\n          <li><code>document.getElementsByClassName()</code></li>\r\n          <li><code>document.childNodes</code></li>\r\n          <li><code>HTMLCollection</code> (возвращается методами выше)</li>\r\n        </ul>\r\n        <p>При добавлении или удалении элементов, живые коллекции будут отражать эти изменения.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Неживые коллекции\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Неживые коллекции</strong> не обновляются при изменении DOM. Примеры:</p>\r\n        <ul>\r\n          <li><code>document.querySelectorAll()</code></li>\r\n          <li><code>NodeList</code> (возвращается методом <code>querySelectorAll</code>)</li>\r\n          <li><code>Array.from()</code> (при преобразовании живых коллекций)</li>\r\n        </ul>\r\n        <p>Эти коллекции сохраняют состояние на момент их создания и не реагируют на изменения в DOM.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример работы с живыми коллекциями\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Пример использования живой коллекции:</p>\r\n      `,\r\n      code: `\r\nconst elements = document.getElementsByClassName('example');\r\nconsole.log(elements.length); // Выводит количество элементов с классом 'example'\r\n\r\n// Добавим новый элемент с классом 'example'\r\nconst newElement = document.createElement('div');\r\nnewElement.className = 'example';\r\ndocument.body.appendChild(newElement);\r\n\r\nconsole.log(elements.length); // Теперь длина коллекции увеличилась\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример работы с неживыми коллекциями\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Пример использования неживой коллекции:</p>\r\n      `,\r\n      code: `\r\nconst staticElements = document.querySelectorAll('.example');\r\nconsole.log(staticElements.length); // Выводит количество элементов с классом 'example'\r\n\r\n// Добавим новый элемент с классом 'example'\r\nconst newStaticElement = document.createElement('div');\r\nnewStaticElement.className = 'example';\r\ndocument.body.appendChild(newStaticElement);\r\n\r\nconsole.log(staticElements.length); // Длина коллекции не изменилась\r\n      `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Используйте живые коллекции только при необходимости:</strong> Они могут быть менее производительными, так как обновляются динамически.</li>\r\n          <li><strong>Для статических данных используйте неживые коллекции:</strong> Например, <code>querySelectorAll</code> подходит для фиксированных наборов элементов.</li>\r\n          <li><strong>Преобразуйте живые коллекции в массивы:</strong> Это позволяет использовать методы массива, такие как <code>map</code>, <code>filter</code> и т.д.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Преобразование живой коллекции в массив\r\nconst liveCollection = document.getElementsByClassName('example');\r\nconst arrayFromLiveCollection = Array.from(liveCollection);\r\n\r\n// Или использование spread оператора\r\nconst spreadCollection = [...liveCollection];\r\n\r\n// Теперь можно использовать методы массива\r\narrayFromLiveCollection.forEach(element => console.log(element));\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Заблуждение о статичности живых коллекций:</strong></p>\r\n        <pre><code>// Плохо: предположение, что коллекция не изменится\r\nconst elements = document.getElementsByClassName('example');\r\nconsole.log(elements.length); // 3\r\n\r\n// После добавления элемента\r\nconst newElement = document.createElement('div');\r\nnewElement.className = 'example';\r\ndocument.body.appendChild(newElement);\r\n\r\nconsole.log(elements.length); // 4 (коллекция обновилась)\r\n</code></pre>\r\n\r\n        <p><strong>2. Неправильное использование методов:</strong></p>\r\n        <pre><code>// Плохо: попытка вызвать метод массива напрямую\r\nconst liveCollection = document.getElementsByClassName('example');\r\nliveCollection.map(el => console.log(el)); // Ошибка: map не является функцией\r\n\r\n// Лучше: преобразуйте коллекцию в массив\r\nArray.from(liveCollection).map(el => console.log(el));\r\n</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Дополнительные материалы\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Для более глубокого изучения:</p>\r\n        <ul>\r\n          <li><a href=\"https://developer.mozilla.org/ru/docs/Web/API/HTMLCollection\"  target=\"_blank\">MDN Web Docs: HTMLCollection</a></li>\r\n          <li><a href=\"https://developer.mozilla.org/ru/docs/Web/API/NodeList\"  target=\"_blank\">MDN Web Docs: NodeList</a></li>\r\n          <li><a href=\"https://javascript.info/dom-nodes\"  target=\"_blank\">JavaScript.info: Коллекции DOM-узлов</a></li>\r\n        </ul>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const idempotentMethods = {\r\n  id: 2548,\r\n  title: \"1. Изменяющие методы\",\r\n  children: [\r\n    {\r\n      title: \"pop()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>pop()</strong>: Удаляет последний элемент массива и возвращает его.</p>\r\n            <p>Метод изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, 2, 3];\r\nconst lastElement = arr.pop();\r\nconsole.log(arr); // [1, 2]\r\nconsole.log(lastElement); // 3\r\n          `,\r\n    },\r\n    {\r\n      title: \"shift()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>shift()</strong>: Удаляет первый элемент массива и возвращает его.</p>\r\n            <p>Метод изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, 2, 3];\r\nconst firstElement = arr.shift();\r\nconsole.log(arr); // [2, 3]\r\nconsole.log(firstElement); // 1\r\n          `,\r\n    },\r\n    {\r\n      title: \"push()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>push()</strong>: Добавляет один или несколько элементов в конец массива и возвращает новую длину массива.</p>\r\n            <p>Метод изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, 2, 3];\r\narr.push(4, 5);\r\nconsole.log(arr); // [1, 2, 3, 4, 5]\r\n          `,\r\n    },\r\n    {\r\n      title: \"unshift()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>unshift()</strong>: Добавляет один или несколько элементов в начало массива и возвращает новую длину массива.</p>\r\n            <p>Метод изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [3, 4];\r\narr.unshift(1, 2);\r\nconsole.log(arr); // [1, 2, 3, 4]\r\n          `,\r\n    },\r\n    {\r\n      title: \"splice()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>splice(start, deleteCount, items)</strong>: Добавляет, удаляет или заменяет элементы массива.</p>\r\n            <p>Метод изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, 2, 3, 4, 5];\r\narr.splice(2, 2, 'a', 'b'); // Удаляем 2 элемента с индекса 2 и добавляем 'a', 'b'\r\nconsole.log(arr); // [1, 2, 'a', 'b', 5]\r\n          `,\r\n    },\r\n    {\r\n      title: \"reverse()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>reverse()</strong>: Меняет порядок элементов массива на обратный.</p>\r\n            <p>Метод изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, 2, 3];\r\narr.reverse();\r\nconsole.log(arr); // [3, 2, 1]\r\n          `,\r\n    },\r\n    {\r\n      title: \"sort()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>sort(compareFunction)</strong>: Сортирует элементы массива на месте (по умолчанию как строки).</p>\r\n            <p>Метод изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [3, 1, 4, 2];\r\narr.sort((a, b) => a - b); // Числовая сортировка\r\nconsole.log(arr); // [1, 2, 3, 4]\r\n          `,\r\n    },\r\n    {\r\n      title: \"fill()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>fill(value, start, end)</strong>: Заполняет массив указанным значением в заданном диапазоне.</p>\r\n            <p>Метод изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, 2, 3, 4];\r\narr.fill(0, 1, 3); // Заполняем значениями 0 с индекса 1 до 3 (не включая)\r\nconsole.log(arr); // [1, 0, 0, 4]\r\n          `,\r\n    },\r\n    {\r\n      title: \"copyWithin()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>copyWithin(target, start, end)</strong>: Копирует часть массива внутри себя, перезаписывая существующие элементы.</p>\r\n            <p>Метод изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, 2, 3, 4, 5];\r\narr.copyWithin(0, 3, 5); // Копируем элементы с индекса 3 до 5 в начало массива\r\nconsole.log(arr); // [4, 5, 3, 4, 5]\r\n          `,\r\n    },\r\n  ],\r\n};","export const iterationMethods = {\r\n  id: 2550,\r\n  title: \"3. Методы итерации\",\r\n  children: [\r\n    {\r\n      title: \"forEach()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>forEach(callback)</strong>: Выполняет указанную функцию для каждого элемента массива, но не возвращает новый массив.</p>\r\n            <p>Используется для выполнения побочных эффектов (например, вывода в консоль).</p>\r\n          `,\r\n      code: `\r\nconst numbers = [1, 2, 3];\r\nnumbers.forEach((num, index) => {\r\n  console.log(\\`Element at index \\${index}: \\${num}\\`);\r\n});\r\n// Element at index 0: 1\r\n// Element at index 1: 2\r\n// Element at index 2: 3\r\n          `,\r\n    },\r\n    {\r\n      title: \"map()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>map(callback)</strong>: Создает новый массив, применяя функцию к каждому элементу исходного массива.</p>\r\n            <p>Часто используется для преобразования данных.</p>\r\n          `,\r\n      code: `\r\nconst numbers = [1, 2, 3];\r\nconst doubled = numbers.map(num => num * 2);\r\nconsole.log(doubled); // [2, 4, 6]\r\n          `,\r\n    },\r\n    {\r\n      title: \"filter()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>filter(callback)</strong>: Создает новый массив, содержащий только те элементы, которые удовлетворяют условию.</p>\r\n          `,\r\n      code: `\r\nconst numbers = [1, 2, 3, 4];\r\nconst evens = numbers.filter(num => num % 2 === 0);\r\nconsole.log(evens); // [2, 4]\r\n          `,\r\n    },\r\n    {\r\n      title: \"reduce()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>reduce(callback, initialValue)</strong>: Сводит массив к одному значению, выполняя функцию для каждого элемента.</p>\r\n          `,\r\n      code: `\r\nconst numbers = [1, 2, 3, 4];\r\nconst sum = numbers.reduce((acc, num) => acc + num, 0);\r\nconsole.log(sum); // 10\r\n          `,\r\n    },\r\n    {\r\n      title: \"reduceRight()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>reduceRight(callback, initialValue)</strong>: Аналогично <code>reduce</code>, но выполняется справа налево.</p>\r\n          `,\r\n      code: `\r\nconst numbers = [1, 2, 3, 4];\r\nconst result = numbers.reduceRight((acc, num) => acc - num, 0);\r\nconsole.log(result); // -2 (0 - 4 - 3 - 2 - 1)\r\n          `,\r\n    },\r\n    {\r\n      title: \"find()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>find(callback)</strong>: Возвращает первый элемент массива, удовлетворяющий условию.</p>\r\n          `,\r\n      code: `\r\nconst numbers = [1, 2, 3, 4];\r\nconst found = numbers.find(num => num > 2);\r\nconsole.log(found); // 3\r\n          `,\r\n    },\r\n    {\r\n      title: \"findIndex()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>findIndex(callback)</strong>: Возвращает индекс первого элемента массива, удовлетворяющего условию.</p>\r\n          `,\r\n      code: `\r\nconst numbers = [1, 2, 3, 4];\r\nconst index = numbers.findIndex(num => num > 2);\r\nconsole.log(index); // 2\r\n          `,\r\n    },\r\n    {\r\n      title: \"findLast()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>findLast(callback)</strong>: Возвращает последний элемент массива, удовлетворяющий условию (ES2023).</p>\r\n          `,\r\n      code: `\r\nconst numbers = [1, 2, 3, 4];\r\nconst found = numbers.findLast(num => num > 2);\r\nconsole.log(found); // 4\r\n          `,\r\n    },\r\n    {\r\n      title: \"findLastIndex()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>findLastIndex(callback)</strong>: Возвращает индекс последнего элемента массива, удовлетворяющего условию (ES2023).</p>\r\n          `,\r\n      code: `\r\nconst numbers = [1, 2, 3, 4];\r\nconst index = numbers.findLastIndex(num => num > 2);\r\nconsole.log(index); // 3\r\n          `,\r\n    },\r\n    {\r\n      title: \"entries()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>entries()</strong>: Возвращает итератор пар [индекс, значение].</p>\r\n          `,\r\n      code: `\r\nconst arr = ['a', 'b', 'c'];\r\nfor (const [index, value] of arr.entries()) {\r\n  console.log(\\`\\${index}: \\${value}\\`);\r\n}\r\n// 0: a\r\n// 1: b\r\n// 2: c\r\n          `,\r\n    },\r\n    {\r\n      title: \"keys()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>keys()</strong>: Возвращает итератор индексов массива.</p>\r\n          `,\r\n      code: `\r\nconst arr = ['a', 'b', 'c'];\r\nfor (const key of arr.keys()) {\r\n  console.log(key);\r\n}\r\n// 0\r\n// 1\r\n// 2\r\n          `,\r\n    },\r\n    {\r\n      title: \"values()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>values()</strong>: Возвращает итератор значений массива.</p>\r\n          `,\r\n      code: `\r\nconst arr = ['a', 'b', 'c'];\r\nfor (const value of arr.values()) {\r\n  console.log(value);\r\n}\r\n// a\r\n// b\r\n// c\r\n          `,\r\n    },\r\n    {\r\n      title: \"at()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>at(index)</strong>: Возвращает элемент по индексу (поддерживает отрицательные индексы).</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, 2, 3];\r\nconsole.log(arr.at(1)); // 2\r\nconsole.log(arr.at(-1)); // 3\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const nonIdempotentMethods = {\r\n  id: 2549,\r\n  title: \"2. Неизменяющие методы\",\r\n  children: [\r\n    {\r\n      title: \"slice()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>slice(start, end)</strong>: Возвращает новый массив, содержащий копию части исходного массива.</p>\r\n            <p>Метод не изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, 2, 3, 4, 5];\r\nconst newArr = arr.slice(1, 4);\r\nconsole.log(newArr); // [2, 3, 4]\r\nconsole.log(arr); // Исходный массив не изменился: [1, 2, 3, 4, 5]\r\n          `,\r\n    },\r\n    {\r\n      title: \"concat()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>concat()</strong>: Создает новый массив, объединяя существующий массив с другими массивами или значениями.</p>\r\n            <p>Метод не изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr1 = [1, 2];\r\nconst arr2 = [3, 4];\r\nconst newArr = arr1.concat(arr2);\r\nconsole.log(newArr); // [1, 2, 3, 4]\r\nconsole.log(arr1); // Исходный массив не изменился: [1, 2]\r\n          `,\r\n    },\r\n    {\r\n      title: \"join()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>join(separator)</strong>: Преобразует массив в строку, разделяя элементы указанным разделителем.</p>\r\n            <p>Метод не изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = ['apple', 'banana', 'cherry'];\r\nconst str = arr.join(', ');\r\nconsole.log(str); // \"apple, banana, cherry\"\r\nconsole.log(arr); // Исходный массив не изменился: ['apple', 'banana', 'cherry']\r\n          `,\r\n    },\r\n    {\r\n      title: \"map()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>map(callback)</strong>: Создает новый массив, применяя функцию к каждому элементу исходного массива.</p>\r\n            <p>Часто используется для преобразования данных.</p>\r\n            <p>Метод не изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst numbers = [1, 2, 3];\r\nconst doubled = numbers.map(num => num * 2);\r\nconsole.log(doubled); // [2, 4, 6]\r\nconsole.log(numbers); // Исходный массив не изменился: [1, 2, 3]\r\n          `,\r\n    },\r\n    {\r\n      title: \"filter()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>filter(callback)</strong>: Создает новый массив, содержащий только те элементы, которые удовлетворяют условию.</p>\r\n            <p>Метод не изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst numbers = [1, 2, 3, 4];\r\nconst evens = numbers.filter(num => num % 2 === 0);\r\nconsole.log(evens); // [2, 4]\r\nconsole.log(numbers); // Исходный массив не изменился: [1, 2, 3, 4]\r\n          `,\r\n    },\r\n    {\r\n      title: \"flat()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>flat(depth)</strong>: Возвращает новый массив с \"разглаженными\" уровнями вложенности.</p>\r\n            <p>Метод не изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, [2, [3, 4]]];\r\nconst flatArr = arr.flat(2);\r\nconsole.log(flatArr); // [1, 2, 3, 4]\r\nconsole.log(arr); // Исходный массив не изменился: [1, [2, [3, 4]]]\r\n          `,\r\n    },\r\n    {\r\n      title: \"flatMap()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>flatMap(callback)</strong>: Комбинация <code>map</code> и <code>flat</code>. Применяет функцию к каждому элементу и \"разглаживает\" результат.</p>\r\n            <p>Метод не изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, 2, 3];\r\nconst result = arr.flatMap(num => [num, num * 2]);\r\nconsole.log(result); // [1, 2, 2, 4, 3, 6]\r\nconsole.log(arr); // Исходный массив не изменился: [1, 2, 3]\r\n          `,\r\n    },\r\n    {\r\n      title: \"toSorted()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>toSorted(compareFunction)</strong>: Возвращает отсортированную копию массива (ES2023).</p>\r\n            <p>Метод не изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [3, 1, 4, 2];\r\nconst sorted = arr.toSorted((a, b) => a - b);\r\nconsole.log(sorted); // [1, 2, 3, 4]\r\nconsole.log(arr); // Исходный массив не изменился: [3, 1, 4, 2]\r\n          `,\r\n    },\r\n    {\r\n      title: \"toReversed()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>toReversed()</strong>: Возвращает копию массива в обратном порядке (ES2023).</p>\r\n            <p>Метод не изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, 2, 3];\r\nconst reversed = arr.toReversed();\r\nconsole.log(reversed); // [3, 2, 1]\r\nconsole.log(arr); // Исходный массив не изменился: [1, 2, 3]\r\n          `,\r\n    },\r\n    {\r\n      title: \"toSpliced()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>toSpliced(start, deleteCount, items)</strong>: Возвращает копию массива с изменениями (ES2023).</p>\r\n            <p>Метод не изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, 2, 3, 4];\r\nconst modified = arr.toSpliced(1, 2, 'a', 'b');\r\nconsole.log(modified); // [1, 'a', 'b', 4]\r\nconsole.log(arr); // Исходный массив не изменился: [1, 2, 3, 4]\r\n          `,\r\n    },\r\n    {\r\n      title: \"with()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>with(index, value)</strong>: Возвращает копию массива с изменённым элементом (ES2023).</p>\r\n            <p>Метод не изменяет исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, 2, 3];\r\nconst updated = arr.with(1, 99);\r\nconsole.log(updated); // [1, 99, 3]\r\nconsole.log(arr); // Исходный массив не изменился: [1, 2, 3]\r\n          `,\r\n    },\r\n    {\r\n      title: \"toString() и toLocaleString()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>toString()</strong>: Преобразует массив в строку, разделяя элементы запятыми.</p>\r\n            <p><strong>toLocaleString()</strong>: Преобразует массив в строку, используя локализованное представление элементов.</p>\r\n            <p>Оба метода не изменяют исходный массив.</p>\r\n          `,\r\n      code: `\r\nconst arr = [1, 2, 3];\r\nconsole.log(arr.toString()); // \"1,2,3\"\r\nconsole.log(arr.toLocaleString()); // \"1,2,3\" (зависит от локали)\r\nconsole.log(arr); // Исходный массив не изменился: [1, 2, 3]\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const verificationMethods = {\r\n  id: 2551,\r\n  title: \"4. Проверочные методы\",\r\n  children: [\r\n    {\r\n      title: \"includes()\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>includes(value)</strong>: Проверяет, содержит ли массив элемент.</p>\r\n      `,\r\n      code: `\r\nconst fruits = ['apple', 'banana', 'cherry'];\r\nconsole.log(fruits.includes('banana')); // true\r\nconsole.log(fruits.includes('grape')); // false\r\n      `,\r\n    },\r\n    {\r\n      title: \"indexOf()\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>indexOf(value)</strong>: Возвращает индекс первого вхождения элемента. Если элемент не найден, возвращает -1.</p>\r\n      `,\r\n      code: `\r\nconst numbers = [1, 2, 3, 2];\r\nconsole.log(numbers.indexOf(2)); // 1\r\nconsole.log(numbers.indexOf(4)); // -1\r\n      `,\r\n    },\r\n    {\r\n      title: \"lastIndexOf()\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>lastIndexOf(value)</strong>: Возвращает индекс последнего вхождения элемента. Если элемент не найден, возвращает -1.</p>\r\n      `,\r\n      code: `\r\nconst numbers = [1, 2, 3, 2];\r\nconsole.log(numbers.lastIndexOf(2)); // 3\r\nconsole.log(numbers.lastIndexOf(4)); // -1\r\n      `,\r\n    },\r\n    {\r\n      title: \"every()\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>every(callback)</strong>: Проверяет, удовлетворяют ли все элементы массива условию.</p>\r\n      `,\r\n      code: `\r\nconst numbers = [2, 4, 6];\r\nconst allEven = numbers.every(num => num % 2 === 0);\r\nconsole.log(allEven); // true\r\n      `,\r\n    },\r\n    {\r\n      title: \"some()\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>some(callback)</strong>: Проверяет, удовлетворяет ли хотя бы один элемент массива условию.</p>\r\n      `,\r\n      code: `\r\nconst numbers = [1, 2, 3];\r\nconst hasEven = numbers.some(num => num % 2 === 0);\r\nconsole.log(hasEven); // true\r\n      `,\r\n    },\r\n    {\r\n      title: \"isArray()\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Array.isArray(obj)</strong>: Статический метод, проверяет, является ли объект массивом.</p>\r\n      `,\r\n      code: `\r\nconsole.log(Array.isArray([])); // true\r\nconsole.log(Array.isArray({})); // false\r\nconsole.log(Array.isArray('string')); // false\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","import { idempotentMethods } from \"./idempotentMethods/idempotentMethods\";\r\nimport { iterationMethods } from \"./IterationMethods/iterationMethods\";\r\nimport { nonIdempotentMethods } from \"./nonIdempotentMethods/nonIdempotentMethods\";\r\nimport { verificationMethods } from \"./verificationMethods/verificationMethods\";\r\n\r\nexport const arrayMethods = {\r\n  id: 505,\r\n  title: \"Array Methods (методы массива)\",\r\n  children: [\r\n    idempotentMethods,\r\n    nonIdempotentMethods,\r\n    iterationMethods,\r\n    verificationMethods,\r\n    {\r\n      id: 2552,\r\n      title: \"5. Полезные ссылки\",\r\n      children: [\r\n        {\r\n          title: \"\",\r\n          type: \"text\",\r\n          url: \"https://learn.javascript.ru/array-methods\",\r\n          link: \"Learn more about array methods\",\r\n        },\r\n        {\r\n          title: \"\",\r\n          type: \"text\",\r\n          url: \"https://medium.com/@sewolpe/visualizing-javascript-array-methods-7babf560f7be\",\r\n          link: \"Visual representation of array methods\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n","export const StringAdditionalMethods = {\r\n  id: 2557,\r\n  title: \"5. Дополнительные методы\",\r\n  children: [\r\n    {\r\n      title: \"repeat()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>repeat(count)</strong>: Повторяет строку указанное количество раз.</p>\r\n          `,\r\n      code: `\r\nconst str = \"abc\";\r\nconsole.log(str.repeat(3)); // \"abcabcabc\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"padStart()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>padStart(targetLength, padString)</strong>: Добавляет символы в начало строки, чтобы её длина достигла <code>targetLength</code>.</p>\r\n          `,\r\n      code: `\r\nconst str = \"5\";\r\nconsole.log(str.padStart(3, \"0\")); // \"005\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"padEnd()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>padEnd(targetLength, padString)</strong>: Добавляет символы в конец строки, чтобы её длина достигла <code>targetLength</code>.</p>\r\n          `,\r\n      code: `\r\nconst str = \"5\";\r\nconsole.log(str.padEnd(3, \"0\")); // \"500\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"at()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>at(index)</strong>: Возвращает символ по указанному индексу. Поддерживает отрицательные индексы для доступа с конца строки.</p>\r\n          `,\r\n      code: `\r\nconst str = \"Hello, world!\";\r\nconsole.log(str.at(0)); // \"H\"\r\nconsole.log(str.at(-1)); // \"!\"\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const stringReplace = {\r\n  title: \"6. Метод replace()\",\r\n  id: 2538,\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Метод <code>replace()</code> используется для замены части строки на другую строку. Он возвращает новую строку, в которой все (или первое) вхождения искомой подстроки заменены на указанную.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Синтаксис\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Синтаксис метода <code>replace()</code> выглядит следующим образом:</p>\r\n      `,\r\n      code: `\r\nstr.replace(searchValue, newValue);\r\n      `,\r\n    },\r\n    {\r\n      title: \"Параметры\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Метод принимает два параметра:</p>\r\n        <ul>\r\n          <li><strong>searchValue</strong>: Строка или регулярное выражение, определяющее, что нужно заменить.</li>\r\n          <li><strong>newValue</strong>: Строка или функция, которая определяет, на что нужно заменить <code>searchValue</code>.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Примеры использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Вот несколько примеров использования метода <code>replace()</code>:</p>\r\n      `,\r\n      code: `\r\n// 1. Замена подстроки\r\nlet str1 = \"Hello, world!\";\r\nlet newStr1 = str1.replace(\"world\", \"JavaScript\");\r\nconsole.log(newStr1); // Вывод: \"Hello, JavaScript!\"\r\n\r\n// 2. Замена с использованием регулярного выражения\r\nlet str2 = \"I like cats, cats are great.\";\r\nlet newStr2 = str2.replace(/cats/g, \"dogs\");\r\nconsole.log(newStr2); // Вывод: \"I like dogs, dogs are great.\"\r\n\r\n// 3. Замена первого вхождения\r\nlet str3 = \"one one one\";\r\nlet newStr3 = str3.replace(\"one\", \"two\");\r\nconsole.log(newStr3); // Вывод: \"two one one\"\r\n\r\n// 4. Использование функции в качестве второго аргумента\r\nlet str4 = \"I have 2 apples and 3 oranges.\";\r\nlet newStr4 = str4.replace(/\\\\d+/g, (match) => {\r\n  return parseInt(match) * 2; // Умножаем каждое число на 2\r\n});\r\nconsole.log(newStr4); // Вывод: \"I have 4 apples and 6 oranges.\"\r\n      `,\r\n    },\r\n    {\r\n      title: \"Особенности\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Некоторые особенности метода <code>replace()</code>:</p>\r\n        <ul>\r\n          <li><strong>Иммутабельность</strong>: Метод не изменяет исходную строку; он возвращает новую строку.</li>\r\n          <li><strong>Регистронезависимость</strong>: Если <code>searchValue</code> — строка, замена будет регистронезависимой.</li>\r\n          <li><strong>Флаг <code>g</code></strong>: При использовании регулярного выражения с флагом <code>g</code> будут заменены все вхождения.</li>\r\n          <li><strong>Шаблоны замены</strong>: Можно использовать специальные шаблоны, такие как <code>$&</code> (вставленное совпадение), <code>$\\`</code> (текст перед совпадением) и <code>$'</code> (текст после совпадения).</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Пример использования шаблонов замены\r\nlet str = \"JavaScript is awesome!\";\r\nlet newStr = str.replace(\"JavaScript\", \"$& replaced\");\r\nconsole.log(newStr); // Вывод: \"JavaScript replaced is awesome!\"\r\n      `,\r\n    },\r\n    {\r\n      title: \"Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Метод <code>replace()</code> является мощным инструментом для работы со строками. Он позволяет выполнять как простые замены, так и сложные преобразования с использованием регулярных выражений и функций.</p>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const StringReplaceChar = {\r\n  id: 2558,\r\n  title: \"7. Замена и работа с символами\",\r\n  children: [\r\n    {\r\n      title: \"charAt()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>charAt(index)</strong>: Возвращает символ по указанному индексу.</p>\r\n          `,\r\n      code: `\r\nconst str = \"Hello\";\r\nconsole.log(str.charAt(1)); // \"e\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"charCodeAt()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>charCodeAt(index)</strong>: Возвращает Unicode-код символа по указанному индексу.</p>\r\n          `,\r\n      code: `\r\nconst str = \"A\";\r\nconsole.log(str.charCodeAt(0)); // 65\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const StringSearchMethods = {\r\n  id: 2554,\r\n  title: \"2. Методы поиска\",\r\n  children: [\r\n    {\r\n      title: \"includes()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>includes(substring)</strong>: Проверяет, содержится ли подстрока в строке. Возвращает <code>true</code> или <code>false</code>.</p>\r\n          `,\r\n      code: `\r\nconst str = \"Hello, world!\";\r\nconsole.log(str.includes(\"world\")); // true\r\nconsole.log(str.includes(\"earth\")); // false\r\n          `,\r\n    },\r\n    {\r\n      title: \"startsWith()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>startsWith(substring)</strong>: Проверяет, начинается ли строка с указанной подстроки.</p>\r\n          `,\r\n      code: `\r\nconst str = \"Hello, world!\";\r\nconsole.log(str.startsWith(\"Hello\")); // true\r\nconsole.log(str.startsWith(\"world\")); // false\r\n          `,\r\n    },\r\n    {\r\n      title: \"endsWith()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>endsWith(substring)</strong>: Проверяет, заканчивается ли строка на указанную подстроку.</p>\r\n          `,\r\n      code: `\r\nconst str = \"Hello, world!\";\r\nconsole.log(str.endsWith(\"world!\")); // true\r\nconsole.log(str.endsWith(\"Hello\")); // false\r\n          `,\r\n    },\r\n    {\r\n      title: \"indexOf()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>indexOf(substring)</strong>: Возвращает индекс первого вхождения подстроки. Если подстрока не найдена, возвращает <code>-1</code>.</p>\r\n          `,\r\n      code: `\r\nconst str = \"Hello, world!\";\r\nconsole.log(str.indexOf(\"world\")); // 7\r\nconsole.log(str.indexOf(\"earth\")); // -1\r\n          `,\r\n    },\r\n    {\r\n      title: \"search()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>search(regexp)</strong>: Ищет совпадение с регулярным выражением и возвращает индекс первого вхождения.</p>\r\n          `,\r\n      code: `\r\nconst str = \"Hello, world!\";\r\nconsole.log(str.search(/world/)); // 7\r\nconsole.log(str.search(/earth/)); // -1\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const StringSliceMethods = {\r\n  id: 2556,\r\n  title: \"4. Методы извлечения частей строки\",\r\n  children: [\r\n    {\r\n      title: \"slice()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>slice(start, end)</strong>: Извлекает часть строки от <code>start</code> до <code>end</code> (не включая <code>end</code>). Поддерживает отрицательные значения.</p>\r\n          `,\r\n      code: `\r\nconst str = \"Hello, world!\";\r\nconsole.log(str.slice(0, 5)); // \"Hello\"\r\nconsole.log(str.slice(-6)); // \"world!\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"substring()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>substring(start, end)</strong>: Извлекает часть строки от <code>start</code> до <code>end</code>. Не поддерживает отрицательные значения.</p>\r\n          `,\r\n      code: `\r\nconst str = \"Hello, world!\";\r\nconsole.log(str.substring(0, 5)); // \"Hello\"\r\nconsole.log(str.substring(7)); // \"world!\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"substr()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>substr(start, length)</strong>: Извлекает подстроку длиной <code>length</code>, начиная с позиции <code>start</code>. <em>(Устаревший метод.)</em></p>\r\n          `,\r\n      code: `\r\nconst str = \"Hello, world!\";\r\nconsole.log(str.substr(0, 5)); // \"Hello\"\r\nconsole.log(str.substr(7, 5)); // \"world\"\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const StringSplitJoinMethods = {\r\n  id: 2555,\r\n  title: \"3. Методы разбиения и объединения\",\r\n  children: [\r\n    {\r\n      title: \"split()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>split(separator)</strong>: Разбивает строку на массив подстрок по указанному разделителю.</p>\r\n          `,\r\n      code: `\r\nconst str = \"apple,banana,cherry\";\r\nconst fruits = str.split(\",\");\r\nconsole.log(fruits); // [\"apple\", \"banana\", \"cherry\"]\r\n          `,\r\n    },\r\n    {\r\n      title: \"concat()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>concat(string)</strong>: Объединяет две или более строк в одну.</p>\r\n          `,\r\n      code: `\r\nconst str1 = \"Hello, \";\r\nconst str2 = \"world!\";\r\nconst result = str1.concat(str2);\r\nconsole.log(result); // \"Hello, world!\"\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const StringTransformationsMethods = {\r\n  id: 2553,\r\n  title: \"1. Методы преобразования\",\r\n  children: [\r\n    {\r\n      title: \"toUpperCase()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>toUpperCase()</strong>: Преобразует строку в верхний регистр.</p>\r\n          `,\r\n      code: `\r\nconst str = \"hello\";\r\nconsole.log(str.toUpperCase()); // \"HELLO\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"toLowerCase()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>toLowerCase()</strong>: Преобразует строку в нижний регистр.</p>\r\n          `,\r\n      code: `\r\nconst str = \"WORLD\";\r\nconsole.log(str.toLowerCase()); // \"world\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"trim()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>trim()</strong>: Удаляет пробелы в начале и конце строки.</p>\r\n          `,\r\n      code: `\r\nconst str = \"   hello   \";\r\nconsole.log(str.trim()); // \"hello\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"trimStart()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>trimStart()</strong>: Удаляет пробелы только в начале строки.</p>\r\n          `,\r\n      code: `\r\nconst str = \"   hello   \";\r\nconsole.log(str.trimStart()); // \"hello   \"\r\n          `,\r\n    },\r\n    {\r\n      title: \"trimEnd()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>trimEnd()</strong>: Удаляет пробелы только в конце строки.</p>\r\n          `,\r\n      code: `\r\nconst str = \"   hello   \";\r\nconsole.log(str.trimEnd()); // \"   hello\"\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","import { StringAdditionalMethods } from \"./StringAdditionalMethods/StringAdditionalMethods\";\r\nimport { stringReplace } from \"./StringReplace/stringReplace\";\r\nimport { StringReplaceChar } from \"./StringReplaceChar/StringReplaceChar\";\r\nimport { StringSearchMethods } from \"./StringSearchMethods/StringSearchMethods\";\r\nimport { StringSliceMethods } from \"./StringSliceMethods/StringSliceMethods\";\r\nimport { StringSplitJoinMethods } from \"./StringSplitJoinMethods/StringSplitJoinMethods\";\r\nimport { StringTransformationsMethods } from \"./StringTransformationsMethods/StringTransformationsMethods\";\r\n\r\nexport const stringMethods = {\r\n  id: 506,\r\n  title: \"Strings Methods\",\r\n  children: [\r\n    StringTransformationsMethods,\r\n    StringSearchMethods,\r\n    StringSplitJoinMethods,\r\n    StringSliceMethods,\r\n    StringAdditionalMethods,\r\n    stringReplace,\r\n    StringReplaceChar,\r\n    {\r\n      id: 2559,\r\n      title: \"8. Полезные ссылки\",\r\n      children: [\r\n        {\r\n          title: \"\",\r\n          type: \"text\",\r\n          url: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\",\r\n          link: \"Learn more about string methods\"\r\n        },\r\n        {\r\n          title: \"\",\r\n          type: \"text\",\r\n          url: \"https://javascript.info/string\",\r\n          link: \"Interactive examples of string methods\"\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n","export const MathNumber = {\r\n  id: 10000,\r\n  title: \"1. Методы для работы с числами\",\r\n  children: [\r\n    {\r\n      title: \"Math.max()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Math.max()</strong>: Возвращает наибольшее значение из переданных аргументов.</p>\r\n          `,\r\n      code: `\r\nconsole.log(Math.max(1, 2, 3)); // 3\r\nconsole.log(Math.max(-10, 0, 10)); // 10\r\n          `,\r\n    },\r\n    {\r\n      title: \"Math.min()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Math.min()</strong>: Возвращает наименьшее значение из переданных аргументов.</p>\r\n          `,\r\n      code: `\r\nconsole.log(Math.min(1, 2, 3)); // 1\r\nconsole.log(Math.min(-10, 0, 10)); // -10\r\n          `,\r\n    },\r\n    {\r\n      title: \"Math.abs()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Math.abs()</strong>: Возвращает абсолютное значение числа (модуль).</p>\r\n          `,\r\n      code: `\r\nconsole.log(Math.abs(-5)); // 5\r\nconsole.log(Math.abs(5)); // 5\r\n          `,\r\n    },\r\n    {\r\n      title: \"Math.pow(base, exponent)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Math.pow(base, exponent)</strong>: Возвращает число, возведённое в указанную степень.</p>\r\n          `,\r\n      code: `\r\nconsole.log(Math.pow(2, 3)); // 8 (2³)\r\nconsole.log(Math.pow(5, 2)); // 25 (5²)\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const MathRoots = {\r\n  id: 10002,\r\n  title: \"3. Методы для работы с корнями и случайными числами\",\r\n  children: [\r\n    {\r\n      title: \"Math.sqrt()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Math.sqrt()</strong>: Возвращает квадратный корень числа.</p>\r\n          `,\r\n      code: `\r\nconsole.log(Math.sqrt(16)); // 4\r\nconsole.log(Math.sqrt(25)); // 5\r\n          `,\r\n    },\r\n    {\r\n      title: \"Math.cbrt()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Math.cbrt()</strong>: Возвращает кубический корень числа.</p>\r\n          `,\r\n      code: `\r\nconsole.log(Math.cbrt(27)); // 3\r\nconsole.log(Math.cbrt(-8)); // -2\r\n          `,\r\n    },\r\n    {\r\n      title: \"Math.random()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Math.random()</strong>: Генерирует случайное число от 0 (включительно) до 1 (не включительно).</p>\r\n          `,\r\n      code: `\r\nfunction getRandomInt(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\nconsole.log(getRandomInt(1, 10)); // случайное число от 1 до 10\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const MathRounding = {\r\n  id: 10001,\r\n  title: \"2. Методы округления\",\r\n  children: [\r\n    {\r\n      title: \"Math.round()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Math.round()</strong>: Округляет число до ближайшего целого.</p>\r\n          `,\r\n      code: `\r\nconsole.log(Math.round(4.6)); // 5\r\nconsole.log(Math.round(4.4)); // 4\r\n          `,\r\n    },\r\n    {\r\n      title: \"Math.floor()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Math.floor()</strong>: Округляет число вниз до ближайшего целого.</p>\r\n          `,\r\n      code: `\r\nconsole.log(Math.floor(4.9)); // 4\r\nconsole.log(Math.floor(-4.1)); // -5\r\n          `,\r\n    },\r\n    {\r\n      title: \"Math.ceil()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Math.ceil()</strong>: Округляет число вверх до ближайшего целого.</p>\r\n          `,\r\n      code: `\r\nconsole.log(Math.ceil(4.1)); // 5\r\nconsole.log(Math.ceil(-4.9)); // -4\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","import { MathNumber } from \"./MathNumber/MathNumber\";\r\nimport { MathRoots } from \"./MathRoots/MathRoots\";\r\nimport { MathRounding } from \"./MathRounding/MathRounding\";\r\n\r\nexport const MathMethods = {\r\n  id: 2537,\r\n  title: \"3. Math Methods (Математические методы)\",\r\n  children: [\r\n    MathNumber,\r\n    MathRounding,\r\n    MathRoots,\r\n    {\r\n      id: 10003,\r\n      title: \"4. Полезные ссылки\",\r\n      children: [\r\n        {\r\n          title: \"\",\r\n          type: \"text\",\r\n          url: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\",\r\n          link: \"Learn more about Math methods\",\r\n        },\r\n        {\r\n          title: \"\",\r\n          type: \"text\",\r\n          url: \"https://javascript.info/number#math-object\",\r\n          link: \"Interactive examples of Math methods\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n","export const NumberFormation = {\r\n  id: 2560,\r\n  title: \"1. Форматирование чисел\",\r\n  children: [\r\n    {\r\n      title: \"toFixed(digits)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>toFixed(digits)</strong>: Форматирует число с фиксированным количеством знаков после запятой. Возвращает строку.</p>\r\n          `,\r\n      code: `\r\nconst num = 9.656;\r\nconsole.log(num.toFixed(2)); // \"9.66\"\r\nconsole.log(num.toFixed(0)); // \"10\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"toExponential(fractionDigits)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>toExponential(fractionDigits)</strong>: Преобразует число в экспоненциальное представление с указанным количеством знаков после запятой. Возвращает строку.</p>\r\n          `,\r\n      code: `\r\nconst num = 9.656;\r\nconsole.log(num.toExponential(2)); // \"9.66e+0\"\r\nconsole.log(num.toExponential(4)); // \"9.6560e+0\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"toPrecision(precision)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>toPrecision(precision)</strong>: Возвращает строку с числом, записанным с указанной точностью (общее количество цифр). Если число слишком велико или мало, используется экспоненциальная запись.</p>\r\n          `,\r\n      code: `\r\nconst num = 9.656;\r\nconsole.log(num.toPrecision(4)); // \"9.656\"\r\nconsole.log(num.toPrecision(2)); // \"9.7\"\r\nconsole.log((1234.5).toPrecision(2)); // \"1.2e+3\"\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const NumberTransformationsType = {\r\n  id: 2561,\r\n  title: \"2. Преобразование типов\",\r\n  children: [\r\n    {\r\n      title: \"Number(value)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Number(value)</strong>: Преобразует значение в числовой тип данных. Если преобразование невозможно, возвращает <code>NaN</code>.</p>\r\n          `,\r\n      code: `\r\nconsole.log(Number(\"123\")); // 123\r\nconsole.log(Number(\"12.34\")); // 12.34\r\nconsole.log(Number(\"abc\")); // NaN\r\nconsole.log(Number(true)); // 1\r\nconsole.log(Number(false)); // 0\r\n          `,\r\n    },\r\n    {\r\n      title: \"parseFloat(string)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>parseFloat(string)</strong>: Преобразует строку в число с плавающей точкой. Игнорирует всё после первого нечислового символа.</p>\r\n          `,\r\n      code: `\r\nconsole.log(parseFloat(\"12.34\")); // 12.34\r\nconsole.log(parseFloat(\"12.34abc\")); // 12.34\r\nconsole.log(parseFloat(\"abc12.34\")); // NaN\r\n          `,\r\n    },\r\n    {\r\n      title: \"parseInt(string, radix)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>parseInt(string, radix)</strong>: Преобразует строку в целое число в соответствии с указанной системой счисления (<code>radix</code>). По умолчанию <code>radix = 10</code>.</p>\r\n          `,\r\n      code: `\r\nconsole.log(parseInt(\"10\", 10)); // 10 (десятичная система)\r\nconsole.log(parseInt(\"10\", 2)); // 2 (двоичная система)\r\nconsole.log(parseInt(\"FF\", 16)); // 255 (шестнадцатеричная система)\r\nconsole.log(parseInt(\"12.34\")); // 12 (дробная часть игнорируется)\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","import { MathMethods } from \"./MathMethods/MathMethods\";\r\nimport { NumberFormation } from \"./NumberFormation/NumberFormation\";\r\nimport { NumberTransformationsType } from \"./NumberTransformationsType/NumberTransformationsType\";\r\n\r\nexport const numberMethods = {\r\n  id: 507,\r\n  title: \"Numbers Methods\",\r\n  children: [\r\n    NumberFormation,\r\n    NumberTransformationsType,\r\n    MathMethods,\r\n    {\r\n      id: 2563,\r\n      title: \"4. Полезные ссылки\",\r\n      children: [\r\n        {\r\n          title: \"\",\r\n          type: \"text\",\r\n          url: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\",\r\n          link: \"Learn more about number methods\",\r\n        },\r\n        {\r\n          title: \"\",\r\n          type: \"text\",\r\n          url: \"https://javascript.info/number\",\r\n          link: \"Interactive examples of number methods\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n","export const CheckPropertiesOfObject = {\r\n  id: 2568,\r\n  title: \"5. Проверка свойств объекта\",\r\n  children: [\r\n    {\r\n      title: \"Object.prototype.hasOwnProperty()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Object.prototype.hasOwnProperty()</strong>: Возвращает булево значение, указывающее, является ли указанное свойство собственным свойством объекта.</p>\r\n          `,\r\n      code: `\r\nconst obj = { name: 'Alice' };\r\nconsole.log(obj.hasOwnProperty('name')); // true\r\nconsole.log(obj.hasOwnProperty('age')); // false\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const CopyJoinObject = {\r\n  id: 2565,\r\n  title: \"2. Копирование и объединение объектов\",\r\n  children: [\r\n    {\r\n      title: \"Object.assign(target, ...sources)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Object.assign(target, ...sources)</strong>: Копирует значения всех собственных перечисляемых свойств из одного или более источников в целевой объект и возвращает его.</p>\r\n          `,\r\n      code: `\r\nconst target = { a: 1 };\r\nconst source = { b: 2, c: 3 };\r\nconst returnedTarget = Object.assign(target, source);\r\nconsole.log(returnedTarget); // { a: 1, b: 2, c: 3 }\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const CreateCompareObjects = {\r\n  id: 2567,\r\n  title: \"4. Создание и сравнение объектов\",\r\n  children: [\r\n    {\r\n      title: \"Object.create(proto, propertiesObject)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Object.create(proto, propertiesObject)</strong>: Создает новый объект с указанным прототипом и свойствами.</p>\r\n          `,\r\n      code: `\r\nconst proto = { greet() { console.log('Hello!'); } };\r\nconst obj = Object.create(proto);\r\nobj.greet(); // 'Hello!'\r\n          `,\r\n    },\r\n    {\r\n      title: \"Object.is(value1, value2)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Object.is(value1, value2)</strong>: Определяет, являются ли два значения строго равными. В отличие от оператора <code>===</code>, <code>Object.is()</code> корректно работает с <code>NaN</code> и <code>-0</code>.</p>\r\n          `,\r\n      code: `\r\nconsole.log(Object.is('abc', 'abc')); // true\r\nconsole.log(Object.is(0, -0)); // false\r\nconsole.log(Object.is(NaN, NaN)); // true\r\nconsole.log(Object.is(null, undefined)); // false\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const FreezeSealObject = {\r\n  id: 2566,\r\n  title: \"3. Заморозка и защита объектов\",\r\n  children: [\r\n    {\r\n      title: \"Object.freeze(obj)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Object.freeze(obj)</strong>: Полностью замораживает объект, предотвращая добавление, удаление или изменение его свойств.</p>\r\n          `,\r\n      code: `\r\nconst obj = { name: 'Alice' };\r\nObject.freeze(obj);\r\nobj.name = 'Bob'; // не сработает\r\nconsole.log(obj.name); // 'Alice'\r\n          `,\r\n    },\r\n    {\r\n      title: \"Object.seal(obj)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Object.seal(obj)</strong>: Запрещает добавление и удаление свойств объекта, но позволяет изменять существующие свойства.</p>\r\n          `,\r\n      code: `\r\nconst obj = { name: 'Alice' };\r\nObject.seal(obj);\r\nobj.age = 25; // не сработает\r\nobj.name = 'Bob'; // сработает\r\nconsole.log(obj); // { name: 'Bob' }\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const IterationOfObject = {\r\n  id: 2564,\r\n  title: \"1. Итерация по объекту\",\r\n  children: [\r\n    {\r\n      title: \"Object.keys(obj)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Object.keys(obj)</strong>: Возвращает массив строк, содержащий имена собственных перечисляемых свойств объекта.</p>\r\n          `,\r\n      code: `\r\nconst person = { name: 'Alice', age: 25 };\r\nconsole.log(Object.keys(person)); // ['name', 'age']\r\n          `,\r\n    },\r\n    {\r\n      title: \"Object.values(obj)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Object.values(obj)</strong>: Возвращает массив значений собственных перечисляемых свойств объекта.</p>\r\n          `,\r\n      code: `\r\nconst person = { name: 'Alice', age: 25 };\r\nconsole.log(Object.values(person)); // ['Alice', 25]\r\n          `,\r\n    },\r\n    {\r\n      title: \"Object.entries(obj)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Object.entries(obj)</strong>: Возвращает массив пар [ключ, значение] для собственных перечисляемых свойств объекта.</p>\r\n          `,\r\n      code: `\r\nconst person = { name: 'Alice', age: 25 };\r\nconsole.log(Object.entries(person)); // [['name', 'Alice'], ['age', 25]]\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","import { CheckPropertiesOfObject } from \"./CheckPropertiesOfObject/CheckPropertiesOfObject\";\r\nimport { CopyJoinObject } from \"./CopyJoinObject/CopyJoinObject\";\r\nimport { CreateCompareObjects } from \"./CreateCompareObjects/CreateCompareObjects\";\r\nimport { FreezeSealObject } from \"./FreezeSealObject/FreezeSealObject\";\r\nimport { IterationOfObject } from \"./IterationOfObject/IterationOfObject\";\r\n\r\nexport const objectMethods = {\r\n  id: 508,\r\n  title: \"Object Methods (методы объекта)\",\r\n  children: [\r\n    IterationOfObject,\r\n    CopyJoinObject,\r\n    FreezeSealObject,\r\n    CreateCompareObjects,\r\n    CheckPropertiesOfObject,\r\n    {\r\n      id: 2569,\r\n      title: \"6. Полезные ссылки\",\r\n      children: [\r\n        {\r\n          title: \"\",\r\n          type: \"text\",\r\n          url: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\",\r\n          link: \"Learn more about Object methods\",\r\n        },\r\n        {\r\n          title: \"\",\r\n          type: \"text\",\r\n          url: \"https://javascript.info/object-methods\",\r\n          link: \"Interactive examples of Object methods\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n","export const BaseTypeCycle = {\r\n  id: 2570,\r\n  title: \"Основные виды циклов\",\r\n  children: [\r\n    {\r\n      title: \"for\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>for</strong>: Повторяет блок кода определённое количество раз.</p>\r\n          `,\r\n      code: `\r\n// Пример цикла for\r\nfor (let i = 0; i < 5; i++) {\r\n  console.log(\"Итерация: \" + i); // Выводит 0, 1, 2, 3, 4\r\n}\r\n          `,\r\n    },\r\n    {\r\n      title: \"while\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>while</strong>: Повторяет блок кода до тех пор, пока выполняется условие.</p>\r\n          `,\r\n      code: `\r\n// Пример цикла while\r\nlet j = 0;\r\nwhile (j < 5) {\r\n  console.log(\"Итерация: \" + j); // Выводит 0, 1, 2, 3, 4\r\n  j++;\r\n}\r\n          `,\r\n    },\r\n    {\r\n      title: \"do while\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>do while</strong>: Повторяет блок кода до тех пор, пока выполняется условие. Гарантирует хотя бы одну итерацию.</p>\r\n          `,\r\n      code: `\r\n// Пример цикла do while\r\nlet k = 0;\r\ndo {\r\n  console.log(\"Итерация: \" + k); // Выводит 0, 1, 2, 3, 4\r\n  k++;\r\n} while (k < 5);\r\n          `,\r\n    },\r\n    {\r\n      title: \"for...of\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>for...of</strong>: Повторяет блок кода для каждого элемента в массиве или других итерируемых объектах.</p>\r\n          `,\r\n      code: `\r\n// Пример цикла for...of\r\nconst arr = ['a', 'b', 'c'];\r\nfor (const item of arr) {\r\n  console.log(item); // Выводит 'a', 'b', 'c'\r\n}\r\n          `,\r\n    },\r\n    {\r\n      title: \"forEach()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>forEach()</strong>: Выполняет функцию для каждого элемента массива.</p>\r\n          `,\r\n      code: `\r\n// Пример forEach()\r\nconst arr = ['a', 'b', 'c'];\r\narr.forEach((item, index) => {\r\n  console.log(\\`Индекс \\${index}: \\${item}\\`); // Выводит 'Индекс 0: a', 'Индекс 1: b', 'Индекс 2: c'\r\n});\r\n          `,\r\n    },\r\n    {\r\n      title: \"for...in\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>for...in</strong>: Повторяет блок кода для каждого свойства в объекте.</p>\r\n          `,\r\n      code: `\r\n// Пример цикла for...in\r\nconst obj = { a: 1, b: 2, c: 3 };\r\nfor (const key in obj) {\r\n  console.log(\\`\\${key}: \\${obj[key]}\\`); // Выводит 'a: 1', 'b: 2', 'c: 3'\r\n}\r\n          `,\r\n    },\r\n    {\r\n      title: \"break\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>break</strong>: Прерывает выполнение цикла.</p>\r\n          `,\r\n      code: `\r\n// Пример использования break\r\nfor (let i = 0; i < 10; i++) {\r\n  if (i === 5) break;\r\n  console.log(i); // Выводит 0, 1, 2, 3, 4\r\n}\r\n          `,\r\n    },\r\n    {\r\n      title: \"continue\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>continue</strong>: Прерывает текущую итерацию цикла и переходит к следующей.</p>\r\n          `,\r\n      code: `\r\n// Пример использования continue\r\nfor (let i = 0; i < 5; i++) {\r\n  if (i === 2) continue;\r\n  console.log(i); // Выводит 0, 1, 3, 4\r\n}\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const forWhileDoWhile = {\r\n  id: 2539,\r\n  title: \"for, while, do while\",\r\n  children: [\r\n    {\r\n      title: \"Использование циклов for, while, do while\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>В JavaScript существуют различные виды циклов, которые позволяют повторять выполнение блока кода определенное количество раз или до тех пор, пока выполняется заданное условие.</p>\r\n        <ul>\r\n          <li><strong>Цикл for</strong>: Используется, когда известно количество итераций.</li>\r\n          <li><strong>Цикл while</strong>: Используется, когда количество итераций неизвестно, и необходимо повторять выполнение до тех пор, пока условие истинно.</li>\r\n          <li><strong>Цикл do while</strong>: Похож на цикл while, но гарантирует хотя бы одну итерацию.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Пример цикла for\r\nfor (let i = 0; i < 5; i++) {\r\n  console.log(\"Итерация: \" + i); // Выводит 0, 1, 2, 3, 4\r\n}\r\n\r\n// Пример цикла while\r\nlet j = 0;\r\nwhile (j < 5) {\r\n  console.log(\"Итерация: \" + j); // Выводит 0, 1, 2, 3, 4\r\n  j++;\r\n}\r\n\r\n// Пример цикла do while\r\nlet k = 0;\r\ndo {\r\n  console.log(\"Итерация: \" + k); // Выводит 0, 1, 2, 3, 4\r\n  k++;\r\n} while (k < 5);\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","import { BaseTypeCycle } from \"./BaseTypeCycle/BaseTypeCycle\";\r\nimport { forWhileDoWhile } from \"./ForWhileDoWhile/ForWhileDoWhile\";\r\n\r\nexport const cycleMethod = {\r\n  id: 509,\r\n  title: \"Cycle\",\r\n  children: [\r\n    forWhileDoWhile,\r\n    BaseTypeCycle,\r\n  ],\r\n};\r\n","export const Json = {\r\n  id: 510,\r\n  title: \"work with JSON\",\r\n  children: [\r\n    {\r\n      title: ``,\r\n      type: \"text\",\r\n      description:\r\n        \"JSON.stringify(value, replacer, space): Преобразует значение в строку JSON.\",\r\n    },\r\n    {\r\n      title: ``,\r\n      type: \"text\",\r\n      description:\r\n        \"JSON.parse(text, reviver): Преобразует строку JSON в значение.\",\r\n    },\r\n  ],\r\n};\r\n","export const matchMethods = {\r\n  id: 2540,\r\n  title: \"Метод match()\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Метод <code>match()</code> используется для поиска совпадений в строке с использованием регулярного выражения. Он возвращает массив с найденными совпадениями или <code>null</code>, если совпадения не найдены.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Синтаксис\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Синтаксис метода <code>match()</code> выглядит следующим образом:</p>\r\n      `,\r\n      code: `\r\nstr.match(regexp);\r\n      `,\r\n    },\r\n    {\r\n      title: \"Параметры\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Метод принимает один параметр:</p>\r\n        <ul>\r\n          <li><strong>regexp</strong>: Регулярное выражение, по которому производится поиск.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Примеры использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Вот несколько примеров использования метода <code>match()</code>:</p>\r\n      `,\r\n      code: `\r\n// 1. Поиск простого совпадения:\r\nlet str1 = \"Hello, world!\";\r\nlet result1 = str1.match(/world/);\r\nconsole.log(result1); // Вывод: [\"world\"]\r\n\r\n// 2. Поиск с флагом g:\r\nlet str2 = \"The rain in Spain stays mainly in the plain.\";\r\nlet result2 = str2.match(/in/g);\r\nconsole.log(result2); // Вывод: [\"in\", \"in\", \"in\"]\r\n\r\n// 3. Регистронезависимый поиск с флагом i:\r\nlet str3 = \"Hello, World!\";\r\nlet result3 = str3.match(/world/i);\r\nconsole.log(result3); // Вывод: [\"World\"]\r\n\r\n// 4. Получение информации о совпадениях:\r\nlet str4 = \"The quick brown fox jumps over the lazy dog.\";\r\nlet result4 = str4.match(/(quick|lazy)/);\r\nconsole.log(result4); // Вывод: [\"quick\", \"quick\", index: 4, ... ]\r\n\r\n// 5. Использование групп для извлечения данных:\r\nlet str5 = \"2023-01-27\";\r\nlet result5 = str5.match(/(\\\\d{4})-(\\\\d{2})-(\\\\d{2})/);\r\nconsole.log(result5); // Вывод: [\"2023-01-27\", \"2023\", \"01\", \"27\", ... ]\r\n      `,\r\n    },\r\n    {\r\n      title: \"Особенности\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Некоторые особенности метода <code>match()</code>:</p>\r\n        <ul>\r\n          <li>Если регулярное выражение не находит совпадений, метод вернёт <code>null</code>.</li>\r\n          <li>Метод <code>match()</code> не изменяет исходную строку.</li>\r\n          <li>Использование флага <code>g</code> возвращает массив всех совпадений, но не предоставляет информации о позициях совпадений.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const RegularExpressionAdditionalMethods = {\r\n  id: 2571,\r\n  title: \"Дополнительные методы работы с регулярными выражениями\",\r\n  children: [\r\n    {\r\n      title: \"test()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>test()</strong>: Проверяет, соответствует ли строка указанному регулярному выражению. Возвращает <code>true</code> или <code>false</code>.</p>\r\n          `,\r\n      code: `\r\nconst regex = /hello/i;\r\nconsole.log(regex.test(\"Hello, world!\")); // true\r\nconsole.log(regex.test(\"Goodbye, world!\")); // false\r\n          `,\r\n    },\r\n    {\r\n      title: \"exec()\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>exec()</strong>: Выполняет поиск совпадений в строке с использованием регулярного выражения. Возвращает массив с информацией о первом совпадении или <code>null</code>, если совпадений нет.</p>\r\n          `,\r\n      code: `\r\nconst regex = /quick|lazy/;\r\nconst str = \"The quick brown fox jumps over the lazy dog.\";\r\nconst result = regex.exec(str);\r\nconsole.log(result); // [\"quick\", index: 4, input: \"The quick brown fox jumps over the lazy dog.\", groups: undefined]\r\n          `,\r\n    },\r\n    {\r\n      title: \"replace() с регулярными выражениями\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>replace()</strong>: Заменяет совпадения с регулярным выражением на указанную строку или результат функции.</p>\r\n          `,\r\n      code: `\r\nconst str = \"The rain in Spain stays mainly in the plain.\";\r\nconst result = str.replace(/ain/g, \"ane\");\r\nconsole.log(result); // \"The rane in Spaine stays manely in the plane.\"\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","import { matchMethods } from \"./MatchMethods/matchMethods\";\r\nimport { RegularExpressionAdditionalMethods } from \"./RegularExpressionAdditionalMethods/RegularExpressionAdditionalMethods\";\r\n\r\nexport const regularExpression = {\r\n  id: 511,\r\n  title: \"Regular Expressions\",\r\n  children: [\r\n    matchMethods,\r\n    RegularExpressionAdditionalMethods,\r\n  ],\r\n};\r\n","import { arrayMethods } from \"./ArrayMethods/arrayMethods\";\r\nimport { stringMethods } from \"./StringMethods/stringMethods\";\r\nimport { numberMethods } from \"./NumberMethods/numberMethods\";\r\nimport { objectMethods } from \"./ObjectMethods/objectMethods\";\r\nimport { cycleMethod } from \"./Cycle/CycleMethod\";\r\nimport { Json } from \"./JSON/json\";\r\nimport { regularExpression } from \"./RegularExpression/regularExpression\";\r\n\r\nexport const Methods = {\r\n  id: 154,\r\n  title: \"Methods\",\r\n  children: [\r\n    arrayMethods,\r\n    stringMethods,\r\n    numberMethods,\r\n    objectMethods,\r\n    cycleMethod,\r\n    Json,\r\n    regularExpression,\r\n  ],\r\n};\r\n","export const ModulesJavaScript = {\r\n  id: 527,\r\n  title: \"Модули в JavaScript\",\r\n  children: [\r\n    {\r\n      title: \"Что такое модули?\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Модуль</strong> — это отдельный файл с кодом, который экспортирует (предоставляет) и импортирует (использует) функциональность.</p>\r\n          \r\n          <p><strong>Зачем нужны:</strong></p>\r\n          <ul>\r\n            <li>Разделение кода на логические части</li>\r\n            <li>Изоляция областей видимости</li>\r\n            <li>Упрощение поддержки и тестирования</li>\r\n            <li>Возможность повторного использования кода</li>\r\n          </ul>\r\n          \r\n          <p><strong>Типы модулей:</strong></p>\r\n          <ul>\r\n            <li><strong>ES-модули</strong> (стандарт, современный вариант)</li>\r\n            <li><strong>CommonJS</strong> (используется в Node.js)</li>\r\n            <li><strong>AMD/UMD</strong> (устаревшие, для браузеров)</li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Синтаксис ES-модулей\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Экспорт (export):</strong></p>\r\n          <pre><code>// Именованный экспорт (много в файле)\r\n  export const apiUrl = 'https://api.example.com';\r\n  export function fetchData() { /* ... */ }\r\n  \r\n  // Экспорт по умолчанию (один в файле)\r\n  export default class User { /* ... */ }</code></pre>\r\n  \r\n          <p><strong>Импорт (import):</strong></p>\r\n          <pre><code>// Импорт именованных экспортов\r\n  import { apiUrl, fetchData } from './utils.js';\r\n  \r\n  // Импорт экспорта по умолчанию\r\n  import User from './models/User.js';\r\n  \r\n  // Импорт всего содержимого модуля\r\n  import * as utils from './utils.js';</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Особенности ES-модулей\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>1. Строгий режим по умолчанию</strong> (use strict)</p>\r\n          <p><strong>2. Собственная область видимости</strong> (переменные не попадают в global)</p>\r\n          <p><strong>3. Статический импорт/экспорт</strong> (импорты анализируются до выполнения кода)</p>\r\n          <p><strong>4. Поддержка динамического импорта</strong> (ленивая загрузка)</p>\r\n          \r\n          <pre><code>// Динамический импорт\r\n  button.addEventListener('click', async () => {\r\n    const module = await import('./dialog.js');\r\n    module.open();\r\n  });</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"CommonJS (Node.js модули)\",\r\n      type: \"text\",\r\n      description: `\r\n          <p>Синтаксис, используемый в Node.js до появления ES-модулей:</p>\r\n          \r\n          <p><strong>Экспорт:</strong></p>\r\n          <pre><code>// Экспорт объекта\r\n  module.exports = {\r\n    port: 3000,\r\n    startServer() { /* ... */ }\r\n  };\r\n  \r\n  // Альтернативный синтаксис\r\n  exports.port = 3000;</code></pre>\r\n  \r\n          <p><strong>Импорт:</strong></p>\r\n          <pre><code>const config = require('./config.js');\r\n  const { port } = require('./config.js');</code></pre>\r\n  \r\n          <p><strong>Отличия от ES-модулей:</strong></p>\r\n          <ul>\r\n            <li>Загрузка синхронная</li>\r\n            <li>Динамический require (можно вызывать в любом месте)</li>\r\n            <li>Нет поддержки tree-shaking</li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Практические примеры\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>1. Разделение кода на компоненты (React):</strong></p>\r\n          <pre><code>// Button.jsx\r\n  export default function Button({ children }) {\r\n    return &lt;button className=\"btn\"&gt;{children}&lt;/button&gt;;\r\n  }\r\n  \r\n  // App.jsx\r\n  import Button from './components/Button';</code></pre>\r\n  \r\n          <p><strong>2. Утилитарные функции:</strong></p>\r\n          <pre><code>// math.js\r\n  export const sum = (a, b) => a + b;\r\n  export const PI = 3.1415;\r\n  \r\n  // main.js\r\n  import { sum, PI } from './math.js';</code></pre>\r\n  \r\n          <p><strong>3. Конфигурация проекта:</strong></p>\r\n          <pre><code>// config.js\r\n  export default {\r\n    apiKey: '12345',\r\n    timeout: 5000\r\n  };\r\n  \r\n  // api.js\r\n  import config from './config.js';</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Циклические зависимости\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Проблема:</strong> Когда модуль A импортирует модуль B, который импортирует модуль A.</p>\r\n          \r\n          <p><strong>Пример:</strong></p>\r\n          <pre><code>// a.js\r\n  import { b } from './b.js';\r\n  export const a = 'A';\r\n  \r\n  // b.js\r\n  import { a } from './a.js'; // Будет undefined!\r\n  export const b = 'B';</code></pre>\r\n  \r\n          <p><strong>Решение:</strong></p>\r\n          <ul>\r\n            <li>Реорганизовать код, чтобы избежать циклов</li>\r\n            <li>Использовать динамический импорт</li>\r\n            <li>Вынести общую логику в третий модуль</li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Настройка модулей\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>1. В браузерах:</strong></p>\r\n          <pre><code>&lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;</code></pre>\r\n  \r\n          <p><strong>2. В Node.js:</strong></p>\r\n          <ul>\r\n            <li>Добавить <code>\"type\": \"module\"</code> в package.json</li>\r\n            <li>Или использовать расширение <code>.mjs</code></li>\r\n          </ul>\r\n  \r\n          <p><strong>3. В сборщиках (Webpack, Vite):</strong></p>\r\n          <pre><code>// webpack.config.js\r\n  module.exports = {\r\n    experiments: {\r\n      outputModule: true // Для ES-модулей\r\n    }\r\n  };</code></pre>\r\n  \r\n          <p><strong>Алиасы для путей:</strong></p>\r\n          <pre><code>import Component from '@/components/Component'; // Вместо '../../components/Component'</code></pre>\r\n        `,\r\n    },\r\n  ],\r\n};\r\n","export const ObjectJavascript = {\r\n  id: 524,\r\n  title: \"Objects in JS\",\r\n  children: [\r\n    {\r\n      title: \"Создание объектов\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Литеральная нотация (наиболее распространена):</strong></p>\r\n        <pre><code>const user = {\r\n  name: 'Alex',\r\n  age: 30,\r\n  isAdmin: true\r\n};</code></pre>\r\n\r\n        <p><strong>2. Через конструктор Object:</strong></p>\r\n        <pre><code>const book = new Object();\r\nbook.title = 'JavaScript Guide';\r\nbook.author = 'John Doe';</code></pre>\r\n\r\n        <p><strong>3. Через классы (ES6):</strong></p>\r\n        <pre><code>class Person {\r\n  constructor(name) {\r\n    this.name = name;\r\n  }\r\n}\r\nconst person = new Person('Alice');</code></pre>\r\n\r\n        <p><strong>4. Через Object.create():</strong></p>\r\n        <pre><code>const proto = { greet() { return 'Hello!'; } };\r\nconst obj = Object.create(proto); // Создаёт объект с указанным прототипом\r\nobj.greet(); // \"Hello!\"</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Символы (Symbol) как свойства\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Создание символьного свойства:</strong></p>\r\n        <pre><code>const id = Symbol('unique identifier');\r\nconst obj = {\r\n  [id]: 123, // Символьное свойство\r\n  name: 'Test'\r\n};\r\n\r\nconsole.log(obj[id]); // 123\r\nconsole.log(Object.keys(obj)); // ['name'] (символы не видны в обычных методах)</code></pre>\r\n\r\n        <p><strong>Особенности:</strong></p>\r\n        <ul>\r\n          <li>Уникальны даже при одинаковом описании: <code>Symbol('id') !== Symbol('id')</code></li>\r\n          <li>Не участвуют в итерации (<code>for...in</code>, <code>Object.keys()</code>)</li>\r\n          <li>Доступны через <code>Object.getOwnPropertySymbols()</code></li>\r\n          <li>Используются для создания \"скрытых\" свойств объектов</li>\r\n        </ul>\r\n      `\r\n    },\r\n    {\r\n      title: \"Основные операции\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Доступ к свойствам:</strong></p>\r\n        <pre><code>user.name;    // 'Alex' (через точку)\r\nuser['age']; // 30 (через скобки)</code></pre>\r\n\r\n        <p><strong>Добавление/изменение свойств:</strong></p>\r\n        <pre><code>user.city = 'Moscow'; // Добавить\r\nuser.age = 31;     // Изменить</code></pre>\r\n\r\n        <p><strong>Удаление свойств:</strong></p>\r\n        <pre><code>delete user.isAdmin;</code></pre>\r\n\r\n        <p><strong>Проверка существования свойства:</strong></p>\r\n        <pre><code>'name' in user; // true\r\nuser.hasOwnProperty('age'); // true</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Методы объектов\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Object.keys(obj)</strong> — возвращает массив ключей:</p>\r\n        <pre><code>Object.keys(user); // ['name', 'age', 'city']</code></pre>\r\n\r\n        <p><strong>2. Object.values(obj)</strong> — возвращает массив значений:</p>\r\n        <pre><code>Object.values(user); // ['Alex', 31, 'Moscow']</code></pre>\r\n\r\n        <p><strong>3. Object.entries(obj)</strong> — возвращает массив пар [ключ, значение]:</p>\r\n        <pre><code>Object.entries(user); // [['name', 'Alex'], ['age', 31], ...]</code></pre>\r\n\r\n        <p><strong>4. Object.assign(target, ...sources)</strong> — копирует свойства:</p>\r\n        <pre><code>const defaults = { theme: 'light', fontSize: 16 };\r\nconst settings = Object.assign({}, defaults, { fontSize: 14 });</code></pre>\r\n\r\n        <p><strong>5. Object.freeze(obj)</strong> — запрещает изменения:</p>\r\n        <pre><code>const config = Object.freeze({ apiUrl: 'https://api.example.com' });\r\nconfig.apiUrl = 'new-url'; // Ошибка в strict mode</code></pre>\r\n\r\n        <p><strong>6. Object.seal(obj)</strong> - запрещает добавление и удаление.</p>\r\n        <pre><code>\r\n        const object1 = {\r\n          property1: 42,\r\n        };\r\n        Object.seal(object1);\r\n        object1.property1 = 33;\r\n        delete object1.property1; // Cannot delete when sealed\r\n        </code></pre>\r\n\r\n        <p><strong>7. Object.getPrototypeOf(obj)</strong> — возвращает прототип:</p>\r\n        <pre><code>const proto = Object.getPrototypeOf(rabbit);</code></pre>\r\n\r\n        <p><strong>8. Object.setPrototypeOf(obj, proto)</strong> — устанавливает прототип:</p>\r\n        <pre><code>Object.setPrototypeOf(rabbit, animal);</code></pre>\r\n\r\n        <p><strong>9. structuredClone(obj)</strong> — глубокое копирование:</p>\r\n        <pre><code>const deepCopy = structuredClone(original);</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Дескрипторы свойств\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Просмотр дескриптора:</strong></p>\r\n        <pre><code>const descriptor = Object.getOwnPropertyDescriptor(user, 'name');\r\n// { value: 'Alex', writable: true, enumerable: true, configurable: true }</code></pre>\r\n\r\n        <p><strong>Настройка свойств:</strong></p>\r\n        <pre><code>Object.defineProperty(user, 'name', {\r\n  value: 'Alex',\r\n  writable: false,    // нельзя изменить\r\n  enumerable: false,  // не будет видно в for..in\r\n  configurable: false // нельзя удалить или изменить дескриптор\r\n});</code></pre>\r\n\r\n        <p><strong>Флаги свойств:</strong></p>\r\n        <ul>\r\n          <li><strong>writable</strong> — можно ли изменять значение</li>\r\n          <li><strong>enumerable</strong> — видно ли в циклах (<code>for...in</code>, <code>Object.keys()</code>)</li>\r\n          <li><strong>configurable</strong> — можно ли удалять свойство или изменять его дескриптор</li>\r\n        </ul>\r\n\r\n        <p><strong>Массовая настройка:</strong></p>\r\n        <pre><code>Object.defineProperties(user, {\r\n  name: { writable: false },\r\n  age: { enumerable: false }\r\n});</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Копирование объектов\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Поверхностное копирование:</strong></p>\r\n        <pre><code>const clone = Object.assign({}, user);\r\n// Или через spread-оператор:\r\nconst clone = { ...user };</code></pre>\r\n\r\n        <p><strong>Глубокое копирование:</strong></p>\r\n        <pre><code>const deepClone = JSON.parse(JSON.stringify(obj));\r\n// Или с помощью structuredClone (современный способ):\r\nconst deepClone = structuredClone(obj);</code></pre>\r\n\r\n        <p><strong>Проблема ссылочного копирования:</strong></p>\r\n        <pre><code>const original = { a: { b: 1 } };\r\nconst copy = { ...original };\r\ncopy.a.b = 2;\r\nconsole.log(original.a.b); // 2 (изменился и оригинал!)</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Специальные возможности\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Вычисляемые свойства:</strong></p>\r\n        <pre><code>const propName = 'status';\r\nconst order = {\r\n  id: 1,\r\n  [propName]: 'pending' // Свойство 'status'\r\n};</code></pre>\r\n\r\n        <p><strong>Методы в объекте:</strong></p>\r\n        <pre><code>const calculator = {\r\n  sum(a, b) {\r\n    return a + b;\r\n  }\r\n};\r\ncalculator.sum(2, 3); // 5</code></pre>\r\n\r\n        <p><strong>Геттеры и сеттеры:</strong></p>\r\n        <pre><code>const person = {\r\n  firstName: 'John',\r\n  lastName: 'Doe',\r\n  get fullName() {\r\n    return \\`\\${this.firstName} \\${this.lastName}\\`;\r\n  },\r\n  set fullName(value) {\r\n    [this.firstName, this.lastName] = value.split(' ');\r\n  }\r\n};\r\nperson.fullName = 'Alice Cooper';</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Прототипы и наследование\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Прототипное наследование:</strong></p>\r\n        <pre><code>const animal = { eats: true };\r\nconst rabbit = { jumps: true };\r\n\r\nObject.setPrototypeOf(rabbit, animal); // rabbit.__proto__ = animal\r\nconsole.log(rabbit.eats); // true</code></pre>\r\n\r\n        <p><strong>Создание объекта с прототипом:</strong></p>\r\n        <pre><code>const rabbit = Object.create(animal);\r\nrabbit.jumps = true;</code></pre>\r\n\r\n        <p><strong>Проверка прототипа:</strong></p>\r\n        <pre><code>animal.isPrototypeOf(rabbit); // true\r\nObject.getPrototypeOf(rabbit) === animal; // true</code></pre>\r\n\r\n        <p><strong>Методы для работы с прототипами:</strong></p>\r\n        <ul>\r\n          <li><code>Object.create(proto)</code> — создаёт объект с заданным прототипом</li>\r\n          <li><code>Object.getPrototypeOf(obj)</code> — возвращает прототип</li>\r\n          <li><code>Object.setPrototypeOf(obj, proto)</code> — устанавливает прототип</li>\r\n        </ul>\r\n      `\r\n    },\r\n    {\r\n      title: \"Деструктуризация объектов\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Базовый пример:</strong></p>\r\n        <pre><code>const { name, age } = user;\r\nconsole.log(name, age); // 'Alex' 31</code></pre>\r\n\r\n        <p><strong>С переименованием:</strong></p>\r\n        <pre><code>const { name: userName, age: userAge } = user;</code></pre>\r\n\r\n        <p><strong>Значения по умолчанию:</strong></p>\r\n        <pre><code>const { name = 'Anonymous', isAdmin = false } = user;</code></pre>\r\n\r\n        <p><strong>Вложенная деструктуризация:</strong></p>\r\n        <pre><code>const options = {\r\n  size: { width: 100, height: 200 },\r\n  items: ['Cake', 'Donut']\r\n};\r\n\r\nconst { size: { width }, items: [item1] } = options;\r\nconsole.log(width, item1); // 100 'Cake'</code></pre>\r\n      `\r\n    },\r\n  ],\r\n};","export const OverrideBrowserDefaults = {\r\n  id: 156,\r\n  title: \"Override browser defaults (Отмена действий браузера по умолчанию)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое действия по умолчанию?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Действия по умолчанию</strong> — это стандартные реакции браузера на определенные события. Например:</p>\r\n        <ul>\r\n          <li>Переход по ссылке при клике на элемент <code><a></code>.</li>\r\n          <li>Отправка формы при нажатии кнопки <code><button></code>.</li>\r\n          <li>Прокрутка страницы при нажатии клавиш со стрелками.</li>\r\n          <li>Выделение текста при двойном клике.</li>\r\n        </ul>\r\n        <p>Эти действия могут быть переопределены с помощью JavaScript.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Как отменить действия по умолчанию?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Для отмены действий по умолчанию используется метод <code>event.preventDefault()</code>. Этот метод предотвращает выполнение стандартной реакции браузера на событие.</p>\r\n        <p>Метод <code>preventDefault()</code> следует вызывать внутри обработчика события.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример отмены действий по умолчанию\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Пример отмены перехода по ссылке:</p>\r\n      `,\r\n      code: `\r\nconst link = document.getElementById('myLink');\r\n\r\nlink.addEventListener('click', function(event) {\r\n  event.preventDefault(); // Отменяет переход по ссылке\r\n  console.log('Переход отменен!');\r\n});\r\n      `,\r\n    },\r\n    {\r\n      title: \"Когда использовать отмену действий по умолчанию?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Отмена действий по умолчанию полезна, когда вы хотите:</p>\r\n        <ul>\r\n          <li><strong>Изменить стандартное поведение элемента:</strong> Например, создать собственную логику для отправки форм или обработки ссылок.</li>\r\n          <li><strong>Добавить свою логику обработки события:</strong> Например, проверять ввод данных перед отправкой формы.</li>\r\n          <li><strong>Создать пользовательский интерфейс с уникальным поведением:</strong> Например, реализовать drag-and-drop или кастомные выпадающие списки.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Используйте <code>preventDefault()</code> только при необходимости:</strong> Не злоупотребляйте этим методом, если стандартное поведение браузера можно сохранить.</li>\r\n          <li><strong>Добавляйте проверки:</strong> Убедитесь, что отмена действия не нарушает пользовательский опыт.</li>\r\n          <li><strong>Тестируйте кросс-браузерность:</strong> Некоторые браузеры могут по-разному обрабатывать события по умолчанию.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Продвинутые примеры\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Отмена отправки формы:</strong></p>\r\n        <pre><code>const form = document.querySelector('form');\r\n\r\nform.addEventListener('submit', function(event) {\r\n  event.preventDefault(); // Отменяет отправку формы\r\n  console.log('Форма не отправлена!');\r\n});\r\n</code></pre>\r\n\r\n        <p><strong>2. Отмена выделения текста:</strong></p>\r\n        <pre><code>document.addEventListener('selectstart', function(event) {\r\n  event.preventDefault(); // Отменяет выделение текста\r\n  console.log('Выделение текста отменено!');\r\n});\r\n</code></pre>\r\n\r\n        <p><strong>3. Кастомная обработка drag-and-drop:</strong></p>\r\n        <pre><code>const draggable = document.getElementById('draggable');\r\n\r\ndraggable.addEventListener('dragstart', function(event) {\r\n  event.preventDefault(); // Отменяет стандартное поведение drag-and-drop\r\n  console.log('Drag-and-drop отменен!');\r\n});\r\n</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Забытый вызов preventDefault():</strong></p>\r\n        <pre><code>// Плохо: стандартное поведение не отменено\r\nlink.addEventListener('click', function(event) {\r\n  console.log('Ссылка кликнута!');\r\n});\r\n\r\n// Лучше: добавьте preventDefault()\r\nlink.addEventListener('click', function(event) {\r\n  event.preventDefault();\r\n  console.log('Переход отменен!');\r\n});</code></pre>\r\n\r\n        <p><strong>2. Избыточное использование preventDefault():</strong></p>\r\n        <pre><code>// Плохо: отменяет все клики на странице\r\ndocument.addEventListener('click', function(event) {\r\n  event.preventDefault();\r\n});\r\n\r\n// Лучше: ограничьте область применения\r\nlink.addEventListener('click', function(event) {\r\n  event.preventDefault();\r\n});</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Дополнительные материалы\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Для более глубокого изучения:</p>\r\n        <ul>\r\n          <li><a href=\"https://developer.mozilla.org/ru/docs/Web/API/Event/preventDefault\"  target=\"_blank\">MDN Web Docs: preventDefault()</a></li>\r\n          <li><a href=\"https://javascript.info/default-browser-action\"  target=\"_blank\">JavaScript.info: Действия браузера по умолчанию</a></li>\r\n        </ul>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const PageVisibilityAPI = {\r\n  id: 158,\r\n  title: \"Page Visibility API (страница видима или скрыта)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое Page Visibility API?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Page Visibility API</strong> — это API браузера, который позволяет определить, видима ли текущая вкладка или страница для пользователя. Это полезно для оптимизации производительности и управления ресурсами.</p>\r\n        <p>Основные применения:</p>\r\n        <ul>\r\n          <li>Приостановка видео или анимаций при сворачивании страницы.</li>\r\n          <li>Остановка фоновых процессов (например, таймеров или запросов).</li>\r\n          <li>Снижение потребления ресурсов устройства.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Реализация паузы/старта видео\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Пример использования Page Visibility API для паузы и возобновления воспроизведения видео в зависимости от состояния видимости страницы:</p>\r\n      `,\r\n      code: `\r\nconst video = document.querySelector('video');\r\n\r\ndocument.addEventListener('visibilitychange', () => {\r\n  if (document.hidden) {\r\n    video.pause(); // При скрытии страницы\r\n  } else {\r\n    video.play(); // При возвращении к странице\r\n  }\r\n});\r\n      `,\r\n    },\r\n    {\r\n      title: \"Основные свойства\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>document.hidden</strong>: Возвращает <code>true</code>, если страница невидима, и <code>false</code>, если она видима.</p>\r\n        <p><strong>document.visibilityState</strong>: Возвращает строку, указывающую состояние видимости страницы:</p>\r\n        <ul>\r\n          <li><code>visible</code>: Страница видима.</li>\r\n          <li><code>hidden</code>: Страница скрыта (свернута или переключена на другую вкладку).</li>\r\n          <li><code>prerender</code>: Страница предварительно рендерится (не видна пользователю).</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример с использованием visibilityState\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Дополнительный пример с использованием свойства <code>visibilityState</code>:</p>\r\n      `,\r\n      code: `\r\ndocument.addEventListener('visibilitychange', () => {\r\n  switch (document.visibilityState) {\r\n    case 'visible':\r\n      console.log('Страница видима');\r\n      break;\r\n    case 'hidden':\r\n      console.log('Страница скрыта');\r\n      break;\r\n    default:\r\n      console.log('Неизвестное состояние');\r\n  }\r\n});\r\n      `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Оптимизация ресурсов:</strong> Останавливайте ненужные процессы, такие как анимации или таймеры, когда страница скрыта.</li>\r\n          <li><strong>Используйте событие visibilitychange:</strong> Вместо постоянного опроса состояния используйте событие для реагирования на изменения.</li>\r\n          <li><strong>Проверяйте поддержку API:</strong> Некоторые старые браузеры могут не поддерживать Page Visibility API.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nif (typeof document.hidden !== 'undefined') {\r\n  // Page Visibility API поддерживается\r\n} else {\r\n  console.log('Page Visibility API не поддерживается');\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Дополнительные материалы\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Для более глубокого изучения:</p>\r\n        <ul>\r\n          <li><a href=\"https://developer.mozilla.org/ru/docs/Web/API/Page_Visibility_API\"  target=\"_blank\">MDN Web Docs: Page Visibility API</a></li>\r\n          <li><a href=\"https://caniuse.com/pagevisibility\"  target=\"_blank\">Can I Use: Поддержка Page Visibility API</a></li>\r\n        </ul>\r\n      `,\r\n    },\r\n  ],\r\n};","export const Promises = {\r\n  id: 157,\r\n  title: \"Promise (Промисы)\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Promise</strong> — это объект, представляющий конечный результат асинхронной операции. Promise позволяет работать с асинхронным кодом более организованно, избегая так называемого \"callback hell\". Он может находиться в одном из трех состояний:</p>\r\n        <ul>\r\n          <li><strong>Ожидание (pending):</strong> начальное состояние; асинхронная операция не завершена.</li>\r\n          <li><strong>Выполнено (fulfilled):</strong> операция завершена успешно, и promise возвращает результат.</li>\r\n          <li><strong>Отклонено (rejected):</strong> операция завершена с ошибкой, и promise возвращает причину отказа.</li>\r\n        </ul>\r\n        <p>Промисы являются частью стандарта ECMAScript (ES6) и широко используются в современном JavaScript.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Создание Promise\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Promise создается с помощью конструктора <code>Promise</code>, который принимает функцию с двумя аргументами: <code>resolve</code> и <code>reject</code>.</p>\r\n        <p><strong>resolve:</strong> вызывается, когда операция завершена успешно.</p>\r\n        <p><strong>reject:</strong> вызывается, когда операция завершена с ошибкой.</p>\r\n      `,\r\n      code: `\r\nconst myPromise = new Promise((resolve, reject) => {\r\n  // Асинхронная операция\r\n  const success = true; // Поменяйте на false для теста отклонения\r\n\r\n  if (success) {\r\n    resolve('Операция выполнена успешно!');\r\n  } else {\r\n    reject('Операция завершилась с ошибкой.');\r\n  }\r\n});\r\n      `,\r\n    },\r\n    {\r\n      title: \"Использование then и catch\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Методы <code>then</code> и <code>catch</code> используются для обработки результатов промисов.</p>\r\n        <p><strong>then:</strong> принимает два параметра: функцию, которая будет выполнена при успешном завершении промиса, и (необязательную) функцию для обработки ошибок.</p>\r\n        <p><strong>catch:</strong> используется для обработки ошибок, отклоненных промисов.</p>\r\n        <p><strong>finally:</strong> выполняется независимо от результата промиса (выполнено или отклонено).</p>\r\n      `,\r\n      code: `\r\nmyPromise\r\n  .then(result => {\r\n    console.log(result); // Вывод: \"Операция выполнена успешно!\"\r\n  })\r\n  .catch(error => {\r\n    console.log(error); // Вывод: \"Операция завершилась с ошибкой.\" (если success = false)\r\n  })\r\n  .finally(() => {\r\n    console.log('Операция завершена.'); // Выполняется всегда\r\n  });\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример использования Promise\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Вот пример, который имитирует асинхронную операцию, такую как загрузка данных с сервера:</p>\r\n      `,\r\n      code: `\r\nfunction fetchData() {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const data = { id: 1, name: \"John\" }; // Имитация данных\r\n      const success = true; // Поменяйте на false для теста отклонения\r\n      \r\n      if (success) {\r\n        resolve(data); // Успех\r\n      } else {\r\n        reject(\"Ошибка загрузки данных!\"); // Неудача\r\n      }\r\n    }, 2000); // Операция завершится через 2 секунды\r\n  });\r\n}\r\n\r\nfetchData()\r\n  .then(data => {\r\n    console.log(\"Данные получены:\", data); // Вывод: \"Данные получены: { id: 1, name: 'John' }\"\r\n  })\r\n  .catch(error => {\r\n    console.error(error); // Вывод ошибки, если операция не удалась\r\n  });\r\n      `,\r\n    },\r\n    {\r\n      title: \"Основные статические методы Promise\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Promise предоставляет несколько статических методов:</p>\r\n        <ul>\r\n          <li><strong>Promise.all(iterable):</strong> Ожидает выполнения всех переданных промисов и возвращает массив результатов. Если любой из промисов будет отклонен, возвращается ошибка.</li>\r\n          <li><strong>Promise.allSettled(iterable):</strong> Ожидает выполнения всех переданных промисов и возвращает массив объектов с результатами (выполнено или отклонено) для каждого промиса.</li>\r\n          <li><strong>Promise.any(iterable):</strong> Ожидает выполнения первого успешного промиса. Если все промисы будут отклонены, возвращается ошибка.</li>\r\n          <li><strong>Promise.race(iterable):</strong> Ожидает выполнения первого завершенного промиса (выполнено или отклонено).</li>\r\n          <li><strong>Promise.resolve(value):</strong> Возвращает промис, который выполнен с заданным значением.</li>\r\n          <li><strong>Promise.reject(reason):</strong> Возвращает промис, который отклонен с заданной причиной.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример использования Promise.all\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><code>Promise.all</code> полезен, когда нужно выполнить несколько асинхронных операций и дождаться их завершения.</p>\r\n      `,\r\n      code: `\r\nconst promise1 = Promise.resolve(3);\r\nconst promise2 = new Promise((resolve, reject) => {\r\n  setTimeout(resolve, 100, 'foo');\r\n});\r\nconst promise3 = fetch('https://api.example.com/data').then(response  => response.json());\r\n\r\nPromise.all([promise1, promise2, promise3])\r\n  .then(values => {\r\n    console.log(values); // [3, 'foo', {...}] (результаты всех промисов)\r\n  })\r\n  .catch(error => {\r\n    console.error('Один из промисов завершился с ошибкой:', error);\r\n  });\r\n      `,\r\n    },\r\n    {\r\n      title: \"Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Промисы — это мощный инструмент для работы с асинхронным кодом в JavaScript. Они позволяют избежать \"callback hell\" и делают код более читаемым и организованным.</p>\r\n        <p>Хотя промисы могут использоваться в React (например, при работе с API), они сами по себе являются частью языка JavaScript и не зависят от React.</p>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const Recursion = {\r\n  id: 159,\r\n  title: \"Recursion\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Рекурсия</strong> — это функция вызывающая саму себя для решения подзадач. Рекурсивные функции обычно разбивают задачу на меньшие подзадачи, которые решаются аналогичным образом.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Структура рекурсивной функции\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Рекурсивная функция должна иметь:</p>\r\n            <ul>\r\n              <li><strong>Базовый случай</strong>: Условие, при котором функция прекращает вызывать саму себя, чтобы избежать бесконечной рекурсии.</li>\r\n              <li><strong>Рекурсивный случай</strong>: Вызов самой функции с меньшей или более простой версией задачи.</li>\r\n            </ul>\r\n          `,\r\n      code: `\r\nfunction factorial(n) {\r\nif (n === 0) { // базовый случай\r\nreturn 1;\r\n}\r\nreturn n * factorial(n - 1); // рекурсивный случай\r\n}\r\nconsole.log(factorial(5)); // 120\r\n          `,\r\n    },\r\n    {\r\n      title: \"Примеры использования\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Рекурсия может быть использована в следующих ситуациях:</p>\r\n            <ul>\r\n              <li>Вычисление факториала.</li>\r\n              <li>Обход деревьев и графов.</li>\r\n              <li>Решение задач, таких как сортировка (например, быстрая сортировка, сортировка слиянием).</li>\r\n              <li>Решение задач, связанных с последовательностями (например, числа Фибоначчи).</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества и недостатки\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Преимущества и недостатки рекурсии:</p>\r\n            <ul>\r\n              <li><strong>Преимущества:</strong> Код более лаконичен и понятен, особенно при работе со сложными структурами данных.</li>\r\n              <li><strong>Недостатки:</strong> Рекурсия может приводить к большому потреблению памяти из-за хранения состояния вызовов стека и может быть менее эффективной по сравнению с итеративными подходами.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const Reducers = {\r\n  id: 160,\r\n  title: \"Reducers\",\r\n  children: [\r\n    {\r\n      title: \"Определение редьюсера\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Редьюсер — это чистая функция, которая принимает текущее состояние и действие, и возвращает новое состояние.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Аргументы редьюсера\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Редьюсер принимает два аргумента:</p>\r\n            <ul>\r\n              <li><strong>state</strong>: текущее состояние.</li>\r\n              <li><strong>action</strong>: объект, описывающий действие.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Пример редьюсера\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример простого редьюсера для управления задачами:</p>\r\n          `,\r\n      code: `\r\nconst initialState = { todos: [] };\r\n\r\nfunction todoReducer(state = initialState, action) {\r\nswitch (action.type) {\r\ncase 'ADD_TODO':\r\n  return { ...state, todos: [...state.todos, action.payload] };\r\ncase 'REMOVE_TODO':\r\n  return {\r\n    ...state,\r\n    todos: state.todos.filter((_, index) => index !== action.payload),\r\n  };\r\ndefault:\r\n  return state;\r\n}\r\n}\r\n          `,\r\n    },\r\n    {\r\n      title: \"Использование редьюсера\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Редьюсеры комбинируются с помощью функции <code>combineReducers</code> для создания общего состояния в Redux.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Пример с использованием useReducer\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример использования <code>useReducer</code> в React:</p>\r\n          `,\r\n      code: `\r\nimport React, { useReducer } from 'react';\r\n\r\nconst initialState = { count: 0 };\r\n\r\nfunction reducer(state, action) {\r\nswitch (action.type) {\r\ncase 'increment':\r\n  return { count: state.count + 1 };\r\ncase 'decrement':\r\n  return { count: state.count - 1 };\r\ndefault:\r\n  throw new Error();\r\n}\r\n}\r\n\r\nfunction Counter() {\r\nconst [state, dispatch] = useReducer(reducer, initialState);\r\n\r\nreturn (\r\n<>\r\n  Count: {state.count}\r\n  <button onClick={() => dispatch({ type: 'increment' })}>+</button>\r\n  <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\r\n</>\r\n);\r\n}\r\n          `,\r\n    },\r\n    {\r\n      title: \"Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Редьюсеры обеспечивают предсказуемое и централизованное управление состоянием в приложениях.</p>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const RegularExpressions = {\r\n  id: 161,\r\n  title: \"Regular Expressions\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Регулярное выражение (regex) — это последовательность символов, используемая для поиска, сопоставления и манипуляции строками. Регулярные выражения позволяют выполнять сложные шаблонные операции над текстом, такие как валидация данных, поиск и замена.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Способы объявления регулярных выражений\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>В JavaScript регулярные выражения можно объявлять двумя основными способами:</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Литеральный синтаксис\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Регулярное выражение можно создать с помощью литералов, заключённых в косые черты <code>/.../</code>.</p>\r\n            <p>Пример:</p>\r\n          `,\r\n      code: `\r\nconst regex = /abc/;\r\n          `,\r\n    },\r\n    {\r\n      title: \"Конструктор RegExp\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Регулярное выражение также можно создать с помощью конструктора <code>RegExp</code>. Это полезно, когда вам нужно динамически создавать регулярные выражения.</p>\r\n            <p>Пример:</p>\r\n          `,\r\n      code: `\r\nconst regex = new RegExp('abc');\r\n          `,\r\n    },\r\n    {\r\n      title: \"Примеры использования\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Вот несколько примеров использования регулярных выражений:</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Поиск совпадений\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Вы можете использовать регулярные выражения для поиска совпадений в строке:</p>\r\n          `,\r\n      code: `\r\nconst str = \"Hello, world!\";\r\nconst regex = /world/;\r\nconst result = str.match(regex);\r\nconsole.log(result); // Вывод: [\"world\"]\r\n          `,\r\n    },\r\n    {\r\n      title: \"Замена текста\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Регулярные выражения можно использовать для замены текста:</p>\r\n          `,\r\n      code: `\r\nconst str = \"I like cats.\";\r\nconst newStr = str.replace(/cats/, \"dogs\");\r\nconsole.log(newStr); // Вывод: \"I like dogs.\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"Валидация формата\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Регулярные выражения часто используются для проверки формата данных, например, адресов электронной почты:</p>\r\n          `,\r\n      code: `\r\nconst email = \"example@example.com\";\r\nconst regex = /^[\\\\w-.]+@[\\\\w-]+\\\\.[a-z]{2,}$/i;\r\nconsole.log(regex.test(email)); // Вывод: true (если формат корректен)\r\n          `,\r\n    },\r\n    {\r\n      title: \"Некоторые особенности регулярных выражений:\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li>Регулярные выражения могут быть регистронезависимыми с использованием флага <code>i</code>.</li>\r\n              <li>Можно использовать флаги, такие как <code>g</code> (глобальный поиск) и <code>m</code> (многострочный режим).</li>\r\n              <li>Регулярные выражения поддерживают группы, классы символов и квантификаторы.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"MDN Web Docs (Mozilla Developer Network):\",\r\n      url: \"https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Regular_expressions\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"Regex101:\",\r\n      url: \"https://regex101.com\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"Regular-Expressions.info:\",\r\n      url: \"https://www.regular-expressions.info\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"Mastering Regular Expressions (книга):\",\r\n      url: \"https://www.oreilly.com/library/view/mastering-regular-expressions/9781491971700/\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"YouTube Tutorials:\",\r\n      url: \"https://www.youtube.com/results?search_query=Regular+Expressions+tutorial\",\r\n    },\r\n  ],\r\n};\r\n","export const Scope = {\r\n  id: 168,\r\n  title: \"Scope (Область видимости)\",\r\n  children: [\r\n    {\r\n      title: \"1. Определение Scope\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Scope (область видимости)</strong> в JavaScript определяет, где переменные, функции и объекты доступны для использования в коде. Понимание scope важно для написания чистого и эффективного кода.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"2. Типы области видимости\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>В JavaScript существуют три основных типа области видимости:</p>\r\n        <ul>\r\n          <li><strong>Глобальная область видимости:</strong> Переменные, объявленные вне любой функции или блока, доступны везде в коде.</li>\r\n          <li><strong>Функциональная область видимости:</strong> Переменные, объявленные внутри функции, доступны только внутри этой функции.</li>\r\n          <li><strong>Блочная область видимости:</strong> Переменные, объявленные с помощью <code>let</code> и <code>const</code>, доступны только внутри блока (например, внутри фигурных скобок).</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"3. Области видимости с использованием let и const\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Переменные, объявленные с помощью <code>let</code> и <code>const</code>, имеют блочную область видимости. Это отличается от <code>var</code>, который имеет функциональную или глобальную область видимости.</p>\r\n      `,\r\n      code: `\r\n{\r\n  let blockVar = \"I'm in a block!\";\r\n  console.log(blockVar); // Доступно\r\n}\r\n// console.log(blockVar); // ReferenceError: blockVar is not defined\r\n      `,\r\n    },\r\n    {\r\n      title: \"4. Пример глобальной области видимости\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Переменные, объявленные вне любой функции или блока, находятся в глобальной области видимости и доступны везде в коде.</p>\r\n      `,\r\n      code: `\r\nvar globalVar = \"I'm global!\";\r\n\r\nfunction testGlobal() {\r\n  console.log(globalVar); // Доступно\r\n}\r\ntestGlobal();\r\nconsole.log(globalVar); // Доступно\r\n      `,\r\n    },\r\n    {\r\n      title: \"5. Пример локальной области видимости\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Переменные, объявленные внутри функции, находятся в локальной области видимости и доступны только внутри этой функции.</p>\r\n      `,\r\n      code: `\r\nfunction testLocal() {\r\n  var localVar = \"I'm local!\";\r\n  console.log(localVar); // Доступно\r\n}\r\ntestLocal();\r\n// console.log(localVar); // ReferenceError: localVar is not defined\r\n      `,\r\n    },\r\n    {\r\n      title: \"6. Блочная область видимости\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Переменные, объявленные с помощью <code>let</code> и <code>const</code>, имеют блочную область видимости. Они доступны только внутри блока, в котором были объявлены.</p>\r\n      `,\r\n      code: `\r\n{\r\n  let blockVar = \"I'm in a block!\";\r\n  console.log(blockVar); // Доступно\r\n}\r\n// console.log(blockVar); // ReferenceError: blockVar is not defined\r\n      `,\r\n    },\r\n    {\r\n      title: \"7. Иерархия области видимости\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>JavaScript использует иерархию области видимости, что означает, что внутренняя функция имеет доступ к переменным своей внешней функции. Это называется <strong>лексической областью видимости</strong>.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"8. Пример иерархии области видимости\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Пример иерархии области видимости:</p>\r\n      `,\r\n      code: `\r\nfunction outerFunction() {\r\n  var outerVar = \"I'm outside!\";\r\n\r\n  function innerFunction() {\r\n    console.log(outerVar); // Доступно\r\n  }\r\n  innerFunction();\r\n}\r\nouterFunction();\r\n      `,\r\n    },\r\n    {\r\n      title: \"9. Hoisting (Поднятие)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Hoisting</strong> — это механизм, при котором объявления переменных (<code>var</code>) и функций поднимаются вверх своей области видимости. Однако их инициализация происходит только на строке объявления.</p>\r\n      `,\r\n      code: `\r\nconsole.log(hoistedVar); // undefined (подъем, но не инициализация)\r\nvar hoistedVar = \"I'm hoisted!\";\r\n\r\n// console.log(letVar); // ReferenceError: Cannot access 'letVar' before initialization\r\nlet letVar = \"I'm not hoisted!\";\r\n      `,\r\n    },\r\n    {\r\n      title: \"10. Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Понимание области видимости в JavaScript важно для написания чистого и эффективного кода. Используйте <code>let</code> и <code>const</code> вместо <code>var</code> для минимизации ошибок, связанных с областью видимости.</p>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const Sets = {\r\n  id: 162,\r\n  title: \"Set\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><code>Set</code> — это встроенный объект в JavaScript, который позволяет хранить коллекцию уникальных значений. Это означает, что в одном <code>Set</code> не может быть дубликатов. Значения могут быть любого типа, включая объекты и примитивы.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Создание Set\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Создание нового <code>Set</code> осуществляется с помощью конструктора <code>Set()</code>.</p>\r\n          `,\r\n      code: `\r\nconst mySet = new Set();\r\n          `,\r\n    },\r\n    {\r\n      title: \"Добавление значений\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Для добавления значений в <code>Set</code> используется метод <code>add()</code>.</p>\r\n          `,\r\n      code: `\r\nmySet.add(1);\r\nmySet.add(2);\r\nmySet.add(2); // Дубликат не будет добавлен\r\nconsole.log(mySet); // Вывод: Set { 1, 2 }\r\n          `,\r\n    },\r\n    {\r\n      title: \"Основные методы Set\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Вот несколько основных методов, доступных для <code>Set</code>:</p>\r\n            <ul>\r\n              <li><strong>add(value)</strong>: Добавляет новое значение в <code>Set</code>.</li>\r\n              <li><strong>delete(value)</strong>: Удаляет значение из <code>Set</code>. Возвращает <code>true</code>, если значение было удалено, и <code>false</code>, если его не было.</li>\r\n              <li><strong>has(value)</strong>: Проверяет, присутствует ли значение в <code>Set</code>. Возвращает <code>true</code> или <code>false</code>.</li>\r\n              <li><strong>clear()</strong>: Удаляет все значения из <code>Set</code>.</li>\r\n              <li><strong>size</strong>: Свойство, возвращающее количество уникальных значений в <code>Set</code>.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Пример использования Set\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Вот простой пример использования <code>Set</code>:</p>\r\n          `,\r\n      code: `\r\nconst numbers = new Set([1, 2, 3, 4, 5]);\r\n\r\n// Добавление значений\r\nnumbers.add(6);\r\nnumbers.add(2); // Дубликат не добавится\r\n\r\nconsole.log(numbers); // Вывод: Set { 1, 2, 3, 4, 5, 6 }\r\n\r\n// Проверка наличия значения\r\nconsole.log(numbers.has(3)); // Вывод: true\r\nconsole.log(numbers.has(7)); // Вывод: false\r\n\r\n// Удаление значения\r\nnumbers.delete(4);\r\nconsole.log(numbers); // Вывод: Set { 1, 2, 3, 5, 6 }\r\n\r\n// Размер Set\r\nconsole.log(numbers.size); // Вывод: 5\r\n\r\n// Очистка Set\r\nnumbers.clear();\r\nconsole.log(numbers.size); // Вывод: 0\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества использования Set\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Использование <code>Set</code> имеет несколько преимуществ:</p>\r\n            <ul>\r\n              <li>Уникальность значений: автоматически удаляет дубликаты.</li>\r\n              <li>Быстрые операции: добавление, удаление и проверка наличия значений выполняется быстро.</li>\r\n              <li>Поддержка любых типов данных, включая объекты.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const SortFunctions = {\r\n  id: 164,\r\n  title: \"Sort functions\",\r\n  children: [\r\n    {\r\n      title: \"Сортировка пузырьком классическим методом\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Два вложенных цикла: внешний считает количество проходов, внутренний — сравнивает элементы.</p>\r\n            <p>Всегда делает строго фиксированное количество проходов, даже если массив уже отсортирован.</p>\r\n            <p>Сложность алгоритма О(n^2)</p>\r\n          `,\r\n      code: `\r\nfor (let i = 0; i < arr.length - 1; i++) {\r\n  for (let j = 0; j < arr.length - i - 1; j++) {\r\n    if (arr[j] > arr[j + 1]) {\r\n      [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\r\n    }\r\n  }\r\n}\r\n          `,\r\n    },\r\n    {\r\n      title: \"Сортировка пузырьком do...while + swapped\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Использует цикл do...while: внешний цикл продолжается, пока хотя бы одна пара была поменяна местами.</p>\r\n            <p>Внутренний цикл один (по всем элементам).</p>\r\n            <p>Если за проход не было ни одной перестановки (swapped остался false), сортировка останавливается раньше, чем в классическом варианте.</p>\r\n            <p>Сложность алгоритма О(n^2)</p>\r\n          `,\r\n      code: `\r\nfunction bubbleSort(arr) {\r\n  const n = arr.length;\r\n  let swapped;\r\n  do {\r\n    swapped = false;\r\n    for (let i = 0; i < n - 1; i++) {\r\n      if (arr[i] > arr[i + 1]) {\r\n        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\r\n        swapped = true;\r\n      }\r\n    }\r\n  } while (swapped);\r\n  return arr;\r\n}\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const StrictComparison = {\r\n  id: 167,\r\n  title: \"Strict comparison\",\r\n  children: [\r\n    {\r\n      title: \"Использование строгого сравнения в JavaScript\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>В JavaScript есть два типа сравнения: нестрогое (==) и строгое (===).</p>\r\n            <ul>\r\n              <li><strong>Нестрогое сравнение (==)</strong>: Приводит операнды к одному типу перед сравнением.</li>\r\n              <li><strong>Строгое сравнение (===)</strong>: Сравнивает как значение, так и тип данных.</li>\r\n            </ul>\r\n            <p>Вот примеры использования строгого сравнения:</p>\r\n          `,\r\n      code: `\r\n// Пример нестрогого сравнения\r\nconsole.log(5 == '5'); // true\r\nconsole.log(null == undefined); // true\r\n\r\n// Пример строгого сравнения\r\nconsole.log(5 === '5'); // false\r\nconsole.log(null === undefined); // false\r\n\r\n// Строгое сравнение с разными типами\r\nconsole.log(1 === 1); // true\r\nconsole.log(true === 1); // false\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const StringsAndTemplateLiterals = {\r\n  id: 526,\r\n  title: \"Strings & Template Literals\",\r\n  children: [\r\n    {\r\n      title: \"Базовые операции со строками\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Создание строк:</strong></p>\r\n          <pre><code>const str1 = 'Одинарные кавычки';\r\n  const str2 = \"Двойные кавычки\";\r\n  const str3 = \\`Шаблонные литералы\\`;</code></pre>\r\n  \r\n          <p><strong>Доступ к символам:</strong></p>\r\n          <pre><code>'hello'[1]; // 'e'\r\n  'hello'.charAt(1); // 'e'\r\n  'hello'.at(-1); // 'o' (новый метод)</code></pre>\r\n  \r\n          <p><strong>Длина строки:</strong></p>\r\n          <pre><code>'Привет'.length; // 6</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Методы строк\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Поиск в строке:</strong></p>\r\n          <pre><code>'hello'.indexOf('l'); // 2\r\n  'hello'.lastIndexOf('l'); // 3\r\n  'hello'.includes('ell'); // true\r\n  'hello'.startsWith('he'); // true\r\n  'hello'.endsWith('lo'); // true</code></pre>\r\n  \r\n          <p><strong>Изменение строки:</strong></p>\r\n          <pre><code>'Hello'.toLowerCase(); // 'hello'\r\n  'hello'.toUpperCase(); // 'HELLO'\r\n  ' hello '.trim(); // 'hello'\r\n  'hello'.repeat(3); // 'hellohellohello'</code></pre>\r\n  \r\n          <p><strong>Извлечение подстроки:</strong></p>\r\n          <pre><code>'hello'.slice(1, 4); // 'ell'\r\n  'hello'.substring(1, 4); // 'ell'\r\n  'hello'.substr(1, 3); // 'ell' (устаревший)</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Шаблонные литералы (Template literals)\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Многострочные строки:</strong></p>\r\n          <pre><code>\\`Первая строка\r\n  Вторая строка\r\n  Третья строка\\`;</code></pre>\r\n  \r\n          <p><strong>Интерполяция переменных:</strong></p>\r\n          <pre><code>const name = 'Анна';\r\n  const age = 25;\r\n  \\`Меня зовут \\${name} и мне \\${age} лет.\\`;\r\n  // \"Меня зовут Анна и мне 25 лет.\"</code></pre>\r\n  \r\n          <p><strong>Выражения внутри:</strong></p>\r\n          <pre><code>\\`Сумма: \\${5 + 3}\\`; // \"Сумма: 8\"\r\n  \\`Текущая дата: \\${new Date().toLocaleDateString()}\\`;</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Тегированные шаблоны (Tagged templates)\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Определение:</strong></p>\r\n          Тегированные шаблоны — это функция, которая может обрабатывать строку шаблона, а также значения, вставленные в него. Они используются для создания динамически формируемых строк.\r\n          <p><strong>Пользовательская обработка строк:</strong></p>\r\n          <pre><code>function highlight(strings, ...values) {\r\n    return strings.reduce((result, str, i) => {\r\n      return \\`\\${result}\\${str}\\${values[i] ? \\`&lt;mark&gt;\\${values[i]}&lt;/mark&gt;\\` : ''}\\`;\r\n    }, '');\r\n  }\r\n  \r\n  const name = 'Алексей';\r\n  const age = 30;\r\n  \r\n  highlight\\`Пользователь \\${name}, возраст \\${age}\\`;\r\n  // \"Пользователь &lt;mark&gt;Алексей&lt;/mark&gt;, возраст &lt;mark&gt;30&lt;/mark&gt;\"</code></pre>\r\n  \r\n          <p><strong>Применение:</strong></p>\r\n          <ul>\r\n            <li>Экранирование HTML</li>\r\n            <li>Интернационализация</li>\r\n            <li>Стилизация текста</li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Полезные методы\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Разделение и соединение:</strong></p>\r\n          <pre><code>'a,b,c'.split(','); // ['a', 'b', 'c']\r\n  ['a', 'b', 'c'].join('-'); // 'a-b-c'</code></pre>\r\n  \r\n          <p><strong>Проверка на соответствие:</strong></p>\r\n          <pre><code>'123'.match(/\\\\d+/); // ['123', index: 0, ...]\r\n  'hello'.search(/ell/); // 1</code></pre>\r\n  \r\n          <p><strong>Замена подстроки:</strong></p>\r\n          <pre><code>'Hello world'.replace('world', 'everyone'); // 'Hello everyone'\r\n  '2023-10-15'.replace(/(\\\\d{4})-(\\\\d{2})-(\\\\d{2})/, '$3.$2.$1'); // '15.10.2023'</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Юникод и строки\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Суррогатные пары:</strong></p>\r\n          <pre><code>'😂'.length; // 2 (суррогатная пара)\r\n  '😂'.codePointAt(0); // 128514\r\n  String.fromCodePoint(128514); // '😂'</code></pre>\r\n  \r\n          <p><strong>Нормализация:</strong></p>\r\n          <pre><code>'é'.normalize('NFC').length; // 1\r\n  'é'.normalize('NFC').length; // 1 (объединяет символы)</code></pre>\r\n  \r\n          <p><strong>Итерация по символам:</strong></p>\r\n          <pre><code>for (const char of 'str😂') {\r\n    console.log(char); // 's', 't', 'r', '😂'\r\n  }</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Практические примеры\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Форматирование чисел:</strong></p>\r\n          <pre><code>const price = 123456.789;\r\n  \\`Цена: \\${price.toLocaleString('ru-RU')} руб.\\`;\r\n  // \"Цена: 123 456,789 руб.\"</code></pre>\r\n  \r\n          <p><strong>Шаблоны для HTML:</strong></p>\r\n          <pre><code>const items = ['Хлеб', 'Молоко', 'Яйца'];\r\n  const html = \\`\r\n    &lt;ul&gt;\r\n      \\${items.map(item => \\`&lt;li&gt;\\${item}&lt;/li&gt;\\`).join('')}\r\n    &lt;/ul&gt;\r\n  \\`;</code></pre>\r\n  \r\n          <p><strong>Шаблонные строки как аргументы:</strong></p>\r\n          <pre><code>function sql(strings, ...values) {\r\n    // Безопасное формирование SQL-запроса\r\n  }\r\n  sql\\`SELECT * FROM users WHERE id = \\${userId}\\`;</code></pre>\r\n        `,\r\n    },\r\n  ],\r\n};\r\n","export const Switch = {\r\n  id: 163,\r\n  title: \"Switch\",\r\n  children: [\r\n    {\r\n      title: \"Использование конструкции switch и где это нужно\",\r\n      type: \"text\",\r\n      description: `\r\n          <p>Конструкция switch позволяет выполнять различные действия на основе значения выражения.</p>\r\n          <ul>\r\n            <li>Мы можем использовать switch вместо многочисленных if-else, когда нужно проверить одно значение на несколько возможных вариантов.</li>\r\n            <li>Это делает код более читаемым и поддерживаемым.</li>\r\n          </ul>\r\n          <p>Вот несколько примеров использования switch:</p>\r\n          `,\r\n      code: `\r\n// Пример 1: Определение дня недели\r\nconst day = 3;\r\nlet dayName;\r\n\r\nswitch (day) {\r\ncase 1:\r\ndayName = 'Понедельник';\r\nbreak;\r\ncase 2:\r\ndayName = 'Вторник';\r\nbreak;\r\ncase 3:\r\ndayName = 'Среда';\r\nbreak;\r\ncase 4:\r\ndayName = 'Четверг';\r\nbreak;\r\ncase 5:\r\ndayName = 'Пятница';\r\nbreak;\r\ncase 6:\r\ndayName = 'Суббота';\r\nbreak;\r\ncase 7:\r\ndayName = 'Воскресенье';\r\nbreak;\r\ndefault:\r\ndayName = 'Некорректный день';\r\n}\r\n\r\nconsole.log(dayName); // \"Среда\"\r\n\r\n\r\n// Пример 2: Использование switch с выражением\r\nconst fruit = 'яблоко';\r\nlet color;\r\n\r\nswitch (fruit) {\r\ncase 'банан':\r\ncolor = 'желтый';\r\nbreak;\r\ncase 'яблоко':\r\ncolor = 'красный';\r\nbreak;\r\ncase 'виноград':\r\ncolor = 'зеленый';\r\nbreak;\r\ndefault:\r\ncolor = 'неизвестный цвет';\r\n}\r\n\r\nconsole.log(color); // \"красный\"\r\n\r\n\r\n// Пример 3: Объединение случаев\r\nconst grade = 'B';\r\nlet message;\r\n\r\nswitch (grade) {\r\ncase 'A':\r\ncase 'B':\r\nmessage = 'Отлично!';\r\nbreak;\r\ncase 'C':\r\nmessage = 'Хорошо!';\r\nbreak;\r\ncase 'D':\r\nmessage = 'Удовлетворительно!';\r\nbreak;\r\ncase 'F':\r\nmessage = 'Неп satisfactoriously!';\r\nbreak;\r\ndefault:\r\nmessage = 'Некорректная оценка';\r\n}\r\n\r\nconsole.log(message); // \"Отлично!\"\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const TemporalDeadZone = {\r\n  id: 169,\r\n  title: \"Temporal Dead Zone\",\r\n  children: [\r\n    {\r\n      title: \"1. Определение Temporal Dead Zone\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Temporal Dead Zone (TDZ) - это область кода в JavaScript, где переменная не может быть доступна, даже если она была объявлена. Это происходит до момента, когда она инициализирована.</p>\r\n            <p>TDZ применяется к переменным, объявленным с помощью <code>let</code> и <code>const</code>.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"2. Как работает Temporal Dead Zone?\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Когда вы пытаетесь получить доступ к переменной, объявленной с помощью <code>let</code> или <code>const</code>, до её инициализации, JavaScript выбросит ошибку ReferenceError.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"3. Пример Temporal Dead Zone\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример, демонстрирующий TDZ:</p>\r\n          `,\r\n      code: `\r\nconsole.log(a); // ReferenceError: Cannot access 'a' before initialization\r\nlet a = 5;\r\n          `,\r\n    },\r\n    {\r\n      title: \"4. Важность понимания TDZ\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Понимание TDZ важно для предотвращения ошибок в коде:</p>\r\n            <ul>\r\n              <li>Помогает избежать неожиданных ошибок при доступе к переменным.</li>\r\n              <li>Способствует лучшему пониманию области видимости и инициализации переменных.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"5. Сравнение с var\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>В отличие от <code>let</code> и <code>const</code>, переменные, объявленные с помощью <code>var</code>, имеют всплытие (hoisting) и могут быть доступны до их объявления, хотя инициализированы они будут только в момент выполнения кода:</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"6. Пример с var\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример, показывающий поведение <code>var</code>:</p>\r\n          `,\r\n      code: `\r\nconsole.log(b); // undefined\r\nvar b = 10;\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const TernaryOperatorAndLogicalOperators = {\r\n  id: 170,\r\n  title: \"Ternary operator and logical operators\",\r\n  children: [\r\n    {\r\n      title: \"Использование тернарного оператора и логических операторов\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>В JavaScript есть несколько удобных операторов, которые помогают упростить код и избавиться от лишних проверок.</p>\r\n            <ul>\r\n              <li><strong>Тернарный оператор</strong>: Сокращенная форма if-else, позволяет записать условную логику в одной строке.</li>\r\n              <li><strong>Оператор нулевого объединения (??)</strong>: Позволяет вернуть правое значение, если левое значение равно null или undefined.</li>\r\n              <li><strong>Необязательное связывание (?.)</strong>: Позволяет безопасно получать доступ к вложенным свойствам объектов без необходимости проверки каждой промежуточной ссылки.</li>\r\n            </ul>\r\n          `,\r\n      code: `\r\n// Пример тернарного оператора\r\nconst age = 18;\r\nconst canVote = (age >= 18) ? \"Да\" : \"Нет\";\r\nconsole.log(canVote); // \"Да\"\r\n\r\n// Пример оператора нулевого объединения\r\nconst userInput = null;\r\nconst defaultValue = userInput ?? \"Значение по умолчанию\";\r\nconsole.log(defaultValue); // \"Значение по умолчанию\"\r\n\r\n// Пример необязательного связывания\r\nconst user = {\r\nprofile: {\r\nname: \"Alice\",\r\nage: 30,\r\n},\r\n};\r\nconst userCity = user.profile?.city ?? \"Город не указан\";\r\nconsole.log(userCity); // \"Город не указан\" (поскольку city не существует)\r\n\r\n// Пример логического И (&&) и ИЛИ (||)\r\nconst isAuthenticated = true;\r\nconst userRole = isAuthenticated && \"admin\";\r\n// вернёт \"admin\", если isAuthenticated true\r\nconst fallback = userRole || \"guest\"; // вернёт \"guest\", если userRole falsy\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const TypeConversionInJS = {\r\n  id: 212,\r\n  title: \"Type Conversion in JavaScript\",\r\n  children: [\r\n    {\r\n      title: \"Таблица преобразований\",\r\n      type: \"text\",\r\n      description: `\r\n          <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"width:100%;border-collapse:collapse;\">\r\n            <thead>\r\n              <tr>\r\n                <th>Исходное значение</th>\r\n                <th>В Number</th>\r\n                <th>В String</th>\r\n                <th>В Boolean</th>\r\n                <th>В Object</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td><code>\"\"</code> (пустая строка)</td>\r\n                <td><code>0</code></td>\r\n                <td><code>\"\"</code></td>\r\n                <td><code>false</code></td>\r\n                <td><code>String {\"\"}</code></td>\r\n              </tr>\r\n              <tr>\r\n                <td><code>\"42\"</code></td>\r\n                <td><code>42</code></td>\r\n                <td><code>\"42\"</code></td>\r\n                <td><code>true</code></td>\r\n                <td><code>String {\"42\"}</code></td>\r\n              </tr>\r\n              <tr>\r\n                <td><code>\"hello\"</code></td>\r\n                <td><code>NaN</code></td>\r\n                <td><code>\"hello\"</code></td>\r\n                <td><code>true</code></td>\r\n                <td><code>String {\"hello\"}</code></td>\r\n              </tr>\r\n              <tr>\r\n                <td><code>true</code></td>\r\n                <td><code>1</code></td>\r\n                <td><code>\"true\"</code></td>\r\n                <td><code>true</code></td>\r\n                <td><code>Boolean {true}</code></td>\r\n              </tr>\r\n              <tr>\r\n                <td><code>false</code></td>\r\n                <td><code>0</code></td>\r\n                <td><code>\"false\"</code></td>\r\n                <td><code>false</code></td>\r\n                <td><code>Boolean {false}</code></td>\r\n              </tr>\r\n              <tr>\r\n                <td><code>null</code></td>\r\n                <td><code>0</code></td>\r\n                <td><code>\"null\"</code></td>\r\n                <td><code>false</code></td>\r\n                <td><code>TypeError</code></td>\r\n              </tr>\r\n              <tr>\r\n                <td><code>undefined</code></td>\r\n                <td><code>NaN</code></td>\r\n                <td><code>\"undefined\"</code></td>\r\n                <td><code>false</code></td>\r\n                <td><code>TypeError</code></td>\r\n              </tr>\r\n              <tr>\r\n                <td><code>0</code></td>\r\n                <td><code>0</code></td>\r\n                <td><code>\"0\"</code></td>\r\n                <td><code>false</code></td>\r\n                <td><code>Number {0}</code></td>\r\n              </tr>\r\n              <tr>\r\n                <td><code>1</code></td>\r\n                <td><code>1</code></td>\r\n                <td><code>\"1\"</code></td>\r\n                <td><code>true</code></td>\r\n                <td><code>Number {1}</code></td>\r\n              </tr>\r\n              <tr>\r\n                <td><code>{}</code> (объект)</td>\r\n                <td><code>NaN</code></td>\r\n                <td><code>\"[object Object]\"</code></td>\r\n                <td><code>true</code></td>\r\n                <td><code>{}</code> (то же)</td>\r\n              </tr>\r\n              <tr>\r\n                <td><code>[]</code> (массив)</td>\r\n                <td><code>0</code></td>\r\n                <td><code>\"\"</code></td>\r\n                <td><code>true</code></td>\r\n                <td><code>[]</code> (то же)</td>\r\n              </tr>\r\n              <tr>\r\n                <td><code>[1, 2]</code></td>\r\n                <td><code>NaN</code></td>\r\n                <td><code>\"1,2\"</code></td>\r\n                <td><code>true</code></td>\r\n                <td><code>[1, 2]</code> (то же)</td>\r\n              </tr>\r\n              <tr>\r\n                <td><code>function(){}</code></td>\r\n                <td><code>NaN</code></td>\r\n                <td><code>\"function(){}\"</code></td>\r\n                <td><code>true</code></td>\r\n                <td><code>function(){}</code> (то же)</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Явные преобразования\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Способы явного приведения типов:</strong></p>\r\n          <ul>\r\n            <li><strong>В Number:</strong>\r\n              <pre><code>Number(\"42\")    // 42\r\n  +\"42\"         // 42\r\n  parseInt(\"42\") // 42</code></pre>\r\n            </li>\r\n            <li><strong>В String:</strong>\r\n              <pre><code>String(42)      // \"42\"\r\n  (42).toString() // \"42\"\r\n  \\`${42}\\`        // \"42\" (шаблонные строки)</code></pre>\r\n            </li>\r\n            <li><strong>В Boolean:</strong>\r\n              <pre><code>Boolean(1)      // true\r\n  !!1            // true (двойное отрицание)\r\n  !!0            // false</code></pre>\r\n            </li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Особенности неявных преобразований\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Где встречаются неявные преобразования:</strong></p>\r\n          <ul>\r\n            <li>Арифметические операции (<code>\"5\" - 2 // 3</code>)</li>\r\n            <li>Сравнения (<code>\"5\" == 5 // true</code>)</li>\r\n            <li>Логические операции (<code>if (\"hello\") {...}</code>)</li>\r\n            <li>Конкатенация строк (<code>\"2\" + 2 // \"22\"</code>)</li>\r\n          </ul>\r\n          <p><strong>Лучшие практики:</strong></p>\r\n          <ul>\r\n            <li>Используйте <code>===</code> вместо <code>==</code></li>\r\n            <li>Явно приводите типы для важных операций</li>\r\n            <li>Проверяйте типы с помощью <code>typeof</code> и <code>Number.isNaN()</code></li>\r\n          </ul>\r\n        `,\r\n    },\r\n  ],\r\n};\r\n","export const TypeofOperator = {\r\n  id: 171,\r\n  title: \"typeof operator \",\r\n  children: [\r\n    {\r\n      title: \"Описание оператора typeof\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>typeof</strong>: Это оператор в JavaScript, который используется для определения типа переменной или выражения. Он возвращает строку, описывающую тип аргумента.</p>\r\n            <ul>\r\n              <li>Примеры типов: \"undefined\", \"boolean\", \"number\", \"string\", \"object\", \"function\", \"symbol\".</li>\r\n            </ul>\r\n          `,\r\n      code: `\r\n// Примеры использования оператора typeof\r\nconsole.log(typeof undefined); // \"undefined\"\r\nconsole.log(typeof null);      // \"object\" (это известная ошибка в JavaScript)\r\nconsole.log(typeof 42);        // \"number\"\r\nconsole.log(typeof 'hello');   // \"string\"\r\nconsole.log(typeof {});         // \"object\"\r\nconsole.log(typeof [];          // \"object\"\r\nconsole.log(typeof function(){}); // \"function\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"Практическое применение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Оператор typeof часто используется для проверки типов переменных перед выполнением операций:</p>\r\n          `,\r\n      code: `\r\nlet value;\r\n\r\nif (typeof value === 'undefined') {\r\nconsole.log('Переменная value не инициализирована.');\r\n}\r\n\r\nvalue = 10;\r\n\r\nif (typeof value === 'number') {\r\nconsole.log('value является числом.');\r\n}\r\n          `,\r\n    },\r\n    {\r\n      title: \"Ограничения оператора typeof\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Некоторые особенности и ограничения:</p>\r\n            <ul>\r\n              <li>Для объектов и массивов оператор возвращает \"object\".</li>\r\n              <li>Для null он также возвращает \"object\", что является известной особенностью JavaScript.</li>\r\n              <li>Для функций возвращает \"function\", но это подтип объекта.</li>\r\n            </ul>\r\n          `,\r\n      code: `\r\nconsole.log(typeof null);       // \"object\"\r\nconsole.log(typeof [1, 2, 3]);  // \"object\"\r\nconsole.log(typeof {};           // \"object\"\r\nconsole.log(typeof (() => {})); // \"function\"\r\n          `,\r\n    },\r\n    {\r\n      title: \"Вывод\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Оператор typeof является полезным инструментом в JavaScript для проверки типов данных и может помочь избежать ошибок при работе с переменными.</p>\r\n          `,\r\n      code: `\r\nlet value = 'test';\r\nconsole.log(typeof value); // \"string\"\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const ErrorHandling = {\r\n  id: 528,\r\n  title: \"Error Handling / Обработка ошибок\",\r\n  children: [\r\n    {\r\n      title: \"Базовый синтаксис try...catch\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Обработка синхронных ошибок:</strong></p>\r\n          <pre><code>try {\r\n    // Код, который может выбросить ошибку\r\n    const result = riskyOperation();\r\n    console.log(result);\r\n  } catch (error) {\r\n    // Обработка ошибки\r\n    console.error('Произошла ошибка:', error.message);\r\n  } finally {\r\n    // Код, который выполнится в любом случае\r\n    console.log('Операция завершена');\r\n  }</code></pre>\r\n  \r\n          <p><strong>Особенности:</strong></p>\r\n          <ul>\r\n            <li><code>try</code> — блок с потенциально опасным кодом</li>\r\n            <li><code>catch</code> — обработчик ошибок (получает объект ошибки)</li>\r\n            <li><code>finally</code> — выполняется всегда, даже если была ошибка</li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Типы ошибок в JavaScript\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Встроенные классы ошибок:</strong></p>\r\n          <ul>\r\n            <li><code>Error</code> — базовая ошибка</li>\r\n            <li><code>SyntaxError</code> — синтаксическая ошибка</li>\r\n            <li><code>TypeError</code> — неверный тип данных</li>\r\n            <li><code>ReferenceError</code> — ссылка на несуществующую переменную</li>\r\n            <li><code>RangeError</code> — значение вне допустимого диапазона</li>\r\n            <li><code>URIError</code> — ошибка в URI-функциях</li>\r\n          </ul>\r\n    \r\n          <p><strong>Примеры:</strong></p>\r\n          <pre><code>// Error: базовая ошибка\r\n    throw new Error('Это базовая ошибка.');\r\n    \r\n    // SyntaxError: синтаксическая ошибка\r\n    eval('var a = ;'); // Ошибка в синтаксисе\r\n    \r\n    // TypeError: неверный тип данных\r\n    null.function(); // Попытка вызвать метод у null\r\n    \r\n    // ReferenceError: ссылка на несуществующую переменную\r\n    console.log(unknownVariable); // Переменная не определена\r\n    \r\n    // RangeError: значение вне допустимого диапазона\r\n    new Array(-1); // Невозможно создать массив с отрицательной длиной\r\n    \r\n    // URIError: ошибка в URI-функциях\r\n    decodeURIComponent('%'); // Неверный URI\r\n    </code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Создание своих ошибок\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Через конструктор Error:</strong></p>\r\n          <pre><code>throw new Error('Сообщение об ошибке');</code></pre>\r\n  \r\n          <p><strong>Кастомные классы ошибок:</strong></p>\r\n          <pre><code>class ValidationError extends Error {\r\n    constructor(message) {\r\n      super(message);\r\n      this.name = 'ValidationError';\r\n    }\r\n  }\r\n  \r\n  function validateInput(input) {\r\n    if (!input) {\r\n      throw new ValidationError('Пустой ввод');\r\n    }\r\n  }</code></pre>\r\n  \r\n          <p><strong>Проверка типа ошибки:</strong></p>\r\n          <pre><code>try {\r\n    validateInput('');\r\n  } catch (error) {\r\n    if (error instanceof ValidationError) {\r\n      console.log('Ошибка валидации:', error.message);\r\n    } else {\r\n      console.log('Неизвестная ошибка:', error);\r\n    }\r\n  }</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Обработка асинхронных ошибок\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Promise.catch():</strong></p>\r\n          <pre><code>fetch('https://api.example.com/data')\r\n    .then(response => response.json())\r\n    .catch(error => console.error('Ошибка запроса:', error));</code></pre>\r\n  \r\n          <p><strong>Async/await с try...catch:</strong></p>\r\n          <pre><code>async function loadData() {\r\n    try {\r\n      const response = await fetch('https://api.example.com/data');\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Ошибка загрузки:', error);\r\n      throw error; // Пробрасываем дальше\r\n    }\r\n  }</code></pre>\r\n  \r\n          <p><strong>Обработка нескольких Promise:</strong></p>\r\n          <pre><code>Promise.all([promise1, promise2])\r\n    .then(results => console.log(results))\r\n    .catch(error => console.error('Один из запросов failed:', error));</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Глобальная обработка ошибок\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>В браузере:</strong></p>\r\n          <pre><code>// Непойманные ошибки\r\n  window.addEventListener('error', (event) => {\r\n    console.error('Глобальная ошибка:', event.error);\r\n  });\r\n  \r\n  // Необработанные Promise\r\n  window.addEventListener('unhandledrejection', (event) => {\r\n    console.error('Необработанный Promise:', event.reason);\r\n  });</code></pre>\r\n  \r\n          <p><strong>В Node.js:</strong></p>\r\n          <pre><code>process.on('uncaughtException', (error) => {\r\n    console.error('Непойманная ошибка:', error);\r\n    process.exit(1); // Завершаем процесс\r\n  });\r\n  \r\n  process.on('unhandledRejection', (reason, promise) => {\r\n    console.error('Необработанный rejection:', reason);\r\n  });</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Паттерны обработки ошибок\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>1. Возврат объектов с ошибкой:</strong></p>\r\n          <pre><code>function safeOperation() {\r\n    try {\r\n      return { data: riskyOperation() };\r\n    } catch (error) {\r\n      return { error: error.message };\r\n    }\r\n  }</code></pre>\r\n  \r\n          <p><strong>2. Оборачивание ошибок:</strong></p>\r\n          <pre><code>class DatabaseError extends Error {\r\n    constructor(originalError) {\r\n      super('Database operation failed');\r\n      this.original = originalError;\r\n    }\r\n  }\r\n  \r\n  try {\r\n    db.query('...');\r\n  } catch (error) {\r\n    throw new DatabaseError(error);\r\n  }</code></pre>\r\n  \r\n          <p><strong>3. Функции-валидаторы:</strong></p>\r\n          <pre><code>function validateUser(user) {\r\n    if (!user.name) throw new Error('Name is required');\r\n    if (user.age < 18) throw new Error('Age must be 18+');\r\n    return true;\r\n  }</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n          <ul>\r\n            <li><strong>Всегда обрабатывайте ошибки</strong> — даже если \"кажется, что их не будет\"</li>\r\n            <li><strong>Используйте конкретные типы ошибок</strong> — для точной диагностики</li>\r\n            <li><strong>Логируйте ошибки</strong> — с контекстом и метаданными</li>\r\n            <li><strong>Не подавляйте ошибки молча</strong> — пустой catch-блок это антипаттерн</li>\r\n            <li><strong>Документируйте возможные ошибки</strong> — в JSDoc или TypeScript</li>\r\n            <li><strong>Тестируйте обработку ошибок</strong> — как и основной функционал</li>\r\n          </ul>\r\n  \r\n          <p><strong>Пример правильной обработки:</strong></p>\r\n          <pre><code>async function getUser(id) {\r\n    try {\r\n      const response = await fetch(\\`/api/users/\\${id}\\`);\r\n      if (!response.ok) {\r\n        throw new Error(\\`HTTP error! status: \\${response.status}\\`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\\`Failed to fetch user \\${id}\\`, error);\r\n      throw new Error('Failed to load user data');\r\n    }\r\n  }</code></pre>\r\n        `,\r\n    },\r\n  ],\r\n};\r\n","export const TypeNaN = {\r\n  id: 155,\r\n  title: \"NaN (Not-a-Number)\",\r\n  children: [\r\n    {\r\n      title: \"Использование NaN в JavaScript\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>NaN (Not-a-Number) — специальное значение в JavaScript, которое представляет собой результат вычисления, не являющегося числом.</p>\r\n            <ul>\r\n              <li>NaN является единственным значением, которое не равно ни одному числу, включая само себя.</li>\r\n              <li>Для проверки на NaN в JavaScript следует использовать функцию <code>isNaN()</code> или <code>Number.isNaN()</code>.</li>\r\n            </ul>\r\n            <p>Вот примеры работы с NaN:</p>\r\n          `,\r\n      code: `\r\n// Примеры, когда результатом является NaN\r\nconsole.log(0 / 0); // NaN\r\nconsole.log(Math.sqrt(-1)); // NaN\r\nconsole.log(parseInt('abc')); // NaN\r\n\r\n// Проверка на NaN\r\nconsole.log(isNaN(NaN)); // true\r\nconsole.log(isNaN('abc')); // true\r\nconsole.log(isNaN(123)); // false\r\n\r\n// Использование Number.isNaN\r\nconsole.log(Number.isNaN(NaN)); // true\r\nconsole.log(Number.isNaN('abc')); // false\r\nconsole.log(Number.isNaN(undefined)); // false\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const Classes = {\r\n  id: 219,\r\n  title: \"Classes (Классы)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое классы в JavaScript?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Классы</strong> в JavaScript — это синтаксический сахар над прототипным наследованием. Они позволяют создавать объекты с определенными свойствами и методами, обеспечивая более удобный и понятный способ организации кода.</p>\r\n        <p>Классы появились в ECMAScript 2015 (ES6) и предоставляют более читаемый синтаксис для работы с объектно-ориентированным программированием (ООП).</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Создание класса\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример создания класса:</strong></p>\r\n      `,\r\n      code: `\r\nclass Person {\r\n  constructor(name, age) {\r\n    this.name = name;\r\n    this.age = age;\r\n  }\r\n\r\n  greet() {\r\n    console.log(\\`Hello, my name is \\${this.name} and I am \\${this.age} years old.\\`);\r\n  }\r\n}\r\n\r\nconst john = new Person('John', 30);\r\njohn.greet(); // Hello, my name is John and I am 30 years old.\r\n      `,\r\n    },\r\n    {\r\n      title: \"Методы класса\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Классы могут содержать различные методы:</p>\r\n        <ul>\r\n          <li><strong>constructor:</strong> Специальный метод, который вызывается при создании нового экземпляра класса. Используется для инициализации свойств объекта.</li>\r\n          <li><strong>Обычные методы:</strong> Методы, которые можно вызывать у экземпляра класса.</li>\r\n          <li><strong>Статические методы:</strong> Методы, которые принадлежат самому классу, а не его экземплярам.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nclass MathUtils {\r\n  static add(a, b) {\r\n    return a + b;\r\n  }\r\n}\r\n\r\nconsole.log(MathUtils.add(5, 3)); // 8\r\n      `,\r\n    },\r\n    {\r\n      title: \"Наследование\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Наследование</strong> позволяет создавать новые классы на основе существующих. Новый класс (подкласс) наследует свойства и методы родительского класса.</p>\r\n      `,\r\n      code: `\r\nclass Animal {\r\n  constructor(name) {\r\n    this.name = name;\r\n  }\r\n\r\n  speak() {\r\n    console.log(\\`\\${this.name} makes a noise.\\`);\r\n  }\r\n}\r\n\r\nclass Dog extends Animal {\r\n  speak() {\r\n    console.log(\\`\\${this.name} barks.\\`);\r\n  }\r\n}\r\n\r\nconst dog = new Dog('Rex');\r\ndog.speak(); // Rex barks.\r\n      `,\r\n    },\r\n    {\r\n      title: \"Геттеры и сеттеры\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Геттеры и сеттеры</strong> позволяют определять поведение при чтении и записи свойств объекта. Они используются для инкапсуляции данных и управления доступом к ним.</p>\r\n      `,\r\n      code: `\r\nclass Rectangle {\r\n  constructor(width, height) {\r\n    this._width = width;\r\n    this._height = height;\r\n  }\r\n\r\n  get area() {\r\n    return this._width * this._height;\r\n  }\r\n\r\n  set dimensions({ width, height }) {\r\n    this._width = width;\r\n    this._height = height;\r\n  }\r\n}\r\n\r\nconst rect = new Rectangle(5, 10);\r\nconsole.log(rect.area); // 50\r\n\r\nrect.dimensions = { width: 7, height: 3 };\r\nconsole.log(rect.area); // 21\r\n      `,\r\n    },\r\n    {\r\n      title: \"Приватные поля\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>С помощью приватных полей (начинающихся с #) можно скрыть данные внутри класса, чтобы они были недоступны извне.</p>\r\n      `,\r\n      code: `\r\nclass BankAccount {\r\n  #balance = 0;\r\n\r\n  deposit(amount) {\r\n    this.#balance += amount;\r\n  }\r\n\r\n  withdraw(amount) {\r\n    if (amount <= this.#balance) {\r\n      this.#balance -= amount;\r\n    } else {\r\n      console.log('Insufficient funds');\r\n    }\r\n  }\r\n\r\n  getBalance() {\r\n    return this.#balance;\r\n  }\r\n}\r\n\r\nconst account = new BankAccount();\r\naccount.deposit(100);\r\naccount.withdraw(50);\r\nconsole.log(account.getBalance()); // 50\r\nconsole.log(account.#balance); // SyntaxError: Private field '#balance' must be declared in an enclosing class\r\n      `,\r\n    },\r\n    {\r\n      title: \"Преимущества использования классов\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Читаемость:</strong> Классы делают код более понятным и организованным.</li>\r\n          <li><strong>Инкапсуляция:</strong> Позволяют скрывать внутреннюю реализацию и предоставлять только необходимый интерфейс.</li>\r\n          <li><strong>Наследование:</strong> Упрощают повторное использование кода через наследование.</li>\r\n          <li><strong>Поддержка ООП:</strong> Обеспечивают удобную работу с объектно-ориентированными концепциями.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Недостатки использования классов\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Сложность:</strong> Для начинающих разработчиков может быть сложно понять принципы работы с классами и наследованием.</li>\r\n          <li><strong>Перегрузка:</strong> Избыточное использование классов может усложнить код и сделать его менее производительным.</li>\r\n          <li><strong>Проблемы с памятью:</strong> Неправильное использование наследования может привести к утечкам памяти или излишнему потреблению ресурсов.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Рекомендации по использованию\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Когда использовать классы:</p>\r\n        <ul>\r\n          <li><strong>Когда нужна структуризация кода:</strong> Например, для создания сложных объектов с четко определенными методами и свойствами.</li>\r\n          <li><strong>Для инкапсуляции данных:</strong> Когда нужно скрыть внутренние детали реализации.</li>\r\n          <li><strong>Для наследования:</strong> Когда требуется повторное использование кода через наследование.</li>\r\n        </ul>\r\n        <p>Когда НЕ использовать классы:</p>\r\n        <ul>\r\n          <li><strong>Для простых задач:</strong> Если задача решается с помощью функций или объектов без необходимости наследования.</li>\r\n          <li><strong>Для глобальных состояний:</strong> Лучше использовать другие подходы, например, Redux или Context API.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      url: \"https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Classes\",\r\n      link: \"MDN: Classes\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      url: \"https://javascript.info/class\",\r\n      link: \"JavaScript Info: Classes\",\r\n    },\r\n  ],\r\n};\r\n","export const DOMManipulation = {\r\n  id: 529,\r\n  title: \"DOM Manipulation (Работа с DOM)\",\r\n  children: [\r\n    {\r\n      title: \"Поиск элементов\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Методы поиска:</strong></p>\r\n        <pre><code>// По ID (возвращает один элемент)\r\nconst app = document.getElementById('app');\r\n\r\n// По CSS-селектору (первый элемент)\r\nconst btn = document.querySelector('.btn');\r\n\r\n// По CSS-селектору (все элементы)\r\nconst items = document.querySelectorAll('.item');\r\n\r\n// По имени тега\r\nconst divs = document.getElementsByTagName('div');\r\n\r\n// По классу\r\nconst cards = document.getElementsByClassName('card');</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Создание и добавление элементов\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Создание элементов:</strong></p>\r\n        <pre><code>const div = document.createElement('div');\r\ndiv.className = 'alert';\r\ndiv.textContent = 'Hello, world!';\r\n\r\n// Добавление в DOM\r\nparent.appendChild(div);</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Изменение элементов\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Работа с содержимым:</strong></p>\r\n        <pre><code>// Установка HTML-кода\r\nelement.innerHTML = '<strong>Text</strong>'; // Не рекомендуется\r\n\r\n// Безопасная установка текста\r\nelement.textContent = 'Plain text';\r\n\r\n// Изменение атрибутов\r\nelement.setAttribute('title', 'Tooltip');\r\nelement.dataset.userId = '42'; // data-user-id</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Удаление элементов\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Методы удаления:</strong></p>\r\n        <pre><code>// Удаление элемента\r\nelement.remove();\r\n\r\n// Удаление всех дочерних элементов\r\nwhile (container.firstChild) {\r\n  container.firstChild.remove();\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Стилизация элементов\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Инлайн-стили:</strong></p>\r\n        <pre><code>element.style.color = 'red';\r\nelement.style.backgroundColor = '#fff';</code></pre>\r\n\r\n        <p><strong>Вычисленные стили:</strong></p>\r\n        <pre><code>const styles = getComputedStyle(element);\r\nconsole.log(styles.fontSize);</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Обработка событий\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Добавление обработчиков:</strong></p>\r\n        <pre><code>button.addEventListener('click', (event) => {\r\n  console.log('Clicked!', event.target);\r\n});</code></pre>\r\n\r\n        <p><strong>Делегирование событий:</strong></p>\r\n        <pre><code>list.addEventListener('click', (event) => {\r\n  if (event.target.matches('li.item')) {\r\n    console.log('Item clicked:', event.target);\r\n  }\r\n});</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Оптимизация работы с DOM\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Fragment для массового добавления:</strong></p>\r\n        <pre><code>const fragment = document.createDocumentFragment();\r\n\r\nfor (let i = 0; i < 100; i++) {\r\n  const div = document.createElement('div');\r\n  div.textContent = \\`Item \\${i}\\`;\r\n  fragment.appendChild(div);\r\n}\r\n\r\ncontainer.appendChild(fragment); // 1 рефлоу вместо 100</code></pre>\r\n\r\n        <p><strong>Избегание лишних рефлоу:</strong></p>\r\n        <pre><code>element.style.width = '100px';\r\n// Другие операции\r\nconst width = element.offsetWidth; // Чтение после всех записей</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      url: \"https://developer.mozilla.org/ru/docs/Web/API/Document_Object_Model\",\r\n      link: \"MDN: DOM\",\r\n    },\r\n  ],\r\n};\r\n","export const Variables = {\r\n  id: 172,\r\n  title: \"Variables (Переменные)\",\r\n  children: [\r\n    {\r\n      title: \"Область видимости\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>В JavaScript есть три типа областей видимости: глобальная, функциональная и блочная.</p>\r\n        <ul>\r\n          <li><strong>Глобальная</strong>: Переменные, доступные во всем скрипте.</li>\r\n          <li><strong>Функциональная</strong>: Переменные, доступные только внутри функции.</li>\r\n          <li><strong>Блочная</strong>: Переменные, объявленные внутри блока (например, внутри 'if', 'for').</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nlet globalVar = 'I am global';\r\n\r\nfunction testScope() {\r\n  let functionVar = 'I am local to function';\r\n  if (true) {\r\n    let blockVar = 'I exist only in this block';\r\n    console.log(blockVar); // доступен здесь\r\n  }\r\n  console.log(functionVar); // доступен здесь\r\n  // console.log(blockVar); // ошибка: blockVar не доступен здесь\r\n}\r\nconsole.log(globalVar); // доступен здесь\r\n      `,\r\n    },\r\n    {\r\n      title: \"Типы объявлений переменных\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>В JavaScript есть три ключевых способа объявления переменных:</p>\r\n        <ul>\r\n          <li><strong>var</strong>: Функциональная или глобальная область видимости. Подвержен поднятию (hoisting).</li>\r\n          <li><strong>let</strong>: Блочная область видимости. Не может быть переопределён в пределах одной области видимости.</li>\r\n          <li><strong>const</strong>: Блочная область видимости. Значение не может быть изменено после объявления.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nvar a = 'Hello';\r\nlet b = 'World';\r\nconst c = '!';\r\n\r\nconsole.log(a); // Hello\r\nconsole.log(b); // World\r\nconsole.log(c); // !\r\n      `,\r\n    },\r\n    {\r\n      title: \"Hoisting / Подъем переменных\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Все три типа переменных поднимаются, но их инициализация происходит на разных стадиях:</p>\r\n        <ul>\r\n          <li><strong>var</strong>: Поднимается, но инициализируется значением <code>undefined</code>.</li>\r\n          <li><strong>let</strong> и <strong>const</strong>: Поднимаются, но не инициализируются до фактической строки кода (временная мертвая зона).</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nconsole.log(aVar); // undefined (подъем, но не инициализация)\r\nvar aVar = 'test';\r\n\r\n// console.log(aLet); // ReferenceError: Cannot access 'aLet' before initialization\r\nlet aLet = 'test';\r\n\r\n// console.log(aConst); // ReferenceError: Cannot access 'aConst' before initialization\r\nconst aConst = 'test';\r\n      `,\r\n    },\r\n    {\r\n      title: \"Групповое объявление переменных\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Можно объявить несколько переменных в одной строке с использованием <code>let</code>, <code>const</code> или <code>var</code>:</p>\r\n      `,\r\n      code: `\r\nlet x = 10, y = 20, z = 30;\r\nconsole.log(x, y, z); // 10 20 30\r\n      `,\r\n    },\r\n    {\r\n      title: \"Рекомендации по использованию\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>В современном JavaScript рекомендуется использовать <code>let</code> и <code>const</code> вместо <code>var</code>. Это помогает избежать проблем с областью видимости, поднятием и переопределением переменных.</p>\r\n      `,\r\n      code: `\r\nlet name = 'John';\r\nconst age = 30;\r\n\r\nname = 'Doe'; // корректно, значение переменной может меняться\r\n// age = 31; // TypeError: Assignment to constant variable. (ошибка)\r\n      `,\r\n    },\r\n    {\r\n      title: \"Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Понимание различий между <code>var</code>, <code>let</code> и <code>const</code> важно для написания чистого и эффективного кода в JavaScript. Используйте <code>let</code> для изменяемых переменных и <code>const</code> для констант.</p>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const PrototypeAndProto = {\r\n  id: 223,\r\n  title: \"Prototype and __proto__\",\r\n  children: [\r\n    {\r\n      title: \"Что такое prototype?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>prototype</strong> — это свойство функции-конструктора, которое содержит объект с методами и свойствами, доступными всем экземплярам, созданным этой функцией.</p>\r\n        <p>Когда вы создаете объект через конструктор (например, <code>new MyClass()</code>), он наследует методы и свойства из <code>MyClass.prototype</code>.</p>\r\n      `,\r\n      code: `\r\nfunction Person(name) {\r\n  this.name = name;\r\n}\r\n\r\n// Добавляем метод в prototype\r\nPerson.prototype.greet = function () {\r\n  console.log(\\`Hello, my name is \\${this.name}\\`);\r\n};\r\n\r\nconst person = new Person('Alice');\r\nperson.greet(); // Hello, my name is Alice\r\n      `,\r\n    },\r\n    {\r\n      title: \"Что такое __proto__?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>__proto__</strong> — это скрытое свойство объекта, которое указывает на прототип его конструктора. Оно позволяет объекту наследовать методы и свойства из цепочки прототипов.</p>\r\n        <p>В современном JavaScript рекомендуется использовать <code>Object.getPrototypeOf(obj)</code> вместо <code>obj.__proto__</code>, так как <code>__proto__</code> считается устаревшим.</p>\r\n      `,\r\n      code: `\r\nconst obj = {};\r\nconsole.log(obj.__proto__ === Object.prototype); // true\r\n\r\n// Рекомендуемый способ получения прототипа\r\nconsole.log(Object.getPrototypeOf(obj) === Object.prototype); // true\r\n      `,\r\n    },\r\n    {\r\n      title: \"Связь между prototype и __proto__\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>prototype</strong> определяет, какие методы и свойства будут доступны для всех экземпляров, а <strong>__proto__</strong> указывает на этот объект прототипа.</p>\r\n        <p>Пример:</p>\r\n        <ul>\r\n          <li><code>Person.prototype</code> — это объект, содержащий методы для всех экземпляров <code>Person</code>.</li>\r\n          <li><code>person.__proto__</code> указывает на <code>Person.prototype</code>.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nfunction Animal(type) {\r\n  this.type = type;\r\n}\r\n\r\nAnimal.prototype.makeSound = function () {\r\n  console.log('Some generic sound');\r\n};\r\n\r\nconst dog = new Animal('Dog');\r\n\r\n// Связь между prototype и __proto__\r\nconsole.log(dog.__proto__ === Animal.prototype); // true\r\nconsole.log(Animal.prototype.isPrototypeOf(dog)); // true\r\n      `,\r\n    },\r\n    {\r\n      title: \"Цепочка прототипов\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>В JavaScript каждый объект имеет цепочку прототипов. Если свойство или метод не найдены в самом объекте, поиск продолжается в его прототипе, затем в прототипе прототипа и так далее, пока не достигнет <code>null</code>.</p>\r\n      `,\r\n      code: `\r\nconst obj = {};\r\nconsole.log(obj.toString()); // [object Object]\r\n\r\n// Цепочка прототипов:\r\n// obj -> Object.prototype -> null\r\nconsole.log(Object.getPrototypeOf(obj) === Object.prototype); // true\r\nconsole.log(Object.getPrototypeOf(Object.prototype) === null); // true\r\n      `,\r\n    },\r\n    {\r\n      title: \"Добавление методов в prototype\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Методы, добавленные в <code>prototype</code>, становятся доступными всем экземплярам объекта. Это эффективный способ организации общего поведения.</p>\r\n      `,\r\n      code: `\r\nfunction Car(make, model) {\r\n  this.make = make;\r\n  this.model = model;\r\n}\r\n\r\nCar.prototype.displayInfo = function () {\r\n  console.log(\\`\\${this.make} \\${this.model}\\`);\r\n};\r\n\r\nconst car1 = new Car('Toyota', 'Corolla');\r\nconst car2 = new Car('Honda', 'Civic');\r\n\r\ncar1.displayInfo(); // Toyota Corolla\r\ncar2.displayInfo(); // Honda Civic\r\n      `,\r\n    },\r\n    {\r\n      title: \"Изменение prototype\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Изменение <code>prototype</code> влияет на все существующие и будущие экземпляры объекта.</p>\r\n      `,\r\n      code: `\r\nfunction User(name) {\r\n  this.name = name;\r\n}\r\n\r\nconst user1 = new User('Alice');\r\n\r\n// Добавляем метод позже\r\nUser.prototype.sayHi = function () {\r\n  console.log(\\`Hi, I'm \\${this.name}\\`);\r\n};\r\n\r\nuser1.sayHi(); // Hi, I'm Alice\r\n      `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Используйте <code>Object.create</code>:</strong> Для создания объектов с явно заданным прототипом.</li>\r\n          <li><strong>Избегайте прямого изменения <code>__proto__</code>:</strong> Вместо этого используйте <code>Object.setPrototypeOf</code> или <code>Object.create</code>.</li>\r\n          <li><strong>Организуйте методы в <code>prototype</code>:</strong> Это делает код более эффективным и читаемым.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Создание объекта с явно заданным прототипом\r\nconst parent = { greet: () => console.log('Hello') };\r\nconst child = Object.create(parent);\r\n\r\nchild.greet(); // Hello\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Прямое изменение <code>__proto__</code>:</strong></p>\r\n        <pre><code>// Плохо: медленно и считается устаревшим\r\nobj.__proto__ = someOtherObject;\r\n\r\n// Лучше: используйте Object.setPrototypeOf\r\nObject.setPrototypeOf(obj, someOtherObject);</code></pre>\r\n\r\n        <p><strong>2. Неправильное использование prototype:</strong></p>\r\n        <pre><code>// Плохо: добавление методов после создания экземпляра\r\nconst user = new User();\r\nUser.prototype.sayHi = function () { ... };\r\n\r\n// Лучше: определите все методы заранее</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Продвинутые паттерны\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Наследование через prototype:</strong></p>\r\n        <pre><code>function Parent(name) {\r\n  this.name = name;\r\n}\r\n\r\nParent.prototype.sayName = function () {\r\n  console.log(\\`My name is \\${this.name}\\`);\r\n};\r\n\r\nfunction Child(name, age) {\r\n  Parent.call(this, name);\r\n  this.age = age;\r\n}\r\n\r\n// Установка прототипа для наследования\r\nChild.prototype = Object.create(Parent.prototype);\r\nChild.prototype.constructor = Child;\r\n\r\nChild.prototype.sayAge = function () {\r\n  console.log(\\`I am \\${this.age} years old\\`);\r\n};\r\n\r\nconst child = new Child('Bob', 10);\r\nchild.sayName(); // My name is Bob\r\nchild.sayAge();  // I am 10 years old\r\n</code></pre>\r\n\r\n        <p><strong>2. Использование классов:</strong></p>\r\n        <pre><code>class Animal {\r\n  constructor(type) {\r\n    this.type = type;\r\n  }\r\n\r\n  makeSound() {\r\n    console.log('Some generic sound');\r\n  }\r\n}\r\n\r\nclass Dog extends Animal {\r\n  constructor(breed) {\r\n    super('Dog');\r\n    this.breed = breed;\r\n  }\r\n\r\n  bark() {\r\n    console.log('Woof!');\r\n  }\r\n}\r\n\r\nconst dog = new Dog('Golden Retriever');\r\ndog.makeSound(); // Some generic sound\r\ndog.bark();      // Woof!\r\n</code></pre>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const ForwardRef = {\r\n  id: 224,\r\n  title: \"ForwardRef (Перенаправление Ref)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое ForwardRef?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>ForwardRef</strong> — это функция в React, которая позволяет перенаправлять <code>ref</code> из родительского компонента в дочерний. Это полезно, когда вы хотите предоставить доступ к DOM-элементу или экземпляру дочернего компонента.</p>\r\n        <p>По умолчанию <code>ref</code> не передается в дочерние компоненты, так как React обрабатывает их как обычные функции. <code>forwardRef</code> решает эту проблему.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Синтаксис\",\r\n      type: \"text\",\r\n      description: `\r\n        <pre><code>import { forwardRef } from 'react';\r\n\r\nconst ChildComponent = forwardRef((props, ref) => {\r\n  return <div ref={ref}>{props.children}</div>;\r\n});\r\n\r\nfunction ParentComponent() {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    console.log(ref.current); // DOM-элемент div\r\n  }, []);\r\n\r\n  return <ChildComponent ref={ref} />;\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример: фокус на input через forwardRef:</strong></p>\r\n      `,\r\n      code: `\r\nimport React, { useRef, forwardRef, useImperativeHandle } from 'react';\r\n\r\n// Кастомный компонент с forwardRef\r\nconst TextInput = forwardRef((props, ref) => {\r\n  const inputRef = useRef();\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    focus: () => {\r\n      inputRef.current.focus();\r\n    }\r\n  }));\r\n\r\n  return <input ref={inputRef} {...props} />;\r\n});\r\n\r\nfunction App() {\r\n  const textInputRef = useRef();\r\n\r\n  const handleFocus = () => {\r\n    textInputRef.current.focus(); // Управление фокусом\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TextInput ref={textInputRef} placeholder=\"Введите текст\" />\r\n      <button onClick={handleFocus}>Фокус</button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n      `,\r\n    },\r\n    {\r\n      title: \"Когда использовать?\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Доступ к DOM-элементам:</strong> Когда вам нужно получить доступ к DOM-элементу внутри кастомного компонента.</li>\r\n          <li><strong>Управление фокусом, текстовым выделением или анимациями:</strong> Например, установка фокуса на input или управление анимацией.</li>\r\n          <li><strong>Интеграция с сторонними библиотеками:</strong> Когда библиотека требует прямого доступа к DOM-элементу.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Используйте только при необходимости:</strong> Не злоупотребляйте <code>forwardRef</code>, если можно обойтись без него.</li>\r\n          <li><strong>Ограничьте доступ:</strong> Если предоставляете методы через <code>useImperativeHandle</code>, убедитесь, что они минимально необходимы.</li>\r\n          <li><strong>Избегайте сложных зависимостей:</strong> Старайтесь минимизировать количество данных, передаваемых через <code>ref</code>.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"TypeScript и ForwardRef\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Типизация для forwardRef:</strong></p>\r\n        <pre><code>import { forwardRef, useRef, useImperativeHandle } from 'react';\r\n\r\ninterface TextInputHandles {\r\n  focus: () => void;\r\n}\r\n\r\nconst TextInput = forwardRef<TextInputHandles, TextInputProps>((props, ref) => {\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    focus: () => {\r\n      if (inputRef.current) inputRef.current.focus();\r\n    }\r\n  }));\r\n\r\n  return <input ref={inputRef} {...props} />;\r\n});\r\n</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Забытый forwardRef:</strong></p>\r\n        <pre><code>// Плохо: ref не будет передан в дочерний компонент\r\nfunction ChildComponent(props) {\r\n  return <div>{props.children}</div>;\r\n}\r\n\r\n// Лучше: используйте forwardRef\r\nconst ChildComponent = forwardRef((props, ref) => {\r\n  return <div ref={ref}>{props.children}</div>;\r\n});</code></pre>\r\n\r\n        <p><strong>2. Использование ref без проверки:</strong></p>\r\n        <pre><code>// Плохо: вызов ref.current может быть undefined\r\ntextInputRef.current.focus();\r\n\r\n// Лучше: добавьте проверку\r\nif (textInputRef.current) {\r\n  textInputRef.current.focus();\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Продвинутые паттерны\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Комбинирование с useImperativeHandle:</strong></p>\r\n        <pre><code>const CustomButton = forwardRef((props, ref) => {\r\n  const buttonRef = useRef();\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    click: () => {\r\n      buttonRef.current.click();\r\n    }\r\n  }));\r\n\r\n  return <button ref={buttonRef} {...props} />;\r\n});\r\n\r\n// Использование\r\nconst buttonRef = useRef();\r\nbuttonRef.current.click(); // Программный клик по кнопке\r\n</code></pre>\r\n\r\n        <p><strong>2. Интеграция с сторонними библиотеками:</strong></p>\r\n        <pre><code>// Пример интеграции с библиотекой для работы с графиками\r\nconst ChartComponent = forwardRef((props, ref) => {\r\n  const chartRef = useRef();\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    updateData: (newData) => {\r\n      chartRef.current.update(newData);\r\n    }\r\n  }));\r\n\r\n  return <canvas ref={chartRef} />;\r\n});\r\n</code></pre>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const PureFunction = {\r\n  id: 227,\r\n  title: \"PureFunction (чистая функция)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое чистая функция?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Чистая функция</strong> — это функция, которая:</p>\r\n        <ul>\r\n          <li>Всегда возвращает одинаковый результат для одних и тех же входных данных.</li>\r\n          <li>Не имеет побочных эффектов (например, не изменяет глобальные переменные, не выполняет запросы к API).</li>\r\n        </ul>\r\n        <p>Чистые функции являются предсказуемыми, переиспользуемыми и легкими для тестирования.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример чистой функции\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Пример простой чистой функции:</p>\r\n      `,\r\n      code: `\r\nfunction add(a, b) {\r\n  return a + b;\r\n}\r\n\r\nconsole.log(add(2, 3)); // Всегда возвращает 5\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример нечистой функции\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Пример функции с побочными эффектами (нечистой):</p>\r\n      `,\r\n      code: `\r\nlet counter = 0;\r\n\r\nfunction increment() {\r\n  counter++; // Изменяет внешнее состояние\r\n  return counter;\r\n}\r\n\r\nconsole.log(increment()); // 1\r\nconsole.log(increment()); // 2\r\n      `,\r\n    },\r\n    {\r\n      title: \"Признаки чистой функции\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Чистая функция должна соответствовать следующим характеристикам:</p>\r\n        <ul>\r\n          <li><strong>Детерминированность:</strong> Для одних и тех же входных данных всегда возвращается одинаковый результат.</li>\r\n          <li><strong>Отсутствие побочных эффектов:</strong> Не изменяет внешние переменные, не выполняет запросы к API, не модифицирует DOM и т.д.</li>\r\n          <li><strong>Иммутабельность:</strong> Вместо изменения данных создает новые.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Преимущества чистых функций\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Предсказуемость:</strong> Результат всегда одинаков для одних и тех же входных данных.</li>\r\n          <li><strong>Легкость тестирования:</strong> Нет необходимости учитывать побочные эффекты или внешние зависимости.</li>\r\n          <li><strong>Оптимизация:</strong> Их можно кэшировать (например, с помощью мемоизации).</li>\r\n          <li><strong>Параллелизм:</strong> Можно безопасно выполнять в многопоточной среде.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Чистые функции в React\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>В React чистые функции часто используются для:</p>\r\n        <ul>\r\n          <li>Вычисления производных данных (например, с помощью <code>useMemo</code>).</li>\r\n          <li>Работы с пропсами и состоянием (функциональные компоненты по своей сути должны быть чистыми).</li>\r\n          <li>Создания логики приложения без побочных эффектов (например, в редьюсерах Redux).</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nimport React, { useMemo } from 'react';\r\n\r\nfunction Component({ data }) {\r\n  // Чистая функция для вычисления суммы\r\n  const total = useMemo(() => data.reduce((sum, item) => sum + item.value, 0), [data]);\r\n\r\n  return <div>Total: {total}</div>;\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Мутация данных:</strong></p>\r\n        <pre><code>// Плохо: изменение входных данных\r\nfunction updateArray(array) {\r\n  array.push(42); // Мутирует массив\r\n  return array;\r\n}\r\n\r\n// Лучше: создание нового массива\r\nfunction updateArray(array) {\r\n  return [...array, 42];\r\n}</code></pre>\r\n\r\n        <p><strong>2. Побочные эффекты:</strong></p>\r\n        <pre><code>// Плохо: использование побочного эффекта\r\nfunction calculateAndLog(a, b) {\r\n  console.log('Calculating...');\r\n  return a + b;\r\n}\r\n\r\n// Лучше: разделите логику и побочные эффекты\r\nfunction calculate(a, b) {\r\n  return a + b;\r\n}\r\n\r\nfunction log(message) {\r\n  console.log(message);\r\n}\r\n</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Продвинутые паттерны\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Мемоизация:</strong></p>\r\n        <pre><code>const memoizedAdd = (function () {\r\n  const cache = {};\r\n  return function (a, b) {\r\n    const key = \\`\\${a},\\${b}\\`;\r\n    if (key in cache) {\r\n      console.log('Using cached result');\r\n      return cache[key];\r\n    }\r\n    const result = a + b;\r\n    cache[key] = result;\r\n    return result;\r\n  };\r\n})();\r\n\r\nconsole.log(memoizedAdd(2, 3)); // Вычисляет и кэширует\r\nconsole.log(memoizedAdd(2, 3)); // Использует кэш\r\n</code></pre>\r\n\r\n        <p><strong>2. Композиция чистых функций:</strong></p>\r\n        <pre><code>function multiply(a, b) {\r\n  return a * b;\r\n}\r\n\r\nfunction addAndMultiply(a, b, c) {\r\n  return multiply(add(a, b), c);\r\n}\r\n\r\nconsole.log(addAndMultiply(2, 3, 4)); // (2 + 3) * 4 = 20\r\n</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Дополнительные материалы\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Для более глубокого изучения:</p>\r\n        <ul>\r\n          <li><a href=\"https://ru.wikipedia.org/wiki/%D0%A7%D0%B8%D1%81%D1%82%D0%BE%D1%82%D0%B0_%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B8\"  target=\"_blank\">Википедия: Чистые функции</a></li>\r\n          <li><a href=\"https://developer.mozilla.org/ru/docs/Web/JavaScript/Closures\"  target=\"_blank\">MDN Web Docs: Замыкания и чистые функции</a></li>\r\n          <li><a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\" target=\"_blank\">React Documentation: useMemo</a></li> \r\n        </ul>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","import { AddEventListenerFunction } from \"./addEventListenerFunction/addEventListenerFunction\";\r\nimport { ArraysJavaScript } from \"./arraysJavaScript/arraysJavaScript\";\r\nimport { AsynchronousProgramming } from \"./AsynchronousProgramming/AsynchronousProgramming\";\r\nimport { CancelAscentAndDive } from \"./CancelAscentAndDive/CancelAscentAndDive\";\r\nimport { Closure } from \"./Closure/Closure\";\r\nimport { Codewars } from \"./Codewars/Codewars\";\r\nimport { ContextThis } from \"./ContextThis/ContextThis\";\r\nimport { DataTypes } from \"./DataTypes/DataTypes\";\r\nimport { Descriptors } from \"./Descriptors/Descriptors\";\r\nimport { DestructuringInJS } from \"./DestructuringObjectsInJS/DestructuringInJS\";\r\nimport { DifferenceBetweenNullAndUndefined } from \"./DifferenceBetweenNullAndUndefined/DifferenceBetweenNullAndUndefined\";\r\nimport { DragAndDrop } from \"./DragAndDrop/DragAndDrop\";\r\nimport { ES6 } from \"./ES6/ES6\";\r\nimport { EventLoop } from \"./EventLoop/EventLoop\";\r\nimport { ArrowFunctions } from \"./arrowFunctions/arrowFunctions\";\r\nimport { Functions } from \"./Functions/Functions\";\r\nimport { FunctionLevenshtein } from \"./FunctionLevenshtein/FunctionLevenshtein\";\r\nimport { GarbageCollection } from \"./GarbageCollection/GarbageCollection\";\r\nimport { GlobalWindowObject } from \"./GlobalWindowObject/GlobalWindowObject\";\r\nimport { Hoisting } from \"./Hoisting/Hoisting\";\r\nimport { HowObjectsBecomePrimitives } from \"./HowObjectsBecomePrimitives/HowObjectsBecomePrimitives\";\r\nimport { IIFE } from \"./IIFE/IIFE\";\r\nimport { Inheritance } from \"./Inheritance/Inheritance\";\r\nimport { LexicalEnvironment } from \"./LexicalEnvironment/LexicalEnvironment\";\r\nimport { LinearEquation } from \"./LinearEquation/LinearEquation\";\r\nimport { LivingAndNonlivingCollections } from \"./LivingAndNonlivingCollections/LivingAndNonlivingCollections\";\r\nimport { Methods } from \"./Methods/Methods\";\r\nimport { ModulesJavaScript } from \"./modulesJavaScript/modulesJavaScript\";\r\nimport { ObjectJavascript } from \"./objectJavaScript/objectJavascript\";\r\nimport { OverrideBrowserDefaults } from \"./OverrideBrowserDefaults/OverrideBrowserDefaults\";\r\nimport { PageVisibilityAPI } from \"./PageVisibilityAPI/PageVisibilityAPI\";\r\nimport { Promises } from \"./Promises/Promises\";\r\nimport { Recursion } from \"./Recursion/Recursion\";\r\nimport { Reducers } from \"./Reducers/Reducers\";\r\nimport { RegularExpressions } from \"./RegularExpressions/RegularExpressions\";\r\nimport { Scope } from \"./Scope/Scope\";\r\nimport { SearchFunction } from \"./SearchFunction/SearchFunction\";\r\nimport { Sets } from \"./Sets/Sets\";\r\nimport { SortFunctions } from \"./SortFunctions/SortFunctions\";\r\nimport { StrictComparison } from \"./StrictComparison/StrictComparison\";\r\nimport { StringsAndTemplateLiterals } from \"./stringsAndTemplateLiterals/stringsAndTemplateLiterals\";\r\nimport { Switch } from \"./Switch/Switch\";\r\nimport { TemporalDeadZone } from \"./TemporalDeadZone/TemporalDeadZone\";\r\nimport { TernaryOperatorAndLogicalOperators } from \"./TernaryOperatorAndLogicalOperators/TernaryOperatorAndLogicalOperators\";\r\nimport { TypeConversionInJS } from \"./TypeConversion/typeConversion\";\r\nimport { TypeofOperator } from \"./TypeofOperator/TypeofOperator\";\r\nimport { ErrorHandling } from \"./errorHandling/errorHandling\";\r\nimport { TypeNaN } from \"./typeNaN/typeNaN\";\r\nimport { Classes } from \"./Classes/Classes\";\r\nimport { DOMManipulation } from \"./DOMManipulation/DOMManipulation\";\r\nimport { Variables } from \"./Variables/Variables\";\r\nimport { PrototypeAndProto } from \"./PrototypeAndProto/PrototypeAndProto\";\r\nimport { ForwardRef } from \"./ForwardRef/ForwardRef\";\r\nimport { PureFunction } from \"./PureFunction/PureFunction\";\r\n\r\nexport const JavaScript = {\r\n  id: 13,\r\n  title: \"JavaScript\",\r\n  children: [\r\n    AddEventListenerFunction,\r\n    ArrowFunctions,\r\n    ArraysJavaScript,\r\n    AsynchronousProgramming,\r\n    Codewars,\r\n    Classes,\r\n    Closure,\r\n    ContextThis,\r\n    CancelAscentAndDive,\r\n    DataTypes,\r\n    Descriptors,\r\n    DifferenceBetweenNullAndUndefined,\r\n    DOMManipulation,\r\n    DragAndDrop,\r\n    DestructuringInJS,\r\n    ES6,\r\n    ErrorHandling,\r\n    EventLoop,\r\n    Functions,\r\n    FunctionLevenshtein,\r\n    ForwardRef,\r\n    GarbageCollection,\r\n    GlobalWindowObject,\r\n    HowObjectsBecomePrimitives,\r\n    Hoisting,\r\n    IIFE,\r\n    Inheritance,\r\n    LexicalEnvironment,\r\n    LivingAndNonlivingCollections,\r\n    LinearEquation,\r\n    Methods,\r\n    ModulesJavaScript,\r\n    ObjectJavascript,\r\n    OverrideBrowserDefaults,\r\n    PageVisibilityAPI,\r\n    Promises,\r\n    PrototypeAndProto,\r\n    PureFunction,\r\n    Recursion,\r\n    Reducers,\r\n    RegularExpressions,\r\n    Sets,\r\n    Scope,\r\n    SortFunctions,\r\n    SearchFunction,\r\n    StrictComparison,\r\n    StringsAndTemplateLiterals,\r\n    Switch,\r\n    TemporalDeadZone,\r\n    TernaryOperatorAndLogicalOperators,\r\n    TypeConversionInJS,\r\n    TypeNaN,\r\n    TypeofOperator,\r\n    Variables,\r\n  ],\r\n};\r\n","export const ES6 = {\r\n  id: 141,\r\n  title: \"ES6\",\r\n  children: [\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: \"Destructuring assignment\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: \"Arrow functions () => {}\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: \"Template strings `${}`\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: \"variable declaration with let and const\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: \"Classes\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: \"IIFE (immediately invoked function expression)\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: \"Multi-line strings\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: \"Promise\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: \"forEach and for...of\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: \"Default parameters\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description: \"Rest-параметры и Spread-оператор ...\",\r\n    },\r\n  ],\r\n};\r\n","export const SearchFunction = {\r\n  id: 165,\r\n  title: \"Search function\",\r\n  children: [\r\n    \r\n  ],\r\n};\r\n","import { NextJsCourseTutorial } from \"./NextJsCourseTutorial/NextJsCourseTutorial\";\r\nimport { Routing } from \"./Routing/Routing\";\r\n\r\nexport const NextJs = {\r\n  id: 15,\r\n  title: \"Next.js\",\r\n  children: [\r\n    NextJsCourseTutorial,\r\n    Routing,\r\n  ],\r\n};\r\n","export const NextJsCourseTutorial = {\r\n  id: 178,\r\n  title: \"Next.js Crash Course Tutorial\",\r\n  children: [\r\n    {\r\n      title: \"#1 - Introduction & New Features\",\r\n      type: \"video\",\r\n      url: \"https://www.youtube.com/embed?v=TJQbDPGzm0Y&list=PL4cUxeGkcC9jZIVqmy_QhfQdi6mzQvJnT\",\r\n    },\r\n    {\r\n      title: \"#2 - SSR & Server Components (theory)\",\r\n      type: \"video\",\r\n      url: \"https://www.youtube.com/embed?v=YEG2_fSJswc&list=PL4cUxeGkcC9jZIVqmy_QhfQdi6mzQvJnT&index=2\",\r\n    },\r\n    {\r\n      title: \"#3 - Pages & Routes\",\r\n      type: \"video\",\r\n      url: \"https://www.youtube.com/embed?v=vwg4Wrk-kWE&list=PL4cUxeGkcC9jZIVqmy_QhfQdi6mzQvJnT&index=3\",\r\n    },\r\n    {\r\n      title: \"#4 - Layouts & Links\",\r\n      type: \"video\",\r\n      url: \"https://www.youtube.com/embed?v=R7A5vBDfZ18&list=PL4cUxeGkcC9jZIVqmy_QhfQdi6mzQvJnT&index=4\",\r\n    },\r\n    {\r\n      title: \"#5 - Styles, Fonts & Images\",\r\n      type: \"video\",\r\n      url: \"https://www.youtube.com/embed?v=oWUQQD97Rz0&list=PL4cUxeGkcC9jZIVqmy_QhfQdi6mzQvJnT&index=5\",\r\n    },\r\n    {\r\n      title: \"#6 - Fetching & Revalidating Data\",\r\n      type: \"video\",\r\n      url: \"https://www.youtube.com/embed?v=PAXWRgEo7Ns&list=PL4cUxeGkcC9jZIVqmy_QhfQdi6mzQvJnT&index=6\",\r\n    },\r\n    {\r\n      title: \"#7 - Dynamic Segments (Params)\",\r\n      type: \"video\",\r\n      url: \"https://www.youtube.com/embed?v=ZwajQ9ywgIU&list=PL4cUxeGkcC9jZIVqmy_QhfQdi6mzQvJnT&index=7\",\r\n    },\r\n    {\r\n      title: \"#8 - Static Rendering\",\r\n      type: \"video\",\r\n      url: \"https://www.youtube.com/embed?v=ihmyC4Ei2zY&list=PL4cUxeGkcC9jZIVqmy_QhfQdi6mzQvJnT&index=8\",\r\n    },\r\n    {\r\n      title: \"#9 - Custom 404 Page\",\r\n      type: \"video\",\r\n      url: \"https://www.youtube.com/embed?v=PbFH_VE1Iks&list=PL4cUxeGkcC9jZIVqmy_QhfQdi6mzQvJnT&index=9\",\r\n    },\r\n    {\r\n      title: \"#10 - Loading UI & Suspense\",\r\n      type: \"video\",\r\n      url: \"https://www.youtube.com/embed?v=Lzml9L3f4IM&list=PL4cUxeGkcC9jZIVqmy_QhfQdi6mzQvJnT&index=10\",\r\n    },\r\n    {\r\n      title: \"#11 - Client Form Component\",\r\n      type: \"video\",\r\n      url: \"https://www.youtube.com/embed?v=nSfu7sHPE9M&list=PL4cUxeGkcC9jZIVqmy_QhfQdi6mzQvJnT&index=11\",\r\n    },\r\n    {\r\n      title: \"#12 - Building the App\",\r\n      type: \"video\",\r\n      url: \"https://www.youtube.com/embed?v=Yi_zS8jSln8&list=PL4cUxeGkcC9jZIVqmy_QhfQdi6mzQvJnT&index=12\",\r\n    },\r\n  ],\r\n};\r\n","export const Routing = {\r\n  id: 179,\r\n  title: \"Routing\",\r\n  children: [\r\n    {\r\n      title: \"\",\r\n      description:\r\n        \"The skeleton of every application is routing. This page will introduce you to the fundamental concepts of routing for the web and how to handle routing in Next.js.\",\r\n      type: \"text\",\r\n      link: \"Learn more about routing\",\r\n      url: \"https://nextjs.org/docs/app/building-your-application/routing#terminology\",\r\n    },\r\n  ],\r\n};\r\n","export const CI_CD_CD = {\r\n  id: 181,\r\n  title: \"Continuous Integration vs Continuous Deployment vs Delivery Pipeline\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Continuous Integration (CI), Continuous Deployment (CD) и Delivery Pipeline — это практики разработки программного обеспечения, которые помогают обеспечить быструю и надежную поставку кода в рабочую среду.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Continuous Integration (CI)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>CI — это практика, при которой разработчики регулярно интегрируют свои изменения в общий код. Каждый интегрированный код проходит автоматические тесты и сборку, что позволяет обнаруживать ошибки на ранних стадиях.</p>\r\n            <ul>\r\n              <li><strong>Цели CI:</strong> Устранение проблем, связанных с интеграцией, и обеспечение высокой качества кода.</li>\r\n              <li><strong>Инструменты:</strong> Jenkins, Travis CI, CircleCI и др.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Continuous Deployment (CD)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>CD — это практика, при которой изменения кода автоматически разворачиваются в рабочую среду после успешного прохождения всех тестов. Это позволяет командам быстрее реагировать на изменения и выпускать новые функции.</p>\r\n            <ul>\r\n              <li><strong>Цели CD:</strong> Упрощение процесса развертывания и минимизация времени между написанием кода и его доступностью для пользователей.</li>\r\n              <li><strong>Инструменты:</strong> Docker, Kubernetes, Spinnaker и др.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Delivery Pipeline\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Delivery Pipeline — это автоматизированный процесс, который включает в себя все этапы от написания кода до его развертывания в рабочую среду. Он включает CI и CD и обеспечивает полный контроль над процессом доставки программного обеспечения.</p>\r\n            <ul>\r\n              <li><strong>Этапы:</strong> Кодирование, тестирование, сборка, развертывание и мониторинг.</li>\r\n              <li><strong>Преимущества:</strong> Позволяет командам ускорить процесс разработки и повысить качество выпускаемого ПО.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Сравнение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Сравнение CI, CD и Delivery Pipeline:</p>\r\n            <ul>\r\n              <li><strong>CI</strong>: Фокус на автоматизации интеграции и тестирования кода.</li>\r\n              <li><strong>CD</strong>: Фокус на автоматизации развертывания кода в рабочую среду.</li>\r\n              <li><strong>Delivery Pipeline</strong>: Полный процесс, охватывающий как CI, так и CD, с акцентом на управление всей цепочкой поставки.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const CleanCode = {\r\n  id: 180,\r\n  title: \"Clean code\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Чистый код — это подход к написанию программного обеспечения, который акцентирует внимание на его читаемости, понятности и простоте. Он способствует более легкому пониманию и сопровождению кода.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Основные принципы чистого кода\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Некоторые ключевые принципы чистого кода:</p>\r\n            <ul>\r\n              <li><strong>Читаемость</strong>: Код должен быть легким для чтения и понимания.</li>\r\n              <li><strong>Понятность</strong>: Названия переменных, функций и классов должны быть ясными и описательными.</li>\r\n              <li><strong>Структурированность</strong>: Код должен быть организован логически, с четким разделением на модули и функции.</li>\r\n              <li><strong>Минимизация дублирования</strong>: Избегайте повторения кода, используя функции и модули.</li>\r\n              <li><strong>Тестируемость</strong>: Код должен быть легко тестируемым, что облегчает обнаружение ошибок.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Примеры хорошего кода\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример хорошего кода с понятными названиями:</p>\r\n          `,\r\n      code: `\r\nfunction calculateArea(radius) {\r\n  return Math.PI * radius * radius;\r\n}\r\n          `,\r\n    },\r\n    {\r\n      title: \"Примеры плохого кода\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример плохого кода с непонятными названиями:</p>\r\n          `,\r\n      code: `\r\nfunction c(r) {\r\n  return 3.14 * r * r;\r\n}\r\n          `,\r\n    },\r\n    {\r\n      title: \"Рекомендации по написанию чистого кода\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Некоторые рекомендации:</p>\r\n            <ul>\r\n              <li><strong>Используйте описательные названия</strong>: Названия должны отражать назначение переменной или функции.</li>\r\n              <li><strong>Разделяйте код на функции</strong>: Каждая функция должна выполнять одну задачу.</li>\r\n              <li><strong>Пишите комментарии</strong>: Используйте комментарии для объяснения сложных частей кода, но не переусердствуйте.</li>\r\n              <li><strong>Следуйте стандартам кодирования</strong>: Придерживайтесь общепринятых стилей и стандартов в вашей команде.</li>\r\n              <li><strong>Регулярно рефакторите код</strong>: Улучшайте и оптимизируйте код по мере его развития.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества чистого кода\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Преимущества написания чистого кода:</p>\r\n            <ul>\r\n              <li><strong>Упрощенное сопровождение</strong>: Более легкое понимание и изменение кода.</li>\r\n              <li><strong>Меньше ошибок</strong>: Чистый код снижает вероятность ошибок и багов.</li>\r\n              <li><strong>Увеличение производительности команды</strong>: Читаемый код ускоряет процесс разработки и тестирования.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const DesignPatterns = {\r\n  id: 183,\r\n  title: \"Design patterns / Шаблоны проектирования\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Шаблоны проектирования — это общепринятые решения для часто встречающихся проблем в проектировании программного обеспечения. Они помогают разработчикам создавать более гибкие, поддерживаемые и устойчивые к изменениям системы.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Типы шаблонов проектирования\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Существует три основных типа шаблонов проектирования:</p>\r\n            <ul>\r\n              <li><strong>Шаблоны создания (Creational Patterns)</strong>: Определяют способ создания объектов, обеспечивая гибкость и контроль.</li>\r\n              <li><strong>Шаблоны структурирования (Structural Patterns)</strong>: Определяют, как объекты и классы могут комбинироваться для формирования более крупных структур.</li>\r\n              <li><strong>Шаблоны поведения (Behavioral Patterns)</strong>: Определяют взаимодействие между объектами и упрощают управление их поведением.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Примеры шаблонов\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Некоторые популярные шаблоны проектирования:</p>\r\n            <ul>\r\n              <li><strong>Singleton</strong>: Гарантирует, что класс имеет только один экземпляр и предоставляет глобальную точку доступа к нему.</li>\r\n              <li><strong>Factory Method</strong>: Определяет интерфейс для создания объектов, но позволяет подклассам изменять тип создаваемого объекта.</li>\r\n              <li><strong>Observer</strong>: Определяет зависимость \"один-ко-многим\" между объектами, так что при изменении состояния одного объекта все зависимые обновляются автоматически.</li>\r\n              <li><strong>Decorator</strong>: Позволяет динамически добавлять новое поведение или функциональность к объектам, оборачивая их в другие объекты.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества использования шаблонов проектирования\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Преимущества использования шаблонов проектирования:</p>\r\n            <ul>\r\n              <li><strong>Переиспользование кода</strong>: Шаблоны помогают избежать дублирования кода.</li>\r\n              <li><strong>Улучшение читаемости</strong>: Код становится более понятным для других разработчиков.</li>\r\n              <li><strong>Упрощение изменений</strong>: Шаблоны делают систему более гибкой и устойчивой к изменениям.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Рекомендации по применению\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Некоторые рекомендации по применению шаблонов проектирования:</p>\r\n            <ul>\r\n              <li><strong>Не применяйте шаблоны без необходимости</strong>: Используйте их только тогда, когда это действительно оправдано.</li>\r\n              <li><strong>Изучайте шаблоны</strong>: Понимание шаблонов поможет вам лучше применять их на практике.</li>\r\n              <li><strong>Комбинируйте шаблоны</strong>: Иногда полезно комбинировать несколько шаблонов для достижения лучших результатов.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const DIALOG_MODAL_PATTERN = {\r\n  id: 211,\r\n  title: \"Dialog (Modal) Pattern\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Модальное окно (Dialog/Modal)</strong> — это UI-компонент, который временно блокирует взаимодействие с основным интерфейсом, требуя от пользователя выполнить действие или принять решение.</p>\r\n          <p>Используется для:</p>\r\n          <ul>\r\n            <li>Отображения критически важной информации.</li>\r\n            <li>Подтверждения действий (например, удаления данных).</li>\r\n            <li>Ввода данных (формы, настройки).</li>\r\n            <li>Ограничения потока работы до завершения задачи.</li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Ключевые характеристики\",\r\n      type: \"text\",\r\n      description: `\r\n          <ul>\r\n            <li><strong>Фокус:</strong> Пользователь не может взаимодействовать с фоном, пока модальное окно открыто.</li>\r\n            <li><strong>Контекст:</strong> Связано с текущей задачей (не должно появляться \"просто так\").</li>\r\n            <li><strong>Закрытие:</strong> Должно быть явное действие пользователя (кнопка, крестик) или клавиша <code>Esc</code>.</li>\r\n            <li><strong>Доступность:</strong> Важно учитывать ARIA-атрибуты (например, <code>role=\"dialog\"</code>, <code>aria-modal=\"true\"</code>).</li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Типы модальных окон\",\r\n      type: \"text\",\r\n      description: `\r\n          <ul>\r\n            <li><strong>Alert Dialog:</strong> Информирует пользователя (например, об ошибке). Часто имеет только кнопку \"OK\".</li>\r\n            <li><strong>Confirmation Dialog:</strong> Запрашивает подтверждение (например, \"Вы уверены, что хотите удалить?\").</li>\r\n            <li><strong>Form Dialog:</strong> Содержит поля для ввода данных (регистрация, настройки).</li>\r\n            <li><strong>Full-screen Modal:</strong> Занимает весь экран (используется для сложных задач, например, выбор даты).</li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Правила использования\",\r\n      type: \"text\",\r\n      description: `\r\n          <ul>\r\n            <li><strong>Избегайте избыточности:</strong> Не злоупотребляйте модальными окнами — они прерывают пользователя.</li>\r\n            <li><strong>Четкий заголовок:</strong> Ясно указывайте цель окна (например, \"Удалить файл?\" вместо \"Внимание!\").</li>\r\n            <li><strong>Простота действий:</strong> Максимум 2-3 кнопки (например, \"Отмена\" и \"Подтвердить\").</li>\r\n            <li><strong>Анимация:</strong> Плавное появление/исчезновение помогает пользователю отследить контекст.</li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Примеры кода\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>HTML (простой модальный диалог):</strong></p>\r\n          <pre><code>&lt;div class=\"modal\" role=\"dialog\" aria-modal=\"true\"&gt;\r\n    &lt;h2&gt;Подтвердите действие&lt;/h2&gt;\r\n    &lt;p&gt;Вы уверены, что хотите удалить этот элемент?&lt;/p&gt;\r\n    &lt;button onclick=\"closeModal()\"&gt;Отмена&lt;/button&gt;\r\n    &lt;button onclick=\"deleteItem()\"&gt;Удалить&lt;/button&gt;\r\n  &lt;/div&gt;</code></pre>\r\n  \r\n          <p><strong>React (использование библиотеки):</strong></p>\r\n          <pre><code>import { Modal } from 'antd';\r\n  \r\n  const ConfirmModal = () => (\r\n    &lt;Modal\r\n      title=\"Удаление\"\r\n      visible={true}\r\n      onOk={deleteItem}\r\n      onCancel={closeModal}\r\n    &gt;\r\n      &lt;p&gt;Вы уверены?&lt;/p&gt;\r\n    &lt;/Modal&gt;\r\n  );</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Инструменты и библиотеки\",\r\n      type: \"text\",\r\n      description: `\r\n          <ul>\r\n            <li><strong>Vanilla JS:</strong> <code>dialog</code> (нативный HTML-элемент, но ограниченная кастомизация).</li>\r\n            <li><strong>React:</strong> Material-UI Modal, Ant Design Modal, Chakra UI.</li>\r\n            <li><strong>Vue:</strong> Vuetify Dialogs, Quasar Dialog.</li>\r\n            <li><strong>Доступность:</strong> Библиотеки <code>react-aria-modal</code>, <code>focus-trap-react</code>.</li>\r\n          </ul>\r\n        `,\r\n    },\r\n  ],\r\n};\r\n","export const EventDelegation = {\r\n  id: 184,\r\n  title: \"Делегирование событий\",\r\n  children: [\r\n    {\r\n      title: \"1. Что такое делегирование событий?\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Делегирование событий - это паттерн, при котором обработчик события добавляется к родительскому элементу вместо каждого дочернего элемента.</p>\r\n            <p>Это позволяет обрабатывать события, возникающие на дочерних элементах, более эффективно.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"2. Преимущества делегирования событий\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><strong>Упрощение кода:</strong> Меньше обработчиков для управления.</li>\r\n              <li><strong>Повышение производительности:</strong> Уменьшение количества обработчиков, особенно при динамическом добавлении элементов.</li>\r\n              <li><strong>Легкость в управлении:</strong> Изменение структуры DOM не требует изменения обработчиков.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"3. Пример делегирования событий\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример делегирования событий на списке элементов:</p>\r\n          `,\r\n      code: `\r\n    const list = document.getElementById('myList');\r\n    \r\n    list.addEventListener('click', function(event) {\r\n      if (event.target.tagName === 'LI') {\r\n        console.log('Элемент списка нажат:', event.target.textContent);\r\n      }\r\n    });\r\n          `,\r\n    },\r\n    {\r\n      title: \"4. Когда использовать делегирование событий?\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Делегирование событий полезно, когда:</p>\r\n            <ul>\r\n              <li>Необходимо обрабатывать события на множестве дочерних элементов.</li>\r\n              <li>Элементы могут динамически добавляться или удаляться из DOM.</li>\r\n              <li>Хотите уменьшить количество обработчиков событий для повышения производительности.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const FunctionalProgramming = {\r\n  id: 185,\r\n  title: \"Functional Programming (Функциональное программирование)\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Функциональное программирование</strong> — это парадигма программирования, в которой основное внимание уделяется использованию функций как основных строительных блоков программы. В этой парадигме минимизируется изменение состояния данных и побочные эффекты.</p>\r\n        <p>Цель функционального программирования — создание предсказуемого, легко тестируемого и поддерживаемого кода.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Основные концепции\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Ключевые концепции функционального программирования:</p>\r\n        <ul>\r\n          <li><strong>Чистые функции:</strong> Функции, которые всегда возвращают один и тот же результат для одинаковых входных данных и не имеют побочных эффектов.</li>\r\n          <li><strong>Иммутабельность:</strong> Данные не изменяются, вместо этого создаются новые значения на основе существующих.</li>\r\n          <li><strong>Функции высшего порядка:</strong> Функции, которые могут принимать другие функции в качестве аргументов или возвращать функции в качестве результата.</li>\r\n          <li><strong>Рекурсия:</strong> Механизм, при котором функция вызывает сама себя для решения подзадач. Рекурсия часто используется вместо циклов.</li>\r\n          <li><strong>Ленивые вычисления:</strong> Стратегия выполнения вычислений только тогда, когда их результат действительно нужен.</li>\r\n          <li><strong>Каррирование:</strong> Преобразование функции с множеством аргументов в последовательность функций с одним аргументом.</li>\r\n          <li><strong>Частичное применение:</strong> Создание новой функции с фиксированными значениями для части аргументов.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Преимущества\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Функциональное программирование предлагает множество преимуществ:</p>\r\n        <ul>\r\n          <li><strong>Упрощение отладки и тестирования:</strong> Чистые функции делают код более предсказуемым.</li>\r\n          <li><strong>Лучшее управление состоянием:</strong> Минимизация изменения состояния снижает количество ошибок.</li>\r\n          <li><strong>Улучшение читаемости и поддержки кода:</strong> Использование функций высшего порядка и иммутабельности делает код более декларативным.</li>\r\n          <li><strong>Параллелизм:</strong> Отсутствие побочных эффектов упрощает параллельное выполнение задач.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример чистой функции\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Чистая функция — это функция, которая всегда возвращает один и тот же результат для одинаковых входных данных и не имеет побочных эффектов (например, изменения глобальных переменных).</p>\r\n      `,\r\n      code: `\r\nfunction add(a, b) {\r\n  return a + b;\r\n}\r\n\r\nconsole.log(add(2, 3)); // 5\r\nconsole.log(add(2, 3)); // 5 (результат всегда одинаковый)\r\n      `,\r\n    },\r\n    {\r\n      title: \"Функции высшего порядка\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Функции высшего порядка — это функции, которые принимают другие функции в качестве аргументов или возвращают функции в качестве результата.</p>\r\n      `,\r\n      code: `\r\nfunction applyFunction(fn, value) {\r\n  return fn(value);\r\n}\r\n\r\nfunction double(x) {\r\n  return x * 2;\r\n}\r\n\r\nconst result = applyFunction(double, 5); // 10\r\nconsole.log(result);\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример рекурсии\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Рекурсия — это механизм, при котором функция вызывает сама себя для решения подзадач. Это особенно полезно для работы со структурами данных, такими как деревья.</p>\r\n      `,\r\n      code: `\r\nfunction factorial(n) {\r\n  if (n === 0) {\r\n    return 1; // Базовый случай: факториал 0 равен 1\r\n  } else {\r\n    return n * factorial(n - 1); // Рекурсивный случай: n! = n * (n-1)!\r\n  }\r\n}\r\n\r\nconsole.log(factorial(5)); // 120\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример ленивых вычислений\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Ленивые вычисления позволяют выполнять операции только тогда, когда их результат действительно нужен. Это полезно для оптимизации работы с большими данными.</p>\r\n      `,\r\n      code: `\r\nfunction* lazySquares(numbers) {\r\n  for (const number of numbers) {\r\n    yield number * number;\r\n  }\r\n}\r\n\r\nconst numbers = [1, 2, 3, 4, 5];\r\nconst lazyCalc = lazySquares(numbers);\r\n\r\n// Вычисляем и печатаем только первое значение\r\nconsole.log(lazyCalc.next().value); // 1\r\n\r\n// Вычисляем и печатаем второе значение\r\nconsole.log(lazyCalc.next().value); // 4\r\n\r\n// Итерируем по оставшимся значениям и вычисляем их\r\nfor (const square of lazyCalc) {\r\n  console.log(square); // 9, 16, 25\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Каррирование\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Каррирование — это процесс преобразования функции с множеством аргументов в последовательность функций с одним аргументом.</p>\r\n      `,\r\n      code: `\r\nfunction multiply(a) {\r\n  return function(b) {\r\n    return a * b;\r\n  };\r\n}\r\n\r\nconst double = multiply(2);\r\nconsole.log(double(5)); // 10\r\n\r\nconst triple = multiply(3);\r\nconsole.log(triple(5)); // 15\r\n      `,\r\n    },\r\n    {\r\n      title: \"Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Функциональное программирование — это мощная парадигма, которая помогает писать чистый, предсказуемый и легко тестируемый код. Хотя она может показаться сложной для новичков, её принципы (чистые функции, иммутабельность, функции высшего порядка) становятся естественными с практикой.</p>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const ImperativeAndDeclarativeProgramming = {\r\n  id: 186,\r\n  title: \"Imperative and Declarative Programming\",\r\n  children: [\r\n    {\r\n      title: \"Определение императивного программирования\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Императивное программирование — это парадигма, в которой разработчик указывает, как именно должна быть выполнена задача, описывая последовательность шагов, необходимых для достижения результата.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Примеры императивного программирования\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример императивного подхода на JavaScript:</p>\r\n          `,\r\n      code: `\r\nlet sum = 0;\r\nfor (let i = 1; i <= 5; i++) {\r\nsum += i;\r\n}\r\nconsole.log(sum); // 15\r\n          `,\r\n    },\r\n    {\r\n      title: \"Определение декларативного программирования\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Декларативное программирование — это парадигма, в которой разработчик описывает, что нужно сделать, а не как это сделать. Основное внимание уделяется результату, а не этапам выполнения.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Примеры декларативного программирования\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример декларативного подхода на JavaScript:</p>\r\n          `,\r\n      code: `\r\nconst sum = [1, 2, 3, 4, 5].reduce((acc, curr) => acc + curr, 0);\r\nconsole.log(sum); // 15\r\n          `,\r\n    },\r\n    {\r\n      title: \"Сравнение подходов\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Императивное программирование требует от разработчика указания каждой детали выполнения, в то время как декларативное программирование позволяет сосредоточиться на конечном результате, что может сделать код более читаемым и поддерживаемым.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Обе парадигмы имеют свои сильные и слабые стороны, и выбор между ними зависит от конкретной задачи и предпочтений разработчика.</p>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const MethodologyAgile = {\r\n  id: 189,\r\n  title: \"Methodology Agile\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Agile — это гибкая методология разработки, которая применяется для создания приложений и управления проектами. Она фокусируется на итеративном подходе, сотрудничестве между командами и быстром реагировании на изменения в требованиях или обратную связь от пользователей.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Основные принципы Agile\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Agile основывается на следующих принципах:</p>\r\n            <ul>\r\n              <li><strong>Люди и взаимодействие</strong>: Приоритет отдается командной работе и общению, а не строгому следованию процессам.</li>\r\n              <li><strong>Работающий продукт</strong>: Основное внимание уделяется созданию функционального интерфейса, а не написанию документации.</li>\r\n              <li><strong>Сотрудничество с пользователями</strong>: Пользователи активно участвуют в процессе разработки, предоставляя обратную связь по интерфейсу и UX.</li>\r\n              <li><strong>Готовность к изменениям</strong>: Agile позволяет быстро адаптироваться к новым требованиям, даже на поздних этапах разработки.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Методы Agile\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Существует несколько методов Agile, которые можно применять при разработке интерфейсов:</p>\r\n            <ul>\r\n              <li><strong>Scrum</strong>: Методология, основанная на итерациях (спринтах), где команда работает над небольшими частями интерфейса и регулярно демонстрирует результаты.</li>\r\n              <li><strong>Kanban</strong>: Метод, который помогает визуализировать процесс разработки и управлять потоком задач, что особенно полезно для поддержки и доработки интерфейсов.</li>\r\n              <li><strong>Extreme Programming (XP)</strong>: Подход, который делает акцент на технических практиках, таких как тестирование и рефакторинг, для повышения качества кода интерфейса.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества Agile\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Преимущества использования Agile при разработке интерфейсов:</p>\r\n            <ul>\r\n              <li><strong>Гибкость</strong>: Возможность быстро адаптироваться к изменениям в требованиях или дизайне.</li>\r\n              <li><strong>Улучшение качества</strong>: Регулярное тестирование интерфейса помогает находить и устранять ошибки на ранних этапах.</li>\r\n              <li><strong>Повышение вовлеченности команды</strong>: Члены команды активно участвуют в процессе, что повышает их мотивацию и ответственность.</li>\r\n              <li><strong>Быстрая доставка</strong>: Возможность выпускать новые функции интерфейса небольшими частями, что ускоряет время выхода на рынок.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Рекомендации по внедрению Agile\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Некоторые рекомендации по внедрению Agile в разработку интерфейсов:</p>\r\n            <ul>\r\n              <li><strong>Обучение команды</strong>: Обучите команду принципам и методам Agile, чтобы все участники понимали их ценность.</li>\r\n              <li><strong>Определение ролей</strong>: Четко распределите роли в команде (например, Product Owner, Scrum Master, разработчики).</li>\r\n              <li><strong>Регулярная обратная связь</strong>: Постоянно собирайте отзывы от пользователей и команды, чтобы улучшать интерфейс.</li>\r\n              <li><strong>Итеративный подход</strong>: Начинайте с небольших итераций, чтобы быстро тестировать идеи и вносить изменения.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};","export const MethodologyBEM = {\r\n  id: 188,\r\n  title: \"Methodology BEM\",\r\n  children: [\r\n    {\r\n      title: \"B - Блок (Block)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Определение блока:</p>\r\n            <ul>\r\n              <li><strong>Что это</strong>: Независимый компонент интерфейса, который может быть переиспользован.</li>\r\n              <li><strong>Примеры</strong>: <code>header</code>, <code>menu</code>, <code>button</code>.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"E - Элемент (Element)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Определение элемента:</p>\r\n            <ul>\r\n              <li><strong>Что это</strong>: Составная часть блока, которая не имеет смысла вне него.</li>\r\n              <li><strong>Обозначение</strong>: Элементы обозначаются двойным подчеркиванием, например, <code>menu__item</code>.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"M - Модификатор (Modifier)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Определение модификатора:</p>\r\n            <ul>\r\n              <li><strong>Что это</strong>: Состояние или версия блока или элемента, изменяющая его внешний вид или поведение.</li>\r\n              <li><strong>Обозначение</strong>: Модификаторы обозначаются двойным дефиссом, например, <code>button--primary</code>.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества BEM\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Основные преимущества методологии BEM:</p>\r\n            <ul>\r\n              <li><strong>Читаемость</strong>: Структура именования делает код более понятным.</li>\r\n              <li><strong>Масштабируемость</strong>: Легко добавлять новые блоки и элементы без конфликтов.</li>\r\n              <li><strong>Поддерживаемость</strong>: Изменения в одном блоке не влияют на другие.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const MethodologyKanban = {\r\n  id: 191,\r\n  title: \"Methodology Kanban\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Kanban — это методология управления проектами, основанная на визуализации рабочего процесса и ограничении количества одновременно выполняемых задач. Она помогает командам улучшать эффективность и гибкость в управлении задачами.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Основные принципы Kanban\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Kanban основывается на следующих ключевых принципах:</p>\r\n            <ul>\r\n              <li><strong>Визуализация работы</strong>: Использование канбан-досок для отображения текущего состояния задач и рабочего процесса.</li>\r\n              <li><strong>Ограничение WIP (Work In Progress)</strong>: Установка лимитов на количество задач, которые могут выполняться одновременно, чтобы предотвратить перегрузку команды.</li>\r\n              <li><strong>Управление потоком</strong>: Анализ и оптимизация потока задач для улучшения их завершения.</li>\r\n              <li><strong>Постоянное улучшение</strong>: Регулярный анализ процессов и поиск возможностей для повышения эффективности.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Канбан-доска\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Канбан-доска — это визуальный инструмент, который помогает командам отслеживать статус задач на разных этапах их выполнения. Обычно она включает следующие колонки:</p>\r\n            <ul>\r\n              <li><strong>Запланировано</strong>: Задачи, которые еще не начаты.</li>\r\n              <li><strong>В процессе</strong>: Задачи, которые выполняются в данный момент.</li>\r\n              <li><strong>Завершено</strong>: Завершенные задачи, которые прошли все этапы.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества Kanban\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Преимущества использования Kanban:</p>\r\n            <ul>\r\n              <li><strong>Гибкость</strong>: Легкость в адаптации к изменениям и новым требованиям.</li>\r\n              <li><strong>Улучшение видимости</strong>: Визуализация процессов помогает команде лучше понимать текущую загрузку и прогресс.</li>\r\n              <li><strong>Сокращение времени выполнения</strong>: Оптимизация потока задач позволяет сократить время от начала до завершения работы.</li>\r\n              <li><strong>Постоянное улучшение</strong>: Фокус на анализе и оптимизации процессов способствует повышению качества работы.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Рекомендации по внедрению Kanban\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Некоторые рекомендации по внедрению Kanban:</p>\r\n            <ul>\r\n              <li><strong>Начните с текущего процесса</strong>: Не пытайтесь изменить все сразу; начните с визуализации текущих задач.</li>\r\n              <li><strong>Определите лимиты WIP</strong>: Установите разумные ограничения на количество задач в процессе.</li>\r\n              <li><strong>Регулярно анализируйте результаты</strong>: Проводите встречи для обсуждения прогресса и возможностей для улучшения.</li>\r\n              <li><strong>Используйте инструменты</strong>: Рассмотрите возможность использования цифровых инструментов для управления канбан-досками.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const MethodologyScrum = {\r\n  id: 190,\r\n  title: \"Methodology Scrum\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Scrum — это фреймворк для управления проектами в рамках методологии Agile, который позволяет командам работать над сложными проектами, обеспечивая гибкость, прозрачность и регулярную доставку ценности.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Основные роли в Scrum\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>В Scrum выделяют три ключевые роли:</p>\r\n            <ul>\r\n              <li><strong>Product Owner</strong>: Ответственный за создание и управление бэклогом продукта, определяет приоритеты и принимает решения о функциональности.</li>\r\n              <li><strong>Scrum Master</strong>: Обеспечивает соблюдение принципов Scrum, помогает команде устранять препятствия и организует процессы.</li>\r\n              <li><strong>Команда разработки</strong>: Мультидисциплинарная группа, которая непосредственно работает над созданием и доставкой продукта.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Основные артефакты Scrum\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>В Scrum используются следующие артефакты:</p>\r\n            <ul>\r\n              <li><strong>Product Backlog</strong>: Список всех требований и задач, которые необходимо выполнить для продукта, приоритетизированный Product Owner.</li>\r\n              <li><strong>Sprint Backlog</strong>: Набор задач, выбранных из Product Backlog для выполнения в текущем спринте.</li>\r\n              <li><strong>Increment</strong>: Рабочая версия продукта, которая включает все завершенные задачи за текущий спринт и предыдущие.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Процесс Scrum\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Процесс Scrum включает в себя следующие этапы:</p>\r\n            <ul>\r\n              <li><strong>Планирование спринта</strong>: Определение задач, которые команда должна выполнить в течение спринта.</li>\r\n              <li><strong>Спринт</strong>: Итерация, обычно длится от 1 до 4 недель, в течение которой команда работает над задачами из Sprint Backlog.</li>\r\n              <li><strong>Ежедневные стендапы</strong>: Краткие встречи команды, на которых обсуждаются прогресс, планы и препятствия.</li>\r\n              <li><strong>Обзор спринта</strong>: Демонстрация завершенных задач заинтересованным сторонам по окончании спринта.</li>\r\n              <li><strong>Ретроспектива спринта</strong>: Обсуждение того, что прошло хорошо, что можно улучшить и как повысить эффективность команды в следующем спринте.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества Scrum\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Преимущества использования Scrum:</p>\r\n            <ul>\r\n              <li><strong>Гибкость</strong>: Легкость в адаптации к изменениям требований.</li>\r\n              <li><strong>Регулярная обратная связь</strong>: Частые встречи с заказчиками и заинтересованными сторонами для получения отзывов.</li>\r\n              <li><strong>Участие команды</strong>: Повышенная вовлеченность и ответственность участников команды.</li>\r\n              <li><strong>Постоянное улучшение</strong>: Регулярные ретроспективы способствуют повышению эффективности команды.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Рекомендации по внедрению Scrum\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Некоторые рекомендации по внедрению Scrum:</p>\r\n            <ul>\r\n              <li><strong>Обучение команды</strong>: Обеспечьте обучение принципам и практикам Scrum для всех членов команды.</li>\r\n              <li><strong>Четкое определение ролей</strong>: Убедитесь, что каждая роль хорошо понимает свои обязанности.</li>\r\n              <li><strong>Регулярные встречи</strong>: Настройте эффективные и регулярные встречи для обсуждения статуса и планов.</li>\r\n              <li><strong>Инструменты для управления</strong>: Используйте инструменты для управления проектами, такие как Jira или Trello.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const OOP = {\r\n  id: 192,\r\n  title: \"OOP (Объектно-ориентированное программирование)\",\r\n  children: [\r\n    {\r\n      title:\r\n        \"Объектно-ориентированное программирование (ООП) — это парадигма программирования, основанная на концепции 'объектов', которые могут содержать данные и код. Основные принципы ООП:\",\r\n      type: \"text\",\r\n      description: `\r\n          <h3>1. Инкапсуляция</h3>\r\n          <p><strong>Инкапсуляция</strong> — это механизм сокрытия внутреннего состояния объекта и предоставления контролируемого доступа к нему через методы.</p>\r\n          <ul>\r\n            <li>Позволяет защитить данные от неправильного использования.</li>\r\n            <li>Модификаторы доступа: <code>private</code>, <code>protected</code>, <code>public</code>.</li>\r\n          </ul>\r\n          <p>Пример:</p>\r\n          `,\r\n      code: `\r\nclass BankAccount {\r\n  private balance: number;\r\n\r\n  constructor(initialBalance: number) {\r\n    this.balance = initialBalance;\r\n  }\r\n\r\n  deposit(amount: number): void {\r\n    if (amount > 0) {\r\n      this.balance += amount;\r\n    }\r\n  }\r\n\r\n  getBalance(): number {\r\n    return this.balance;\r\n  }\r\n}\r\n\r\nconst account = new BankAccount(100);\r\naccount.deposit(50);\r\nconsole.log(account.getBalance()); // 150\r\n      `,\r\n    },\r\n    {\r\n      title: \"2. Наследование\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Наследование</strong> — это механизм, позволяющий создавать новые классы на основе существующих. Новый класс (потомок) наследует свойства и методы родительского класса.</p>\r\n          <ul>\r\n            <li>Позволяет повторно использовать код.</li>\r\n            <li>Может привести к проблемам с 'жёсткой связью' (tight coupling).</li>\r\n          </ul>\r\n          <p>Пример:</p>\r\n          `,\r\n      code: `\r\nclass Animal {\r\n  speak(): void {\r\n    console.log(\"Some sound\");\r\n  }\r\n}\r\n\r\nclass Dog extends Animal {\r\n  speak(): void {\r\n    console.log(\"Woof!\");\r\n  }\r\n}\r\n\r\nconst dog = new Dog();\r\ndog.speak(); // Woof!\r\n      `,\r\n    },\r\n    {\r\n      title: \"3. Полиморфизм\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Полиморфизм</strong> — это способность объектов разных классов обрабатывать данные через одинаковый интерфейс.</p>\r\n          <ul>\r\n            <li>Достигается через переопределение методов или использование интерфейсов.</li>\r\n            <li>Увеличивает гибкость кода.</li>\r\n          </ul>\r\n          <p>Пример:</p>\r\n          `,\r\n      code: `\r\ninterface Shape {\r\n  area(): number;\r\n}\r\n\r\nclass Circle implements Shape {\r\n  radius: number;\r\n\r\n  constructor(radius: number) {\r\n    this.radius = radius;\r\n  }\r\n\r\n  area(): number {\r\n    return Math.PI * this.radius ** 2;\r\n  }\r\n}\r\n\r\nclass Square implements Shape {\r\n  side: number;\r\n\r\n  constructor(side: number) {\r\n    this.side = side;\r\n  }\r\n\r\n  area(): number {\r\n    return this.side ** 2;\r\n  }\r\n}\r\n\r\nfunction printArea(shape: Shape): void {\r\n  console.log(shape.area());\r\n}\r\n\r\nconst circle = new Circle(5);\r\nconst square = new Square(4);\r\n\r\nprintArea(circle); // 78.54\r\nprintArea(square); // 16\r\n      `,\r\n    },\r\n    {\r\n      title: \"4. Абстракция\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Абстракция</strong> — это процесс упрощения сложных систем путем определения общих интерфейсов и скрытия деталей реализации.</p>\r\n          <ul>\r\n            <li>Позволяет сосредоточиться на взаимодействии между объектами.</li>\r\n            <li>Реализуется через абстрактные классы или интерфейсы.</li>\r\n          </ul>\r\n          <p>Пример:</p>\r\n          `,\r\n      code: `\r\nabstract class Vehicle {\r\n  abstract move(): void;\r\n}\r\n\r\nclass Car extends Vehicle {\r\n  move(): void {\r\n    console.log(\"Driving...\");\r\n  }\r\n}\r\n\r\nclass Plane extends Vehicle {\r\n  move(): void {\r\n    console.log(\"Flying...\");\r\n  }\r\n}\r\n\r\nconst car = new Car();\r\ncar.move(); // Driving...\r\n      `,\r\n    },\r\n    {\r\n      title: \"Композиция vs Наследование\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Композиция</strong> — это подход, при котором объекты строятся из других объектов вместо наследования. Это более гибкий и безопасный способ по сравнению с наследованием.</p>\r\n          <ul>\r\n            <li>Наследование создаёт 'жёсткую связь' между классами.</li>\r\n            <li>Композиция позволяет комбинировать поведение динамически.</li>\r\n          </ul>\r\n          <p>Пример:</p>\r\n          `,\r\n      code: `\r\nclass Engine {\r\n  start(): void {\r\n    console.log(\"Engine started\");\r\n  }\r\n}\r\n\r\nclass Car {\r\n  private engine: Engine;\r\n\r\n  constructor() {\r\n    this.engine = new Engine();\r\n  }\r\n\r\n  start(): void {\r\n    this.engine.start();\r\n    console.log(\"Car started\");\r\n  }\r\n}\r\n\r\nconst car = new Car();\r\ncar.start();\r\n// Engine started\r\n// Car started\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые вопросы на собеседованиях\",\r\n      type: \"text\",\r\n      description: `\r\n          <ul>\r\n            <li><strong>Какие проблемы могут возникнуть при использовании наследования?</strong> — Жёсткая связь между классами, сложность поддержки кода.</li>\r\n            <li><strong>Как композиция может заменить наследование?</strong> — Композиция позволяет комбинировать поведение динамически, что делает код более гибким.</li>\r\n            <li><strong>Зачем нужны модификаторы доступа?</strong> — Они защищают внутренние данные объекта и предотвращают их неправильное использование.</li>\r\n          </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const SOLID = {\r\n  id: 193,\r\n  title: \"SOLID\",\r\n  children: [\r\n    {\r\n      title: \"S - Single Responsibility Principle\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Принцип единственной ответственности:</p>\r\n            <ul>\r\n              <li><strong>Определение</strong>: Каждый класс должен иметь одну единственную ответственность.</li>\r\n              <li><strong>Цель</strong>: Упрощение тестирования и модификации кода.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"O - Open/Closed Principle\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Принцип открытости/закрытости:</p>\r\n            <ul>\r\n              <li><strong>Определение</strong>: Классы должны быть открыты для расширения, но закрыты для изменения.</li>\r\n              <li><strong>Цель</strong>: Позволяет добавлять новую функциональность без изменения существующего кода.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"L - Liskov Substitution Principle\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Принцип подстановки Лисков: *изменить*</p>\r\n            <ul>\r\n              <li><strong>Определение</strong>: Объекты подкласса должны быть взаимозаменяемыми с объектами суперкласса.</li>\r\n              <li><strong>Цель</strong>: Поддержание корректности программы при замене объектов.</li>\r\n              <li><strong>Цель</strong>: В случае удаления родительского класса, мы можем подставить дочерний класс вместо родительского без последствий на работу программы.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"I - Interface Segregation Principle\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Принцип сегрегации интерфейсов:</p>\r\n            <ul>\r\n              <li><strong>Определение</strong>: Клиенты не должны зависеть от интерфейсов, которые они не используют.</li>\r\n              <li><strong>Цель</strong>: Избежать ненужных зависимостей и создать узкоспециализированные интерфейсы.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"D - Dependency Inversion Principle\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Принцип инверсии зависимостей:</p>\r\n            <ul>\r\n              <li><strong>Определение</strong>: Модули верхнего уровня не должны зависеть от модулей нижнего уровня; обе группы должны зависеть от абстракций.</li>\r\n              <li><strong>Цель</strong>: Уменьшение связанности между компонентами системы.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","import { CI_CD_CD } from \"./CI_CD_CD/CI_CD_CD\";\r\nimport { CleanCode } from \"./CleanCode/CleanCode\";\r\nimport { DesignPatterns } from \"./DesignPatterns/DesignPatterns\";\r\nimport { DIALOG_MODAL_PATTERN } from \"./DialogPattern/DialogPattern\";\r\nimport { DRY } from \"./DRY/DRY\";\r\nimport { EventDelegation } from \"./EventDelegation/EventDelegation\";\r\nimport { FunctionalProgramming } from \"./FunctionalProgramming/FunctionalProgramming\";\r\nimport { ImperativeAndDeclarativeProgramming } from \"./ImperativeAndDeclarativeProgramming/ImperativeAndDeclarativeProgramming\";\r\nimport { KISS } from \"./KISS/KISS\";\r\nimport { MethodologyAgile } from \"./MethodologyAgile/MethodologyAgile\";\r\nimport { MethodologyBEM } from \"./MethodologyBEM/MethodologyBEM\";\r\nimport { MethodologyKanban } from \"./MethodologyKanban/MethodologyKanban\";\r\nimport { MethodologyScrum } from \"./MethodologyScrum/MethodologyScrum\";\r\nimport { OOP } from \"./OOP/OOP\";\r\nimport { SOLID } from \"./SOLID/SOLID\";\r\nimport { YAGNI } from \"./YAGNI/YAGNI\";\r\n\r\nexport const Patterns = {\r\n  id: 16,\r\n  title: \"Patterns, principles, methodologies\",\r\n  children: [\r\n    CleanCode,\r\n    CI_CD_CD,\r\n    DesignPatterns,\r\n    DIALOG_MODAL_PATTERN,\r\n    DRY,\r\n    EventDelegation,\r\n    FunctionalProgramming,\r\n    ImperativeAndDeclarativeProgramming,\r\n    KISS,\r\n    MethodologyAgile,\r\n    MethodologyBEM,\r\n    MethodologyKanban,\r\n    MethodologyScrum,\r\n    OOP,\r\n    SOLID,\r\n    YAGNI,\r\n  ],\r\n};\r\n","export const DRY = {\r\n  id: 182,\r\n  title: \"DRY\",\r\n  children: [\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>DRY (Don't Repeat Yourself)</strong> - Принцип, согласно которому информация и логика не должны повторяться в коде, чтобы уменьшить дублирование и облегчить поддержку.\",\r\n    },\r\n  ],\r\n};\r\n","export const KISS = {\r\n  id: 187,\r\n  title: \"KISS\",\r\n  children: [\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>KISS (Keep It Simple, Stupid)</strong> - это принцип, который подразумевает, что системы следует проектировать максимально просто; избегать ненужной сложности.\",\r\n    },\r\n  ],\r\n};\r\n","export const YAGNI = {\r\n  id: 194,\r\n  title: \"YAGNI\",\r\n  children: [\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      description:\r\n        \"<strong>YAGNI (You Aren't Gonna Need It)</strong> - Принцип, который гласит, что не следует добавлять функциональности, пока не возникнет реальная необходимость, чтобы избежать излишней сложности.\",\r\n    },\r\n  ],\r\n};\r\n","export const CacheReact = {\r\n  id: 535,\r\n  title: \"Cache in React (кэширование в реакт)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое кэширование в React?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Кэширование</strong> — это процесс сохранения результатов вычислений или данных для их повторного использования. В React кэширование помогает избежать ненужных перерасчетов, запросов к API или ререндеров компонентов.</p>\r\n        <p>Основные преимущества:</p>\r\n        <ul>\r\n          <li>Уменьшение нагрузки на CPU и память.</li>\r\n          <li>Оптимизация производительности приложений.</li>\r\n          <li>Минимизация количества запросов к серверу.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Инструменты кэширования в React\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>React предоставляет несколько встроенных инструментов для кэширования:</p>\r\n        <ul>\r\n          <li><strong>useMemo:</strong> Кэширует результат вычислений.</li>\r\n          <li><strong>useCallback:</strong> Кэширует функции.</li>\r\n          <li><strong>React.memo:</strong> Кэширует результат рендеринга функциональных компонентов.</li>\r\n          <li><strong>Suspense и React Query:</strong> Для кэширования данных (например, результатов запросов).</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"useMemo\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>useMemo</strong> — это хук, который кэширует результат вычислений. Он полезен для тяжелых операций, таких как фильтрация массивов или сложные математические вычисления.</p>\r\n      `,\r\n      code: `\r\nimport React, { useMemo } from 'react';\r\n\r\nfunction Component({ data }) {\r\n  // Кэшируем результат вычислений\r\n  const processedData = useMemo(() => {\r\n    return data.filter(item => item.isActive);\r\n  }, [data]);\r\n\r\n  return <div>{processedData.length} активных элементов</div>;\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"useCallback\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>useCallback</strong> — это хук, который кэширует функции. Он полезен для предотвращения ненужных ререндеров дочерних компонентов, если функция передается через пропсы.</p>\r\n      `,\r\n      code: `\r\nimport React, { useCallback } from 'react';\r\n\r\nfunction ParentComponent() {\r\n  // Кэшируем функцию\r\n  const handleClick = useCallback(() => {\r\n    console.log('Button clicked!');\r\n  }, []);\r\n\r\n  return <ChildComponent onClick={handleClick} />;\r\n}\r\n\r\nfunction ChildComponent({ onClick }) {\r\n  return <button onClick={onClick}>Click me</button>;\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"React.memo\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>React.memo</strong> — это функция для кэширования результатов рендеринга функциональных компонентов. Она предотвращает ререндер компонента, если его пропсы не изменились (по результатам поверхностного сравнения).</p>\r\n      `,\r\n      code: `\r\nimport React from 'react';\r\n\r\nconst MyComponent = React.memo(function MyComponent({ value }) {\r\n  console.log('Render called');\r\n  return <div>Value: {value}</div>;\r\n});\r\n\r\nfunction App() {\r\n  const [value, setValue] = React.useState(0);\r\n  return (\r\n    <>\r\n      <MyComponent value={value} />\r\n      <button onClick={() => setValue(value + 1)}>Increment</button>\r\n    </>\r\n  );\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Suspense и React Query\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Suspense</strong> и <strong>React Query</strong> позволяют кэшировать данные, например, результаты запросов к API. Это особенно полезно для асинхронных операций.</p>\r\n      `,\r\n      code: `\r\n// Пример с React Query\r\nimport { useQuery } from 'react-query';\r\n\r\nfunction fetchData() {\r\n  return fetch('/api/data').then(res => res.json());\r\n}\r\n\r\nfunction Component() {\r\n  const { data, isLoading } = useQuery('data', fetchData);\r\n\r\n  if (isLoading) return <div>Loading...</div>;\r\n\r\n  return <div>{data.map(item => <p key={item.id}>{item.name}</p>)}</div>;\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Используйте кэширование только при необходимости:</strong> Не злоупотребляйте <code>useMemo</code>, <code>useCallback</code> или <code>React.memo</code>, так как они добавляют сложность.</li>\r\n          <li><strong>Тестируйте производительность:</strong> Убедитесь, что кэширование действительно улучшает производительность.</li>\r\n          <li><strong>Избегайте мутаций:</strong> Данные должны быть иммутабельными для корректного кэширования.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Избыточное использование useMemo/useCallback:</strong></p>\r\n        <pre><code>// Плохо: кэширование простых вычислений\r\nconst value = useMemo(() => a + b, [a, b]);\r\n\r\n// Лучше: используйте обычное вычисление\r\nconst value = a + b;\r\n</code></pre>\r\n\r\n        <p><strong>2. Неправильное сравнение зависимостей:</strong></p>\r\n        <pre><code>// Плохо: забытая зависимость\r\nconst memoizedValue = useMemo(() => computeValue(data), []);\r\n\r\n// Лучше: добавьте все зависимости\r\nconst memoizedValue = useMemo(() => computeValue(data), [data]);\r\n</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Продвинутые паттерны\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Кэширование с помощью Map:</strong></p>\r\n        <pre><code>function createCachedFunction(fn) {\r\n  const cache = new Map();\r\n  return function (...args) {\r\n    const key = JSON.stringify(args);\r\n    if (cache.has(key)) {\r\n      console.log('Using cached result');\r\n      return cache.get(key);\r\n    }\r\n    const result = fn(...args);\r\n    cache.set(key, result);\r\n    return result;\r\n  };\r\n}\r\n\r\nconst add = (a, b) => a + b;\r\nconst cachedAdd = createCachedFunction(add);\r\n\r\nconsole.log(cachedAdd(2, 3)); // Вычисляет и кэширует\r\nconsole.log(cachedAdd(2, 3)); // Использует кэш\r\n</code></pre>\r\n\r\n        <p><strong>2. Кэширование данных с SWR:</strong></p>\r\n        <pre><code>import useSWR from 'swr';\r\n\r\nfunction fetcher(url) {\r\n  return fetch(url).then(res => res.json());\r\n}\r\n\r\nfunction Component() {\r\n  const { data, error } = useSWR('/api/data', fetcher);\r\n\r\n  if (error) return <div>Failed to load</div>;\r\n  if (!data) return <div>Loading...</div>;\r\n\r\n  return <div>{data.map(item => <p key={item.id}>{item.name}</p>)}</div>;\r\n}\r\n</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Дополнительные материалы\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Для более глубокого изучения:</p>\r\n        <ul>\r\n          <li><a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\" target=\"_blank\">React Documentation: useMemo</a></li> \r\n          <li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\" target=\"_blank\">React Documentation: useCallback</a></li> \r\n          <li><a href=\"https://react-query.tanstack.com/\"  target=\"_blank\">React Query Documentation</a></li>\r\n          <li><a href=\"https://swr.vercel.app/\"  target=\"_blank\">SWR Documentation</a></li>\r\n        </ul>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const componentRerenders = {\r\n  id: 519,\r\n  title: \"Ререндеры компонентов и оптимизация\",\r\n  children: [\r\n    {\r\n      title: \"Когда происходит ререндер?\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Компонент ререндерится в следующих случаях:</strong></p>\r\n          <ul>\r\n            <li><strong>Изменение состояния (state):</strong> Вызов <code>setState</code> или <code>useState</code>.</li>\r\n            <li><strong>Изменение пропсов (props):</strong> Новые значения от родительского компонента.</li>\r\n            <li><strong>Изменение контекста (context):</strong> Если компонент подписан на контекст через <code>useContext</code>.</li>\r\n            <li><strong>Ререндер родителя:</strong> Дочерние компоненты ререндерятся вместе с родителем (если не оптимизированы).</li>\r\n          </ul>\r\n          <p><strong>Важно:</strong> Ререндер ≠ обновление DOM. React сначала сравнивает Virtual DOM.</p>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Как оптимизировать лишние ререндеры?\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>1. Мемоизация компонентов:</strong></p>\r\n          <pre><code>import { memo } from 'react';\r\n  const MemoComponent = memo(Component); // Пропсы сравниваются поверхностно</code></pre>\r\n  \r\n          <p><strong>2. Мемоизация значений и функций:</strong></p>\r\n          <pre><code>const value = useMemo(() => computeExpensiveValue(a, b), [a, b]);\r\n  const callback = useCallback(() => doSomething(a, b), [a, b]);</code></pre>\r\n  \r\n          <p><strong>3. Оптимизация контекста:</strong></p>\r\n          <ul>\r\n            <li>Разделяйте контексты на независимые части.</li>\r\n            <li>Используйте <code>memo</code> для потребителей контекста.</li>\r\n          </ul>\r\n  \r\n          <p><strong>4. Управление зависимостями эффектов:</strong></p>\r\n          <pre><code>useEffect(() => {\r\n    // Действие\r\n  }, [dep1, dep2]); // Указывайте только необходимые зависимости</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Глубокое сравнение пропсов\",\r\n      type: \"text\",\r\n      description: `\r\n          <p>Для сложных пропсов в <code>memo</code> можно задать кастомное сравнение:</p>\r\n          <pre><code>const areEqual = (prevProps, nextProps) => {\r\n    return prevProps.data.id === nextProps.data.id;\r\n  };\r\n  \r\n  export default memo(Component, areEqual);</code></pre>\r\n          <p><strong>Осторожно:</strong> Глубокое сравнение может быть дорогим!</p>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Инструменты для анализа\",\r\n      type: \"text\",\r\n      description: `\r\n          <ul>\r\n            <li><strong>React DevTools:</strong> Включите подсветку обновлений (Highlight Updates).</li>\r\n            <li><strong>Профилировщик:</strong> Записывайте и анализируйте рендеры через Profiler.</li>\r\n            <li><strong>why-did-you-render:</strong> Библиотека для логирования причин ререндеров.</li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Паттерны для предотвращения ререндеров\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>1. Подъем состояния:</strong> Перемещайте состояние ближе к месту использования.</p>\r\n          <p><strong>2. Компоненты-дети:</strong> Передавайте примитивы вместо объектов/массивов.</p>\r\n          <p><strong>3. Составные компоненты:</strong> Используйте <code>children</code> или render-пропсы.</p>\r\n          <pre><code>// Плохо: объект в пропсах\r\n  &lt;Component data={{ id: 1, name: 'test' }} /&gt;\r\n  \r\n  // Лучше: примитивы\r\n  &lt;Component id={1} name=\"test\" /&gt;</code></pre>\r\n        `,\r\n    },\r\n  ],\r\n};\r\n","export const FiberTree = {\r\n  id: 533,\r\n  title: \"Fiber\",\r\n  children: [\r\n    {\r\n      title: \"Что такое Fiber?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Fiber</strong> — это новая архитектура алгоритма рендеринга в React, представленная в версии 16. Она была создана для улучшения производительности, оптимизации управления состоянием и работы с асинхронными обновлениями.</p>\r\n        <p>Основная цель Fiber — сделать React более отзывчивым и эффективным за счет разделения работы на маленькие части, которые могут быть приостановлены, возобновлены или отменены.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Проблемы, которые решает Fiber\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>До Fiber React использовал рекурсивный процесс для рендеринга, что делало невозможным приостановку или отмену рендеринга. Это приводило к следующим проблемам:</p>\r\n        <ul>\r\n          <li><strong>Блокировка основного потока:</strong> Рендеринг больших деревьев мог блокировать UI на время выполнения.</li>\r\n          <li><strong>Отсутствие приоритетов:</strong> Все обновления выполнялись с одинаковым приоритетом, даже если некоторые из них были менее важными.</li>\r\n          <li><strong>Сложность отладки:</strong> Рекурсивный подход затруднял понимание и отладку процесса рендеринга.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Основные особенности Fiber\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Переход на асинхронность:</strong> Fiber позволяет React приостанавливать и возобновлять рендеринг, что позволяет более эффективно обрабатывать сложные UI.</li>\r\n          <li><strong>Приоритет обновлений:</strong> Fiber поддерживает приоритеты, позволяя React обрабатывать более важные обновления быстрее.</li>\r\n          <li><strong>Улучшенная работа с интерактивностью:</strong> Fiber помогает разработчикам создавать более отзывчивые интерфейсы, управляя рендерингом в зависимости от пользовательского ввода.</li>\r\n          <li><strong>Инкрементальный рендеринг:</strong> Fiber разбивает работу на маленькие задачи, которые могут быть выполнены постепенно.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Как работает Fiber?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Fiber использует концепцию \"волокон\" (fiber), которые представляют собой единичные узлы в древовидной структуре компонентов. Каждый узел содержит информацию о состоянии компонента, его дочерних узлах и текущей задаче.</strong></p>\r\n        <p>Основные этапы работы Fiber:</p>\r\n        <ul>\r\n          <li><strong>Реконсиляция:</strong> Fiber проходит по дереву компонентов и определяет, какие изменения нужно применить.</li>\r\n          <li><strong>Приостановка:</strong> Если браузер занят (например, отрисовкой), Fiber может приостановить выполнение задачи и продолжить её позже.</li>\r\n          <li><strong>Коммит:</strong> После завершения реконсиляции Fiber применяет изменения к DOM.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Структура Fiber-узла\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Каждый Fiber-узел содержит следующие ключевые свойства:</p>\r\n        <ul>\r\n          <li><strong>type:</strong> Тип компонента (например, функция или класс).</li>\r\n          <li><strong>props:</strong> Свойства компонента.</li>\r\n          <li><strong>stateNode:</strong> Ссылка на экземпляр компонента или DOM-элемент.</li>\r\n          <li><strong>child:</strong> Первый дочерний узел.</li>\r\n          <li><strong>sibling:</strong> Следующий соседний узел.</li>\r\n          <li><strong>return:</strong> Родительский узел.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример использования Fiber\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Fiber не требует явного использования в коде, но вы можете заметить улучшения производительности при использовании React 16 и выше. Например:</strong></p>\r\n      `,\r\n      code: `\r\nimport React from 'react';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h1>Привет, Fiber!</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n      `,\r\n    },\r\n    {\r\n      title: \"requestIdleCallback\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>requestIdleCallback</strong> — это метод, который позволяет выполнять задачи, когда браузер \"свободен\" (т.е. нет срочных задач).</p>\r\n        <p>Идеально подходит для фоновых вычислений, которые не критичны для отрисовки. Задачи, запланированные с помощью <strong>requestIdleCallback</strong>, могут быть прерваны, если появляются более важные задачи.</p>\r\n      `,\r\n      code: `\r\nrequestIdleCallback(() => {\r\n  // Фоновая задача\r\n  console.log('Выполняется фоновая задача');\r\n});\r\n      `,\r\n    },\r\n    {\r\n      title: \"requestAnimationFrame\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>requestAnimationFrame</strong> — это метод, который запускает выполнение кода перед следующей перерисовкой экрана. Это обеспечивает выполнение задач на частоте 60 кадров в секунду (каждые ~16.6 мс).</p>\r\n        <p>Используется для анимаций и плавных визуальных изменений, гарантируя, что задача будет выполнена до следующего кадра.</p>\r\n      `,\r\n      code: `\r\nrequestAnimationFrame(() => {\r\n  // Код для анимации\r\n  console.log('Анимация выполняется');\r\n});\r\n      `,\r\n    },\r\n    {\r\n      title: \"Преимущества Fiber\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Оптимизация производительности:</strong> Fiber улучшает рендеринг, что особенно важно для сложных пользовательских интерфейсов.</li>\r\n          <li><strong>Управление приоритетами:</strong> Возможность управления приоритетами обновлений помогает делать интерфейс более отзывчивым.</li>\r\n          <li><strong>Поддержка асинхронного рендеринга:</strong> Fiber позволяет React выполнять рендеринг в фоновом режиме, не блокируя основной поток.</li>\r\n          <li><strong>Гибкость:</strong> Fiber может приостанавливать, возобновлять и отменять задачи, что делает его более гибким по сравнению с предыдущими версиями.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Недостатки Fiber\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Сложность:</strong> Понимание и отладка Fiber может быть сложнее для разработчиков, привыкших к более простым подходам.</li>\r\n          <li><strong>Совместимость:</strong> Некоторые старые библиотеки и код могут не полностью поддерживать новые функции Fiber.</li>\r\n        </ul>\r\n      `,\r\n      url: \"https://uncleseneca.medium.com/%D0%BF%D0%BE%D0%B4%D1%80%D0%BE%D0%B1%D0%BD%D1%8B%D0%B9-%D0%BE%D0%B1%D0%B7%D0%BE%D1%80-react-fiber-66485d12bd37\",\r\n      link: \"Подробнее о Fiber\",\r\n    },\r\n  ],\r\n};\r\n","export const useCallback = {\r\n  id: 2547,\r\n  title: \"useCallback\",\r\n  children: [\r\n    {\r\n      title: \"Основы использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>useCallback</strong> — хук для мемоизации функций между рендерами.</p>\r\n        \r\n        <pre><code>import { useCallback } from 'react';\r\n\r\nfunction MyComponent({ onClick }) {\r\n  const handleClick = useCallback(() => {\r\n    console.log('Clicked!');\r\n    onClick();\r\n  }, [onClick]);\r\n\r\n  return &lt;button onClick={handleClick}&gt;Click me&lt;/button&gt;;\r\n}</code></pre>\r\n\r\n        <p><strong>Параметры:</strong></p>\r\n        <ul>\r\n          <li><code>callback</code> — функция для мемоизации</li>\r\n          <li><code>dependencies</code> — массив зависимостей</li>\r\n        </ul>\r\n      `\r\n    },\r\n    {\r\n      title: \"Когда использовать\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Передача колбэков дочерним компонентам:</strong></p>\r\n        <pre><code>const Child = React.memo(function Child({ onItemClick }) {\r\n  /* Рендерится только при изменении пропсов */\r\n});\r\n\r\nfunction Parent({ items }) {\r\n  const handleClick = useCallback((id) => {\r\n    console.log('Item clicked:', id);\r\n  }, []);\r\n\r\n  return items.map(item => (\r\n    &lt;Child key={item.id} onItemClick={handleClick} /&gt;\r\n  ));\r\n}</code></pre>\r\n\r\n        <p><strong>2. Зависимости эффектов:</strong></p>\r\n        <pre><code>const fetchData = useCallback(async () => {\r\n  const res = await fetch(url);\r\n  return res.json();\r\n}, [url]); // Эффект зависит от стабильной ссылки на функцию\r\n\r\nuseEffect(() => {\r\n  fetchData();\r\n}, [fetchData]);</code></pre>\r\n\r\n        <p><strong>3. Оптимизация хэндлеров событий:</strong></p>\r\n        <pre><code>const handleScroll = useCallback(() => {\r\n  /* Логика скролла */\r\n}, []);\r\n\r\nuseEffect(() => {\r\n  window.addEventListener('scroll', handleScroll);\r\n  return () => window.removeEventListener('scroll', handleScroll);\r\n}, [handleScroll]);</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Типизация с TypeScript\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Явное указание типов параметров:</strong></p>\r\n        <pre><code>const handleClick = useCallback&lt;(id: number) => void&gt;(\r\n  (id) => { /* ... */ },\r\n  []\r\n);</code></pre>\r\n\r\n        <p><strong>Типизация сложных колбэков:</strong></p>\r\n        <pre><code>type SubmitHandler = (values: FormValues) => Promise&lt;void&gt;;\r\n\r\nconst onSubmit = useCallback&lt;SubmitHandler&gt;(\r\n  async (values) => {\r\n    await submitToApi(values);\r\n  },\r\n  [submitToApi]\r\n);</code></pre>\r\n\r\n        <p><strong>Автовывод типов:</strong></p>\r\n        <pre><code>// Тип автоматически определяется как () => void\r\nconst handler = useCallback(() => {\r\n  console.log('Hello');\r\n}, []);</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Оптимизация производительности\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Правильный выбор зависимостей:</strong></p>\r\n        <pre><code>const [count, setCount] = useState(0);\r\n\r\n// Плохо - пропущена зависимость count\r\nconst increment = useCallback(() => {\r\n  setCount(count + 1);\r\n}, []);\r\n\r\n// Хорошо - функциональное обновление\r\nconst increment = useCallback(() => {\r\n  setCount(c => c + 1);\r\n}, []);</code></pre>\r\n\r\n        <p><strong>2. Комбинирование с useMemo:</strong></p>\r\n        <pre><code>const contextValue = useMemo(() => ({\r\n  onClick: useCallback(() => {...}, []),\r\n  data: expensiveData\r\n}), [expensiveData]);</code></pre>\r\n\r\n        <p><strong>3. Избегание избыточного использования:</strong></p>\r\n        <pre><code>// Не нужно - функция создаётся один раз и так\r\nconst simpleHandler = () => console.log('Hi');\r\n\r\n// Нужно - если передаётся в memo-компонент\r\nconst complexHandler = useCallback(() => {...}, [deps]);</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Практические примеры\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Форма с валидацией:</strong></p>\r\n        <pre><code>function Form({ onSubmit }) {\r\n  const [values, setValues] = useState({});\r\n  \r\n  const handleChange = useCallback((name, value) => {\r\n    setValues(v => ({ ...v, [name]: value }));\r\n  }, []);\r\n  \r\n  const handleSubmit = useCallback((e) => {\r\n    e.preventDefault();\r\n    onSubmit(values);\r\n  }, [values, onSubmit]);\r\n\r\n  return (\r\n    &lt;form onSubmit={handleSubmit}&gt;\r\n      &lt;Input name=\"email\" onChange={handleChange} /&gt;\r\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\r\n    &lt;/form&gt;\r\n  );\r\n}</code></pre>\r\n\r\n        <p><strong>2. Кастомный хук для событий:</strong></p>\r\n        <pre><code>function useEventListener(event, handler, deps = []) {\r\n  const memoizedHandler = useCallback(handler, deps);\r\n  \r\n  useEffect(() => {\r\n    window.addEventListener(event, memoizedHandler);\r\n    return () => window.removeEventListener(event, memoizedHandler);\r\n  }, [event, memoizedHandler]);\r\n}</code></pre>\r\n\r\n        <p><strong>3. Оптимизированный список:</strong></p>\r\n        <pre><code>const List = React.memo(function List({ items, onSelect }) {\r\n  /* Рендерится только при изменении items или onSelect */\r\n});\r\n\r\nfunction Parent() {\r\n  const handleSelect = useCallback((id) => {\r\n    /* Логика выбора */\r\n  }, []);\r\n\r\n  return &lt;List items={items} onSelect={handleSelect} /&gt;;\r\n}</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Распространённые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Лишние зависимости:</strong></p>\r\n        <pre><code>const [count, setCount] = useState(0);\r\n\r\n// Плохо - лишняя зависимость (setCount стабилен)\r\nconst increment = useCallback(() => {\r\n  setCount(c => c + 1);\r\n}, [setCount]);</code></pre>\r\n\r\n        <p><strong>2. Путаница с useMemo:</strong></p>\r\n        <pre><code>// Неправильно - useMemo для функций\r\nconst handler = useMemo(() => () => {...}, []);\r\n\r\n// Правильно - useCallback\r\nconst handler = useCallback(() => {...}, []);</code></pre>\r\n\r\n        <p><strong>3. Неоправданное использование:</strong></p>\r\n        <pre><code>// Избыточно - функция не передаётся в memo-компонент\r\nconst handler = useCallback(() => {...}, []);\r\n\r\nreturn &lt;button onClick={handler}&gt;Click&lt;/button&gt;;</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Сравнение с useMemo\",\r\n      type: \"text\",\r\n      description: `\r\n        <table border=\"1\">\r\n          <tr>\r\n            <th>Хук</th>\r\n            <th>Назначение</th>\r\n            <th>Пример</th>\r\n          </tr>\r\n          <tr>\r\n            <td><code>useCallback</code></td>\r\n            <td>Мемоизация функций</td>\r\n            <td><code>() => {...}</code></td>\r\n          </tr>\r\n          <tr>\r\n            <td><code>useMemo</code></td>\r\n            <td>Мемоизация значений</td>\r\n            <td><code>expensiveCalculation()</code></td>\r\n          </tr>\r\n        </table>\r\n\r\n        <p><strong>Эквивалентность:</strong></p>\r\n        <pre><code>// Эти записи эквивалентны\r\nuseCallback(fn, deps);\r\nuseMemo(() => fn, deps);</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Используйте с React.memo</strong> для предотвращения лишних рендеров</li>\r\n          <li><strong>Избегайте глубоких сравнений</strong> — меняйте структуру данных</li>\r\n          <li><strong>Документируйте сложные зависимости</strong></li>\r\n          <li><strong>Профилируйте производительность</strong> перед оптимизацией</li>\r\n          <li><strong>Разделяйте логику</strong> на несколько хуков при сложных зависимостях</li>\r\n        </ul>\r\n\r\n        <p><strong>Правило:</strong> Используйте useCallback только когда:</p>\r\n        <ol>\r\n          <li>Функция передаётся в memo-компонент</li>\r\n          <li>Функция используется как зависимость других хуков</li>\r\n          <li>Функция является частью другого мемоизированного значения</li>\r\n        </ol>\r\n      `\r\n    }\r\n  ]\r\n};","export const useContext = {\r\n  id: 2543,\r\n  title: \"useContext\",\r\n  children: [\r\n    {\r\n      title: \"Основы использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>useContext</strong> — это хук для доступа к значению контекста без использования <code>Consumer</code>.</p>\r\n        \r\n        <pre><code>import { createContext, useContext } from 'react';\r\n\r\n// 1. Создание контекста\r\nconst ThemeContext = createContext('light');\r\n\r\nfunction App() {\r\n  // 2. Передача значения через Provider\r\n  return (\r\n    <ThemeContext.Provider value=\"dark\">\r\n      <Toolbar />\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Toolbar() {\r\n  // 3. Получение значения в любом дочернем компоненте\r\n  const theme = useContext(ThemeContext);\r\n  return <div>Текущая тема: {theme}</div>;\r\n}</code></pre>\r\n\r\n        <p><strong>Когда использовать:</strong></p>\r\n        <ul>\r\n          <li>Глобальные настройки (темы, язык).</li>\r\n          <li>Данные пользователя.</li>\r\n          <li>Кешированные данные приложения.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Типизация с TypeScript\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Создание типизированного контекста:</strong></p>\r\n        <pre><code>interface User {\r\n  name: string;\r\n  age: number;\r\n}\r\n\r\nconst UserContext = createContext<User | null>(null);\r\n\r\nfunction UserProfile() {\r\n  const user = useContext(UserContext);\r\n  \r\n  if (!user) return <div>Пользователь не найден</div>;\r\n  \r\n  return <div>{user.name}, {user.age} лет</div>;\r\n}</code></pre>\r\n\r\n        <p><strong>Контекст с default value:</strong></p>\r\n        <pre><code>interface Theme {\r\n  colors: {\r\n    primary: string;\r\n    secondary: string;\r\n  };\r\n}\r\n\r\nconst defaultTheme: Theme = {\r\n  colors: {\r\n    primary: '#007bff',\r\n    secondary: '#6c757d'\r\n  }\r\n};\r\n\r\nconst ThemeContext = createContext<Theme>(defaultTheme);</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Оптимизация производительности\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Мемоизация значения контекста:</strong></p>\r\n        <pre><code>function App() {\r\n  const [user, setUser] = useState({ name: 'Alex', age: 30 });\r\n  \r\n  // value не будет изменяться при каждом рендере\r\n  const userValue = useMemo(() => ({ user, setUser }), [user]);\r\n  \r\n  return (\r\n    <UserContext.Provider value={userValue}>\r\n      <Profile />\r\n    </UserContext.Provider>\r\n  );\r\n}</code></pre>\r\n\r\n        <p><strong>2. Разделение контекстов:</strong></p>\r\n        <pre><code>// Вместо одного большого контекста\r\nconst AppContext = createContext({ user, theme, settings });\r\n\r\n// Лучше разделить на несколько\r\nconst UserContext = createContext(user);\r\nconst ThemeContext = createContext(theme);\r\nconst SettingsContext = createContext(settings);</code></pre>\r\n\r\n        <p><strong>3. Кастомный хук для контекста:</strong></p>\r\n        <pre><code>function useUser() {\r\n  const context = useContext(UserContext);\r\n  if (!context) {\r\n    throw new Error('useUser must be used within UserProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\n// Использование\r\nconst { user } = useUser();</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Паттерны использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Контекст с состоянием и действиями:</strong></p>\r\n        <pre><code>const CounterContext = createContext();\r\n\r\nfunction CounterProvider({ children }) {\r\n  const [count, setCount] = useState(0);\r\n  \r\n  const increment = () => setCount(c => c + 1);\r\n  const decrement = () => setCount(c => c - 1);\r\n  \r\n  const value = { count, increment, decrement };\r\n  \r\n  return (\r\n    <CounterContext.Provider value={value}>\r\n      {children}\r\n    </CounterContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Counter() {\r\n  const { count, increment } = useContext(CounterContext);\r\n  return <button onClick={increment}>{count}</button>;\r\n}</code></pre>\r\n\r\n        <p><strong>2. Многоуровневые провайдеры:</strong></p>\r\n        <pre><code>function App() {\r\n  return (\r\n    <ThemeProvider>\r\n      <UserProvider>\r\n        <SettingsProvider>\r\n          <MainApp />\r\n        </SettingsProvider>\r\n      </UserProvider>\r\n    </ThemeProvider>\r\n  );\r\n}</code></pre>\r\n\r\n        <p><strong>3. Контекст для dependency injection:</strong></p>\r\n        <pre><code>const ApiContext = createContext({\r\n  fetchUsers: () => Promise.resolve([])\r\n});\r\n\r\nfunction App() {\r\n  const api = {\r\n    fetchUsers: () => fetch('/users').then(res => res.json())\r\n  };\r\n  \r\n  return (\r\n    <ApiContext.Provider value={api}>\r\n      <UserList />\r\n    </ApiContext.Provider>\r\n  );\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Неправильное обновление контекста:</strong></p>\r\n        <pre><code>function App() {\r\n  const [user, setUser] = useState({ name: 'Alex' });\r\n  \r\n  // Плохо: новый объект при каждом рендере\r\n  return (\r\n    <UserContext.Provider value={{ user, setUser }}>\r\n      <Child />\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n\r\n// Лучше: мемоизировать значение\r\nconst value = useMemo(() => ({ user, setUser }), [user]);</code></pre>\r\n\r\n        <p><strong>2. Избыточное использование контекста:</strong></p>\r\n        <pre><code>// Не стоит использовать контекст для данных,\r\n// которые передаются только на 1-2 уровня вниз\r\n// Лучше использовать обычные props</code></pre>\r\n\r\n        <p><strong>3. Отсутствие проверки на существование контекста:</strong></p>\r\n        <pre><code>const theme = useContext(ThemeContext);\r\n// Может быть undefined, если компонент не обернут в Provider\r\n\r\n// Решение:\r\nconst theme = useContext(ThemeContext) ?? defaultTheme;</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Продвинутые техники\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Комбинированные провайдеры:</strong></p>\r\n        <pre><code>function AppProviders({ children }) {\r\n  return (\r\n    <ThemeProvider>\r\n      <AuthProvider>\r\n        <ApiProvider>\r\n          {children}\r\n        </ApiProvider>\r\n      </AuthProvider>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\n// Использование\r\n<AppProviders>\r\n  <App />\r\n</AppProviders></code></pre>\r\n\r\n        <p><strong>2. Селективный рендеринг с контекстом:</strong></p>\r\n        <pre><code>const UserContext = createContext();\r\n\r\nfunction UserProvider({ userId, children }) {\r\n  const [user, setUser] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    fetchUser(userId).then(setUser);\r\n  }, [userId]);\r\n  \r\n  if (!user) return <Loader />;\r\n  \r\n  return (\r\n    <UserContext.Provider value={user}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n}</code></pre>\r\n\r\n        <p><strong>3. Контекст с reducer:</strong></p>\r\n        <pre><code>const CartContext = createContext();\r\n\r\nfunction CartProvider({ children }) {\r\n  const [state, dispatch] = useReducer(cartReducer, initialState);\r\n  \r\n  const value = { state, dispatch };\r\n  \r\n  return (\r\n    <CartContext.Provider value={value}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Альтернативы и сравнения\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Когда использовать контекст, а когда другие решения:</strong></p>\r\n        \r\n        <table border=\"1\">\r\n          <tr>\r\n            <th>Решение</th>\r\n            <th>Когда использовать</th>\r\n            <th>Когда не использовать</th>\r\n          </tr>\r\n          <tr>\r\n            <td>useContext</td>\r\n            <td>Глобальные данные, доступные многим компонентам</td>\r\n            <td>Локальное состояние, редко меняющиеся данные</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Props drilling</td>\r\n            <td>Простая передача на 1-2 уровня</td>\r\n            <td>Глубокая иерархия компонентов</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Redux</td>\r\n            <td>Сложное глобальное состояние, devtools</td>\r\n            <td>Простые сценарии, небольшие приложения</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Component Composition</td>\r\n            <td>Переиспользуемые компоненты с поведением</td>\r\n            <td>Данные, нужные в разных частях приложения</td>\r\n          </tr>\r\n        </table>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const useEffect = {\r\n  id: 2542,\r\n  title: \"useEffect\",\r\n  children: [\r\n    {\r\n      title: \"Основы использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>useEffect</strong> — это хук для выполнения побочных эффектов в функциональных компонентах React.</p>\r\n        <pre><code>import { useEffect } from 'react';\r\n\r\nfunction Example() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  // Аналог componentDidMount и componentDidUpdate\r\n  useEffect(() => {\r\n    document.title = \\`Вы кликнули \\${count} раз\\`;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <p>Вы кликнули {count} раз</p>\r\n      <button onClick={() => setCount(count + 1)}>\r\n        Нажми меня\r\n      </button>\r\n    </div>\r\n  );\r\n}</code></pre>\r\n\r\n        <p><strong>Параметры:</strong></p>\r\n        <ul>\r\n          <li><code>effect</code>: функция, содержащая код эффекта.</li>\r\n          <li><code>dependencies</code>: массив зависимостей (опционально).</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Варианты использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Пустой массив зависимостей (аналог componentDidMount):</strong></p>\r\n        <pre><code>useEffect(() => {\r\n  console.log('Компонент смонтирован');\r\n  return () => console.log('Компонент размонтирован');\r\n}, []);</code></pre>\r\n\r\n        <p><strong>2. С указанием зависимостей (аналог componentDidUpdate):</strong></p>\r\n        <pre><code>useEffect(() => {\r\n  console.log('Значение count изменилось:', count);\r\n}, [count]);</code></pre>\r\n\r\n        <p><strong>3. Без массива зависимостей (выполняется при каждом рендере):</strong></p>\r\n        <pre><code>useEffect(() => {\r\n  console.log('Компонент обновился');\r\n});</code></pre>\r\n\r\n        <p><strong>4. Функция очистки (аналог componentWillUnmount):</strong></p>\r\n        <pre><code>useEffect(() => {\r\n  const timer = setInterval(() => {\r\n    console.log('Тик');\r\n  }, 1000);\r\n\r\n  return () => clearInterval(timer);\r\n}, []);</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Типичные сценарии применения\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Запросы к API:</strong></p>\r\n        <pre><code>useEffect(() => {\r\n  let ignore = false;\r\n  \r\n  async function fetchData() {\r\n    const response = await fetch('/api/data');\r\n    const data = await response.json();\r\n    if (!ignore) setData(data);\r\n  }\r\n\r\n  fetchData();\r\n  \r\n  return () => { ignore = true; };\r\n}, [query]);</code></pre>\r\n\r\n        <p><strong>2. Подписка на события:</strong></p>\r\n        <pre><code>useEffect(() => {\r\n  function handleResize() {\r\n    setWindowSize({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight\r\n    });\r\n  }\r\n\r\n  window.addEventListener('resize', handleResize);\r\n  return () => window.removeEventListener('resize', handleResize);\r\n}, []);</code></pre>\r\n\r\n        <p><strong>3. Интеграция с DOM:</strong></p>\r\n        <pre><code>useEffect(() => {\r\n  const element = document.getElementById('my-element');\r\n  element.classList.add('highlight');\r\n  \r\n  return () => {\r\n    element.classList.remove('highlight');\r\n  };\r\n}, [id]);</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Оптимизация производительности\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Правильный выбор зависимостей:</strong></p>\r\n        <pre><code>const [count, setCount] = useState(0);\r\nconst [query, setQuery] = useState('');\r\n\r\n// Плохо - эффект зависит от count, хотя использует только query\r\nuseEffect(() => {\r\n  search(query);\r\n}, [count, query]);\r\n\r\n// Лучше - указаны только реальные зависимости\r\nuseEffect(() => {\r\n  search(query);\r\n}, [query]);</code></pre>\r\n\r\n        <p><strong>2. Мемоизация функций:</strong></p>\r\n        <pre><code>const fetchData = useCallback(async () => {\r\n  const response = await fetch(\\`/api/data?query=\\${query}\\`);\r\n  // ...\r\n}, [query]);\r\n\r\nuseEffect(() => {\r\n  fetchData();\r\n}, [fetchData]);</code></pre>\r\n\r\n        <p><strong>3. Разделение эффектов:</strong></p>\r\n        <pre><code>// Плохо - один большой эффект\r\nuseEffect(() => {\r\n  document.title = \\`\\${count} кликов\\`;\r\n  localStorage.setItem('count', count);\r\n}, [count]);\r\n\r\n// Лучше - раздельные эффекты\r\nuseEffect(() => {\r\n  document.title = \\`\\${count} кликов\\`;\r\n}, [count]);\r\n\r\nuseEffect(() => {\r\n  localStorage.setItem('count', count);\r\n}, [count]);</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Типичные ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Бесконечные циклы:</strong></p>\r\n        <pre><code>const [data, setData] = useState(null);\r\n\r\n// Бесконечный цикл - эффект изменяет свою зависимость\r\nuseEffect(() => {\r\n  fetchData().then(data => setData(data));\r\n}, [data]);</code></pre>\r\n\r\n        <p><strong>2. Пропущенные зависимости:</strong></p>\r\n        <pre><code>const [count, setCount] = useState(0);\r\n\r\n// Пропущена зависимость increment\r\nconst increment = useCallback(() => {\r\n  setCount(c => c + 1);\r\n}, []);\r\n\r\nuseEffect(() => {\r\n  increment();\r\n}, []); // Должно быть [increment]</code></pre>\r\n\r\n        <p><strong>3. Утечка памяти:</strong></p>\r\n        <pre><code>useEffect(() => {\r\n  const timer = setInterval(() => {}, 1000);\r\n  // Забыли return () => clearInterval(timer);\r\n}, []);</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Продвинутые паттерны\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Кастомные хуки с эффектами:</strong></p>\r\n        <pre><code>function useWindowSize() {\r\n  const [size, setSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight\r\n  });\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n      });\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return size;\r\n}\r\n\r\n// Использование\r\nconst { width, height } = useWindowSize();</code></pre>\r\n\r\n        <p><strong>2. Управление последовательностью эффектов:</strong></p>\r\n        <pre><code>useEffect(() => {\r\n  // Эффект 1 - выполняется первым\r\n  return () => {\r\n    // Очистка 1 - выполняется последней\r\n  };\r\n}, []);\r\n\r\nuseEffect(() => {\r\n  // Эффект 2 - выполняется вторым\r\n  return () => {\r\n    // Очистка 2 - выполняется предпоследней\r\n  };\r\n}, []);</code></pre>\r\n\r\n        <p><strong>3. Использование ref для хранения значений:</strong></p>\r\n        <pre><code>function usePrevious(value) {\r\n  const ref = useRef();\r\n  \r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  \r\n  return ref.current;\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"TypeScript и useEffect\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Типизация асинхронных эффектов:</strong></p>\r\n        <pre><code>useEffect(() => {\r\n  let mounted = true;\r\n\r\n  async function fetchData() {\r\n    const response = await fetch<ApiResponse>('/api/data');\r\n    if (mounted) setData(response.data);\r\n  }\r\n\r\n  fetchData();\r\n\r\n  return () => {\r\n    mounted = false;\r\n  };\r\n}, []);</code></pre>\r\n\r\n        <p><strong>Типизация функций очистки:</strong></p>\r\n        <pre><code>useEffect(() => {\r\n  const timer: NodeJS.Timeout = setInterval(() => {}, 1000);\r\n  \r\n  return () => {\r\n    clearInterval(timer);\r\n  };\r\n}, []);</code></pre>\r\n\r\n        <p><strong>Типизация сложных зависимостей:</strong></p>\r\n        <pre><code>interface User {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\nconst [user, setUser] = useState<User | null>(null);\r\n\r\nuseEffect(() => {\r\n  if (user) {\r\n    console.log(user.name); // Тип User гарантирован\r\n  }\r\n}, [user]);</code></pre>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const useMemo = {\r\n  id: 2546,\r\n  title: \"useMemo\",\r\n  children: [\r\n    {\r\n      title: \"Основы использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>useMemo</strong> — хук для мемоизации (кэширования) вычислений между рендерами.</p>\r\n        \r\n        <pre><code>import { useMemo } from 'react';\r\n\r\nfunction Component({ items, filter }) {\r\n  // Вычисляемое значение будет кэшировано до изменения зависимостей\r\n  const filteredItems = useMemo(() => {\r\n    return items.filter(item => item.includes(filter));\r\n  }, [items, filter]);\r\n\r\n  return &lt;List items={filteredItems} /&gt;;\r\n}</code></pre>\r\n\r\n        <p><strong>Параметры:</strong></p>\r\n        <ul>\r\n          <li><code>create</code> — функция вычисления значения</li>\r\n          <li><code>dependencies</code> — массив зависимостей</li>\r\n        </ul>\r\n      `\r\n    },\r\n    {\r\n      title: \"Когда использовать\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Тяжёлые вычисления:</strong></p>\r\n        <pre><code>const sortedList = useMemo(() => {\r\n  return hugeList.sort((a, b) => a.value - b.value);\r\n}, [hugeList]);</code></pre>\r\n\r\n        <p><strong>2. Оптимизация дочерних компонентов:</strong></p>\r\n        <pre><code>const childProps = useMemo(() => ({ \r\n  onClick: () => {...}, \r\n  data: processedData \r\n}), [processedData]);</code></pre>\r\n\r\n        <p><strong>3. Стабилизация ссылок:</strong></p>\r\n        <pre><code>const config = useMemo(() => ({\r\n  duration: 300,\r\n  easing: 'ease-in-out'\r\n}), []); // Пустой массив - конфиг никогда не изменится</code></pre>\r\n\r\n        <p><strong>Не стоит использовать:</strong></p>\r\n        <ul>\r\n          <li>Для простых вычислений (затраты на мемоизацию превысят выгоду)</li>\r\n          <li>Когда зависимости меняются при каждом рендере</li>\r\n        </ul>\r\n      `\r\n    },\r\n    {\r\n      title: \"Типизация с TypeScript\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Явное указание типа:</strong></p>\r\n        <pre><code>const value = useMemo&lt;number&gt;(() => {\r\n  return computeExpensiveValue(a, b);\r\n}, [a, b]);</code></pre>\r\n\r\n        <p><strong>Автовывод типа:</strong></p>\r\n        <pre><code>const user = useMemo(() => ({\r\n  name: 'Alex',\r\n  age: 30\r\n}), []); // Тип: { name: string; age: number }</code></pre>\r\n\r\n        <p><strong>Сложные вычисления:</strong></p>\r\n        <pre><code>interface Statistics {\r\n  mean: number;\r\n  median: number;\r\n  mode: number[];\r\n}\r\n\r\nconst stats = useMemo&lt;Statistics&gt;(() => {\r\n  return calculateStats(largeDataset);\r\n}, [largeDataset]);</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Оптимизация производительности\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Правильный выбор зависимостей:</strong></p>\r\n        <pre><code>// Плохо - лишняя зависимость (theme не используется в вычислениях)\r\nconst optimizedValue = useMemo(() => compute(a, b), [a, b, theme]);\r\n\r\n// Хорошо - только реальные зависимости\r\nconst optimizedValue = useMemo(() => compute(a, b), [a, b]);</code></pre>\r\n\r\n        <p><strong>2. Избегание избыточной мемоизации:</strong></p>\r\n        <pre><code>// Неоправданное использование - простое сложение\r\nconst sum = useMemo(() => a + b, [a, b]);\r\n\r\n// Лучше - вычислять напрямую\r\nconst sum = a + b;</code></pre>\r\n\r\n        <p><strong>3. Комбинирование с useCallback:</strong></p>\r\n        <pre><code>const childProps = useMemo(() => ({\r\n  onClick: useCallback(() => {...}, []),\r\n  data: processedData\r\n}), [processedData]);</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Практические примеры\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Фильтрация и сортировка:</strong></p>\r\n        <pre><code>function ProductList({ products, category, sortBy }) {\r\n  const visibleProducts = useMemo(() => {\r\n    return products\r\n      .filter(p => p.category === category)\r\n      .sort((a, b) => a[sortBy] - b[sortBy]);\r\n  }, [products, category, sortBy]);\r\n\r\n  return &lt;List items={visibleProducts} /&gt;;\r\n}</code></pre>\r\n\r\n        <p><strong>2. Форматирование данных:</strong></p>\r\n        <pre><code>const formattedDate = useMemo(() => {\r\n  return new Date(timestamp).toLocaleDateString('ru-RU', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  });\r\n}, [timestamp]);</code></pre>\r\n\r\n        <p><strong>3. Мемоизация компонентов:</strong></p>\r\n        <pre><code>const memoizedComponent = useMemo(() => {\r\n  return &lt;ExpensiveComponent data={data} /&gt;;\r\n}, [data]);</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Распространённые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Путаница с useEffect:</strong></p>\r\n        <pre><code>// Неправильно - useMemo не для побочных эффектов\r\nuseMemo(() => {\r\n  document.title = title;\r\n}, [title]);\r\n\r\n// Правильно - использовать useEffect\r\nuseEffect(() => {\r\n  document.title = title;\r\n}, [title]);</code></pre>\r\n\r\n        <p><strong>2. Изменение данных в useMemo:</strong></p>\r\n        <pre><code>// Плохо - мутация данных\r\nconst transformed = useMemo(() => {\r\n  items[0].value = 100; // Прямая мутация!\r\n  return items;\r\n}, [items]);\r\n\r\n// Хорошо - возвращаем новый объект\r\nconst transformed = useMemo(() => {\r\n  return items.map((item, i) => \r\n    i === 0 ? { ...item, value: 100 } : item\r\n  );\r\n}, [items]);</code></pre>\r\n\r\n        <p><strong>3. Пропущенные зависимости:</strong></p>\r\n        <pre><code>const result = useMemo(() => {\r\n  return a + b; // Пропущена зависимость b\r\n}, [a]);</code></pre>\r\n      `\r\n    },\r\n    {\r\n      title: \"Сравнение с другими хуками\",\r\n      type: \"text\",\r\n      description: `\r\n        <table border=\"1\">\r\n          <tr>\r\n            <th>Хук</th>\r\n            <th>Назначение</th>\r\n            <th>Когда использовать</th>\r\n          </tr>\r\n          <tr>\r\n            <td><code>useMemo</code></td>\r\n            <td>Мемоизация значений</td>\r\n            <td>Тяжёлые вычисления, стабилизация ссылок</td>\r\n          </tr>\r\n          <tr>\r\n            <td><code>useCallback</code></td>\r\n            <td>Мемоизация функций</td>\r\n            <td>Передача колбэков дочерним компонентам</td>\r\n          </tr>\r\n          <tr>\r\n            <td><code>useEffect</code></td>\r\n            <td>Побочные эффекты</td>\r\n            <td>Запросы данных, подписки, ручное управление DOM</td>\r\n          </tr>\r\n          <tr>\r\n            <td><code>useRef</code></td>\r\n            <td>Ссылки на значения</td>\r\n            <td>Хранение мутабельных значений между рендерами</td>\r\n          </tr>\r\n        </table>\r\n      `\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Измеряйте производительность</strong> перед оптимизацией</li>\r\n          <li><strong>Используйте React DevTools</strong> для проверки лишних ререндеров</li>\r\n          <li><strong>Разделяйте сложные вычисления</strong> на несколько useMemo</li>\r\n          <li><strong>Избегайте вложенных useMemo</strong> — это усложняет код</li>\r\n          <li><strong>Документируйте</strong> причины использования useMemo</li>\r\n        </ul>\r\n\r\n        <p><strong>Пример профилирования:</strong></p>\r\n        <pre><code>console.time('filter');\r\nconst visibleItems = useMemo(() => {\r\n  return items.filter(expensiveFilter);\r\n}, [items]);\r\nconsole.timeEnd('filter'); // Замер времени выполнения</code></pre>\r\n      `\r\n    }\r\n  ]\r\n};","export const useReducer = {\r\n  id: 2544,\r\n  title: \"useReducer\",\r\n  children: [\r\n    {\r\n      title: \"Что такое useReducer?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>useReducer</strong> — это хук в React, который позволяет управлять состоянием компонента с помощью редьюсера. Он идеально подходит для управления сложным состоянием или когда состояние зависит от предыдущего значения.</p>\r\n        <p>Хук принимает два аргумента:</p>\r\n        <ul>\r\n          <li><strong>reducer</strong>: функция, которая определяет, как состояние должно обновляться на основе действия (action).</li>\r\n          <li><strong>initialState</strong>: начальное значение состояния.</li>\r\n        </ul>\r\n        <p>Возвращает текущее состояние и функцию <code>dispatch</code>, которая используется для отправки действий (actions).</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Синтаксис\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Синтаксис использования useReducer:</strong></p>\r\n      `,\r\n      code: `\r\nconst [state, dispatch] = useReducer(reducer, initialState);\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример простого счетчика с использованием useReducer:</strong></p>\r\n      `,\r\n      code: `\r\nimport React, { useReducer } from 'react';\r\n\r\n// Начальное состояние\r\nconst initialState = { count: 0 };\r\n\r\n// Редьюсер\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    case 'decrement':\r\n      return { count: state.count - 1 };\r\n    default:\r\n      throw new Error('Unknown action');\r\n  }\r\n}\r\n\r\nfunction Counter() {\r\n  // Использование useReducer\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {state.count}</p>\r\n      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\r\n      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Counter;\r\n      `,\r\n    },\r\n    {\r\n      title: \"Преимущества useReducer\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Управление сложным состоянием:</strong> <code>useReducer</code> позволяет управлять состоянием, когда оно зависит от предыдущего значения.</li>\r\n          <li><strong>Чистота кода:</strong> Логика обновления состояния сосредоточена в редьюсере, что делает код более организованным и легким для тестирования.</li>\r\n          <li><strong>Поддержка нескольких значений:</strong> Можно легко управлять состоянием, состоящим из нескольких значений (например, объектов).</li>\r\n          <li><strong>Масштабируемость:</strong> Подходит для больших приложений, где <code>useState</code> может стать громоздким.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Использование с контекстом\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>useReducer</strong> можно комбинировать с <strong>useContext</strong> для глобального управления состоянием в приложении.</p>\r\n        <p>Это позволяет создать глобальный state management, который проще поддерживать и расширять.</p>\r\n      `,\r\n      code: `\r\nimport React, { createContext, useReducer, useContext } from 'react';\r\n\r\n// Создание контекста\r\nconst StateContext = createContext();\r\n\r\n// Начальное состояние\r\nconst initialState = { count: 0 };\r\n\r\n// Редьюсер\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    case 'decrement':\r\n      return { count: state.count - 1 };\r\n    default:\r\n      throw new Error('Unknown action');\r\n  }\r\n}\r\n\r\n// Провайдер состояния\r\nexport function StateProvider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  \r\n  return (\r\n    <StateContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n}\r\n\r\n// Хук для использования контекста\r\nexport function useStateContext() {\r\n  return useContext(StateContext);\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Оптимизация производительности\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Мемоизация редьюсера:</strong></p>\r\n        <pre><code>const memoizedReducer = useCallback((state, action) => {\r\n  switch (action.type) {\r\n    case 'increment': return { ...state, count: state.count + 1 };\r\n    case 'decrement': return { ...state, count: state.count - 1 };\r\n    default: throw new Error();\r\n  }\r\n}, []);</code></pre>\r\n\r\n        <p><strong>2. Ленивая инициализация состояния:</strong></p>\r\n        <pre><code>function init(initialCount) {\r\n  return { count: initialCount };\r\n}\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'reset':\r\n      return init(action.payload);\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    case 'decrement':\r\n      return { count: state.count - 1 };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nfunction Counter({ initialCount }) {\r\n  const [state, dispatch] = useReducer(reducer, initialCount, init);\r\n  \r\n  return (\r\n    <div>\r\n      Count: {state.count}\r\n      <button onClick={() => dispatch({ type: 'reset', payload: initialCount })}>\r\n        Reset\r\n      </button>\r\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\r\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\r\n    </div>\r\n  );\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Типичные ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Забытый break в switch:</strong></p>\r\n        <pre><code>function reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    case 'decrement':\r\n      return { count: state.count - 1 }; // Без break могут возникнуть ошибки\r\n    default:\r\n      throw new Error();\r\n  }\r\n}</code></pre>\r\n\r\n        <p><strong>2. Прямая мутация состояния:</strong></p>\r\n        <pre><code>function reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      state.count++; // Неправильно - состояние мутируется напрямую\r\n      return state;\r\n    default:\r\n      throw new Error();\r\n  }\r\n}</code></pre>\r\n\r\n        <p><strong>3. Отсутствие обработки неизвестных действий:</strong></p>\r\n        <pre><code>function reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    // Нет обработки неизвестных действий\r\n  }\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"TypeScript и useReducer\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Типизация состояния и действий:</strong></p>\r\n        <pre><code>type State = {\r\n  count: number;\r\n};\r\n\r\ntype Action =\r\n  | { type: 'increment' }\r\n  | { type: 'decrement' }\r\n  | { type: 'reset'; payload: number };\r\n\r\nfunction reducer(state: State, action: Action): State {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    case 'decrement':\r\n      return { count: state.count - 1 };\r\n    case 'reset':\r\n      return { count: action.payload };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nconst [state, dispatch] = useReducer(reducer, { count: 0 });\r\n      </code></pre>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const useRef = {\r\n  id: 2545,\r\n  title: \"Хук useRef\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong><code>useRef</code></strong> — это хук для работы с мутабельными значениями и DOM-элементами. Он возвращает объект с полем <code>.current</code>, которое можно изменять без вызова ререндера.</p>\r\n        <p><strong>Основные кейсы:</strong></p>\r\n        <ul>\r\n          <li>Доступ к DOM (например, <code>input.focus()</code>).</li>\r\n          <li>Хранение изменяемых значений (таймеры, предыдущие пропсы).</li>\r\n          <li>Интеграция с не-React библиотеками (Canvas, D3).</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Синтаксис\",\r\n      type: \"text\",\r\n      description: `\r\n        <pre><code>import { useRef } from 'react';\r\n\r\nfunction Component() {\r\n  const ref = useRef(initialValue);\r\n  // initialValue: любое начальное значение (null, 0, [] и т.д.)\r\n  console.log(ref.current); // Доступ к значению\r\n\r\n  return <div ref={ref} />; // Привязка к DOM\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример: фокус на input\",\r\n      type: \"text\",\r\n      description: `\r\n        <pre><code>function LoginForm() {\r\n  const inputRef = useRef(null);\r\n\r\n  const handleClick = () => {\r\n    inputRef.current.focus(); // Управление DOM\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input ref={inputRef} placeholder=\"Логин\" />\r\n      <button onClick={handleClick}>Фокус на поле</button>\r\n    </>\r\n  );\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Хранение мутабельных данных\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Ref-ы полезны для значений, которые не должны триггерить ререндер:</p>\r\n        <pre><code>function Counter() {\r\n  const count = useRef(0); // Не вызывает ререндер!\r\n\r\n  const increment = () => {\r\n    count.current += 1;\r\n    console.log('Текущее значение:', count.current);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <p>Значение в консоли: проверьте DevTools</p>\r\n      <button onClick={increment}>Увеличить</button>\r\n    </>\r\n  );\r\n}</code></pre>\r\n        <p><strong>Важно:</strong> Для отображения в UI используйте <code>useState</code>!</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Разница с useState\",\r\n      type: \"text\",\r\n      description: `\r\n        <table border=\"1\">\r\n          <tr><th><code>useRef</code></th><th><code>useState</code></th></tr>\r\n          <tr><td>Изменение <code>.current</code> не вызывает ререндер</td><td>Ререндер при изменении</td></tr>\r\n          <tr><td>Значение сохраняется между перерисовками</td><td>Сохраняется между перерисовками</td></tr>\r\n          <tr><td>Используется для DOM, таймеров, интеграций</td><td>Для данных, влияющих на UI</td></tr>\r\n        </table>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Очистка refs:</strong> Обнуляйте значения в <code>useEffect</code> при анмаунте:</li>\r\n          <pre><code>useEffect(() => {\r\n  const timerId = setInterval(() => {}, 1000);\r\n  timerRef.current = timerId;\r\n  return () => clearInterval(timerRef.current);\r\n}, []);</code></pre>\r\n\r\n          <li><strong>Не используйте в рендере:</strong> Изменяйте <code>.current</code> только в эффектах или обработчиках событий.</li>\r\n\r\n          <li><strong>ForwardRef:</strong> Для передачи ref в кастомные компоненты:</li>\r\n          <pre><code>const CustomInput = forwardRef((props, ref) => (\r\n  <input ref={ref} {...props} />\r\n));</code></pre>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Продвинутые паттерны\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Использование для сохранения предыдущих значений:</strong></p>\r\n        <pre><code>function usePrevious(value) {\r\n  const ref = useRef();\r\n  \r\n  useEffect(() => {\r\n    ref.current = value; // Сохраняем предыдущее значение\r\n  }, [value]);\r\n  \r\n  return ref.current;\r\n}\r\n\r\n// Использование:\r\nconst prevCount = usePrevious(count);\r\nconsole.log('Текущее:', count, 'Предыдущее:', prevCount);\r\n</code></pre>\r\n\r\n        <p><strong>2. Интеграция с Canvas:</strong></p>\r\n        <pre><code>function CanvasComponent() {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    // Рисуем круг\r\n    ctx.beginPath();\r\n    ctx.arc(75, 75, 50, 0, Math.PI * 2, true);\r\n    ctx.stroke();\r\n  }, []);\r\n\r\n  return <canvas ref={canvasRef} width=\"150\" height=\"150\" />;\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"TypeScript и useRef\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Типизация useRef:</strong></p>\r\n        <pre><code>const inputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n// Использование\r\nif (inputRef.current) {\r\n  inputRef.current.focus();\r\n}</code></pre>\r\n\r\n        <p><strong>Типизация для мутабельных данных:</strong></p>\r\n        <pre><code>const count = useRef<number>(0);\r\n\r\ncount.current += 1; // Без проблем\r\nconsole.log(count.current);</code></pre>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const useState = {\r\n  id: 2541,\r\n  title: \"useState\",\r\n  children: [\r\n    {\r\n      title: \"Основы использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>useState</strong> — это хук для управления состоянием в функциональных компонентах React.</p>\r\n        <pre><code>import { useState } from 'react';\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n  \r\n  return (\r\n    <div>\r\n      <p>Вы кликнули {count} раз</p>\r\n      <button onClick={() => setCount(count + 1)}>\r\n        Нажми меня\r\n      </button>\r\n    </div>\r\n  );\r\n}</code></pre>\r\n        <p><strong>Параметры:</strong></p>\r\n        <ul>\r\n          <li><code>initialState</code>: начальное значение состояния.</li>\r\n        </ul>\r\n        <p><strong>Возвращает:</strong></p>\r\n        <ul>\r\n          <li>Текущее значение состояния.</li>\r\n          <li>Функцию для его обновления.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Особенности работы\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Асинхронность обновлений:</strong></p>\r\n        <pre><code>const [value, setValue] = useState(0);\r\n\r\n// Неправильно - несколько вызовов подряд\r\nconst handleClick = () => {\r\n  setValue(value + 1);\r\n  setValue(value + 1); // Будет использовано старое значение\r\n};\r\n\r\n// Правильно - функциональное обновление\r\nconst handleClick = () => {\r\n  setValue(prev => prev + 1);\r\n  setValue(prev => prev + 1);\r\n};</code></pre>\r\n\r\n        <p><strong>2. Ленивая инициализация:</strong></p>\r\n        <pre><code>// Выполнится только при первом рендере\r\nconst [state, setState] = useState(() => {\r\n  const initialState = heavyComputation(props);\r\n  return initialState;\r\n});</code></pre>\r\n\r\n        <p><strong>3. Правила хуков:</strong></p>\r\n        <ul>\r\n          <li>Вызывайте хуки только на верхнем уровне компонента.</li>\r\n          <li>Не используйте в условиях и циклах.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Типизация с TypeScript\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Явное указание типа:</strong></p>\r\n        <pre><code>const [user, setUser] = useState<User | null>(null);\r\n\r\ninterface User {\r\n  name: string;\r\n  age: number;\r\n}</code></pre>\r\n\r\n        <p><strong>Автовывод типа:</strong></p>\r\n        <pre><code>const [count, setCount] = useState(0); // Тип number\r\nconst [items, setItems] = useState<string[]>([]); // Массив строк</code></pre>\r\n\r\n        <p><strong>Сложные состояния:</strong></p>\r\n        <pre><code>type FormState = {\r\n  username: string;\r\n  password: string;\r\n  remember: boolean;\r\n};\r\n\r\nconst [form, setForm] = useState<FormState>({\r\n  username: '',\r\n  password: '',\r\n  remember: false\r\n});</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Работа с объектами и массивами\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Обновление объектов:</strong></p>\r\n        <pre><code>const [user, setUser] = useState({ name: '', age: 0 });\r\n\r\n// Правильное обновление\r\nsetUser(prev => ({ ...prev, age: 25 }));\r\n\r\n// Неправильно - потеря свойства name\r\nsetUser({ age: 25 });</code></pre>\r\n\r\n        <p><strong>Работа с массивами:</strong></p>\r\n        <pre><code>const [items, setItems] = useState([1, 2, 3]);\r\n\r\n// Добавление\r\nsetItems(prev => [...prev, 4]);\r\n\r\n// Удаление\r\nsetItems(prev => prev.filter(item => item !== 2));\r\n\r\n// Обновление\r\nsetItems(prev => prev.map(item => item === 1 ? 10 : item));</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Продвинутые паттерны\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Кастомный хук для формы:</strong></p>\r\n        <pre><code>function useForm(initialState) {\r\n  const [values, setValues] = useState(initialState);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setValues(prev => ({\r\n      ...prev,\r\n      [name]: type === 'checkbox' ? checked : value\r\n    }));\r\n  };\r\n\r\n  return [values, handleChange];\r\n}\r\n\r\n// Использование\r\nconst [form, handleChange] = useForm({ email: '', agree: false });</code></pre>\r\n\r\n        <p><strong>2. Состояние с localStorage:</strong></p>\r\n        <pre><code>function usePersistedState(key, defaultValue) {\r\n  const [state, setState] = useState(() => {\r\n    const saved = localStorage.getItem(key);\r\n    return saved !== null ? JSON.parse(saved) : defaultValue;\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(key, JSON.stringify(state));\r\n  }, [key, state]);\r\n\r\n  return [state, setState];\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Оптимизация производительности\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Разделение состояния:</strong></p>\r\n        <pre><code>// Плохо - один большой объект\r\nconst [state, setState] = useState({\r\n  user: null,\r\n  loading: false,\r\n  error: null\r\n});\r\n\r\n// Лучше - раздельные состояния\r\nconst [user, setUser] = useState(null);\r\nconst [loading, setLoading] = useState(false);\r\nconst [error, setError] = useState(null);</code></pre>\r\n\r\n        <p><strong>2. Мемоизация функций обновления:</strong></p>\r\n        <pre><code>const increment = useCallback(() => {\r\n  setCount(prev => prev + 1);\r\n}, []);</code></pre>\r\n\r\n        <p><strong>3. Батчинг обновлений:</strong></p>\r\n        <pre><code>// React автоматически батчит синхронные обновления\r\nconst handleClick = () => {\r\n  setCount(c => c + 1);\r\n  setName('New Name');\r\n  // Только один ре-рендер\r\n};</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Прямая мутация состояния:</strong></p>\r\n        <pre><code>const [user, setUser] = useState({ name: 'Alex' });\r\n\r\n// Неправильно\r\nuser.name = 'John';\r\nsetUser(user); // Не сработает!\r\n\r\n// Правильно\r\nsetUser({ ...user, name: 'John' });</code></pre>\r\n\r\n        <p><strong>2. Потеря предыдущего состояния:</strong></p>\r\n        <pre><code>const [items, setItems] = useState(['a', 'b']);\r\n\r\n// Неправильно (зависит от предыдущего состояния)\r\nconst addItem = (newItem) => {\r\n  setItems([...items, newItem]);\r\n};\r\n\r\n// Правильно (функциональное обновление)\r\nconst addItem = (newItem) => {\r\n  setItems(prev => [...prev, newItem]);\r\n};</code></pre>\r\n\r\n        <p><strong>3. Использование для производных данных:</strong></p>\r\n        <pre><code>const [user, setUser] = useState({ firstName: 'John', lastName: 'Doe' });\r\n// Плохо - дублирование данных\r\nconst [fullName, setFullName] = useState('John Doe');\r\n\r\n// Лучше - вычислять при рендере\r\nconst fullName = \\`\\${user.firstName} \\${user.lastName}\\`;</code></pre>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const useImperativeHandle = {\r\n  id: 2572,\r\n  title: \"useImperativeHandle\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>useImperativeHandle</strong> — это хук, который позволяет настраивать значение, предоставляемое через <code>ref</code>. По умолчанию <code>ref</code> предоставляет доступ к DOM-элементу или экземпляру компонента, но с помощью <code>useImperativeHandle</code> можно ограничить или расширить доступные методы и свойства.</p>\r\n        <p><strong>Основные кейсы:</strong></p>\r\n        <ul>\r\n          <li>Ограничение доступа к внутренним методам компонента.</li>\r\n          <li>Предоставление пользовательских методов через <code>ref</code>.</li>\r\n          <li>Интеграция с не-React библиотеками.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Синтаксис\",\r\n      type: \"text\",\r\n      description: `\r\n        <pre><code>import { useRef, useImperativeHandle, forwardRef } from 'react';\r\n\r\nfunction ChildComponent(props, ref) {\r\n  useImperativeHandle(ref, () => ({\r\n    customMethod() {\r\n      console.log('Custom method called');\r\n    },\r\n    anotherMethod() {\r\n      console.log('Another method called');\r\n    }\r\n  }));\r\n\r\n  return <div>Child Component</div>;\r\n}\r\n\r\nconst ForwardedChild = forwardRef(ChildComponent);\r\n\r\nfunction ParentComponent() {\r\n  const childRef = useRef();\r\n\r\n  const handleClick = () => {\r\n    childRef.current.customMethod(); // Вызов пользовательского метода\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ForwardedChild ref={childRef} />\r\n      <button onClick={handleClick}>Call Custom Method</button>\r\n    </>\r\n  );\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример: управление фокусом в кастомном компоненте:</strong></p>\r\n      `,\r\n      code: `\r\nimport React, { useRef, useImperativeHandle, forwardRef } from 'react';\r\n\r\n// Кастомный компонент с управлением фокусом\r\nconst TextInput = forwardRef((props, ref) => {\r\n  const inputRef = useRef();\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    focus: () => {\r\n      inputRef.current.focus();\r\n    },\r\n    clear: () => {\r\n      inputRef.current.value = '';\r\n    }\r\n  }));\r\n\r\n  return <input ref={inputRef} {...props} />;\r\n});\r\n\r\nfunction App() {\r\n  const textInputRef = useRef();\r\n\r\n  const handleFocus = () => {\r\n    textInputRef.current.focus(); // Управление фокусом\r\n  };\r\n\r\n  const handleClear = () => {\r\n    textInputRef.current.clear(); // Очистка поля\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TextInput ref={textInputRef} placeholder=\"Введите текст\" />\r\n      <button onClick={handleFocus}>Фокус</button>\r\n      <button onClick={handleClear}>Очистить</button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n      `,\r\n    },\r\n    {\r\n      title: \"Преимущества useImperativeHandle\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Контроль над доступными методами:</strong> Можно ограничить или расширить функциональность, предоставляемую через <code>ref</code>.</li>\r\n          <li><strong>Инкапсуляция логики:</strong> Внутренняя реализация компонента остается скрытой для родительского компонента.</li>\r\n          <li><strong>Гибкость:</strong> Позволяет создавать сложные интерфейсы взаимодействия между компонентами.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Используйте только при необходимости:</strong> <code>useImperativeHandle</code> следует использовать только в тех случаях, когда нельзя обойтись без <code>ref</code>.</li>\r\n          <li><strong>Ограничьте доступ:</strong> Предоставляйте только те методы, которые действительно нужны родительскому компоненту.</li>\r\n          <li><strong>Комбинируйте с forwardRef:</strong> <code>useImperativeHandle</code> работает только в сочетании с <code>forwardRef</code>.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Типизация с TypeScript\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Типизация для useImperativeHandle:</strong></p>\r\n        <pre><code>interface TextInputHandles {\r\n  focus: () => void;\r\n  clear: () => void;\r\n}\r\n\r\nconst TextInput = forwardRef<TextInputHandles, TextInputProps>((props, ref) => {\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    focus: () => {\r\n      if (inputRef.current) inputRef.current.focus();\r\n    },\r\n    clear: () => {\r\n      if (inputRef.current) inputRef.current.value = '';\r\n    }\r\n  }));\r\n\r\n  return <input ref={inputRef} {...props} />;\r\n});</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Избыточное использование:</strong></p>\r\n        <pre><code>// Не используйте useImperativeHandle там, где можно обойтись props\r\n// Лучше передавать данные через props и callback'и</code></pre>\r\n\r\n        <p><strong>2. Отсутствие forwardRef:</strong></p>\r\n        <pre><code>// useImperativeHandle требует forwardRef\r\n// Без forwardRef ref не будет передан в компонент</code></pre>\r\n\r\n        <p><strong>3. Неправильная типизация:</strong></p>\r\n        <pre><code>// Убедитесь, что типизированы все методы, предоставляемые через ref\r\ninterface Handles {\r\n  focus: () => void;\r\n  clear: () => void;\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Продвинутые паттерны\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Комбинирование с useReducer:</strong></p>\r\n        <pre><code>const FormComponent = forwardRef((props, ref) => {\r\n  const [state, dispatch] = useReducer(formReducer, initialState);\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    submit: () => {\r\n      dispatch({ type: 'submit' });\r\n    },\r\n    reset: () => {\r\n      dispatch({ type: 'reset' });\r\n    }\r\n  }));\r\n\r\n  return <form>...</form>;\r\n});</code></pre>\r\n\r\n        <p><strong>2. Интеграция с сторонними библиотеками:</strong></p>\r\n        <pre><code>// Пример интеграции с библиотекой для работы с картами\r\nconst MapComponent = forwardRef((props, ref) => {\r\n  const mapRef = useRef();\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    zoomIn: () => {\r\n      mapRef.current.zoomIn();\r\n    },\r\n    zoomOut: () => {\r\n      mapRef.current.zoomOut();\r\n    }\r\n  }));\r\n\r\n  return <div ref={mapRef} />;\r\n});</code></pre>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const useLayoutEffect = {\r\n  id: 2573,\r\n  title: \"useLayoutEffect\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>useLayoutEffect</strong> — это хук, который работает аналогично <code>useEffect</code>, но выполняется синхронно после рендера, до того как браузер отрисует изменения. Это делает его идеальным для операций, связанных с измерением DOM (например, получение размеров элемента).</p>\r\n        <p><strong>Основные отличия от useEffect:</strong></p>\r\n        <ul>\r\n          <li>Выполняется синхронно перед отрисовкой.</li>\r\n          <li>Используется для операций, которые должны быть завершены до того, как пользователь увидит результат.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Синтаксис\",\r\n      type: \"text\",\r\n      description: `\r\n        <pre><code>import { useLayoutEffect } from 'react';\r\n\r\nfunction Component() {\r\n  useLayoutEffect(() => {\r\n    // Сторонний эффект (например, измерение DOM)\r\n    return () => {\r\n      // Очистка (необязательно)\r\n    };\r\n  }, [dependencies]);\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример: измерение размера элемента:</strong></p>\r\n      `,\r\n      code: `\r\nimport React, { useRef, useLayoutEffect, useState } from 'react';\r\n\r\nfunction MeasureExample() {\r\n  const [size, setSize] = useState({ width: 0, height: 0 });\r\n  const ref = useRef(null);\r\n\r\n  useLayoutEffect(() => {\r\n    if (ref.current) {\r\n      const { width, height } = ref.current.getBoundingClientRect();\r\n      setSize({ width, height });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div ref={ref} style={{ width: '200px', height: '100px', border: '1px solid black' }}>\r\n        Измеряемый элемент\r\n      </div>\r\n      <p>Ширина: {size.width}px</p>\r\n      <p>Высота: {size.height}px</p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MeasureExample;\r\n      `,\r\n    },\r\n    {\r\n      title: \"Когда использовать?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Измерение DOM:</strong></p>\r\n        <pre><code>// Получение размеров элемента\r\nuseLayoutEffect(() => {\r\n  if (ref.current) {\r\n    const rect = ref.current.getBoundingClientRect();\r\n    console.log(rect.width, rect.height);\r\n  }\r\n}, []);</code></pre>\r\n\r\n        <p><strong>2. Корректировка положения элементов:</strong></p>\r\n        <pre><code>// Корректировка положения tooltip'а\r\nuseLayoutEffect(() => {\r\n  if (tooltipRef.current && triggerRef.current) {\r\n    const triggerRect = triggerRef.current.getBoundingClientRect();\r\n    tooltipRef.current.style.top = \\`\\${triggerRect.bottom + window.scrollY}px\\`;\r\n    tooltipRef.current.style.left = \\`\\${triggerRect.left + window.scrollX}px\\`;\r\n  }\r\n}, [tooltipRef, triggerRef]);</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Разница с useEffect\",\r\n      type: \"text\",\r\n      description: `\r\n        <table border=\"1\">\r\n          <tr>\r\n            <th>Хук</th>\r\n            <th>Время выполнения</th>\r\n            <th>Применение</th>\r\n          </tr>\r\n          <tr>\r\n            <td>useEffect</td>\r\n            <td>После отрисовки (асинхронно)</td>\r\n            <td>Побочные эффекты, не требующие точных измерений DOM</td>\r\n          </tr>\r\n          <tr>\r\n            <td>useLayoutEffect</td>\r\n            <td>Перед отрисовкой (синхронно)</td>\r\n            <td>Измерения DOM, корректировка положения элементов</td>\r\n          </tr>\r\n        </table>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Используйте только при необходимости:</strong> <code>useLayoutEffect</code> блокирует отрисовку, поэтому его следует использовать только в тех случаях, когда нельзя обойтись <code>useEffect</code>.</li>\r\n          <li><strong>Минимизируйте зависимости:</strong> Чем меньше зависимостей, тем реже будет вызываться эффект.</li>\r\n          <li><strong>Тестируйте производительность:</strong> Если эффект выполняется слишком долго, это может привести к задержкам в UI.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Использование там, где достаточно useEffect:</strong></p>\r\n        <pre><code>// Плохо: использование useLayoutEffect для простых побочных эффектов\r\nuseLayoutEffect(() => {\r\n  console.log('Эффект выполнен');\r\n}, []);\r\n\r\n// Лучше: используйте useEffect\r\nuseEffect(() => {\r\n  console.log('Эффект выполнен');\r\n}, []);</code></pre>\r\n\r\n        <p><strong>2. Забытая очистка:</strong></p>\r\n        <pre><code>// Всегда добавляйте функцию очистки, если она нужна\r\nuseLayoutEffect(() => {\r\n  const handler = () => console.log('Resize');\r\n  window.addEventListener('resize', handler);\r\n  return () => window.removeEventListener('resize', handler); // Очистка\r\n}, []);</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"TypeScript и useLayoutEffect\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Типизация для useLayoutEffect:</strong></p>\r\n        <pre><code>import { useLayoutEffect } from 'react';\r\n\r\nfunction Component() {\r\n  useLayoutEffect(() => {\r\n    const element = document.getElementById('my-element') as HTMLElement | null;\r\n    if (element) {\r\n      console.log(element.offsetWidth);\r\n    }\r\n  }, []);\r\n}</code></pre>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const useDebugValue = {\r\n  id: 2574,\r\n  title: \"useDebugValue\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>useDebugValue</strong> — это хук, который позволяет добавлять метки в инструменты разработчика React (React DevTools) для пользовательских хуков. Это помогает легче отслеживать состояние и значения, возвращаемые кастомными хуками.</p>\r\n        <p><strong>Основные кейсы:</strong></p>\r\n        <ul>\r\n          <li>Отображение текущего состояния пользовательского хука.</li>\r\n          <li>Добавление меток для сложных данных (например, объектов).</li>\r\n          <li>Улучшение читаемости в React DevTools.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Синтаксис\",\r\n      type: \"text\",\r\n      description: `\r\n        <pre><code>import { useDebugValue } from 'react';\r\n\r\nfunction useCustomHook() {\r\n  const [state, setState] = useState(0);\r\n\r\n  // Добавление метки в React DevTools\r\n  useDebugValue(state > 0 ? 'Positive' : 'Zero or Negative');\r\n\r\n  return [state, setState];\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример: пользовательский хук для отслеживания онлайн-статуса:</strong></p>\r\n      `,\r\n      code: `\r\nimport { useState, useEffect, useDebugValue } from 'react';\r\n\r\nfunction useOnlineStatus() {\r\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n\r\n  useEffect(() => {\r\n    const handleOnline = () => setIsOnline(true);\r\n    const handleOffline = () => setIsOnline(false);\r\n\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n\r\n  // Добавление метки в React DevTools\r\n  useDebugValue(isOnline ? 'Online' : 'Offline');\r\n\r\n  return isOnline;\r\n}\r\n\r\n// Использование\r\nfunction App() {\r\n  const isOnline = useOnlineStatus();\r\n\r\n  return (\r\n    <div>\r\n      <p>Статус: {isOnline ? 'Online' : 'Offline'}</p>\r\n    </div>\r\n  );\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Используйте только для пользовательских хуков:</strong> <code>useDebugValue</code> не нужен для встроенных хуков, так как они уже имеют встроенную поддержку отладки.</li>\r\n          <li><strong>Добавляйте метки только для важных данных:</strong> Не перегружайте React DevTools избыточной информацией.</li>\r\n          <li><strong>Форматируйте сложные данные:</strong> Для сложных объектов используйте функцию форматирования.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Форматирование сложных данных\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример: форматирование объекта:</strong></p>\r\n        <pre><code>function useUser(user) {\r\n  useDebugValue(user, user => \\`Name: \\${user.name}, Age: \\${user.age}\\`);\r\n  return user;\r\n}</code></pre>\r\n\r\n        <p><strong>Пример: форматирование времени:</strong></p>\r\n        <pre><code>function useTimestamp() {\r\n  const [timestamp, setTimestamp] = useState(Date.now());\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => setTimestamp(Date.now()), 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  useDebugValue(new Date(timestamp).toISOString());\r\n  return timestamp;\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Избыточное использование:</strong></p>\r\n        <pre><code>// Не добавляйте метки для каждого хука\r\n// Добавляйте только для тех, которые действительно требуют отладки</code></pre>\r\n\r\n        <p><strong>2. Неправильная форматизация:</strong></p>\r\n        <pre><code>// Плохо: слишком сложная метка\r\nuseDebugValue({ a: 1, b: 2, c: 3 });\r\n\r\n// Лучше: форматируйте данные\r\nuseDebugValue({ a: 1, b: 2, c: 3 }, data => \\`a=\\${data.a}, b=\\${data.b}, c=\\${data.c}\\`);</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"TypeScript и useDebugValue\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Типизация для useDebugValue:</strong></p>\r\n        <pre><code>function useCounter(initialValue: number) {\r\n  const [count, setCount] = useState(initialValue);\r\n\r\n  // Метка для отладки\r\n  useDebugValue(count > 0 ? 'Positive' : 'Zero or Negative');\r\n\r\n  return [count, setCount] as const;\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Продвинутые паттерны\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Комбинирование с useMemo:</strong></p>\r\n        <pre><code>function useExpensiveCalculation(data) {\r\n  const result = useMemo(() => expensiveComputation(data), [data]);\r\n\r\n  // Отображение результата в React DevTools\r\n  useDebugValue(result, result => \\`Result: \\${result.toFixed(2)}\\`);\r\n\r\n  return result;\r\n}</code></pre>\r\n\r\n        <p><strong>2. Отладка асинхронных операций:</strong></p>\r\n        <pre><code>function useAsyncData(url) {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    async function fetchData() {\r\n      const response = await fetch(url);\r\n      const result = await response.json();\r\n      if (isMounted) {\r\n        setData(result);\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n\r\n    return () => { isMounted = false; };\r\n  }, [url]);\r\n\r\n  // Отображение статуса в React DevTools\r\n  useDebugValue(loading ? 'Loading...' : 'Loaded');\r\n\r\n  return data;\r\n}</code></pre>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","import { useCallback } from \"./useCallback/useCallback\";\r\nimport { useContext } from \"./useContext/useContext\";\r\nimport { useEffect } from \"./useEffect/useEffect\";\r\nimport { useMemo } from \"./useMemo/useMemo\";\r\nimport { useReducer } from \"./useReducer/useReducer\";\r\nimport { useRef } from \"./useRef/useRef\";\r\nimport { useState } from \"./useState/useState\";\r\nimport { useImperativeHandle } from \"./useImperativeHandle/useImperativeHandle\";\r\nimport { useLayoutEffect } from \"./useLayoutEffect/useLayoutEffect\";\r\nimport { useDebugValue } from \"./useDebugValue/useDebugValue\";\r\n\r\nexport const hooks = {\r\n  id: 517,\r\n  title: \"Hooks (Хуки)\",\r\n  children: [\r\n    useState,\r\n    useEffect,\r\n    useReducer,\r\n    useRef,\r\n    useContext,\r\n    useMemo,\r\n    useCallback,\r\n    useImperativeHandle,\r\n    useLayoutEffect,\r\n    useDebugValue,\r\n  ],\r\n};\r\n","export const memoization = {\r\n  id: 518,\r\n  title: \"Мемоизация\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Мемоизация</strong> — оптимизационная техника, которая кэширует результаты выполнения функций для одних и тех же входных данных, чтобы избежать повторных вычислений.</p>\r\n        <ul>\r\n          <li>Применяется для «тяжёлых» вычислений.</li>\r\n          <li>Актуальна в React для предотвращения лишних рендеров.</li>\r\n          <li>Работает по принципу: <em>«Один вход — один результат»</em>.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Базовый пример (JavaScript)\",\r\n      type: \"text\",\r\n      description: `\r\n        <pre><code>function memoize(fn) {\r\n  const cache = {};\r\n  return function(...args) {\r\n    const key = JSON.stringify(args);\r\n    if (cache[key]) return cache[key];\r\n    const result = fn(...args);\r\n    cache[key] = result;\r\n    return result;\r\n  };\r\n}\r\n\r\nconst factorial = memoize(n => {\r\n  return n <= 1 ? 1 : n * factorial(n - 1);\r\n});</code></pre>\r\n        <p>Теперь <code>factorial(5)</code> вычислится только один раз.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Мемоизация в React\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>React предоставляет 3 инструмента для мемоизации:</p>\r\n      `,\r\n      children: [\r\n        {\r\n          title: \"React.memo\",\r\n          type: \"text\",\r\n          description: `\r\n            <p><strong><code>React.memo</code></strong> — кэширует компонент:</p>\r\n            <pre><code>const MemoComponent = React.memo(Component);</code></pre>\r\n          `,\r\n        },\r\n        {\r\n          title: \"useMemo\",\r\n          type: \"text\",\r\n          description: `\r\n            <p><strong><code>useMemo</code></strong> — кэширует значение:</p>\r\n            <pre><code>const value = useMemo(() => computeExpensiveValue(a, b), [a, b]);</code></pre>\r\n          `,\r\n        },\r\n        {\r\n          title: \"useCallback\",\r\n          type: \"text\",\r\n          description: `\r\n            <p><strong><code>useCallback</code></strong> — кэширует функцию:</p>\r\n            <pre><code>const callback = useCallback(() => doSomething(a, b), [a, b]);</code></pre>\r\n          `,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Когда использовать?\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>React.memo</strong>: Когда компонент часто рендерится с одинаковыми пропсами.</li>\r\n          <li><strong>useMemo</strong>: Для сложных вычислений (фильтрация, сортировка, математические операции).</li>\r\n          <li><strong>useCallback</strong>: Когда функция передаётся в дочерние компоненты как проп.</li>\r\n        </ul>\r\n        <p><strong>⚠️ Не злоупотребляйте!</strong> Мемоизация имеет накладные расходы (память, сравнение зависимостей).</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример: useMemo vs обычный расчёт\",\r\n      type: \"text\",\r\n      description: `\r\n        <pre><code>function List({ items }) {\r\n  // Без мемоизации: вычисляется при каждом рендере\r\n  // const sortedList = items.sort(...);\r\n\r\n  // С мемоизацией: пересчитывается только при изменении items\r\n  const sortedList = useMemo(() => items.sort(...), [items]);\r\n\r\n  return <ul>{sortedList.map(...)}</ul>;\r\n}</code></pre>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const polymorphismInReact = {\r\n  id: 520,\r\n  title: \"Полиморфизм в React\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Полиморфизм</strong> — это возможность компонентов работать с разными типами данных или иметь различное поведение в зависимости от переданных параметров.</p>\r\n          <p>В React полиморфизм реализуется через:</p>\r\n          <ul>\r\n            <li>Условный рендеринг</li>\r\n            <li>Компоненты высшего порядка (HOC)</li>\r\n            <li>Render Props</li>\r\n            <li>Динамические компоненты</li>\r\n            <li>Пропсы <code>as</code> или <code>component</code></li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Полиморфные компоненты через проп 'as'\",\r\n      type: \"text\",\r\n      description: `\r\n          <p>Компонент может рендерить разные HTML-элементы или другие компоненты:</p>\r\n          <pre><code>function PolymorphicComponent({ as: Component = 'div', children, ...props }) {\r\n    return &lt;Component {...props}&gt;{children}&lt;/Component&gt;;\r\n  }\r\n  \r\n  // Использование:\r\n  &lt;PolymorphicComponent as=\"button\" onClick={...}&gt;Кнопка&lt;/PolymorphicComponent&gt;\r\n  &lt;PolymorphicComponent as={Link} to=\"/\"&gt;Ссылка&lt;/PolymorphicComponent&gt;</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Условный рендеринг\",\r\n      type: \"text\",\r\n      description: `\r\n          <p>Разное поведение в зависимости от пропсов:</p>\r\n          <pre><code>function UserCard({ user, isAdmin }) {\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;h2&gt;{user.name}&lt;/h2&gt;\r\n        {isAdmin && &lt;button&gt;Удалить&lt;/button&gt;}\r\n        {user.type === 'premium' ? (\r\n          &lt;PremiumBadge /&gt;\r\n        ) : (\r\n          &lt;StandardBadge /&gt;\r\n        )}\r\n      &lt;/div&gt;\r\n    );\r\n  }</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Render Props\",\r\n      type: \"text\",\r\n      description: `\r\n          <p>Компонент принимает функцию для рендеринга:</p>\r\n          <pre><code>function DataFetcher({ url, render }) {\r\n    const [data, setData] = useState(null);\r\n    \r\n    useEffect(() => {\r\n      fetch(url).then(res => setData(res.json()));\r\n    }, [url]);\r\n  \r\n    return render(data);\r\n  }\r\n  \r\n  // Использование:\r\n  &lt;DataFetcher \r\n    url=\"/api/users\"\r\n    render={data => data ? &lt;UserList users={data} /&gt; : &lt;Spinner /&gt;}\r\n  /&gt;</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"HOC (Компоненты высшего порядка)\",\r\n      type: \"text\",\r\n      description: `\r\n          <p>Функция, которая принимает компонент и возвращает новый компонент:</p>\r\n          <pre><code>function withAuth(Component) {\r\n    return function AuthenticatedComponent(props) {\r\n      const isAuthenticated = checkAuth();\r\n      \r\n      return isAuthenticated \r\n        ? &lt;Component {...props} /&gt;\r\n        : &lt;Redirect to=\"/login\" /&gt;;\r\n    };\r\n  }\r\n  \r\n  const PrivateComponent = withAuth(MyComponent);</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Динамические компоненты\",\r\n      type: \"text\",\r\n      description: `\r\n          <p>Рендер компонента по его имени или типу:</p>\r\n          <pre><code>const components = {\r\n    text: TextInput,\r\n    number: NumberInput,\r\n    date: DatePicker\r\n  };\r\n  \r\n  function DynamicFormField({ fieldType, ...props }) {\r\n    const Component = components[fieldType] || FallbackComponent;\r\n    return &lt;Component {...props} /&gt;;\r\n  }</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n          <ul>\r\n            <li><strong>TypeScript:</strong> Используйте дженерики для полиморфных компонентов</li>\r\n            <li><strong>Документируйте:</strong> Указывайте допустимые типы для пропсов</li>\r\n            <li><strong>Избегайте избыточности:</strong> Не усложняйте компоненты без необходимости</li>\r\n            <li><strong>Композиция:</strong> Предпочитайте композицию наследованию</li>\r\n          </ul>\r\n        `,\r\n    },\r\n  ],\r\n};\r\n","export const PortalsReact = {\r\n  id: 516,\r\n  title: \"Portals в React\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>Порталы (Portals)</strong> — это механизм в React, позволяющий рендерить дочерние элементы <strong>вне родительского DOM-дерева</strong>, но с сохранением всех преимуществ React-компонентов (пропсы, контекст, события).</p>\r\n          <p>Основное применение:</p>\r\n          <ul>\r\n            <li>Модальные окна, тултипы, уведомления.</li>\r\n            <li>Виджеты, которые должны \"всплывать\" над основным интерфейсом.</li>\r\n            <li>Интеграция с внешними DOM-элементами (например, встраивание в тело документа).</li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Зачем использовать?\",\r\n      type: \"text\",\r\n      description: `\r\n          <ul>\r\n            <li><strong>Обход ограничений z-index:</strong> Позволяет избежать проблем с наложением элементов (например, модалка внутри контейнера с <code>overflow: hidden</code>).</li>\r\n            <li><strong>Семантический DOM:</strong> Критически важные элементы (модалки) можно размещать прямо в <code>&lt;body&gt;</code>.</li>\r\n            <li><strong>Изоляция стилей:</strong> Порталы помогают управлять CSS-каскадом (например, для библиотек компонентов).</li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Синтаксис\",\r\n      type: \"text\",\r\n      description: `\r\n          <p>Используется метод <code>ReactDOM.createPortal()</code>:</p>\r\n          <pre><code>import ReactDOM from 'react-dom';\r\n  \r\n  function Modal({ children }) {\r\n    return ReactDOM.createPortal(\r\n      &lt;div className=\"modal\"&gt;{children}&lt;/div&gt;,\r\n      document.getElementById('portal-root') // Целевой DOM-элемент\r\n    );\r\n  }</code></pre>\r\n          <p><strong>Важно:</strong> Порталы <u>не влияют</u> на контекст и поведение React-компонентов — события всплывают через Virtual DOM как обычно!</p>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Пример использования\",\r\n      type: \"text\",\r\n      description: `\r\n          <p><strong>1. Подготовка HTML:</strong></p>\r\n          <pre><code>&lt;!-- index.html --&gt;\r\n  &lt;body&gt;\r\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\r\n    &lt;div id=\"portal-root\"&gt;&lt;/div&gt; &lt;!-- Контейнер для порталов --&gt;\r\n  &lt;/body&gt;</code></pre>\r\n  \r\n          <p><strong>2. Компонент с порталом:</strong></p>\r\n          <pre><code>function App() {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n  \r\n    return (\r\n      &lt;div&gt;\r\n        &lt;button onClick={() => setIsOpen(true)}&gt;Открыть модалку&lt;/button&gt;\r\n        {isOpen && (\r\n          &lt;Modal onClose={() => setIsOpen(false)}&gt;\r\n            &lt;h2&gt;Заголовок&lt;/h2&gt;\r\n            &lt;p&gt;Контент модального окна!&lt;/p&gt;\r\n          &lt;/Modal&gt;\r\n        )}\r\n      &lt;/div&gt;\r\n    );\r\n  }</code></pre>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n          <ul>\r\n            <li><strong>Доступность:</strong> Добавляйте ARIA-атрибуты для модалок (<code>role=\"dialog\"</code>, <code>aria-modal=\"true\"</code>).</li>\r\n            <li><strong>Управление фокусом:</strong> Используйте <code>useRef</code> и хук <code>useEffect</code> для фокусировки на портале при открытии.</li>\r\n            <li><strong>Очистка:</strong> Удаляйте порталы при анмаунте (React делает это автоматически).</li>\r\n            <li><strong>Тестирование:</strong> В Jest используйте <code>screen.getByRole</code> для поиска элементов в портале.</li>\r\n          </ul>\r\n        `,\r\n    },\r\n    {\r\n      title: \"Ограничения\",\r\n      type: \"text\",\r\n      description: `\r\n          <ul>\r\n            <li><strong>SSR:</strong> На сервере порталы не работают — нужна проверка на <code>typeof window !== 'undefined'</code>.</li>\r\n            <li><strong>События:</strong> Клики вне портала (например, закрытие по оверлею) требуют обработки вручную.</li>\r\n            <li><strong>Интеграция:</strong> Не все библиотеки (например, для анимаций) корректно работают с порталами.</li>\r\n          </ul>\r\n        `,\r\n    },\r\n  ],\r\n};\r\n","export const Props = {\r\n  id: 225,\r\n  title: \"Props (Пропсы)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое props?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Props</strong> (сокращение от <em>properties</em>) — это объект, который содержит данные, передаваемые от родительского компонента к дочернему. Пропсы являются неизменяемыми (<em>immutable</em>), то есть их нельзя изменять внутри дочернего компонента.</p>\r\n        <p>Основные характеристики:</p>\r\n        <ul>\r\n          <li>Передаются от родителя к потомку.</li>\r\n          <li>Неизменяемы (только для чтения).</li>\r\n          <li>Могут содержать любые данные: строки, числа, объекты, функции и т.д.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Синтаксис\",\r\n      type: \"text\",\r\n      description: `\r\n        <pre><code>// Родительский компонент\r\nfunction ParentComponent() {\r\n  return <ChildComponent name=\"Alice\" age={30} />;\r\n}\r\n\r\n// Дочерний компонент\r\nfunction ChildComponent(props) {\r\n  return (\r\n    <div>\r\n      <p>Name: {props.name}</p>\r\n      <p>Age: {props.age}</p>\r\n    </div>\r\n  );\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Деструктуризация props\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Для удобства работы с пропсами можно использовать деструктуризацию. Это делает код более читаемым.</p>\r\n      `,\r\n      code: `\r\n// Без деструктуризации\r\nfunction ChildComponent(props) {\r\n  return (\r\n    <div>\r\n      <p>Name: {props.name}</p>\r\n      <p>Age: {props.age}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\n// С деструктуризацией\r\nfunction ChildComponent({ name, age }) {\r\n  return (\r\n    <div>\r\n      <p>Name: {name}</p>\r\n      <p>Age: {age}</p>\r\n    </div>\r\n  );\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Передача функций через props\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Пропсы могут содержать функции, что позволяет родительскому компоненту управлять поведением дочернего компонента.</p>\r\n      `,\r\n      code: `\r\n// Родительский компонент\r\nfunction ParentComponent() {\r\n  const handleClick = () => {\r\n    console.log('Button clicked!');\r\n  };\r\n\r\n  return <ChildComponent onClick={handleClick} />;\r\n}\r\n\r\n// Дочерний компонент\r\nfunction ChildComponent({ onClick }) {\r\n  return <button onClick={onClick}>Click me</button>;\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Default Props\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Если пропсы не переданы, можно задать значения по умолчанию с помощью <code>defaultProps</code>.</p>\r\n      `,\r\n      code: `\r\nfunction Greeting(props) {\r\n  return <p>Hello, {props.name}!</p>;\r\n}\r\n\r\nGreeting.defaultProps = {\r\n  name: 'Guest'\r\n};\r\n\r\n// Использование\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Greeting name=\"Alice\" /> <!-- Выведет: Hello, Alice! -->\r\n      <Greeting /> <!-- Выведет: Hello, Guest! -->\r\n    </>\r\n  );\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"PropTypes\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>PropTypes</strong> — это библиотека для проверки типов данных, передаваемых через props. Она помогает избежать ошибок и обеспечивает корректность данных.</p>\r\n      `,\r\n      code: `\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Greeting({ name, age }) {\r\n  return (\r\n    <div>\r\n      <p>Name: {name}</p>\r\n      <p>Age: {age}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nGreeting.propTypes = {\r\n  name: PropTypes.string.isRequired, // Обязательная строка\r\n  age: PropTypes.number               // Число (необязательное)\r\n};\r\n\r\n// Использование\r\nfunction App() {\r\n  return <Greeting name=\"Alice\" age={30} />;\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Children (Дети)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>children</strong> — это специальный проп, который позволяет передавать содержимое между открывающим и закрывающим тегом компонента.</p>\r\n      `,\r\n      code: `\r\nfunction Card({ children }) {\r\n  return <div className=\"card\">{children}</div>;\r\n}\r\n\r\n// Использование\r\nfunction App() {\r\n  return (\r\n    <Card>\r\n      <h1>Title</h1>\r\n      <p>This is some content inside the card.</p>\r\n    </Card>\r\n  );\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Используйте деструктуризацию:</strong> Это делает код более читаемым.</li>\r\n          <li><strong>Задавайте defaultProps:</strong> Это помогает избежать ошибок при отсутствии пропсов.</li>\r\n          <li><strong>Проверяйте типы с PropTypes:</strong> Это особенно важно для больших проектов.</li>\r\n          <li><strong>Избегайте мутации props:</strong> Пропсы должны быть неизменяемыми.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Мутация props:</strong></p>\r\n        <pre><code>// Плохо: изменение props напрямую\r\nfunction ChildComponent({ data }) {\r\n  data.value = 'new value'; // Изменение props запрещено\r\n}\r\n\r\n// Лучше: создайте копию данных\r\nfunction ChildComponent({ data }) {\r\n  const newData = { ...data, value: 'new value' };\r\n  return <p>{newData.value}</p>;\r\n}</code></pre>\r\n\r\n        <p><strong>2. Забытая проверка типов:</strong></p>\r\n        <pre><code>// Плохо: отсутствие проверки типов\r\nfunction Greeting({ name }) {\r\n  return <p>Hello, {name}!</p>;\r\n}\r\n\r\n// Лучше: используйте PropTypes\r\nGreeting.propTypes = {\r\n  name: PropTypes.string.isRequired\r\n};</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Продвинутые паттерны\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Render Props:</strong></p>\r\n        <pre><code>function DataProvider({ render }) {\r\n  const data = { name: 'Alice', age: 30 };\r\n  return render(data);\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <DataProvider render={(data) => (\r\n      <div>\r\n        <p>Name: {data.name}</p>\r\n        <p>Age: {data.age}</p>\r\n      </div>\r\n    )} />\r\n  );\r\n}</code></pre>\r\n\r\n        <p><strong>2. Compound Components:</strong></p>\r\n        <pre><code>const Tab = ({ children }) => <div>{children}</div>;\r\n\r\nTab.Header = ({ children }) => <h1>{children}</h1>;\r\nTab.Content = ({ children }) => <p>{children}</p>;\r\n\r\nfunction App() {\r\n  return (\r\n    <Tab>\r\n      <Tab.Header>Title</Tab.Header>\r\n      <Tab.Content>Content</Tab.Content>\r\n    </Tab>\r\n  );\r\n}</code></pre>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","import { demo } from \"./demo/demo\";\r\nimport { IDE } from \"./ide/ide\";\r\nimport { Interview } from \"./Interview/interview\";\r\nimport { JavaScript } from \"./javascript/javascript\";\r\nimport { NextJs } from \"./nextjs/nextJs\";\r\nimport { Patterns } from \"./patterns/patterns\";\r\nimport { react } from \"./react/react\";\r\nimport { HTML_CSS } from \"./htmlcss/htmlcss\";\r\nimport { Network } from \"./webTechnology/Network\";\r\nimport { gitParent } from \"./git/gitParent\";\r\nimport { stateManaging } from \"./stateManaging/stateManaging\";\r\n\r\n\r\nexport const data = {\r\n  id: 1,\r\n  title: \"Sections\",\r\n  children: [\r\n    Network,\r\n    HTML_CSS,\r\n    JavaScript,\r\n    react,\r\n    NextJs,\r\n    stateManaging,\r\n    Patterns,\r\n    Interview,\r\n    gitParent,\r\n    IDE,\r\n    demo,\r\n  ],\r\n};","import { WhenUserOpensPage } from \"./WhenUserOpensPage/WhenUserOpensPage\";\r\nimport { JWT } from \"./JWT/JWT\";\r\nimport { JustAndHardRequest } from \"./JustAndHardRequest/JustAndHardRequest\";\r\nimport { HTTPAndHTTPS } from \"./HTTPAndHTTPS/HTTPAndHTTPS\";\r\nimport { LongPollingAndShortPolling } from \"./LongPollingAndShortPolling/LongPollingAndShortPolling\";\r\nimport { WebSocketAndPredecessorTechnologies } from \"./WebSocketAndPredecessorTechnologies/WebSocketAndPredecessorTechnologies\";\r\nimport { ServerSentEvents } from \"./ServerSentEvents/ServerSentEvents\";\r\nimport { ModelOSI } from \"./ModelOSI/ModelOSI\";\r\nimport { CORS } from \"./CORS/CORS\";\r\nimport { CRP } from \"./CRP/CRP\";\r\nimport { RESTAPI } from \"./RESTAPI/RESTAPI\";\r\nimport { WebThreats } from \"./WebThreats/WebThreats\";\r\nimport { Cookie } from \"./Cookie/Cookie\";\r\nimport { LocalStorage } from \"./LocalStorage/localStorage\";\r\nimport { SessionStorage } from \"./SessionStorage/sessionStorage\";\r\nimport { Cache } from \"./Cache/cache\";\r\nimport { DOM } from \"./DOM/DOM\";\r\nimport { BOM } from \"./BOM/BOM\";\r\nimport { DataStructure } from \"./DataStructure/DataStructure\";\r\n\r\nexport const Network = {\r\n  id: 11,\r\n  title: \"Network\",\r\n  children: [\r\n    BOM,\r\n    Cache,\r\n    CORS,\r\n    CRP,\r\n    Cookie,\r\n    DataStructure,\r\n    DOM,\r\n    HTTPAndHTTPS,\r\n    JWT,\r\n    JustAndHardRequest,\r\n    LocalStorage,\r\n    LongPollingAndShortPolling,\r\n    ModelOSI,\r\n    RESTAPI,\r\n    SessionStorage,\r\n    ServerSentEvents,\r\n    WebThreats,\r\n    WebSocketAndPredecessorTechnologies,\r\n    WhenUserOpensPage,\r\n  ],\r\n};","export const BOM = {\r\n  id: 221,\r\n  title: \"BOM (Browser Object Model)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое BOM?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>BOM (Browser Object Model)</strong> — это набор объектов, предоставляемых браузером, которые позволяют взаимодействовать с окном браузера и его функциями. В отличие от DOM, который работает с HTML-документом, BOM фокусируется на браузере и его окружении.</p>\r\n        <p>BOM не является стандартом W3C, но большинство его методов и свойств поддерживаются всеми современными браузерами.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Объект window\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>window</strong> — это глобальный объект в браузере. Он представляет собой окно или вкладку браузера и содержит множество методов и свойств для работы с ним.</p>\r\n        <ul>\r\n          <li><strong>window.innerWidth / window.innerHeight:</strong> Ширина и высота окна браузера.</li>\r\n          <li><strong>window.open(url):</strong> Открывает новое окно или вкладку.</li>\r\n          <li><strong>window.close():</strong> Закрывает текущее окно.</li>\r\n          <li><strong>window.alert(message):</strong> Показывает диалоговое окно с сообщением.</li>\r\n          <li><strong>window.confirm(message):</strong> Показывает диалоговое окно с подтверждением (да/нет).</li>\r\n          <li><strong>window.prompt(message):</strong> Показывает диалоговое окно с полем ввода.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Пример использования методов window\r\nwindow.alert('Hello, world!');\r\nconst isConfirmed = window.confirm('Are you sure?');\r\nif (isConfirmed) {\r\n  console.log('User confirmed');\r\n}\r\n\r\nconst userInput = window.prompt('Enter your name:');\r\nconsole.log(userInput);\r\n      `,\r\n    },\r\n    {\r\n      title: \"Объект navigator\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>navigator</strong> предоставляет информацию о браузере и операционной системе пользователя.</p>\r\n        <ul>\r\n          <li><strong>navigator.userAgent:</strong> Строка, содержащая информацию о браузере, ОС и устройстве.</li>\r\n          <li><strong>navigator.language:</strong> Язык браузера пользователя.</li>\r\n          <li><strong>navigator.geolocation:</strong> Предоставляет доступ к геолокации пользователя.</li>\r\n          <li><strong>navigator.onLine:</strong> Проверяет, есть ли подключение к интернету.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Пример использования navigator\r\nconsole.log(navigator.userAgent); // Информация о браузере\r\nconsole.log(navigator.language); // Язык браузера\r\n\r\nif (navigator.geolocation) {\r\n  navigator.geolocation.getCurrentPosition(position => {\r\n    console.log('Latitude:', position.coords.latitude);\r\n    console.log('Longitude:', position.coords.longitude);\r\n  });\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Объект location\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>location</strong> предоставляет информацию о текущем URL и позволяет управлять адресной строкой браузера.</p>\r\n        <ul>\r\n          <li><strong>location.href:</strong> Полный URL текущей страницы.</li>\r\n          <li><strong>location.protocol:</strong> Протокол (например, http: или https:).</li>\r\n          <li><strong>location.host:</strong> Хост (например, example.com).</li>\r\n          <li><strong>location.pathname:</strong> Путь после домена (например, /page).</li>\r\n          <li><strong>location.search:</strong> Параметры запроса (например, ?id=123).</li>\r\n          <li><strong>location.reload():</strong> Перезагружает страницу.</li>\r\n          <li><strong>location.assign(url):</strong> Переходит по указанному URL.</li>\r\n          <li><strong>location.replace(url):</strong> Заменяет текущую страницу на новую без сохранения в истории.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Пример использования location\r\nconsole.log(location.href); // Полный URL\r\nconsole.log(location.protocol); // Протокол\r\nconsole.log(location.host); // Хост\r\n\r\n// Переход на новую страницу\r\nlocation.assign('https://example.com'); \r\n\r\n// Перезагрузка страницы\r\nlocation.reload();\r\n      `,\r\n    },\r\n    {\r\n      title: \"Объект history\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>history</strong> предоставляет доступ к истории браузера (навигации между страницами).</p>\r\n        <ul>\r\n          <li><strong>history.back():</strong> Возвращает пользователя на предыдущую страницу.</li>\r\n          <li><strong>history.forward():</strong> Переходит на следующую страницу.</li>\r\n          <li><strong>history.go(n):</strong> Переходит на n страниц вперед или назад (положительное или отрицательное число).</li>\r\n          <li><strong>history.pushState(state, title, url):</strong> Добавляет новую запись в историю без перезагрузки страницы.</li>\r\n          <li><strong>history.replaceState(state, title, url):</strong> Заменяет текущую запись в истории.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Пример использования history\r\nhistory.back(); // Вернуться назад\r\nhistory.forward(); // Перейти вперед\r\nhistory.go(-2); // Вернуться на две страницы назад\r\n\r\n// Добавление новой записи в историю\r\nhistory.pushState({ page: 1 }, 'Title', '/page1');\r\n      `,\r\n    },\r\n    {\r\n      title: \"Объект screen\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>screen</strong> предоставляет информацию о экране пользователя.</p>\r\n        <ul>\r\n          <li><strong>screen.width / screen.height:</strong> Разрешение экрана в пикселях.</li>\r\n          <li><strong>screen.availWidth / screen.availHeight:</strong> Доступная ширина и высота экрана (без учета панелей задач).</li>\r\n          <li><strong>screen.colorDepth:</strong> Глубина цвета экрана (в битах).</li>\r\n          <li><strong>screen.orientation:</strong> Ориентация экрана (портретная или ландшафтная).</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Пример использования screen\r\nconsole.log(screen.width, screen.height); // Разрешение экрана\r\nconsole.log(screen.availWidth, screen.availHeight); // Доступная область\r\nconsole.log(screen.colorDepth); // Глубина цвета\r\n      `,\r\n    },\r\n    {\r\n      title: \"Таймеры\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>BOM предоставляет методы для работы с таймерами:</p>\r\n        <ul>\r\n          <li><strong>setTimeout(callback, delay):</strong> Выполняет функцию один раз через заданное время (в миллисекундах).</li>\r\n          <li><strong>setInterval(callback, interval):</strong> Выполняет функцию повторно с заданным интервалом.</li>\r\n          <li><strong>clearTimeout(id):</strong> Останавливает выполнение setTimeout.</li>\r\n          <li><strong>clearInterval(id):</strong> Останавливает выполнение setInterval.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\n// Пример использования таймеров\r\nconst timeoutId = setTimeout(() => {\r\n  console.log('This will run after 2 seconds');\r\n}, 2000);\r\n\r\nconst intervalId = setInterval(() => {\r\n  console.log('This will run every second');\r\n}, 1000);\r\n\r\n// Остановка таймеров\r\nclearTimeout(timeoutId);\r\nclearInterval(intervalId);\r\n      `,\r\n    },\r\n    {\r\n      title: \"Преимущества и недостатки BOM\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Преимущества:</strong></p>\r\n        <ul>\r\n          <li>Позволяет взаимодействовать с браузером и его окружением.</li>\r\n          <li>Поддерживается всеми современными браузерами.</li>\r\n          <li>Предоставляет доступ к важным данным, таким как геолокация, история и параметры URL.</li>\r\n        </ul>\r\n        <p><strong>Недостатки:</strong></p>\r\n        <ul>\r\n          <li>Не является стандартом W3C, что может привести к различиям в реализации.</li>\r\n          <li>Некоторые методы могут быть ограничены из соображений безопасности (например, доступ к геолокации).</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      url: \"https://developer.mozilla.org/ru/docs/Web/API/Window\",\r\n      link: \"MDN: Window\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      url: \"https://developer.mozilla.org/ru/docs/Web/API/Navigator\",\r\n      link: \"MDN: Navigator\",\r\n    },\r\n  ],\r\n};\r\n","export const Cache = {\r\n  id: 218,\r\n  title: \"Cache (Кэширование)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое кэш?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Кэш</strong> — это механизм временного хранения данных, который позволяет быстро получать доступ к часто используемым данным, избегая повторных запросов к основному источнику (например, базе данных или серверу). Кэширование используется для улучшения производительности веб-приложений и снижения нагрузки на сервер.</p>\r\n        <p>Кэш обычно размещается в быстродействующей памяти (RAM) и организован в виде пар \"ключ-значение\". Каждая запись в кэше имеет ограниченное время жизни (TTL — Time To Live), по истечении которого она удаляется.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Для чего нужно кэширование?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Кэширование решает несколько ключевых задач:</p>\r\n        <ul>\r\n          <li><strong>Ускорение работы приложения:</strong> Данные извлекаются быстрее, чем из основного хранилища.</li>\r\n          <li><strong>Снижение нагрузки на сервер:</strong> Уменьшается количество запросов к базе данных или внешним сервисам.</li>\r\n          <li><strong>Оптимизация сетевого обмена:</strong> Меньше данных передается по сети.</li>\r\n        </ul>\r\n        <p>Однако важно помнить, что кэширование — это не универсальное решение. Если система простая или нагрузка низкая, то кэширование может быть избыточным и только добавит сложности.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Типы кэша\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Кэши можно разделить на два основных типа:</p>\r\n        <ul>\r\n          <li><strong>Встроенный кэш (inline):</strong> Хранится в том же процессе, что и приложение. Примеры: map в Go, LRU-кэш.</li>\r\n          <li><strong>Отдельный кэш (sidecar):</strong> Представляет собой отдельный процесс или сервис. Примеры: Redis, Memcached.</li>\r\n        </ul>\r\n        <p>Выбор типа кэша зависит от требований к производительности, масштабируемости и изолированности данных.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Стратегии кэширования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Основные стратегии кэширования:</p>\r\n        <ul>\r\n          <li><strong>Read Through:</strong> Запросы проходят через кэш, который самостоятельно обращается к источнику данных при промахе.</li>\r\n          <li><strong>Write Through:</strong> Данные записываются одновременно в кэш и основное хранилище.</li>\r\n          <li><strong>Cache Aside:</strong> Приложение само управляет взаимодействием с кэшем и источником данных.</li>\r\n          <li><strong>Cache Ahead:</strong> Данные предварительно загружаются в кэш из источника с определенной периодичностью.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Использование Cache API\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример использования Cache API для кэширования ресурсов:</strong></p>\r\n      `,\r\n      code: `\r\nif ('caches' in window) {\r\n  caches.open('my-cache').then(cache => {\r\n    cache.addAll([\r\n      '/index.html',\r\n      '/styles.css',\r\n      '/script.js',\r\n    ]);\r\n  });\r\n}\r\n      `,\r\n    },\r\n    {\r\n      title: \"Получение данных из кэша\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример получения данных из кэша:</strong></p>\r\n      `,\r\n      code: `\r\ncaches.match('/index.html').then(response => {\r\n  if (response) {\r\n    return response.text();\r\n  }\r\n});\r\n      `,\r\n    },\r\n    {\r\n      title: \"Очистка кэша\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример очистки кэша:</strong></p>\r\n      `,\r\n      code: `\r\ncaches.delete('my-cache').then(success => {\r\n  console.log(success ? 'Кэш удален' : 'Кэш не найден');\r\n});\r\n      `,\r\n    },\r\n    {\r\n      title: \"Преимущества кэширования\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Ускорение загрузки:</strong> Быстрый доступ к закэшированным данным.</li>\r\n          <li><strong>Снижение нагрузки на сервер:</strong> Меньше запросов к серверу для получения одних и тех же данных.</li>\r\n          <li><strong>Поддержка офлайн-режима:</strong> Возможность работы с приложением без подключения к интернету.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Недостатки кэширования\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Устаревание данных:</strong> Кэшированные данные могут стать устаревшими, если TTL слишком длинный.</li>\r\n          <li><strong>Дополнительная сложность:</strong> Необходимо управлять кэшом и его очисткой.</li>\r\n          <li><strong>Безопасность:</strong> Личные данные могут быть доступны из кэша, если не реализована правильная политика кэширования.</li>\r\n        </ul>\r\n      `,\r\n      url: \"https://habr.com/ru/articles/734660/\",\r\n      link: \"habr.com\",\r\n    },\r\n    {\r\n      title: \"Стратегии инвалидации кэша\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Основные стратегии инвалидации данных в кэше:</p>\r\n        <ul>\r\n          <li><strong>По TTL:</strong> Данные автоматически удаляются через заданное время.</li>\r\n          <li><strong>По событию:</strong> Данные инвалидируются при изменении в источнике.</li>\r\n          <li><strong>Jitter:</strong> Случайное значение добавляется к TTL для сглаживания нагрузки.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Стратегии вытеснения данных\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Когда кэш заполняется, используются следующие стратегии вытеснения:</p>\r\n        <ul>\r\n          <li><strong>LRU (Least Recently Used):</strong> Удаляются данные, которые использовались давно.</li>\r\n          <li><strong>LFU (Least Frequently Used):</strong> Удаляются данные, которые использовались реже всего.</li>\r\n          <li><strong>Random:</strong> Удаляются случайные записи.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Кэширование ошибок\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Кэширование ошибок помогает защитить систему от атак через промахи кэша (cache miss attack). Например, если злоумышленник запрашивает несуществующие данные, сервер может быть перегружен. Кэширование ошибок позволяет избежать этой проблемы, сохраняя ответ об отсутствии данных в кэше на короткое время.</p>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const CORS = {\r\n  id: 117,\r\n  title: \"CORS (Кросс-доменный доступ к ресурсам)\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>CORS</strong> (Cross-Origin Resource Sharing — «совместное использование ресурсов между разными источниками») — это механизм, который позволяет веб-страницам запрашивать ресурсы с другого домена, отличного от домена, с которого была загружена сама страница. По умолчанию, в целях безопасности, веб-браузеры ограничивают кросс-доменные запросы с использованием так называемой политики одного источника (Same-Origin Policy). Он предоставляет веб-серверам возможность явно разрешить некоторые кросс-доменные запросы, сохраняя при этом безопасность.</p>`,\r\n    },\r\n    {\r\n      title: \"Как работает CORS\",\r\n      type: \"text\",\r\n      description: `<p>Когда веб-приложение пытается сделать запрос к ресурсу, который находится на другом домене (кросс-доменный запрос), браузер автоматически добавляет к запросу заголовок \\`Origin\\`. Этот заголовок содержит домен, с которого был сделан запрос. Веб-сервер, к которому направлен запрос, затем проверяет этот заголовок и решает, разрешить ли запрос. Если сервер разрешает запросы из этого источника, он отвечает с соответствующими CORS заголовками, указывающими, какие действия разрешены. Один из таких заголовков — \\`Access-Control-Allow-Origin\\`, который может быть установлен в \\` * \\` (что означает разрешение для всех доменов) или в конкретный домен.</p>`,\r\n    },\r\n    {\r\n      title: \"Основные CORS-заголовки\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Некоторые ключевые заголовки, связанные с CORS:</p>\r\n            <ul>\r\n              <li><strong>Access-Control-Allow-Origin:</strong> Указывает, какие источники могут получать доступ к ресурсу (например, <code>*</code> для всех).</li>\r\n              <li><strong>Access-Control-Allow-Methods:</strong> Указывает, какие HTTP-методы разрешены для кросс-доменных запросов (например, GET, POST).</li>\r\n              <li><strong>Access-Control-Allow-Headers:</strong> Указывает, какие заголовки могут быть использованы в запросе.</li>\r\n              <li><strong>Access-Control-Allow-Credentials:</strong> Указывает, разрешено ли использование учетных данных (например, куки) в кросс-доменных запросах.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Проблемы с CORS\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Хотя он повышает безопасность, неправильная настройка CORS может привести к уязвимостям. Например, слишком широкое использование \\`Access-Control-Allow-Origin: *\\` может случайно разрешить небезопасные кросс-доменные запросы. Разработчики должны тщательно настраивать политики CORS, чтобы избежать потенциальных проблем с безопасностью.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Предварительные запросы\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>В некоторых случаях браузеры отправляют предварительный запрос (preflight request) с методом OPTIONS, чтобы проверить, разрешены ли кросс-доменные запросы с указанным методом и заголовками.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Почему CORS важен\",\r\n      type: \"text\",\r\n      description: `<p>Решает важную проблему безопасности, позволяя контролировать, какие веб-сайты могут использовать ресурсы вашего веб-сайта. Это предотвращает множество видов атак, таких как CSRF (Cross-Site Request Forgery — подделка межсайтовых запросов), позволяя при этом легитимным сайтам запрашивать данные через браузер.</p>`,\r\n    },\r\n  ],\r\n};\r\n","export const CRP = {\r\n  id: 118,\r\n  title: \"CRP\",\r\n  children: [\r\n    {\r\n      title: \"1. Что такое CRP?\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>CRP / CSP (Cross-Origin Resource Policy или Content Security Policy) - это механизм безопасности, который позволяет управлять доступом к ресурсам на основе их источника.</p>\r\n            <p>Он используется для определения, какие ресурсы могут быть использованы в контексте других источников.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"2. Зачем нужен CSP (Content Security Policy)?\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>CSP помогает предотвратить атаки, такие как:</p>\r\n            <ul>\r\n              <li><strong>Cross-Site Scripting (XSS)</strong> — блокирует выполнение вредоносных скриптов, внедрённых на страницу.</li>\r\n              <li><strong>Data Injection</strong> — запрещает загрузку ресурсов (изображений, стилей, скриптов) из неподтверждённых источников.</li>\r\n              <li><strong>Clickjacking</strong> — может ограничивать встраивание страницы в iframe (через директиву <code>frame-ancestors</code>).</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"3. Как работает CRP?\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>CRP работает путем добавления заголовков HTTP к ресурсам, которые определяют правила доступа.</p>\r\n            <p>Примеры заголовков:</p>\r\n            <ul>\r\n              <li><code>Cross-Origin-Resource-Policy: same-origin</code> - Разрешает доступ только с того же источника.</li>\r\n              <li><code>Cross-Origin-Resource-Policy: cross-origin</code> - Разрешает доступ с любых источников.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"4. Пример использования CRP\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример настройки заголовка CRP в серверном приложении:</p>\r\n          `,\r\n      code: `\r\nresponse.setHeader('Cross-Origin-Resource-Policy', 'same-origin');\r\n          `,\r\n    },\r\n    {\r\n      title: \"5. Когда использовать CRP?\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>CRP следует использовать, когда:</p>\r\n            <ul>\r\n              <li>Необходимо защитить ресурсы от несанкционированного доступа.</li>\r\n              <li>Приложение взаимодействует с ресурсами из разных источников.</li>\r\n              <li>Хотите контролировать доступ к вашим ресурсам на уровне безопасности.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const Cookie = {\r\n  id: 215,\r\n  title: \"Cookie (Куки)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое куки?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Куки</strong> — это небольшие фрагменты данных, которые веб-сайты сохраняют на компьютере пользователя. \r\n        Они используются для хранения информации о пользователе, его предпочтениях и сессиях.</p>\r\n        <p>Более подробно можно узнать в <a href=\"https://developer.mozilla.org/ru/docs/Web/HTTP/Cookies\">официальной  документации MDN</a></p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Создание куки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример создания куки:</strong></p>\r\n        <p>Важно помнить о безопасности при установке куки</p>\r\n      `,\r\n      code: `\r\ndocument.cookie = \"username=JohnDoe; expires=Fri, 31 Dec 2023 23:59:59 GMT; path=/; secure; SameSite=Strict\";\r\n      `,\r\n    },\r\n    {\r\n      title: \"Чтение куки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример чтения куки:</strong></p>\r\n      `,\r\n      code: `\r\nconst getCookie = (name) => {\r\n  const value = document.cookie.split('; ').find(row => row.startsWith(name + '='))?.split('=')[1];\r\n  return value ? decodeURIComponent(value) : null;\r\n};\r\n\r\nconst username = getCookie('username');\r\nconsole.log(username); // JohnDoe\r\n      `,\r\n    },\r\n    {\r\n      title: \"Удаление куки\",\r\n      type: \"text\",\r\n      description: `\r\n    <p><strong>Пример удаления куки:</strong></p>\r\n    <p>Чтобы удалить куки, необходимо установить его значение в пустую строку и задать дату истечения в прошлом. Это сообщает браузеру, что куки больше не нужно хранить.</p>\r\n  `,\r\n      code: `\r\ndocument.cookie = \"username=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/\";\r\n  `,\r\n    },\r\n    {\r\n      title: \"Свойства куки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Основные атрибуты куки:</strong></p>\r\n        <ul>\r\n          <li><strong>expires</strong>: Дата истечения куки. Если не указано, куки будут действовать до закрытия вкладки браузера.</li>\r\n          <li><strong>max-age</strong>: Время жизни куки в секундах. При наличии этого атрибута, expires игнорируется.</li>\r\n          <li><strong>path</strong>: Путь, по которому куки доступны. Например, / позволяет использовать куки на всем сайте, а /account — только в разделе аккаунта.</li>\r\n          <li><strong>domain</strong>: Домен, для которого куки установлены. Если не указано, куки будут доступны только для домена, который их создал.</li>\r\n          <li><strong>secure</strong>: При установленном атрибуте куки передаются только по HTTPS.</li>\r\n          <li><strong>SameSite</strong>: Защита от CSRF-атак. Может быть задан как 'Strict', 'Lax' или 'None': \r\n            <ul>\r\n              <li><strong>Strict</strong>: Куки отправляются только при навигации на сайт.</li>\r\n              <li><strong>Lax</strong>: Куки отправляются при навигации, но не при кросс-сайтовых запросах.</li>\r\n              <li><strong>None</strong>: Куки отправляются всегда, но необходимо использовать secure.</li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Примеры использования всех атрибутов\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример установки куки с несколькими атрибутами:</strong></p>\r\n      `,\r\n      code: `\r\ndocument.cookie = \"sessionId=abc123; expires=Fri, 31 Dec 2023 23:59:59 GMT; max-age=3600; path=/; domain=example.com; secure; SameSite=Lax\";\r\n      `,\r\n    },\r\n    {\r\n      title: \"SameSite атрибут\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>SameSite</strong> — важный атрибут для защиты от CSRF-атак:</p>\r\n        <ul>\r\n          <li><strong>Strict</strong>: Куки отправляются только при навигации на сайт</li>\r\n          <li><strong>Lax</strong>: Куки отправляются при навигации, но не при кросс-сайтовых запросах</li>\r\n          <li><strong>None</strong>: Куки отправляются всегда, но требует secure-флага</li>\r\n        </ul>\r\n        <p>Подробнее о <a href=\"https://owasp.org/www-community/SameSite\">SameSite  и безопасности</a></p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      url: \"https://learn.javascript.ru/cookie\",\r\n      link: \"learn.javascript\",\r\n    },\r\n  ],\r\n};","export const DataStructure = {\r\n  id: 222,\r\n  title: \"Data Structures (Структуры данных)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое структуры данных?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Структуры данных</strong> — это способы организации и хранения данных, которые позволяют эффективно управлять ими. Они определяют, как данные организованы, доступны и модифицируются.</p>\r\n        <p>Основные категории структур данных:</p>\r\n        <ul>\r\n          <li><strong>Примитивные:</strong> Числа, строки, логические значения и т.д.</li>\r\n          <li><strong>Сложные:</strong> Массивы, объекты, списки, стеки, очереди, деревья, графы и т.д.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Массив (Array)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Массив</strong> — это упорядоченная коллекция элементов, доступ к которым осуществляется по индексу.</p>\r\n        <ul>\r\n          <li><strong>Характеристики:</strong>\r\n            <ul>\r\n              <li>Индексация начинается с 0.</li>\r\n              <li>Элементы могут быть любого типа.</li>\r\n              <li>Размер массива может изменяться динамически.</li>\r\n            </ul>\r\n          </li>\r\n          <li><strong>Операции:</strong> Добавление, удаление, поиск, перебор.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nconst arr = [1, 2, 3];\r\narr.push(4); // [1, 2, 3, 4]\r\narr.pop();   // [1, 2, 3]\r\nconsole.log(arr[0]); // 1\r\n      `,\r\n    },\r\n    {\r\n      title: \"Стек (Stack)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Стек</strong> — это структура данных, работающая по принципу LIFO (Last In, First Out). Последний добавленный элемент извлекается первым.</p>\r\n        <ul>\r\n          <li><strong>Операции:</strong>\r\n            <ul>\r\n              <li><code>push</code>: Добавляет элемент на вершину стека.</li>\r\n              <li><code>pop</code>: Удаляет элемент с вершины стека.</li>\r\n              <li><code>peek</code>: Возвращает элемент на вершине стека без его удаления.</li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nclass Stack {\r\n  constructor() {\r\n    this.items = [];\r\n  }\r\n  push(item) {\r\n    this.items.push(item);\r\n  }\r\n  pop() {\r\n    return this.items.pop();\r\n  }\r\n  peek() {\r\n    return this.items[this.items.length - 1];\r\n  }\r\n}\r\n\r\nconst stack = new Stack();\r\nstack.push(1);\r\nstack.push(2);\r\nconsole.log(stack.pop()); // 2\r\nconsole.log(stack.peek()); // 1\r\n      `,\r\n    },\r\n    {\r\n      title: \"Очередь (Queue)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Очередь</strong> — это структура данных, работающая по принципу FIFO (First In, First Out). Первый добавленный элемент извлекается первым.</p>\r\n        <ul>\r\n          <li><strong>Операции:</strong>\r\n            <ul>\r\n              <li><code>enqueue</code>: Добавляет элемент в конец очереди.</li>\r\n              <li><code>dequeue</code>: Удаляет элемент из начала очереди.</li>\r\n              <li><code>peek</code>: Возвращает первый элемент без его удаления.</li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nclass Queue {\r\n  constructor() {\r\n    this.items = [];\r\n  }\r\n  enqueue(item) {\r\n    this.items.push(item);\r\n  }\r\n  dequeue() {\r\n    return this.items.shift();\r\n  }\r\n  peek() {\r\n    return this.items[0];\r\n  }\r\n}\r\n\r\nconst queue = new Queue();\r\nqueue.enqueue(1);\r\nqueue.enqueue(2);\r\nconsole.log(queue.dequeue()); // 1\r\nconsole.log(queue.peek());    // 2\r\n      `,\r\n    },\r\n    {\r\n      title: \"Связанный список (Linked List)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Связанный список</strong> — это структура данных, состоящая из узлов, где каждый узел содержит значение и ссылку на следующий узел.</p>\r\n        <ul>\r\n          <li><strong>Типы:</strong>\r\n            <ul>\r\n              <li><strong>Односвязный список:</strong> Каждый узел ссылается только на следующий узел.</li>\r\n              <li><strong>Двусвязный список:</strong> Каждый узел ссылается на предыдущий и следующий узлы.</li>\r\n            </ul>\r\n          </li>\r\n          <li><strong>Операции:</strong> Добавление, удаление, поиск.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nclass Node {\r\n  constructor(value) {\r\n    this.value = value;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\nclass LinkedList {\r\n  constructor() {\r\n    this.head = null;\r\n  }\r\n  add(value) {\r\n    const newNode = new Node(value);\r\n    if (!this.head) {\r\n      this.head = newNode;\r\n    } else {\r\n      let current = this.head;\r\n      while (current.next) {\r\n        current = current.next;\r\n      }\r\n      current.next = newNode;\r\n    }\r\n  }\r\n  find(value) {\r\n    let current = this.head;\r\n    while (current) {\r\n      if (current.value === value) return current;\r\n      current = current.next;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nconst list = new LinkedList();\r\nlist.add(1);\r\nlist.add(2);\r\nconsole.log(list.find(2)); // Node { value: 2, next: null }\r\n      `,\r\n    },\r\n    {\r\n      title: \"Хэш-таблица (Hash Table)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Хэш-таблица</strong> — это структура данных, которая хранит пары ключ-значение. Ключи преобразуются в индексы с помощью хэш-функции.</p>\r\n        <ul>\r\n          <li><strong>Преимущества:</strong>\r\n            <ul>\r\n              <li>Быстрый доступ к данным по ключу.</li>\r\n              <li>Эффективное добавление, удаление и поиск.</li>\r\n            </ul>\r\n          </li>\r\n          <li><strong>Недостатки:</strong>\r\n            <ul>\r\n              <li>Коллизии (когда разные ключи дают одинаковый хэш).</li>\r\n              <li>Потребление памяти.</li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nclass HashTable {\r\n  constructor(size = 50) {\r\n    this.buckets = new Array(size);\r\n  }\r\n  hash(key) {\r\n    let hash = 0;\r\n    for (let char of key) {\r\n      hash += char.charCodeAt(0);\r\n    }\r\n    return hash % this.buckets.length;\r\n  }\r\n  set(key, value) {\r\n    const index = this.hash(key);\r\n    if (!this.buckets[index]) {\r\n      this.buckets[index] = [];\r\n    }\r\n    this.buckets[index].push([key, value]);\r\n  }\r\n  get(key) {\r\n    const index = this.hash(key);\r\n    if (this.buckets[index]) {\r\n      for (let [k, v] of this.buckets[index]) {\r\n        if (k === key) return v;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nconst table = new HashTable();\r\ntable.set(\"name\", \"Alice\");\r\nconsole.log(table.get(\"name\")); // Alice\r\n      `,\r\n    },\r\n    {\r\n      title: \"Дерево (Tree)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Дерево</strong> — это иерархическая структура данных, состоящая из узлов, где каждый узел имеет родительский и дочерние узлы.</p>\r\n        <ul>\r\n          <li><strong>Типы деревьев:</strong>\r\n            <ul>\r\n              <li><strong>Бинарное дерево:</strong> Каждый узел имеет не более двух дочерних узлов.</li>\r\n              <li><strong>Бинарное дерево поиска (BST):</strong> Левое поддерево содержит значения меньше текущего узла, а правое — больше.</li>\r\n            </ul>\r\n          </li>\r\n          <li><strong>Операции:</strong> Поиск, вставка, удаление.</li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nclass TreeNode {\r\n  constructor(value) {\r\n    this.value = value;\r\n    this.left = null;\r\n    this.right = null;\r\n  }\r\n}\r\n\r\nclass BinarySearchTree {\r\n  constructor() {\r\n    this.root = null;\r\n  }\r\n  insert(value) {\r\n    const newNode = new TreeNode(value);\r\n    if (!this.root) {\r\n      this.root = newNode;\r\n    } else {\r\n      let current = this.root;\r\n      while (true) {\r\n        if (value < current.value) {\r\n          if (!current.left) {\r\n            current.left = newNode;\r\n            break;\r\n          }\r\n          current = current.left;\r\n        } else {\r\n          if (!current.right) {\r\n            current.right = newNode;\r\n            break;\r\n          }\r\n          current = current.right;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst bst = new BinarySearchTree();\r\nbst.insert(10);\r\nbst.insert(5);\r\nbst.insert(15);\r\nconsole.log(bst.root.value); // 10\r\n      `,\r\n    },\r\n    {\r\n      title: \"Граф (Graph)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Граф</strong> — это структура данных, состоящая из вершин (узлов) и рёбер, которые соединяют эти вершины.</p>\r\n        <ul>\r\n          <li><strong>Типы графов:</strong>\r\n            <ul>\r\n              <li><strong>Ориентированный граф:</strong> Рёбра имеют направление.</li>\r\n              <li><strong>Неориентированный граф:</strong> Рёбра не имеют направления.</li>\r\n            </ul>\r\n          </li>\r\n          <li><strong>Представление:</strong>\r\n            <ul>\r\n              <li>Список смежности.</li>\r\n              <li>Матрица смежности.</li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      `,\r\n      code: `\r\nclass Graph {\r\n  constructor() {\r\n    this.adjacencyList = {};\r\n  }\r\n  addVertex(vertex) {\r\n    if (!this.adjacencyList[vertex]) {\r\n      this.adjacencyList[vertex] = [];\r\n    }\r\n  }\r\n  addEdge(vertex1, vertex2) {\r\n    this.adjacencyList[vertex1].push(vertex2);\r\n    this.adjacencyList[vertex2].push(vertex1);\r\n  }\r\n}\r\n\r\nconst graph = new Graph();\r\ngraph.addVertex(\"A\");\r\ngraph.addVertex(\"B\");\r\ngraph.addEdge(\"A\", \"B\");\r\nconsole.log(graph.adjacencyList); // { A: [\"B\"], B: [\"A\"] }\r\n      `,\r\n    },\r\n    {\r\n      title: \"Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Структуры данных — это фундаментальные концепции программирования, которые помогают эффективно решать задачи. Выбор структуры данных зависит от конкретной задачи и требований к производительности.</p>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const DOM = {\r\n  id: 220,\r\n  title: \"DOM (Документ Объект Модель)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое DOM?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>DOM (Document Object Model)</strong> — это программный интерфейс, который представляет HTML- или XML-документ в виде дерева узлов. DOM позволяет программам и скриптам динамически взаимодействовать с содержимым, структурой и стилем документа.</p>\r\n        <p>DOM является стандартом W3C и обеспечивает платформонезависимый способ работы с документами.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Структура DOM\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>DOM представляет собой дерево узлов, где каждый узел соответствует элементу, тексту или атрибуту в документе:</p>\r\n        <ul>\r\n          <li><strong>Элементы:</strong> HTML-теги, такие как <code><div></code>, <code><p></code>.</li>\r\n          <li><strong>Текстовые узлы:</strong> Содержимое внутри тегов, например, текст в <code><p>Hello</p></code>.</li>\r\n          <li><strong>Атрибуты:</strong> Дополнительные свойства элементов, например, <code>class=\"container\"</code>.</li>\r\n        </ul>\r\n        <p>Пример DOM-дерева:</p>\r\n        <pre><code><html>\r\n  <head><title>Page</title></head>\r\n  <body>\r\n    <div id=\"app\"></div>\r\n  </body>\r\n</html></code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Связь с HTML и CSS\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>DOM тесно связан с HTML и CSS:</p>\r\n        <ul>\r\n          <li><strong>HTML:</strong> Определяет структуру документа, которая затем преобразуется в DOM.</li>\r\n          <li><strong>CSS:</strong> Определяет внешний вид элементов. DOM предоставляет доступ к вычисленным стилям через API, например, <code>getComputedStyle</code>.</li>\r\n          <li><strong>JavaScript:</strong> Является основным языком для манипуляции DOM.</li>\r\n        </ul>\r\n        <p>Пример связи:</p>\r\n        <pre><code><style>\r\n  .highlight { color: red; }\r\n</style>\r\n\r\n<div class=\"highlight\">Text</div></code></pre>\r\n        <p>JavaScript может изменить класс элемента, чтобы применить стиль:</p>\r\n        <pre><code>element.classList.add('highlight');</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Как браузер создает DOM\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Процесс создания DOM включает несколько этапов:</p>\r\n        <ol>\r\n          <li><strong>Парсинг HTML:</strong> Браузер читает HTML-документ и строит DOM-дерево.</li>\r\n          <li><strong>Построение CSSOM:</strong> Браузер парсит CSS и создает CSS Object Model.</li>\r\n          <li><strong>Объединение DOM и CSSOM:</strong> Создается Render Tree, который определяет, какие элементы будут отображаться на экране.</li>\r\n          <li><strong>Layout:</strong> Вычисляются размеры и позиции элементов.</li>\r\n          <li><strong>Painting:</strong> Элементы отрисовываются на экране.</li>\r\n        </ol>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Преимущества и недостатки DOM\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Преимущества:</strong></p>\r\n        <ul>\r\n          <li>Универсальный интерфейс для работы с документами.</li>\r\n          <li>Позволяет динамически изменять содержимое и стили.</li>\r\n          <li>Поддерживается всеми современными браузерами.</li>\r\n        </ul>\r\n        <p><strong>Недостатки:</strong></p>\r\n        <ul>\r\n          <li>Может быть медленным при частых изменениях из-за рефлоу и репейнтинга.</li>\r\n          <li>Сложность работы с большими документами.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      url: \"https://developer.mozilla.org/ru/docs/Web/API/Document_Object_Model\",\r\n      link: \"MDN: DOM\",\r\n    },\r\n  ],\r\n};\r\n","import { ConnectMethod } from \"./ConnectMethod/ConnectMethod\";\r\nimport { HTTPHeaders } from \"./HTTPHeaders/HTTPHeaders\";\r\nimport { HttpProtocols } from \"./HttpProtocols/HttpProtocols\";\r\nimport { IdempotentHTTPMethods } from \"./IdempotentHTTPMethods/IdempotentHTTPMethods\";\r\nimport { ProtocolTCPAndUDP } from \"./ProtocolTCPAndUDP/ProtocolTCPAndUDP\";\r\nimport { HTTPBase } from \"./HTTPBase/HTTPBase\";\r\nimport { GETandPOST } from \"./GETandPOST/GETandPOST\";\r\nimport { PATCHandPUT } from \"./PATCHandPUT/PATCHandPUT\";\r\nimport { Options } from \"./Options/Options\";\r\nimport { ResponseCodes } from \"./ResponseCodes/ResponseCodes\";\r\nimport { RequestResponse } from \"./RequestResponse/RequestResponse\";\r\n\r\nexport const HTTPAndHTTPS = {\r\n  id: 104,\r\n  title: \"HTTP и HTTPS\",\r\n  children: [\r\n    HTTPBase,\r\n    HTTPHeaders,\r\n    GETandPOST,\r\n    PATCHandPUT,\r\n    Options,\r\n    HttpProtocols,\r\n    IdempotentHTTPMethods,\r\n    ProtocolTCPAndUDP,\r\n    ConnectMethod,\r\n    RequestResponse,\r\n    ResponseCodes,\r\n  ],\r\n};\r\n","export const HTTPBase = {\r\n  id: 10009,\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>HTTP (HyperText Transfer Protocol) — это протокол, используемый для передачи данных в интернете. HTTPS (HTTP Secure) — защищенная версия HTTP, использующая шифрование для обеспечения безопасности данных во время передачи.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"HTTP\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Основные характеристики HTTP:</p>\r\n            <ul>\r\n              <li><strong>Протокол передачи:</strong> HTTP работает по принципу клиент-сервер, где клиент (например, веб-браузер) отправляет запросы, а сервер отвечает на них.</li>\r\n              <li><strong>Не защищенный:</strong> Данные передаются в открытом виде, что делает их уязвимыми для перехвата и атак.</li>\r\n              <li><strong>Методы:</strong> Включает методы, такие как GET, POST, PUT, DELETE и другие для взаимодействия с ресурсами.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"HTTPS\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Основные характеристики HTTPS:</p>\r\n            <ul>\r\n              <li><strong>Шифрование:</strong> HTTPS использует протокол SSL/TLS для шифрования данных, что обеспечивает защиту от перехвата.</li>\r\n              <li><strong>Безопасность:</strong> Защищает конфиденциальность информации, передаваемой между клиентом и сервером.</li>\r\n              <li><strong>Аутентификация:</strong> HTTPS позволяет проверить подлинность сервера, что помогает предотвратить атаки типа \"человек посередине\".</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества HTTPS\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Преимущества использования HTTPS:</p>\r\n            <ul>\r\n              <li><strong>Безопасность:</strong> Защита данных от перехвата и подделки.</li>\r\n              <li><strong>Доверие пользователей:</strong> HTTPS повышает доверие пользователей к веб-сайту, особенно на страницах с вводом личных данных.</li>\r\n              <li><strong>SEO:</strong> Поисковые системы, такие как Google, отдают предпочтение HTTPS-сайтам в результатах поиска.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Недостатки и ограничения\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Недостатки и ограничения:</p>\r\n            <ul>\r\n              <li><strong>Производительность:</strong> Шифрование может немного замедлить скорость передачи данных.</li>\r\n              <li><strong>Сложность настройки:</strong> Требует наличия SSL-сертификата и правильной конфигурации сервера.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Рекомендации\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Рекомендации по использованию:</p>\r\n            <ul>\r\n              <li><strong>Всегда используйте HTTPS:</strong> Особенно на сайтах, обрабатывающих личные и финансовые данные.</li>\r\n              <li><strong>Регулярно обновляйте SSL-сертификаты:</strong> Убедитесь, что сертификаты актуальны и правильно настроены.</li>\r\n              <li><strong>Переходите на HTTPS:</strong> Если ваш сайт еще использует HTTP, рассмотрите возможность перехода на защищенную версию.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const HTTPHeaders = {\r\n  id: 10004,\r\n  title: \"Заголовки HTTP\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Заголовки HTTP — это части HTTP-запросов и ответов, которые содержат метаинформацию о сообщении. Они используются для передачи информации между клиентом и сервером, определяя параметры запроса или ответа.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Типы заголовков\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Заголовки HTTP делятся на несколько категорий:</p>\r\n            <ul>\r\n              <li><strong>Общие заголовки:</strong> Применяются как в запросах, так и в ответах (например, Date, Connection).</li>\r\n              <li><strong>Заголовки запроса:</strong> Используются только в запросах от клиента к серверу (например, Accept, User-Agent).</li>\r\n              <li><strong>Заголовки ответа:</strong> Используются только в ответах от сервера к клиенту (например, Server, WWW-Authenticate).</li>\r\n              <li><strong>Заголовки сущностей:</strong> Применяются для описания тела сообщения, включая тип и длину контента (например, Content-Type, Content-Length).</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Примеры заголовков\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Некоторые распространенные заголовки HTTP:</p>\r\n            <ul>\r\n              <li><strong>Content-Type:</strong> Указывает тип данных, отправляемых в теле сообщения (например, application/json, text/html).</li>\r\n              <li><strong>Authorization:</strong> Содержит учетные данные для аутентификации пользователя.</li>\r\n              <li><strong>Accept:</strong> Указывает, какие типы контента клиент готов принимать.</li>\r\n              <li><strong>User-Agent:</strong> Информация о клиентском приложении, которое делает запрос (например, браузер).</li>\r\n              <li><strong>Cookie:</strong> Передает данные о сессии пользователя на сервер.</li>\r\n              <li><strong>Cache-Control:</strong> Указывает, как кэшировать ответ (например, no-cache, max-age).</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Роль заголовков в HTTP\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Заголовки HTTP играют важную роль в:</p>\r\n            <ul>\r\n              <li><strong>Управлении сессиями:</strong> Позволяют передавать информацию о пользователях и их сессиях.</li>\r\n              <li><strong>Кэшировании:</strong> Помогают управлять кэшированием данных, улучшая производительность и уменьшение нагрузки на сервер.</li>\r\n              <li><strong>Безопасности:</strong> Обеспечивают аутентификацию и авторизацию пользователей через заголовки.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Заголовки HTTP являются важной частью протокола и обеспечивают гибкость и функциональность в обмене данными между клиентами и серверами. Понимание их структуры и назначения помогает эффективно разрабатывать и использовать веб-приложения.</p>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const GETandPOST = {\r\n  id: 10010,\r\n  title: \"GET и POST\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>GET и POST — это два основных метода HTTP, используемых для взаимодействия с ресурсами на сервере. Они имеют различные цели и особенности.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"GET\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Характеристики метода GET:</p>\r\n            <ul>\r\n              <li><strong>Запрос данных:</strong> GET используется для получения данных с сервера. Запросы обычно не изменяют состояние сервера.</li>\r\n              <li><strong>Идемпотентность:</strong> Повторные запросы GET с одинаковыми параметрами возвращают один и тот же результат и не изменяют ресурс.</li>\r\n              <li><strong>Передача данных:</strong> Данные передаются через URL в строке запроса (query string). Ограничение на длину URL может варьироваться в зависимости от браузера.</li>\r\n              <li><strong>Кэширование:</strong> Ответы на GET-запросы могут быть кэшированы браузерами и прокси-серверами.</li>\r\n              <li><strong>Пример:</strong> Запрос для получения списка пользователей: <code>GET /users</code>.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"POST\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Характеристики метода POST:</p>\r\n            <ul>\r\n              <li><strong>Отправка данных:</strong> POST используется для отправки данных на сервер, например, для создания нового ресурса или выполнения действия.</li>\r\n              <li><strong>Неидемпотентность:</strong> Повторные запросы POST могут создавать несколько одинаковых ресурсов или изменять состояние сервера.</li>\r\n              <li><strong>Передача данных:</strong> Данные отправляются в теле запроса, что позволяет передавать большие объемы информации и сложные структуры (например, JSON).</li>\r\n              <li><strong>Кэширование:</strong> Ответы на POST-запросы обычно не кэшируются.</li>\r\n              <li><strong>Пример:</strong> Запрос для создания нового пользователя: <code>POST /users</code> с телом запроса, содержащим данные пользователя.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Сравнение GET и POST\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Сравнение методов GET и POST:</p>\r\n            <ul>\r\n              <li><strong>Цель:</strong> GET используется для получения данных, POST — для отправки данных на сервер.</li>\r\n              <li><strong>Идемпотентность:</strong> GET идемпотентен, POST — нет.</li>\r\n              <li><strong>Объем данных:</strong> GET ограничен длиной URL, POST позволяет отправлять большие объемы данных в теле запроса.</li>\r\n              <li><strong>Кэширование:</strong> GET-запросы могут кэшироваться, POST-запросы — обычно нет.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Рекомендации по использованию\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Когда использовать GET и POST:</p>\r\n            <ul>\r\n              <li><strong>Используйте GET:</strong> Когда необходимо получить данные с сервера, и запрос не должен изменять состояние ресурса.</li>\r\n              <li><strong>Используйте POST:</strong> Когда нужно отправить данные на сервер для создания или изменения ресурса.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const PATCHandPUT = {\r\n  id: 10011,\r\n  title: \"PATCH и PUT\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>PATCH и PUT — это HTTP-методы, используемые для обновления ресурсов на сервере, но они имеют различные подходы и цели.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"PUT\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Характеристики метода PUT:</p>\r\n            <ul>\r\n              <li><strong>Обновление ресурса:</strong> PUT используется для полного обновления ресурса. Если ресурс не существует, он может быть создан.</li>\r\n              <li><strong>Идемпотентность:</strong> Повторные запросы PUT с одинаковыми данными не изменяют состояние ресурса после первого запроса.</li>\r\n              <li><strong>Требование полного представления:</strong> Клиент должен отправить все данные ресурса, даже если изменяется только часть из них.</li>\r\n              <li><strong>Пример:</strong> Отправка полного объекта пользователя для обновления всех его полей.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"PATCH\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Характеристики метода PATCH:</p>\r\n            <ul>\r\n              <li><strong>Частичное обновление:</strong> PATCH используется для частичного обновления ресурса, позволяя изменять только необходимые поля.</li>\r\n              <li><strong>Неидемпотентность:</strong> Хотя PATCH может быть идемпотентным, это зависит от реализации. Повторные запросы могут иметь разные результаты.</li>\r\n              <li><strong>Гибкость:</strong> Клиент отправляет только изменяемые поля, что уменьшает объем передаваемых данных.</li>\r\n              <li><strong>Пример:</strong> Отправка только обновленного адреса электронной почты пользователя без необходимости отправлять остальные данные.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Сравнение PUT и PATCH\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Сравнение методов PUT и PATCH:</p>\r\n            <ul>\r\n              <li><strong>Обновление:</strong> PUT требует полного ресурса, тогда как PATCH требует только измененных полей.</li>\r\n              <li><strong>Идемпотентность:</strong> PUT всегда идемпотентен, PATCH может быть идемпотентным, но не всегда.</li>\r\n              <li><strong>Применение:</strong> PUT чаще используется для полных обновлений, PATCH — для частичных изменений.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Рекомендации по использованию\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Когда использовать PUT и PATCH:</p>\r\n            <ul>\r\n              <li><strong>Используйте PUT:</strong> Когда необходимо полностью обновить ресурс или создать его, если он не существует.</li>\r\n              <li><strong>Используйте PATCH:</strong> Когда нужно внести небольшие изменения в существующий ресурс без необходимости отправлять все его данные.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const Options = {\r\n    id: 10012,\r\n  title: \"OPTIONS\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Метод OPTIONS в HTTP используется для получения информации о том, какие методы и заголовки поддерживаются сервером для определенного ресурса или по определенному URL.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Характеристики\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Характеристики метода OPTIONS:</p>\r\n            <ul>\r\n              <li><strong>Запрос информации:</strong> OPTIONS позволяет клиенту узнать, какие методы могут быть использованы для взаимодействия с ресурсом.</li>\r\n              <li><strong>Не изменяет состояние:</strong> Запросы OPTIONS не изменяют состояние ресурса на сервере и являются идемпотентными.</li>\r\n              <li><strong>Используются в CORS:</strong> Метод OPTIONS часто используется в механизме Cross-Origin Resource Sharing (CORS) для проверки разрешенных методов и заголовков при кросс-доменных запросах.</li>\r\n              <li><strong>Ответ сервера:</strong> Сервер может вернуть заголовок <code>Allow</code>, указывающий на поддерживаемые методы для данного ресурса.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Применение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Метод OPTIONS используется в следующих сценариях:</p>\r\n            <ul>\r\n              <li><strong>Документация API:</strong> Позволяет клиентам узнать, какие методы доступны для работы с API.</li>\r\n              <li><strong>Кросс-доменные запросы:</strong> В CORS для проверки разрешений на запросы с других доменов.</li>\r\n              <li><strong>Тестирование и отладка:</strong> Для диагностики и тестирования доступных методов и функциональности сервера.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Пример запроса\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример запроса OPTIONS:</p>\r\n            <pre><code>OPTIONS /api/users HTTP/1.1\r\n    Host: example.com\r\n    </code></pre>\r\n            <p>Ответ сервера может выглядеть так:</p>\r\n            <pre><code>HTTP/1.1 200 OK\r\n    Allow: GET, POST, OPTIONS\r\n    </code></pre>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const HttpProtocols = {\r\n  id: 10005,\r\n  title: \"HTTP Protocols (HTTP/1, HTTP/2, HTTP/3)\",\r\n  children: [\r\n    {\r\n      title: \"Введение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>HTTP</strong> (HyperText Transfer Protocol) — это протокол прикладного уровня, используемый для передачи данных в интернете. С момента появления HTTP/1 в 1997 году были разработаны новые версии протокола, направленные на улучшение производительности и безопасности.</p>\r\n        <p>Основные версии:</p>\r\n        <ul>\r\n          <li><strong>HTTP/1.1:</strong> Первый широко используемый протокол. Выпущен в 1999 году.</li>\r\n          <li><strong>HTTP/2:</strong> Вторая версия, введенная в 2015 году, с акцентом на производительность.</li>\r\n          <li><strong>HTTP/3:</strong> Третья версия, основанная на QUIC, с улучшенной безопасностью и скоростью.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"HTTP/1.1\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>HTTP/1.1</strong> был стандартом более 20 лет. Он работает по принципу текстовых запросов и ответов.</p>\r\n        <p>Особенности:</p>\r\n        <ul>\r\n          <li><strong>Текстовый формат:</strong> Запросы и ответы передаются в виде текста.</li>\r\n          <li><strong>Блокирующие запросы:</strong> Поддерживает только один запрос за раз по одному соединению (head-of-line blocking).</li>\r\n          <li><strong>Pipelining:</strong> Позволяет отправлять несколько запросов по одному соединению, но ответы должны приходить в том же порядке.</li>\r\n          <li><strong>Keep-Alive:</strong> Позволяет повторно использовать соединение для нескольких запросов.</li>\r\n        </ul>\r\n        <p>Недостатки:</p>\r\n        <ul>\r\n          <li>Медленная передача данных из-за блокировки очереди запросов.</li>\r\n          <li>Высокая задержка при загрузке ресурсов.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"HTTP/2\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>HTTP/2</strong> был разработан для устранения недостатков HTTP/1.1. Основные изменения связаны с производительностью.</p>\r\n        <p>Особенности:</p>\r\n        <ul>\r\n          <li><strong>Бинарный формат:</strong> Запросы и ответы передаются в бинарном виде, что уменьшает размер данных и повышает скорость обработки.</li>\r\n          <li><strong>Multiplexing:</strong> Возможность отправлять несколько запросов и получать ответы параллельно по одному соединению.</li>\r\n          <li><strong>Header Compression (HPACK):</strong> Сжатие заголовков для уменьшения объема передаваемых данных.</li>\r\n          <li><strong>Server Push:</strong> Сервер может отправлять ресурсы клиенту до того, как они будут запрошены.</li>\r\n          <li><strong>Prioritization:</strong> Приоритизация запросов для оптимизации загрузки критических ресурсов.</li>\r\n        </ul>\r\n        <p>Преимущества:</p>\r\n        <ul>\r\n          <li>Уменьшение задержек при загрузке ресурсов.</li>\r\n          <li>Эффективное использование одного соединения.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"HTTP/3\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>HTTP/3</strong> — это следующая эволюция протокола, основанная на QUIC (Quick UDP Internet Connections). Она решает проблемы, связанные с потерей пакетов и задержками.</p>\r\n        <p>Особенности:</p>\r\n        <ul>\r\n          <li><strong>QUIC вместо TCP:</strong> Использует протокол UDP, что уменьшает задержки и улучшает производительность при потере пакетов.</li>\r\n          <li><strong>Множество потоков:</strong> Каждый запрос работает в отдельном потоке, что исключает head-of-line blocking.</li>\r\n          <li><strong>Встроенное шифрование:</strong> Безопасность на уровне протокола (шифрование TLS встроено по умолчанию).</li>\r\n          <li><strong>Быстрое восстановление соединений:</strong> Переподключение происходит быстрее благодаря сохранению состояния.</li>\r\n        </ul>\r\n        <p>Преимущества:</p>\r\n        <ul>\r\n          <li>Меньшая задержка при переподключении.</li>\r\n          <li>Лучшая производительность в условиях нестабильного соединения.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Сравнение HTTP/1, HTTP/2 и HTTP/3\",\r\n      type: \"text\",\r\n      description: `\r\n        <table border=\"1\">\r\n          <tr>\r\n            <th>Характеристика</th>\r\n            <th>HTTP/1.1</th>\r\n            <th>HTTP/2</th>\r\n            <th>HTTP/3</th>\r\n          </tr>\r\n          <tr>\r\n            <td>Формат данных</td>\r\n            <td>Текстовый</td>\r\n            <td>Бинарный</td>\r\n            <td>Бинарный</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Протокол транспорта</td>\r\n            <td>TCP</td>\r\n            <td>TCP</td>\r\n            <td>UDP (QUIC)</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Параллельность запросов</td>\r\n            <td>Одиночные запросы</td>\r\n            <td>Multiplexing</td>\r\n            <td>Множество потоков</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Шифрование</td>\r\n            <td>Необязательно</td>\r\n            <td>Частично (TLS 1.2+)</td>\r\n            <td>Обязательно (TLS 1.3)</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Head-of-line blocking</td>\r\n            <td>Да</td>\r\n            <td>Нет (на уровне потоков)</td>\r\n            <td>Нет (на уровне пакетов)</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Производительность</td>\r\n            <td>Низкая</td>\r\n            <td>Высокая</td>\r\n            <td>Очень высокая</td>\r\n          </tr>\r\n        </table>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Почему важно знать эти различия?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Знание различий между HTTP/1, HTTP/2 и HTTP/3 важно для:</p>\r\n        <ul>\r\n          <li>Оптимизации веб-приложений и улучшения их производительности.</li>\r\n          <li>Разработки серверных и клиентских приложений с учетом особенностей протоколов.</li>\r\n          <li>Понимания современных технологий, таких как QUIC и TLS.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Полезные ссылки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Для более глубокого изучения:</p>\r\n        <ul>\r\n          <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP\"  target=\"_blank\">MDN Web Docs: Evolution of HTTP</a></li>\r\n          <li><a href=\"https://http2.github.io/\"  target=\"_blank\">HTTP/2 Official Website</a></li>\r\n          <li><a href=\"https://quicwg.org/\"  target=\"_blank\">QUIC Working Group</a></li>\r\n          <li><a href=\"https://en.wikipedia.org/wiki/HTTP/3\"  target=\"_blank\">Wikipedia: HTTP/3</a></li>\r\n        </ul>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const IdempotentHTTPMethods = {\r\n  id: 10006,\r\n  title: \"Идемпотентные методы HTTP\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Идемпотентные методы HTTP — это методы, которые могут быть выполнены несколько раз без изменения результата за пределами первоначального применения. Это означает, что повторный запрос с теми же параметрами не изменит состояние ресурса на сервере после первого запроса.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Идемпотентные методы\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>К основным идемпотентным методам HTTP относятся:</p>\r\n            <ul>\r\n              <li><strong>GET:</strong> Используется для получения данных с сервера. Повторный запрос не изменяет состояние ресурса.</li>\r\n              <li><strong>PUT:</strong> Используется для обновления существующего ресурса или создания нового ресурса с определенным идентификатором. Повторный запрос с теми же данными не изменит состояние ресурса.</li>\r\n              <li><strong>DELETE:</strong> Используется для удаления ресурса. Повторный запрос на удаление уже удаленного ресурса может возвращать ошибку, но не изменяет состояние сервера.</li>\r\n              <li><strong>OPTIONS:</strong> Используется для получения информации о том, какие методы поддерживаются сервером для определенного ресурса. Не изменяет состояние ресурса.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Неидемпотентные методы\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Неидемпотентные методы:</p>\r\n            <ul>\r\n              <li><strong>POST:</strong> Используется для создания новых ресурсов. Повторный запрос может создать несколько одинаковых ресурсов, что изменит состояние сервера.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества идемпотентности\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Преимущества использования идемпотентных методов:</p>\r\n            <ul>\r\n              <li><strong>Устойчивость к ошибкам:</strong> Позволяет клиентам повторять запросы без опасений изменить состояние сервера.</li>\r\n              <li><strong>Упрощение обработки:</strong> Сервер может легко повторно обрабатывать запросы без необходимости отслеживать их состояние.</li>\r\n              <li><strong>Гарантия консистентности:</strong> Помогает поддерживать согласованность данных, особенно в распределенных системах.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Применение идемпотентных методов\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Идемпотентные методы часто используются в следующих сценариях:</p>\r\n            <ul>\r\n              <li><strong>RESTful API:</strong> Для обеспечения надежности и предсказуемости взаимодействия между клиентом и сервером.</li>\r\n              <li><strong>Обновления конфигураций:</strong> Для управления состоянием ресурсов без риска нежелательных изменений.</li>\r\n              <li><strong>Логирование операций:</strong> Для записи действий, которые могут быть безопасно повторены.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const ProtocolTCPAndUDP = {\r\n  id: 10007,\r\n  title: \"Протокол TCP и UDP\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>TCP (Transmission Control Protocol) и UDP (User Datagram Protocol) — это два основных протокола транспортного уровня в модели OSI, используемых для передачи данных по сети.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"TCP (Transmission Control Protocol)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Характеристики TCP:</p>\r\n            <ul>\r\n              <li><strong>Соединение:</strong> TCP устанавливает соединение между отправителем и получателем перед началом передачи данных (т.н. \"трехстороннее рукопожатие\").</li>\r\n              <li><strong>Надежность:</strong> Обеспечивает гарантированную доставку данных, проверку целостности и порядок их получения.</li>\r\n              <li><strong>Потоковая передача:</strong> Данные передаются в виде потока байтов, что позволяет обрабатывать большие объемы информации.</li>\r\n              <li><strong>Использование:</strong> Часто используется для приложений, требующих надежной передачи данных, таких как веб-сайты, электронная почта и FTP.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"UDP (User Datagram Protocol)\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Характеристики UDP:</p>\r\n            <ul>\r\n              <li><strong>Без соединения:</strong> UDP не устанавливает соединение перед передачей данных, что снижает накладные расходы.</li>\r\n              <li><strong>Ненадежность:</strong> UDP не гарантирует доставку данных, их порядок или целостность. Потерянные пакеты не повторяются.</li>\r\n              <li><strong>Датаграммная передача:</strong> Данные передаются в виде отдельных пакетов (датаграмм), что может быть более эффективным для определенных приложений.</li>\r\n              <li><strong>Использование:</strong> Часто используется для приложений, требующих низкой задержки и скорости передачи, таких как потоковое видео, онлайн-игры и VoIP.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Сравнение TCP и UDP\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Сравнение протоколов:</p>\r\n            <ul>\r\n              <li><strong>Надежность:</strong> TCP — надежный, UDP — ненадежный.</li>\r\n              <li><strong>Скорость:</strong> UDP быстрее, поскольку нет накладных расходов на установление соединения и проверку целостности.</li>\r\n              <li><strong>Использование:</strong> TCP подходит для приложений, требующих надежности, тогда как UDP — для приложений, требующих скорости.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Рекомендации\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Рекомендации по выбору протокола:</p>\r\n            <ul>\r\n              <li><strong>Используйте TCP:</strong> Для приложений, где важна надежность, например, для передачи файлов и веб-трафика.</li>\r\n              <li><strong>Используйте UDP:</strong> Для приложений, где важна скорость и задержка, например, для видеоконференций и онлайн-игр.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const ConnectMethod = {\r\n  id: 10008,\r\n  title: \"Метод CONNECT\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Метод CONNECT в HTTP используется для установления туннельного соединения к серверу через прокси-сервер. Этот метод позволяет клиенту устанавливать TCP-соединение с сервером через прокси, что полезно для работы с зашифрованными соединениями, такими как HTTPS.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Характеристики\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Характеристики метода CONNECT:</p>\r\n            <ul>\r\n              <li><strong>Туннелирование:</strong> Метод CONNECT создает туннель для передачи данных между клиентом и сервером через прокси-сервер.</li>\r\n              <li><strong>Использование с HTTPS:</strong> Обычно применяется для передачи зашифрованного HTTPS-трафика через прокси.</li>\r\n              <li><strong>Неизменяемость запросов:</strong> Все данные передаются без изменений, что позволяет поддерживать безопасность соединения.</li>\r\n              <li><strong>Ответ прокси-сервера:</strong> Прокси-сервер отвечает на запрос CONNECT с кодом 200 (OK), если соединение успешно установлено.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Применение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Метод CONNECT используется в следующих ситуациях:</p>\r\n            <ul>\r\n              <li><strong>Доступ к защищенным ресурсам:</strong> Позволяет клиентам подключаться к защищенным ресурсам через прокси-серверы.</li>\r\n              <li><strong>Обход ограничений:</strong> Используется для обхода сетевых фильтров и блокировок, позволяя осуществлять безопасное соединение.</li>\r\n              <li><strong>Шифрование данных:</strong> Обеспечивает шифрование трафика между клиентом и сервером в случаях, когда это необходимо.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Пример запроса\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Пример запроса CONNECT:</p>\r\n            <pre><code>CONNECT www.example.com:443 HTTP/1.1\r\n    Host: www.example.com:443\r\n    </code></pre>\r\n            <p>Ответ прокси-сервера может выглядеть так:</p>\r\n            <pre><code>HTTP/1.1 200 Connection Established\r\n    </code></pre>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const RequestResponse = {\r\n  id: 10014,\r\n  title: \"Request/Response\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Модель Request/Response (Запрос/Ответ) — это основополагающая модель взаимодействия в сетевых протоколах, особенно в HTTP. Она описывает процесс, при котором клиент отправляет запрос на сервер, а сервер отвечает на этот запрос.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Структура запроса\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Структура HTTP-запроса включает следующие компоненты:</p>\r\n            <ul>\r\n              <li><strong>Метод:</strong> Тип запроса (например, GET, POST, PUT, DELETE).</li>\r\n              <li><strong>URL:</strong> Адрес ресурса, к которому осуществляется запрос.</li>\r\n              <li><strong>Версия протокола:</strong> Версия HTTP (например, HTTP/1.1).</li>\r\n              <li><strong>Заголовки:</strong> Дополнительные данные о запросе (например, Content-Type, User-Agent).</li>\r\n              <li><strong>Тело запроса:</strong> (опционально) Данные, отправляемые с запросом (например, данные формы).</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Структура ответа\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Структура HTTP-ответа включает следующие компоненты:</p>\r\n            <ul>\r\n              <li><strong>Версия протокола:</strong> Версия HTTP (например, HTTP/1.1).</li>\r\n              <li><strong>Код состояния:</strong> Код, указывающий на результат обработки запроса (например, 200 OK, 404 Not Found).</li>\r\n              <li><strong>Фраза состояния:</strong> Описание кода состояния (например, \"OK\", \"Not Found\").</li>\r\n              <li><strong>Заголовки:</strong> Дополнительные данные об ответе (например, Content-Type, Content-Length).</li>\r\n              <li><strong>Тело ответа:</strong> (опционально) Данные, возвращаемые в ответе (например, HTML-код, JSON-данные).</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Процесс взаимодействия\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Процесс взаимодействия между клиентом и сервером:</p>\r\n            <ol>\r\n              <li>Клиент формирует запрос, используя нужный метод и адрес ресурса.</li>\r\n              <li>Запрос отправляется на сервер через сеть.</li>\r\n              <li>Сервер обрабатывает запрос и формирует ответ.</li>\r\n              <li>Ответ отправляется обратно клиенту.</li>\r\n              <li>Клиент обрабатывает ответ и выполняет необходимые действия (например, отображает данные пользователю).</li>\r\n            </ol>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Применение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Модель Request/Response используется в различных приложениях и протоколах:</p>\r\n            <ul>\r\n              <li><strong>Веб-приложения:</strong> Основной механизм взаимодействия между клиентами (браузерами) и серверами.</li>\r\n              <li><strong>API:</strong> RESTful и другие API используют модель Request/Response для обмена данными.</li>\r\n              <li><strong>Службы обмена сообщениями:</strong> Многие протоколы обмена сообщениями основаны на модели запросов и ответов.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const ResponseCodes = {\r\n  id: 10013,\r\n  title: \"Response Codes\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Коды ответа (Response Codes) — это числовые коды, которые сервер возвращает в ответ на HTTP-запросы. Они указывают на статус обработки запроса и помогают клиенту понять, что произошло с запросом.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Структура кодов ответа\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Коды ответа HTTP состоят из трех цифр и делятся на пять основных классов:</p>\r\n            <ul>\r\n              <li><strong>1xx (Информационные):</strong> Указывают, что запрос получен и продолжается обработка (например, 100 Continue).</li>\r\n              <li><strong>2xx (Успех):</strong> Указывают, что запрос был успешно обработан (например, 200 OK, 201 Created).</li>\r\n              <li><strong>3xx (Перенаправление):</strong> Указывают, что для завершения запроса необходимо выполнить дополнительные действия (например, 301 Moved Permanently, 302 Found).</li>\r\n              <li><strong>4xx (Ошибка клиента):</strong> Указывают на проблемы с запросом, отправленным клиентом (например, 400 Bad Request, 404 Not Found).</li>\r\n              <li><strong>5xx (Ошибка сервера):</strong> Указывают на ошибки, возникшие на стороне сервера при обработке запроса (например, 500 Internal Server Error, 503 Service Unavailable).</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Примеры кодов ответа\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Некоторые распространенные коды ответа:</p>\r\n            <ul>\r\n              <li><strong>200 OK:</strong> Запрос успешно обработан, и сервер возвращает запрашиваемые данные.</li>\r\n              <li><strong>201 Created:</strong> Запрос успешно обработан, и создан новый ресурс.</li>\r\n              <li><strong>204 No Content:</strong> Запрос успешно обработан, но нет данных для возврата.</li>\r\n              <li><strong>400 Bad Request:</strong> Запрос содержит неверный синтаксис или не может быть выполнен.</li>\r\n              <li><strong>401 Unauthorized:</strong> Для доступа к ресурсу требуется аутентификация.</li>\r\n              <li><strong>403 Forbidden:</strong> Сервер отказывается выполнять запрос, несмотря на наличие аутентификации.</li>\r\n              <li><strong>404 Not Found:</strong> Запрашиваемый ресурс не найден на сервере.</li>\r\n              <li><strong>500 Internal Server Error:</strong> Произошла ошибка на сервере, и запрос не может быть выполнен.</li>\r\n              <li><strong>503 Service Unavailable:</strong> Сервер временно недоступен, возможно, из-за перегрузки или обслуживания.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Роль кодов ответа\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Коды ответа играют важную роль в веб-разработке:</p>\r\n            <ul>\r\n              <li><strong>Управление потоком данных:</strong> Позволяют клиенту понимать статус выполнения запросов и реагировать соответствующим образом.</li>\r\n              <li><strong>Отладка:</strong> Помогают разработчикам находить и исправлять ошибки в приложениях.</li>\r\n              <li><strong>Улучшение пользовательского опыта:</strong> Предоставляют пользователям информацию о состоянии их запросов и возможных ошибках.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Коды ответа являются важной частью протокола HTTP и необходимы для эффективного взаимодействия между клиентами и серверами. Понимание их значений и использования помогает в разработке и отладке веб-приложений.</p>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const JWT = {\r\n  id: 102,\r\n  title: \"JWT (JSON Web Token)\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>JWT (JSON Web Token) — это открытый стандарт (RFC 7519), который определяет компактный и автономный способ безопасной передачи информации между сторонами в виде JSON-объекта. Эта информация может быть проверена и доверена, так как она подписана цифровой подписью.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Структура JWT\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>JWT состоит из трех частей, разделенных точками:</p>\r\n            <ul>\r\n              <li><strong>Header</strong>: Содержит информацию о типе токена (обычно \"JWT\") и алгоритме подписи (например, HMAC SHA256 или RSA).</li>\r\n              <li><strong>Payload</strong>: Содержит данные (т.Claims), которые будут переданы. Это может быть информация о пользователе, срок действия токена и т. д.</li>\r\n              <li><strong>Signature</strong>: Создается путем кодирования заголовка и полезной нагрузки, и последующей подписи с использованием секрета или закрытого ключа.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества JWT\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Преимущества использования JWT:</p>\r\n            <ul>\r\n              <li><strong>Самодостаточность</strong>: Токен содержит все необходимые данные, что позволяет избежать дополнительных запросов к серверу для проверки состояния сессии.</li>\r\n              <li><strong>Безопасность</strong>: JWT можно подписывать и шифровать, что обеспечивает защиту данных от подделки и несанкционированного доступа.</li>\r\n              <li><strong>Масштабируемость</strong>: JWT можно использовать в распределенных системах, где нет необходимости в хранилище состояния сессии на сервере.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Недостатки JWT\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Недостатки использования JWT:</p>\r\n            <ul>\r\n              <li><strong>Увеличение размера токена</strong>: Из-за включения дополнительных данных размер JWT может быть значительно больше, чем традиционные сессионные идентификаторы.</li>\r\n              <li><strong>Сложность управления сроком действия</strong>: После выдачи токена его нельзя отозвать, если он скомпрометирован, до истечения срока действия.</li>\r\n              <li><strong>Безопасность</strong>: Если секретный ключ, используемый для подписи токена, будет скомпрометирован, это может привести к серьезным угрозам безопасности.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Использование JWT\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>JWT часто используется для:</p>\r\n            <ul>\r\n              <li><strong>Аутентификации</strong>: После успешного входа в систему пользователю выдается JWT, который он использует для доступа к защищенным ресурсам.</li>\r\n              <li><strong>Авторизации</strong>: JWT может содержать информацию о ролях и разрешениях пользователя, что позволяет контролировать доступ к различным ресурсам.</li>\r\n              <li><strong>Передачи данных</strong>: JWT может использоваться для обмена информацией между различными системами в распределенных приложениях.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const JustAndHardRequest = {\r\n  id: 103,\r\n  title: \"Простые и сложные запросы\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Простые и сложные запросы относятся к типам запросов, используемых в базах данных и системах управления данными для извлечения информации. Простые запросы выполняются с использованием одной таблицы, тогда как сложные запросы могут включать несколько таблиц и более сложные условия.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Простые запросы\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Простые запросы обычно выполняют базовые операции извлечения данных и имеют следующую структуру:</p>\r\n            <ul>\r\n              <li><strong>Выборка данных:</strong> Извлечение данных из одной таблицы.</li>\r\n              <li><strong>Пример:</strong> <code>SELECT * FROM users WHERE age > 18;</code></li>\r\n              <li><strong>Условия:</strong> Простые условия фильтрации, такие как равенство или сравнение.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Сложные запросы\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Сложные запросы могут включать объединение нескольких таблиц, подзапросы и более сложные условия:</p>\r\n            <ul>\r\n              <li><strong>Объединение таблиц:</strong> Использование операторов <code>JOIN</code> для получения данных из нескольких таблиц.</li>\r\n              <li><strong>Подзапросы:</strong> Вложенные запросы, которые позволяют использовать результаты одного запроса в другом.</li>\r\n              <li><strong>Пример:</strong> <code>SELECT u.name, o.amount FROM users u JOIN orders o ON u.id = o.user_id WHERE o.status = 'completed';</code></li>\r\n              <li><strong>Группировка и агрегация:</strong> Использование функций агрегации (например, <code>SUM</code>, <code>COUNT</code>) в сочетании с <code>GROUP BY</code>.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества и недостатки\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Сравнение простых и сложных запросов:</p>\r\n            <ul>\r\n              <li><strong>Простые запросы:</strong>\r\n                <ul>\r\n                  <li>Преимущества: Быстрота выполнения, простота понимания и отладки.</li>\r\n                  <li>Недостатки: Ограниченные возможности извлечения данных.</li>\r\n                </ul>\r\n              </li>\r\n              <li><strong>Сложные запросы:</strong>\r\n                <ul>\r\n                  <li>Преимущества: Возможность получать более сложные и полные данные.</li>\r\n                  <li>Недостатки: Долгое время выполнения, сложность в написании и отладке.</li>\r\n                </ul>\r\n              </li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Примеры использования\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Примеры использования:</p>\r\n            <ul>\r\n              <li><strong>Простые запросы:</strong> Извлечение списка пользователей, которые зарегистрированы на платформе.</li>\r\n              <li><strong>Сложные запросы:</strong> Получение данных о пользователях и их заказах для аналитики.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const LocalStorage = {\r\n  id: 216,\r\n  title: \"localStorage (Локальное хранилище)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое localStorage?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>localStorage</strong> — это механизм хранения данных в браузере, который позволяет сохранять данные в виде пар \"ключ-значение\". Данные сохраняются в браузере даже после закрытия вкладки или перезагрузки страницы.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Создание и запись данных\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример записи данных в localStorage:</strong></p>\r\n      `,\r\n      code: `\r\nlocalStorage.setItem('username', 'JohnDoe');\r\n      `,\r\n    },\r\n    {\r\n      title: \"Чтение данных\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример чтения данных из localStorage:</strong></p>\r\n      `,\r\n      code: `\r\nconst username = localStorage.getItem('username');\r\nconsole.log(username); // JohnDoe\r\n      `,\r\n    },\r\n    {\r\n      title: \"Удаление данных\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример удаления данных из localStorage:</strong></p>\r\n      `,\r\n      code: `\r\nlocalStorage.removeItem('username');\r\n      `,\r\n    },\r\n    {\r\n      title: \"Очистка localStorage\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример полной очистки localStorage:</strong></p>\r\n      `,\r\n      code: `\r\nlocalStorage.clear();\r\n      `,\r\n    },\r\n    {\r\n      title: \"Хранение объектов\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>localStorage может хранить только строки, поэтому для хранения объектов их нужно сериализовать в JSON:</strong></p>\r\n      `,\r\n      code: `\r\nconst user = { name: 'John', age: 30 };\r\nlocalStorage.setItem('user', JSON.stringify(user));\r\n\r\n// Чтение объекта\r\nconst storedUser = JSON.parse(localStorage.getItem('user'));\r\nconsole.log(storedUser.name); // John\r\n      `,\r\n    },\r\n    {\r\n      title: \"Преимущества localStorage\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Простота использования:</strong> Легкий в использовании API для хранения данных.</li>\r\n          <li><strong>Долговременное хранение:</strong> Данные сохраняются даже после закрытия браузера.</li>\r\n          <li><strong>Объем хранения:</strong> Обычно позволяет хранить до 5-10 МБ данных.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Недостатки localStorage\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Только строковые значения:</strong> Необходимо сериализовать объекты.</li>\r\n          <li><strong>Отсутствие поддержки нескольких вкладок:</strong> localStorage не синхронизируется между вкладками в реальном времени.</li>\r\n          <li><strong>Безопасность:</strong> Данные не шифруются, что может быть уязвимо для XSS-атак.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Сравнение с другими механизмами хранения данных\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>localStorage можно сравнить с другими механизмами хранения данных в браузере:</p>\r\n        <ul>\r\n          <li><strong>sessionStorage:</strong> Данные хранятся только в течение сессии (до закрытия вкладки).</li>\r\n          <li><strong>cookies:</strong> Данные отправляются с каждым HTTP-запросом, имеют ограниченный размер (4 КБ) и могут быть защищены флагами (HttpOnly, Secure).</li>\r\n          <li><strong>IndexedDB:</strong> Более мощная база данных, поддерживающая сложные запросы и большие объемы данных.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Рекомендации по использованию\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Когда использовать localStorage:</p>\r\n        <ul>\r\n          <li><strong>Сохранение состояния UI:</strong> Например, тему оформления или состояние виджетов.</li>\r\n          <li><strong>Хранение небольших данных:</strong> Например, пользовательские настройки или предпочтения.</li>\r\n          <li><strong>Кэширование данных:</strong> Например, кэширование результатов API для уменьшения количества запросов.</li>\r\n        </ul>\r\n        <p>Когда НЕ использовать localStorage:</p>\r\n        <ul>\r\n          <li><strong>Хранение чувствительных данных:</strong> Например, токены авторизации или пароли.</li>\r\n          <li><strong>Работа с большими объемами данных:</strong> Используйте IndexedDB для этого.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Примеры использования в реальных сценариях\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Примеры использования localStorage в реальных приложениях:</p>\r\n        <ul>\r\n          <li><strong>Сохранение состояния формы:</strong> Если пользователь случайно закрыл страницу, данные формы можно восстановить.</li>\r\n          <li><strong>Настройки темы оформления:</strong> Сохранение выбора пользователя (темная/светлая тема).</li>\r\n          <li><strong>Кэширование данных:</strong> Например, сохранение списка товаров для офлайн-режима.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      url: \"https://developer.mozilla.org/ru/docs/Web/API/Window/localStorage\",\r\n      link: \"MDN: localStorage\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      url: \"https://javascript.info/localstorage\",\r\n      link: \"JavaScript Info: localStorage\",\r\n    },\r\n  ],\r\n};\r\n","export const LongPollingAndShortPolling = {\r\n  id: 108,\r\n  title: \"Long Polling и Short Polling\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Long Polling и Short Polling — это техники, используемые для получения данных с сервера в реальном времени, особенно в веб-приложениях.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Short Polling\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Характеристики Short Polling:</p>\r\n            <ul>\r\n              <li><strong>Метод:</strong> Клиент отправляет запрос к серверу через заданные интервалы времени (например, каждые 5 секунд).</li>\r\n              <li><strong>Ответ:</strong> Сервер обрабатывает запрос и сразу возвращает ответ, даже если нет новых данных.</li>\r\n              <li><strong>Эффективность:</strong> Может привести к излишним запросам и нагрузке на сервер, особенно если данные обновляются редко.</li>\r\n              <li><strong>Пример:</strong> Запросы на получение новых сообщений в чате каждые 5 секунд.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Long Polling\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Характеристики Long Polling:</p>\r\n            <ul>\r\n              <li><strong>Метод:</strong> Клиент отправляет запрос к серверу, и сервер удерживает соединение открытым до тех пор, пока не появятся новые данные.</li>\r\n              <li><strong>Ответ:</strong> Как только данные становятся доступны, сервер отправляет ответ клиенту, после чего клиент сразу же отправляет новый запрос.</li>\r\n              <li><strong>Эффективность:</strong> Более эффективен по сравнению с Short Polling, так как уменьшает количество запросов при отсутствии новых данных.</li>\r\n              <li><strong>Пример:</strong> Запросы на получение новых сообщений в реальном времени, где клиент ждет ответа от сервера до появления новых данных.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Сравнение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Сравнение Short Polling и Long Polling:</p>\r\n            <ul>\r\n              <li><strong>Нагрузка на сервер:</strong> Short Polling может создавать избыточный трафик, в то время как Long Polling уменьшает количество запросов.</li>\r\n              <li><strong>Задержка:</strong> Long Polling обеспечивает более быструю реакцию на новые данные, так как сервер сразу отправляет ответ, когда они становятся доступны.</li>\r\n              <li><strong>Сложность реализации:</strong> Long Polling может быть сложнее в реализации, так как требует управления состоянием соединений.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Рекомендации\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Рекомендации по выбору:</p>\r\n            <ul>\r\n              <li><strong>Используйте Short Polling:</strong> В случаях, когда данные обновляются достаточно часто и сервер может справиться с нагрузкой.</li>\r\n              <li><strong>Используйте Long Polling:</strong> Когда необходимо получать данные в реальном времени с минимальными задержками и нагрузка на сервер должна быть снижена.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const ModelOSI = {\r\n  id: 114,\r\n  title: \"Модель OSI\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Модель OSI (Open Systems Interconnection) — это концептуальная модель, разработанная для стандартизации процессов взаимодействия компьютерных систем в сети. Она делит сетевые функции на семь уровней, каждый из которых выполняет свою уникальную роль.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Уровни модели OSI\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Семь уровней модели OSI:</p>\r\n            <ol>\r\n              <li><strong>Физический уровень:</strong> Определяет физические средства передачи данных (кабели, разъемы, электрические сигналы).</li>\r\n              <li><strong>Канальный уровень:</strong> Обеспечивает надежную передачу данных через физический уровень, включая управление доступом к среде и исправление ошибок.</li>\r\n              <li><strong>Сетевой уровень:</strong> Отвечает за маршрутизацию данных между сетями и определение логических адресов (например, IP-адреса).</li>\r\n              <li><strong>Транспортный уровень:</strong> Обеспечивает надежную передачу данных между конечными узлами и управляет потоками данных (например, TCP, UDP).</li>\r\n              <li><strong>Сессионный уровень:</strong> Управляет сеансами связи между приложениями, устанавливая, поддерживая и завершая соединения.</li>\r\n              <li><strong>Представительский уровень:</strong> Обеспечивает преобразование данных в формат, понятный приложениям, включая шифрование и сжатие.</li>\r\n              <li><strong>Прикладной уровень:</strong> Обеспечивает интерфейсы для взаимодействия приложений с сетевыми службами (например, HTTP, FTP, SMTP).</li>\r\n            </ol>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Применение модели OSI\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Модель OSI используется в следующих целях:</p>\r\n            <ul>\r\n              <li><strong>Стандартизация:</strong> Обеспечивает общую основу для разработки сетевых протоколов и технологий.</li>\r\n              <li><strong>Обучение:</strong> Помогает понять и изучить, как работают сетевые технологии.</li>\r\n              <li><strong>Устранение неполадок:</strong> Позволяет системным администраторам и инженерам диагностировать и исправлять проблемы в сетях.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Сравнение с моделью TCP/IP\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Сравнение модели OSI и модели TCP/IP:</p>\r\n            <ul>\r\n              <li><strong>Количество уровней:</strong> OSI имеет 7 уровней, TCP/IP — 4 уровня.</li>\r\n              <li><strong>Применение:</strong> OSI является теоретической моделью, тогда как TCP/IP более практична и широко используется в интернете.</li>\r\n              <li><strong>Стандартизация:</strong> OSI разработана как стандартная модель, TCP/IP развивалась через реализацию протоколов.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const RESTAPI = {\r\n  id: 119,\r\n  title: \"REST API (Representational State Transfer API)\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>REST API</strong> (Representational State Transfer Application Programming Interface) — это архитектурный стиль \r\n            взаимодействия компонентов распределенного приложения в сети. В контексте веб-разработки, он позволяет веб-сервисам общаться\r\n            друг с другом через HTTP, используя стандартные методы HTTP (GET, POST, PUT, DELETE и т.д.) для выполнения операций над данными.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Принципы REST\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><strong>Без состояния (Stateless):</strong> Каждый запрос от клиента к серверу должен содержать всю информацию, необходимую для его выполнения. Сервер не сохраняет состояние клиента между запросами.</li>\r\n              <li><strong>Единообразие интерфейса (Uniform Interface):</strong> Определяет стандартный способ взаимодействия между клиентом и сервером, что облегчает и унифицирует разработку и взаимодействие компонентов системы.</li>\r\n              <li><strong>Кэширование (Cacheable):</strong> Ответы на запросы могут быть кэшируемыми или некэшируемыми, что позволяет улучшить производительность системы за счет уменьшения нагрузки на сервер.</li>\r\n              <li><strong>Клиент-сервер (Client-Server):</strong> Разделение обязанностей между клиентом (например, пользовательским интерфейсом) и сервером (хранилище данных), что упрощает разработку и масштабирование компонентов независимо друг от друга.</li>\r\n              <li><strong>Многоуровневая система (Layered System):</strong> Клиент не может обязательно знать, общается ли он напрямую с сервером или через посредников, что повышает безопасность системы и позволяет использовать балансировщики нагрузки (Nginx, AWS ALB), кэширующие прокси (Varnish, CDN), фаерволы/API-шлюзы(Cloudflare, Kong) и прокси сервера.</li>\r\n              <li><strong>Код по требованию (Code on Demand, необязательно):</strong> Сервер может временно расширять или настраивать функциональность клиента, передавая ему исполняемый код.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"HTTP-методы в REST\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>REST использует стандартные HTTP-методы для выполнения операций над ресурсами:</p>\r\n            <ul>\r\n              <li><strong>GET:</strong> Получение информации о ресурсе.</li>\r\n              <li><strong>POST:</strong> Создание нового ресурса.</li>\r\n              <li><strong>PUT:</strong> Обновление существующего ресурса.</li>\r\n              <li><strong>DELETE:</strong> Удаление ресурса.</li>\r\n            </ul>\r\n            <p>Пример GET-запроса для получения данных о пользователе:</p>\r\n          `,\r\n      code: `\r\nfetch('https://api.example.com/users/1',  {\r\n  method: 'GET',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n})\r\n.then(response => response.json())\r\n.then(data => console.log(data));\r\n          `,\r\n    },\r\n    {\r\n      title: \"Статусные коды HTTP\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>REST API использует стандартные HTTP-статусы для указания результата выполнения запроса:</p>\r\n            <ul>\r\n              <li><strong>200 OK:</strong> Запрос выполнен успешно.</li>\r\n              <li><strong>201 Created:</strong> Ресурс успешно создан.</li>\r\n              <li><strong>400 Bad Request:</strong> Ошибка в запросе клиента.</li>\r\n              <li><strong>401 Unauthorized:</strong> Необходима авторизация.</li>\r\n              <li><strong>403 Forbidden:</strong> Доступ запрещен.</li>\r\n              <li><strong>404 Not Found:</strong> Ресурс не найден.</li>\r\n              <li><strong>500 Internal Server Error:</strong> Ошибка на стороне сервера.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Ресурсы и URI\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>В REST ресурсы идентифицируются с помощью URI (Uniform Resource Identifier). Каждому ресурсу соответствует уникальный URI, по которому можно получить доступ к этому ресурсу.</p>\r\n            <p>Примеры URI:</p>\r\n            <ul>\r\n              <li><code>https://api.example.com/users</code>  — список всех пользователей.</li>\r\n              <li><code>https://api.example.com/users/1</code>  — информация о пользователе с ID 1.</li>\r\n              <li><code>https://api.example.com/posts?author=1</code> — список постов пользователя с ID 1.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Форматы данных\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>RESTful API может использовать различные форматы данных для обмена информацией, включая:</p>\r\n            <ul>\r\n              <li><strong>JSON:</strong> Наиболее распространенный формат для передачи данных.</li>\r\n              <li><strong>XML:</strong> Используется реже, но все еще поддерживается.</li>\r\n              <li><strong>HTML:</strong> Может использоваться для возвращения веб-страниц.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Примеры использования REST API\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>REST API широко используется в современных приложениях:</p>\r\n            <ul>\r\n              <li><strong>Веб-сервисы:</strong> Например, получение списка товаров из интернет-магазина (<code>GET /products</code>).</li>\r\n              <li><strong>Мобильные приложения:</strong> Например, отправка данных формы регистрации (<code>POST /register</code>).</li>\r\n              <li><strong>Интеграция с внешними сервисами:</strong> Например, использование API Google Maps для отображения карт (<code>GET /maps/api</code>).</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>REST API — это набор принципов и ограничений для создания веб-сервисов, который обеспечивает гибкое и \r\n        эффективное взаимодействие между компонентами распределенных систем через HTTP. \r\n        Благодаря своей простоте, масштабируемости и гибкости, \r\n        REST стал доминирующим стилем для разработки API для веб-приложений.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      url: \"https://restfulapi.net/\",\r\n      link: \"RESTful API Design Guide\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      url: \"https://developer.mozilla.org/ru/docs/Web/HTTP/Status\",\r\n      link: \"MDN: HTTP Status Codes\",\r\n    },\r\n  ],\r\n};\r\n","export const SessionStorage = {\r\n  id: 217,\r\n  title: \"sessionStorage\",\r\n  children: [\r\n    {\r\n      title: \"Что такое sessionStorage?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>sessionStorage</strong> — это механизм хранения данных в браузере, который позволяет сохранять данные в виде пар \"ключ-значение\". Данные хранятся только в пределах одной сессии и удаляются при закрытии вкладки или браузера.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Создание и запись данных\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример записи данных в sessionStorage:</strong></p>\r\n      `,\r\n      code: `\r\nsessionStorage.setItem('sessionUser', 'JohnDoe');\r\n      `,\r\n    },\r\n    {\r\n      title: \"Чтение данных\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример чтения данных из sessionStorage:</strong></p>\r\n      `,\r\n      code: `\r\nconst sessionUser = sessionStorage.getItem('sessionUser');\r\nconsole.log(sessionUser); // JohnDoe\r\n      `,\r\n    },\r\n    {\r\n      title: \"Удаление данных\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример удаления данных из sessionStorage:</strong></p>\r\n      `,\r\n      code: `\r\nsessionStorage.removeItem('sessionUser');\r\n      `,\r\n    },\r\n    {\r\n      title: \"Очистка sessionStorage\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Пример полной очистки sessionStorage:</strong></p>\r\n      `,\r\n      code: `\r\nsessionStorage.clear();\r\n      `,\r\n    },\r\n    {\r\n      title: \"Хранение объектов\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>sessionStorage может хранить только строки, поэтому для хранения объектов их нужно сериализовать в JSON:</strong></p>\r\n      `,\r\n      code: `\r\nconst sessionData = { name: 'John', age: 30 };\r\nsessionStorage.setItem('sessionData', JSON.stringify(sessionData));\r\n\r\n// Чтение объекта\r\nconst storedSessionData = JSON.parse(sessionStorage.getItem('sessionData'));\r\nconsole.log(storedSessionData.name); // John\r\n      `,\r\n    },\r\n    {\r\n      title: \"Преимущества sessionStorage\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Простота использования:</strong> Легкий в использовании API для хранения данных.</li>\r\n          <li><strong>Временное хранение:</strong> Данные сохраняются до закрытия вкладки или браузера.</li>\r\n          <li><strong>Объем хранения:</strong> Обычно позволяет хранить до 5-10 МБ данных.</li>\r\n          <li><strong>Изолированность данных:</strong> Данные доступны только в рамках одной вкладки, что обеспечивает изоляцию между сессиями.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Недостатки sessionStorage\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Только строковые значения:</strong> Необходимо сериализовать объекты.</li>\r\n          <li><strong>Сессионное хранение:</strong> Данные недоступны после закрытия вкладки или браузера.</li>\r\n          <li><strong>Безопасность:</strong> Данные не шифруются, что может быть уязвимо для XSS-атак.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Сравнение с localStorage\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Основные различия между sessionStorage и localStorage:</strong></p>\r\n        <ul>\r\n          <li><strong>Срок хранения:</strong> localStorage сохраняет данные даже после закрытия браузера, тогда как sessionStorage удаляет данные при закрытии вкладки.</li>\r\n          <li><strong>Доступность:</strong> localStorage доступен во всех вкладках одного домена, а sessionStorage — только в рамках одной вкладки.</li>\r\n          <li><strong>Использование:</strong> localStorage подходит для долгосрочного хранения данных, а sessionStorage — для временного хранения данных в рамках одной сессии.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Рекомендации по использованию\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Когда использовать sessionStorage:</p>\r\n        <ul>\r\n          <li><strong>Временные данные:</strong> Например, состояние формы или данные, которые нужны только в рамках одной сессии.</li>\r\n          <li><strong>Изоляция данных:</strong> Если данные должны быть доступны только в рамках одной вкладки.</li>\r\n          <li><strong>Защита от переполнения:</strong> Когда нужно временно сохранить небольшие объемы данных, не засоряя localStorage.</li>\r\n        </ul>\r\n        <p>Когда НЕ использовать sessionStorage:</p>\r\n        <ul>\r\n          <li><strong>Долгосрочное хранение:</strong> Используйте localStorage или IndexedDB.</li>\r\n          <li><strong>Межвкладочная синхронизация:</strong> sessionStorage не поддерживает обмен данными между вкладками.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Примеры использования в реальных сценариях\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Примеры использования sessionStorage в реальных приложениях:</p>\r\n        <ul>\r\n          <li><strong>Сохранение состояния формы:</strong> Если пользователь случайно обновил страницу, данные формы можно восстановить.</li>\r\n          <li><strong>Временные данные пользователя:</strong> Например, хранение данных корзины покупок в рамках одной сессии.</li>\r\n          <li><strong>Отслеживание действий пользователя:</strong> Например, временное сохранение последних действий пользователя для аналитики.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      url: \"https://developer.mozilla.org/ru/docs/Web/API/Window/sessionStorage\",\r\n      link: \"MDN: sessionStorage\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      url: \"https://javascript.info/localstorage\",\r\n      link: \"JavaScript Info: Хранилище браузера\",\r\n    },\r\n  ],\r\n};\r\n","export const ServerSentEvents = {\r\n  id: 110,\r\n  title: \"Server-Sent Events (SSE)\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Server-Sent Events (SSE) — это технология, позволяющая серверу отправлять обновления клиенту в режиме реального времени через однонаправленное HTTP-соединение.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Основные характеристики\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Характеристики SSE:</p>\r\n            <ul>\r\n              <li><strong>Однонаправленная связь:</strong> Сервер отправляет данные только клиенту, то есть от сервера к клиенту.</li>\r\n              <li><strong>HTTP-протокол:</strong> Использует стандартный HTTP, что облегчает интеграцию с существующими веб-приложениями.</li>\r\n              <li><strong>Поддержка текстовых данных:</strong> Данные отправляются в текстовом формате, обычно в формате JSON или простом тексте.</li>\r\n              <li><strong>Автоматическое восстановление соединения:</strong> Если соединение разрывается, клиент автоматически пытается переподключиться.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Как работает SSE\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Процесс работы SSE:</p>\r\n            <ul>\r\n              <li>Клиент отправляет запрос к серверу с заголовком <code>Accept: text/event-stream</code>.</li>\r\n              <li>Сервер устанавливает соединение и начинает отправлять данные в формате \"event-stream\".</li>\r\n              <li>Данные отправляются в виде текстовых сообщений, каждое из которых может содержать различные поля (например, <code>data:</code>, <code>event:</code>, <code>id:</code>).</li>\r\n              <li>Клиент обрабатывает полученные события и может обновлять интерфейс в реальном времени.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества SSE\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Преимущества использования SSE:</p>\r\n            <ul>\r\n              <li><strong>Простота реализации:</strong> Легко интегрируется с существующими веб-приложениями, так как использует стандартные HTTP-запросы.</li>\r\n              <li><strong>Поддержка браузеров:</strong> Большинство современных браузеров поддерживают SSE.</li>\r\n              <li><strong>Эффективность:</strong> Уменьшает накладные расходы на сетевые соединения по сравнению с регулярным опросом сервера.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Недостатки SSE\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Недостатки SSE:</p>\r\n            <ul>\r\n              <li><strong>Однонаправленная связь:</strong> Не поддерживает передачу данных от клиента к серверу, для этого необходимо использовать другие методы (например, AJAX).</li>\r\n              <li><strong>Ограниченная поддержка:</strong> Некоторые старые браузеры могут не поддерживать SSE.</li>\r\n              <li><strong>Задержки:</strong> В зависимости от реализации могут быть небольшие задержки в передаче данных.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Применение SSE\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Ситуации, в которых используются SSE:</p>\r\n            <ul>\r\n              <li><strong>Чат-приложения:</strong> Для получения новых сообщений от сервера.</li>\r\n              <li><strong>Обновления данных в реальном времени:</strong> Для отображения новостей, финансовых данных и т.п.</li>\r\n              <li><strong>Мониторинг систем:</strong> Для получения данных о состоянии серверов и приложений.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const WebThreats = {\r\n  id: 120,\r\n  title: \"Web-угрозы\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Web-угрозы — это потенциальные опасности, связанные с использованием веб-технологий и интернет-ресурсов, которые могут привести к компрометации данных, нарушению конфиденциальности или повреждению систем.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Типы Web-угроз\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Основные типы Web-угроз:</p>\r\n            <ul>\r\n              <li><strong>Вредоносное ПО:</strong> Программы, такие как вирусы, черви и трояны, которые могут заражать устройства и вызывать ущерб.</li>\r\n              <li><strong>Фишинг:</strong> Мошеннические попытки получить конфиденциальную информацию, выдавая себя за надежные источники.</li>\r\n              <li><strong>SQL-инъекции:</strong> Атаки, нацеленные на базы данных через уязвимости в веб-приложениях, позволяющие злоумышленникам выполнять произвольные SQL-запросы.</li>\r\n              <li><strong>Кросс-сайтовый скриптинг (XSS):</strong> Уязвимость, позволяющая злоумышленникам внедрять скрипты на страницы, которые просматривают другие пользователи.</li>\r\n              <li><strong>Отказ в обслуживании (DoS/DDoS):</strong> Атаки, направленные на перегрузку сайта или сервиса, что делает его недоступным для пользователей.</li>\r\n              <li><strong>Сниффинг:</strong> Перехват сетевого трафика с целью получения конфиденциальной информации.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Причины Web-угроз\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Причины возникновения Web-угроз:</p>\r\n            <ul>\r\n              <li><strong>Уязвимости программного обеспечения:</strong> Ошибки в коде, которые могут быть использованы злоумышленниками.</li>\r\n              <li><strong>Неправильная конфигурация:</strong> Ошибки в настройках серверов и приложений, которые могут создать уязвимости.</li>\r\n              <li><strong>Человеческий фактор:</strong> Невнимательность пользователей, например, кликание на подозрительные ссылки или открытие вложений от незнакомцев.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Защита от Web-угроз\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Методы защиты от Web-угроз:</p>\r\n            <ul>\r\n              <li><strong>Использование антивирусного ПО:</strong> Для защиты устройств от вредоносных программ.</li>\r\n              <li><strong>Обновление программного обеспечения:</strong> Регулярное обновление систем и приложений для устранения уязвимостей.</li>\r\n              <li><strong>Использование брандмауэров:</strong> Для фильтрации трафика и защиты сети.</li>\r\n              <li><strong>Обучение пользователей:</strong> Повышение осведомленности о потенциальных угрозах и безопасном поведении в интернете.</li>\r\n              <li><strong>Резервное копирование данных:</strong> Регулярное создание резервных копий для защиты от потери данных.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Заключение\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Web-угрозы представляют собой серьезную проблему для пользователей и организаций. Понимание типов угроз и методов защиты поможет минимизировать риски и обеспечить безопасность в интернете.</p>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const WebSocketAndPredecessorTechnologies = {\r\n  id: 109,\r\n  title: \"WebSocket и предшествующие технологии\",\r\n  children: [\r\n    {\r\n      title: \"Определение WebSocket\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>WebSocket — это протокол для двусторонней связи между клиентом и сервером через одно TCP-соединение. Он позволяет обмениваться данными в режиме реального времени без необходимости постоянно открывать и закрывать соединения.</p>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Предшествующие технологии\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>До появления WebSocket использовали несколько технологий для реализации коммуникации в реальном времени:</p>\r\n            <ul>\r\n              <li><strong>HTTP Polling:</strong>\r\n                <ul>\r\n                  <li>Клиент периодически отправляет запросы к серверу, чтобы проверить наличие новых данных.</li>\r\n                  <li>Неэффективно из-за постоянных запросов, даже если данных нет.</li>\r\n                </ul>\r\n              </li>\r\n              <li><strong>Long Polling:</strong>\r\n                <ul>\r\n                  <li>Клиент отправляет запрос, и сервер удерживает соединение открытым до появления новых данных.</li>\r\n                  <li>Когда данные доступны, сервер отправляет ответ, и клиент сразу же повторяет запрос.</li>\r\n                </ul>\r\n              </li>\r\n              <li><strong>Server-Sent Events (SSE):</strong>\r\n                <ul>\r\n                  <li>Клиент устанавливает однонаправленное соединение с сервером, который может отправлять данные в реальном времени.</li>\r\n                  <li>Использует стандартный HTTP, но не поддерживает двустороннюю связь.</li>\r\n                </ul>\r\n              </li>\r\n              <li><strong>AJAX:</strong>\r\n                <ul>\r\n                  <li>Позволяет динамически загружать данные с сервера без перезагрузки страницы, но требует периодических запросов.</li>\r\n                </ul>\r\n              </li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества WebSocket\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>Преимущества использования WebSocket:</p>\r\n            <ul>\r\n              <li><strong>Двусторонняя связь:</strong> Позволяет клиенту и серверу обмениваться данными в любое время без дополнительных запросов.</li>\r\n              <li><strong>Эффективность:</strong> Уменьшает накладные расходы на соединения, так как одно TCP-соединение используется для всего взаимодействия.</li>\r\n              <li><strong>Низкая задержка:</strong> Обеспечивает быструю передачу данных в реальном времени, что особенно важно для приложений, таких как чаты и онлайн-игры.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Применение WebSocket\",\r\n      type: \"text\",\r\n      description: `\r\n            <p>WebSocket используется в различных приложениях:</p>\r\n            <ul>\r\n              <li><strong>Чат-приложения:</strong> Обеспечивает мгновенную передачу сообщений между пользователями.</li>\r\n              <li><strong>Онлайн-игры:</strong> Позволяет игрокам взаимодействовать в реальном времени.</li>\r\n              <li><strong>Финансовые приложения:</strong> Для получения обновлений о ценах и торгах в реальном времени.</li>\r\n              <li><strong>Системы мониторинга:</strong> Обмен данными о состоянии систем и устройств в реальном времени.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const WhenUserOpensPage = {\r\n  id: 101,\r\n  title: \"Когда пользователь открывает страницу по ссылке\",\r\n  children: [\r\n    {\r\n      title: \"1. Запрос по сети\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><strong>Клик по ссылке:</strong> Пользователь нажимает на ссылку, инициируя процесс загрузки страницы.</li>\r\n              <li><strong>DNS-запрос:</strong> Браузер запрашивает IP-адрес сервера, на котором размещён ресурс.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"2. Установление соединения\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><strong>TCP-соединение:</strong> Браузер устанавливает TCP-соединение с сервером.</li>\r\n              <li><strong>TLS/SSL:</strong> Устанавливается защищенное соединение, если используется HTTPS.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"3. Отправка HTTP-запроса\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><strong>HTTP-запрос:</strong> Браузер отправляет запрос на сервер для получения ресурса (HTML-документа).</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"4. Получение ответа от сервера\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><strong>HTTP-ответ:</strong> Сервер обрабатывает запрос и отправляет обратно статус-код, заголовки и тело ответа.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"5. Обработка ответа\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><strong>Загрузка и парсинг HTML:</strong> Браузер начинает загружать и парсить HTML-документ, создавая DOM.</li>\r\n              <li><strong>Загрузка зависимостей:</strong> Браузер отправляет дополнительные запросы для внешних ресурсов (CSS, JavaScript, изображения).</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"6. Обработка CSS и JavaScript\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><strong>Загрузка и парсинг CSS:</strong> Браузер загружает и парсит CSS, создавая CSSOM.</li>\r\n              <li><strong>Выполнение JavaScript:</strong> JavaScript-файлы выполняются и могут изменять структуру DOM и стили.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"7. Создание рендеринга\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><strong>Создание дерева рендеринга:</strong> Браузер объединяет DOM и CSSOM для создания визуального представления.</li>\r\n              <li><strong>Рендеринг:</strong> Страница отрисовывается на экране.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"8. Завершение загрузки\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><strong>Событие 'DOMContentLoaded':</strong> Срабатывает, когда HTML полностью загружен и разобран.</li>\r\n              <li><strong>Событие 'load':</strong> Срабатывает, когда вся страница и её зависимости полностью загружены.</li>\r\n              <li><strong>Событие 'beforeunload':</strong> Подготавливается для обработки при попытке пользователя покинуть страницу.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"9. Взаимодействие с пользователем\",\r\n      type: \"text\",\r\n      description: `\r\n            <p><strong>Интерактивность:</strong> Пользователь начинает взаимодействовать с загруженной страницей, и скрипты обрабатывают события.</p>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","import { CreatingLayoutInHTMLAndCSS } from \"./CreatingLayoutInHTMLAndCSS/CreatingLayoutInHTMLAndCSS\";\r\nimport { DevelopmentOfMultilingualWebsites } from \"./DevelopmentOfMultilingualWebsites/DevelopmentOfMultilingualWebsites\";\r\nimport { DifferenceBetweenScriptAsyncAndDefer } from \"./DifferenceBetweenScriptAsyncAndDefer/DifferenceBetweenScriptAsyncAndDefer\";\r\nimport { ForAttribute } from \"./ForAttribute/ForAttribute\";\r\nimport { HTMLDocumentStructure } from \"./HTMLDocumentStructure/HTMLDocumentStructure\";\r\nimport { JoinJavaScriptFilesInHTML } from \"./JoinJavaScriptFilesInHTML/JoinJavaScriptFilesInHTML\";\r\nimport { ProgressiveScan } from \"./ProgressiveScan/ProgressiveScan\";\r\nimport { Style } from \"./Style/Style\";\r\n\r\nexport const HTML_CSS = {\r\n  id: 12,\r\n  title: \"HTML/CSS\",\r\n  children: [\r\n    CreatingLayoutInHTMLAndCSS,\r\n    DevelopmentOfMultilingualWebsites,\r\n    DifferenceBetweenScriptAsyncAndDefer,\r\n    ForAttribute,\r\n    HTMLDocumentStructure,\r\n    JoinJavaScriptFilesInHTML,\r\n    ProgressiveScan,\r\n    Style,\r\n  ],\r\n};\r\n","export const CreatingLayoutInHTMLAndCSS = {\r\n  id: 124,\r\n  title: \"Создание макета в HTML и CSS\",\r\n  children: [\r\n    {\r\n      title: \"HTML атрибуты для создания макета:\",\r\n      type: \"text\",\r\n      description: `\r\n      <ul>\r\n        <li><strong>Атрибуты <code>div</code>:</strong>\r\n          <ul>\r\n            <li><code>id</code>: Уникальный идентификатор элемента.</li>\r\n            <li><code>class</code>: Классы для стилизации с помощью CSS.</li>\r\n          </ul>\r\n        </li>\r\n        <li><strong>Семантические элементы:</strong>\r\n          <ul>\r\n            <li><code>&lt;section&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;nav&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>: Используются для структурирования страницы.</li>\r\n          </ul>\r\n        </li>\r\n        <li><strong>Встраиваемый стиль:</strong>\r\n          <ul>\r\n            <li>Пример использования <code>style</code>:</li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    `,\r\n      code: `\r\n<div style=\"width: 50%; float: left;\">Контент</div>\r\n    `,\r\n    },\r\n    {\r\n      title: \"CSS свойства для создания макета:\",\r\n      type: \"text\",\r\n      description: `\r\n      <ul>\r\n        <li><strong>Свойство <code>display</code>:</strong>\r\n          <ul>\r\n            <li><code>block</code>, <code>inline</code>, <code>inline-block</code>, <code>flex</code>, <code>grid</code></li>\r\n          </ul>\r\n        </li>\r\n        <li><strong>Свойство <code>position</code>:</strong>\r\n          <ul>\r\n            <li><code>static</code>, <code>relative</code>, <code>absolute</code>, <code>fixed</code>, <code>sticky</code></li>\r\n          </ul>\r\n        </li>\r\n        <li><strong>Свойства <code>margin</code> и <code>padding</code>:</strong> Используются для управления пространством между элементами и внутри элемента.</li>\r\n        <li><strong>Свойства <code>width</code> и <code>height</code>:</strong> Задают размеры элемента.</li>\r\n      </ul>\r\n    `,\r\n      code: `\r\n.container {\r\ndisplay: flex;\r\njustify-content: center; /* Выравнивание по горизонтали */\r\nalign-items: center; /* Выравнивание по вертикали */\r\n}\r\n    `,\r\n    },\r\n    {\r\n      title: \"HTML5 семантические элементы:\",\r\n      type: \"text\",\r\n      description: `\r\n      <ul>\r\n        <li><strong>&lt;header&gt;</strong>, <strong>&lt;nav&gt;</strong>, <strong>&lt;main&gt;</strong>, <strong>&lt;section&gt;</strong>, <strong>&lt;article&gt;</strong>, <strong>&lt;aside&gt;</strong>, <strong>&lt;footer&gt;</strong>: Эти элементы помогают улучшить SEO и доступность.</li>\r\n      </ul>\r\n    `,\r\n    },\r\n    {\r\n      title: \"Flexbox и Grid для создания макетов:\",\r\n      type: \"text\",\r\n      description: `\r\n      <ul>\r\n        <li><strong>Flexbox:</strong> Упрощает выравнивание элементов вдоль одной оси.</li>\r\n        <li><strong>Grid:</strong> Позволяет создавать сеточные макеты, определяя колонки и строки.</li>\r\n      </ul>\r\n    `,\r\n      code: `\r\n/* Flexbox */\r\n.container {\r\ndisplay: flex;\r\njustify-content: center; /* Выравнивание по горизонтали */\r\nalign-items: center; /* Выравнивание по вертикали */\r\n}\r\n\r\n/* Grid */\r\n.grid-container {\r\ndisplay: grid;\r\ngrid-template-columns: repeat(3, 1fr); /* Три равные колонки */\r\n}\r\n    `,\r\n    },\r\n  ],\r\n};\r\n","export const DevelopmentOfMultilingualWebsites = {\r\n  id: 126,\r\n  title: \"На что нужно обратить внимание при разработке мультиязычных сайтов\",\r\n  children: [\r\n    {\r\n      title: \"При разработке мультиязычных сайтов стоит учитывать:\",\r\n      type: \"text\",\r\n      description: `\r\n    <ul>\r\n      <li>Хранение текста: использовать JSON или базы данных для хранения переведенных текстов.</li>\r\n      <li>Изменение языка: обеспечить пользовательский интерфейс для смены языка.</li>\r\n      <li>SEO: использовать атрибут &lt;html lang=\"en\"&gt; для указания языка страницы.</li>\r\n    </ul>\r\n    <p>Пример:</p>\r\n    `,\r\n      code: `\r\n<html lang=\"ru\">\r\n<head>\r\n<meta charset=\"UTF-8\">\r\n</head>\r\n</html>\r\n    `,\r\n    },\r\n  ],\r\n};\r\n","export const DifferenceBetweenScriptAsyncAndDefer = {\r\n  id: 128,\r\n  title: \"Разница между script, script async и script defer\",\r\n  children: [\r\n    {\r\n      title: \"Загрузки скриптов\",\r\n      type: \"text\",\r\n      description: `\r\n    <p>Существует три способа подключения скриптов в HTML:</p>\r\n    <ul>\r\n      <li>&lt;script&gt;: Загружает и выполняет скрипт синхронно.</li>\r\n      <li>&lt;script async&gt;: Загружает скрипт асинхронно, не блокируя загрузку страницы.</li>\r\n      <li>&lt;script defer&gt;: Также загружает скрипт асинхронно, но гарантирует, что он будет выполнен после полной загрузки HTML.</li>\r\n    </ul>\r\n    <p>Пример:</p>\r\n    `,\r\n      code: `\r\n<script src=\"script.js\"></script>\r\n<script async src=\"script-async.js\"></script>\r\n<script defer src=\"script-defer.js\"></script>\r\n    `,\r\n    },\r\n  ],\r\n};\r\n","export const ForAttribute = {\r\n  id: 130,\r\n  title: \"Атрибут For\",\r\n  children: [\r\n    {\r\n      title: ``,\r\n      type: \"text\",\r\n      description: `\r\n    Он связывает элемент <label> с соответствующим полем < input >, позволяя пользователям \r\n    кликать по тексту метки для выбора или фокуса на связанном элементе управления.\r\n    p.s. Значение атрибута for должно совпадать с id связанного элемента, что \r\n    улучшает доступность и удобство взаимодействия с формами.\r\n    `,\r\n      code: `\r\n<label for=\"Number\">Ваше любимое число:</label>\r\n<input id=\"number\">`,\r\n    },\r\n  ],\r\n};\r\n","export const HTMLDocumentStructure = {\r\n  id: 125,\r\n  title: \"Структура HTML документа\",\r\n  children: [\r\n    {\r\n      title: \"<!DOCTYPE html>\",\r\n      type: \"text\",\r\n      description: `\r\n      <p>Объявляет тип документа и версию HTML:</p>\r\n      <ul>\r\n        <li><strong>Версия</strong>: Обычно используется HTML5.</li>\r\n      </ul>\r\n    `,\r\n    },\r\n    {\r\n      title: \"<html>\",\r\n      type: \"text\",\r\n      description: `\r\n      <p>Корневой элемент HTML-документа:</p>\r\n      <ul>\r\n        <li><strong>Атрибуты</strong>: Может содержать атрибут <code>lang</code> для указания языка.</li>\r\n      </ul>\r\n    `,\r\n    },\r\n    {\r\n      title: \"<head>\",\r\n      type: \"text\",\r\n      description: `\r\n      <p>Содержит метаданные о документе:</p>\r\n      <ul>\r\n        <li><strong><meta charset=\"UTF-8\"></strong>: Устанавливает кодировку документа.</li>\r\n        <li><strong><meta name=\"viewport\"></strong>: Настройки для адаптивного дизайна и отображения на мобильных устройствах.</li>\r\n        <li><strong><title></strong>: Заголовок, отображаемый на вкладке браузера.</li>\r\n        <li><strong><link></strong>: Подключение внешних CSS-файлов.</li>\r\n        <li><strong><script></strong>: Подключение внешних JavaScript-файлов (если необходимо).</li>\r\n      </ul>\r\n    `,\r\n    },\r\n    {\r\n      title: \"<body>\",\r\n      type: \"text\",\r\n      description: `\r\n      <p>Основное содержимое страницы:</p>\r\n      <ul>\r\n        <li><strong><header></strong>: Заголовок или навигация сайта.</li>\r\n        <li><strong><main></strong>: Основной контент страницы.</li>\r\n        <li><strong><footer></strong>: Нижний колонтитул с информацией о правами и ссылками.</li>\r\n      </ul>\r\n    `,\r\n    },\r\n  ],\r\n};\r\n","export const JoinJavaScriptFilesInHTML = {\r\n  id: 129,\r\n  title: \"Подключение JavaScript-скриптов в HTML\",\r\n  children: [\r\n    {\r\n      title: \"1. Внешний скрипт (External Script)\",\r\n      type: \"text\",\r\n      description: `\r\n      <p>Подключение скрипта через отдельный файл:</p>\r\n      <ul>\r\n        <li><strong>Используемый тег</strong>: <code>&lt;script&gt;</code>.</li>\r\n        <li><strong>Пример</strong>: \r\n          <code>&lt;script src=\"script.js\"&gt;&lt;/script&gt;</code>.\r\n        </li>\r\n        <li><strong>Преимущества</strong>: Упрощает организацию кода и позволяет повторно использовать скрипты на нескольких страницах.</li>\r\n      </ul>\r\n    `,\r\n    },\r\n    {\r\n      title: \"2. Встроенный скрипт (Internal Script)\",\r\n      type: \"text\",\r\n      description: `\r\n      <p>Подключение скрипта непосредственно в документе:</p>\r\n      <ul>\r\n        <li><strong>Используемый тег</strong>: <code>&lt;script&gt;</code>.</li>\r\n        <li><strong>Пример</strong>: \r\n          <code>&lt;script&gt; console.log('Hello, world!'); &lt;/script&gt;</code>.\r\n        </li>\r\n        <li><strong>Преимущества</strong>: Удобно для небольших скриптов, специфичных для одной страницы.</li>\r\n      </ul>\r\n    `,\r\n    },\r\n    {\r\n      title: \"Атрибуты тега <script>\",\r\n      type: \"text\",\r\n      description: `\r\n      <p>Основные атрибуты:</p>\r\n      <ul>\r\n        <li><strong>src</strong>: Указывает путь к внешнему JavaScript-файлу.</li>\r\n        <li><strong>defer</strong>: Загружает скрипт после завершения парсинга HTML-документа. Работает только с внешними скриптами.</li>\r\n        <li><strong>async</strong>: Загружает скрипт асинхронно, не блокируя парсинг HTML. Работает только с внешними скриптами.</li>\r\n        <li><strong>type</strong>: Указывает тип скрипта (по умолчанию <code>text/javascript</code>). Например, для модулей можно использовать <code>type=\"module\"</code>.</li>\r\n        <li><strong>integrity</strong>: Используется для проверки целостности загружаемого файла с использованием Subresource Integrity (SRI).</li>\r\n        <li><strong>crossorigin</strong>: Определяет, как браузер должен обрабатывать кросс-доменные запросы для загружаемого скрипта.</li>\r\n      </ul>\r\n    `,\r\n    },\r\n  ],\r\n};\r\n","export const ProgressiveScan = {\r\n  id: 127,\r\n  title: \"Что такое прогрессивная развертка\",\r\n  children: [\r\n    {\r\n      title:\r\n        \"Прогрессивная развертка - это подход к разработке страниц, при котором отображение контента происходит по мере его загрузки\",\r\n      type: \"text\",\r\n      description: `\r\n    <ul>\r\n      <li>Сначала загружается основной контент</li>\r\n      <li>Второстепенный контент загружается позже</li>\r\n    </ul>\r\n    <p>Пример:</p>\r\n    `,\r\n      code: `\r\n// Пример с использованием JavaScript для прогрессивной загрузки\r\nfetch('/api/content')\r\n.then(response => response.json())\r\n.then(data => {\r\ndocument.getElementById('content').innerHTML = data.content;\r\n});\r\n    `,\r\n    },\r\n  ],\r\n};\r\n","import { CSSModule } from \"./CSSModule/CSSModule\";\r\nimport { SASSModule } from \"./SASSModule/SASSModule\";\r\nimport { SCSSModule } from \"./SCSSModule/SCSSModule\";\r\nimport { styledComponentsModule } from \"./styledComponentsModule/styledComponentsModule\";\r\n\r\nexport const Style = {\r\n  id: 132,\r\n  title: \"Style\",\r\n  children: [\r\n    CSSModule,\r\n    SASSModule,\r\n    SCSSModule,\r\n    styledComponentsModule,\r\n  ],\r\n};","export const CSSModule = {\r\n  id: 501,\r\n  title: \"CSS\",\r\n  children: [\r\n    {\r\n      title: \"Способы подключения стилей в HTML\",\r\n      id: 2500,\r\n      children: [\r\n        {\r\n          title: \"1. Внешний стиль (External CSS)\",\r\n          type: \"text\",\r\n          description: `\r\n            <p>Подключение стилей через отдельный файл:</p>\r\n            <ul>\r\n              <li><strong>Используемый тег</strong>: <code>&lt;link&gt;</code>.</li>\r\n              <li><strong>Пример</strong>: \r\n                <code>&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;</code>.\r\n              </li>\r\n              <li><strong>Преимущества</strong>: Упрощает управление стилями и позволяет повторно использовать их на нескольких страницах.</li>\r\n            </ul>\r\n          `,\r\n        },\r\n        {\r\n          title: \"2. Встроенный стиль (Internal CSS)\",\r\n          type: \"text\",\r\n          description: `\r\n            <p>Подключение стилей в <code>&lt;head&gt;</code> документа:</p>\r\n            <ul>\r\n              <li><strong>Используемый тег</strong>: <code>&lt;style&gt;</code>.</li>\r\n              <li><strong>Пример</strong>: \r\n                <code>&lt;style&gt; body { background-color: lightblue; } &lt;/style&gt;</code>.\r\n              </li>\r\n              <li><strong>Преимущества</strong>: Удобно для небольших проектов или когда стили специфичны для одной страницы.</li>\r\n            </ul>\r\n          `,\r\n        },\r\n        {\r\n          title: \"3. Инлайновый стиль (Inline CSS)\",\r\n          type: \"text\",\r\n          description: `\r\n            <p>Применение стилей непосредственно к элементам:</p>\r\n            <ul>\r\n              <li><strong>Используемый атрибут</strong>: <code>style</code>.</li>\r\n              <li><strong>Пример</strong>: \r\n                <code>&lt;h1 style=\"color: red;\"&gt;Заголовок&lt;/h1&gt;</code>.\r\n              </li>\r\n              <li><strong>Преимущества</strong>: Быстрое применение стилей к отдельным элементам, но может привести к дублированию кода.</li>\r\n            </ul>\r\n          `,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Вес селектора или что такое специфичность в CSS\",\r\n      id: 2501,\r\n      children: [\r\n        {\r\n          title:\r\n            \"Специфичность в CSS определяет, какой стиль применяется к элементу при наличии множества правил. Она рассчитывается на основе различных типов селекторов:\",\r\n          type: \"text\",\r\n          description: `\r\n            <ul>\r\n              <li><strong>глобальный селектор *</strong>: не имеет веса</li>\r\n              <li><strong>Инлайновые стили</strong>: 1000</li>\r\n              <li><strong>ID-селекторы</strong>: 100</li>\r\n              <li><strong>Классы, атрибуты и псевдоклассы</strong>: 10</li>\r\n              <li><strong>Теги и псевдоэлементы</strong>: 1</li>\r\n            </ul>\r\n            <p>Пример:</p>\r\n          `,\r\n          code: `\r\n// Специфичность: 0 (глобальный селектор)\r\n* {\r\ncolor: black;\r\n}                    \r\n\r\n/* Специфичность: 1 (тег) */\r\np {\r\ncolor: blue;\r\n}\r\n\r\n/* Специфичность: 10 (класс) */\r\n.myClass {\r\ncolor: red;\r\n}\r\n\r\n/* Специфичность: 100 (ID) */\r\n#myId {\r\ncolor: green;\r\n}\r\n\r\n/* Специфичность: 1000 (инлайн стиль) */\r\n&lt;p style=\"color: yellow;\"&gt;Hello&lt;/p&gt;\r\n          `,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Псевдоклассы и псевдоэлементы\",\r\n      id: 2502,\r\n      children: [\r\n        {\r\n          title:\r\n            \"Псевдоклассы и псевдоэлементы позволяют стилизовать элементы на основе их состояния или позиции:\",\r\n          type: \"text\",\r\n          description: `\r\n            <ul>\r\n              <li><strong>Псевдоклассы</strong>: <code>:hover</code>, <code>:focus</code>, <code>:nth-child()</code></li>\r\n              <li><strong>Псевдоэлементы</strong>: <code>::before</code>, <code>::after</code>, <code>::first-line</code></li>\r\n            </ul>\r\n            <p>Пример:</p>\r\n          `,\r\n          code: `\r\n/* Псевдокласс */\r\na:hover {\r\ncolor: blue;\r\n}\r\n\r\n/* Псевдоэлемент */\r\np::first-line {\r\nfont-weight: bold;\r\n}\r\n          `,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Коробчатая модель (box-sizing)\",\r\n      id: 2503,\r\n      children: [\r\n        {\r\n          title:\r\n            \"Коробчатая модель описывает пространство, занимаемое элементом\",\r\n          type: \"text\",\r\n          description: `\r\n            <p>Она включает в себя следующие свойства:</p>\r\n            <ul>\r\n              <li><strong>Content</strong>: Содержимое элемента.</li>\r\n              <li><strong>Padding</strong>: Поля вокруг содержимого.</li>\r\n              <li><strong>Border</strong>: Граница вокруг элемента.</li>\r\n              <li><strong>Margin</strong>: Отступы между элементами.</li>\r\n            </ul>\r\n            <p>Пример:</p>\r\n          `,\r\n          code: `\r\n    div {\r\n      margin: 10px;\r\n      border: 1px solid black;\r\n      padding: 5px;\r\n      width: 100px;\r\n    }\r\n          `,\r\n        },\r\n        {\r\n          title: \"Зачем нужен box-sizing?\",\r\n          type: \"text\",\r\n          description: `\r\n            <p>Свойство <code>box-sizing</code> определяет, как рассчитывается ширина и высота элемента. Оно позволяет избежать путаницы с размерами элементов, особенно когда используются отступы и границы. Без <code>box-sizing: border-box</code>, добавление <strong>padding</strong> и <strong>border</strong> увеличивает фактические размеры элемента, что может привести к нежелательным эффектам, особенно в макетах на основе сеток.</p>\r\n            <p>С помощью <code>box-sizing: border-box</code> вы можете установить ширину и высоту элемента так, чтобы они включали в себя <strong>padding</strong> и <strong>border</strong>, что делает управление размерами более предсказуемым.</p>\r\n          `,\r\n        },\r\n        {\r\n          title: \"Пример использования box-sizing\",\r\n          type: \"text\",\r\n          description: `\r\n            <p>Пример применения свойства <code>box-sizing</code>:</p>\r\n          `,\r\n          code: `\r\n    * {\r\n      box-sizing: border-box;\r\n    }\r\n    \r\n    div {\r\n      margin: 10px;\r\n      border: 1px solid black;\r\n      padding: 5px;\r\n      width: 100px; // Включает в себя padding и border\r\n    }\r\n          `,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"em против rem, относительные и абсолютные значения\",\r\n      id: 2504,\r\n      children: [\r\n        {\r\n          title:\r\n            \"<code>em</code> и <code>rem</code> - это относительные единицы измерения, используемые в CSS:\",\r\n          type: \"text\",\r\n          description: `\r\n            <ul>\r\n              <li><strong>em</strong>: Относится к текущему элементу. Если размер шрифта родительского элемента равен 16px, то 1em = 16px.</li>\r\n              <li><strong>rem</strong>: Относится к корневому элементу (обычно <code>html</code>). Если размер шрифта корневого элемента равен 16px, то 1rem = 16px.</li>\r\n            </ul>\r\n            <p>Пример:</p>\r\n          `,\r\n          code: `\r\nh1 {\r\nfont-size: 2em; /* 32px, если родительский элемент имеет размер 16px */\r\n}\r\n\r\np {\r\nfont-size: 1.5rem; /* 24px */\r\n}\r\n          `,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Позиционирование: поток документов, overflow, z-index\",\r\n      id: 2505,\r\n      children: [\r\n        {\r\n          title:\r\n            \"Позиционирование в CSS управляет размещением элементов на странице:\",\r\n          type: \"text\",\r\n          description: `\r\n            <ul>\r\n              <li><strong>position: static</strong>: Обычное потоковое позиционирование.</li>\r\n              <li><strong>position: relative</strong>: Относительное позиционирование, элемент сдвигается относительно своего обычного положения.</li>\r\n              <li><strong>position: absolute</strong>: Абсолютное позиционирование относительно ближайшего родительского элемента.</li>\r\n              <li><strong>position: fixed</strong>: Фиксированное позиционирование относительно окна браузера.</li>\r\n              <li><strong>position: sticky</strong>: Элемент ведет себя как <code>relative</code> до определенной точки, после чего становится <code>fixed</code>.</li>\r\n            </ul>\r\n            <p>Пример:</p>\r\n          `,\r\n          code: `\r\n.relative {\r\nposition: relative;\r\ntop: 10px;\r\n}\r\n\r\n.absolute {\r\nposition: absolute;\r\ntop: 20px;\r\n}\r\n\r\n.fixed {\r\nposition: fixed;\r\ntop: 0;\r\n}\r\n          `,\r\n        },\r\n        {\r\n          title: \"Переполнение (Overflow)\",\r\n          type: \"text\",\r\n          description: `\r\n            <p>Свойство <code>overflow</code> в CSS управляет тем, как обрабатывается содержимое, выходящее за пределы блока. Оно может принимать следующие значения:</p>\r\n            <ul>\r\n              <li><strong>visible</strong>: Содержимое не обрезается; его можно видеть за пределами элемента (значение по умолчанию).</li>\r\n              <li><strong>hidden</strong>: Содержимое, выходящее за пределы элемента, скрыто.</li>\r\n              <li><strong>scroll</strong>: Содержимое скрыто, но добавляются полосы прокрутки для доступа к нему.</li>\r\n              <li><strong>auto</strong>: Полосы прокрутки добавляются только при необходимости.</li>\r\n            </ul>\r\n          `,\r\n        },\r\n        {\r\n          title: \"Пример использования overflow\",\r\n          type: \"text\",\r\n          description: `\r\n            <p>Пример CSS с использованием свойства <code>overflow</code>:</p>\r\n          `,\r\n          code: `\r\n.container {\r\nwidth: 200px;\r\nheight: 100px;\r\noverflow: scroll; /* Добавляет полосы прокрутки */\r\n}\r\n          `,\r\n        },\r\n        {\r\n          title: \"z-индекс (z-index)\",\r\n          type: \"text\",\r\n          description: `\r\n            <p>Свойство <code>z-index</code> управляет порядком наложения элементов на странице. Оно определяет, какой элемент будет отображаться сверху, когда элементы перекрываются. Некоторые важные моменты:</p>\r\n            <ul>\r\n              <li><strong>Числовые значения</strong>: Элементы с большим значением <code>z-index</code> отображаются выше элементов с меньшим значением.</li>\r\n              <li><strong>Контекст наложения</strong>: <code>z-index</code> работает только для элементов, у которых задано свойство <code>position</code> (relative, absolute, fixed или sticky).</li>\r\n              <li><strong>Значение по умолчанию</strong>: Элементы без заданного <code>z-index</code> имеют значение по умолчанию 0.</li>\r\n            </ul>\r\n          `,\r\n        },\r\n        {\r\n          title: \"Пример использования z-index\",\r\n          type: \"text\",\r\n          description: `\r\n            <p>Пример CSS с использованием свойства <code>z-index</code>:</p>\r\n          `,\r\n          code: `\r\n.box1 {\r\nposition: absolute;\r\nz-index: 1; /* Находится ниже */\r\n}\r\n\r\n.box2 {\r\nposition: absolute;\r\nz-index: 2; /* Находится выше */\r\n}\r\n          `,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Флексбокс\",\r\n      id: 2506,\r\n      children: [\r\n        {\r\n          title:\r\n            \"Флексбокс - это метод расположения элементов в одной строке или колонке с возможностью изменения их размеров:\",\r\n          type: \"text\",\r\n          description: `\r\n            <ul>\r\n              <li><strong>display: flex</strong>: Включает флексбокс на родительском элементе.</li>\r\n              <li><strong>flex-direction</strong>: Определяет направление основного оси (row, column).</li>\r\n              <li><strong>justify-content</strong>: Управляет расположением элементов вдоль главной оси.</li>\r\n              <li><strong>align-items</strong>: Управляет расположением элементов вдоль поперечной оси.</li>\r\n            </ul>\r\n            <p>Пример:</p>\r\n            `,\r\n          code: `               \r\n.container {\r\ndisplay: flex;\r\nflex-direction: row;\r\njustify-content: space-between;\r\nalign-items: center;\r\n}\r\n          `,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Сетка\",\r\n      id: 2507,\r\n      children: [\r\n        {\r\n          title: \"CSS Grid\",\r\n          type: \"text\",\r\n          description: `\r\n          <p>CSS Grid - это мощный инструмент для создания гибких и сложных макетов. Основные моменты:</p>\r\n          <ul>\r\n            <li>Создает двумерные сетки</li>\r\n            <li>Контролирует размещение элементов по строкам и колонкам</li>\r\n            <li>Задает размер и расстояние между элементами</li>\r\n          </ul>\r\n          <p>Пример:</p>\r\n          `,\r\n          code: `\r\n.grid-container {\r\ndisplay: grid;\r\ngrid-template-columns: repeat(3, 1fr); /* 3 колонки */\r\ngap: 10px; /* расстояние между элементами */\r\n}\r\n          `,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"CSS Grid Layout\",\r\n      id: 2508,\r\n      children: [\r\n        {\r\n          title: \"CSS Grid Layout\",\r\n          type: \"image\",\r\n          url: \"https://i.pinimg.com/enabled_hi/564x/54/e9/87/54e98761c2348545244bf25487c5be23.jpg\",\r\n        },\r\n        {\r\n          title: `⚡️ Мультиколонки:\r\nОсновная идея мультиколонок заключается в том, что вы можете взять фрагмент содержимого и поместить его в несколько колонок, как в газете\r\n          `,\r\n          type: \"text\",\r\n          code: `\r\n.article-content {\r\ncolumns: auto 10rem;\r\n}\r\n\r\n.article {\r\n// Шорткат columns даёт возможность указать значения для \r\n// свойств column-count и column-width одновременно, задав \r\n// количество и ширину колонок\r\ncolumns: 2 200px;\r\ncolumn-gap: 25px;\r\n}\r\n.title{\r\n// Свойство column-span позволяет элементу растянуться \r\n// на несколько колонок\r\ncolumn-span: all;\r\n}\r\n}`,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Разница между блочными и строчными элементами\",\r\n      id: 2509,\r\n      children: [\r\n        {\r\n          title: \"Блочные элементы\",\r\n          type: \"text\",\r\n          description: `\r\n            <p>Характеристики блочных элементов:</p>\r\n            <ul>\r\n              <li><strong>Занимают всю ширину</strong>: Блочные элементы по умолчанию занимают всю доступную ширину контейнера.</li>\r\n              <li><strong>Начинают новую строку</strong>: Каждый блочный элемент начинается с новой строки, что создает визуальное разделение между элементами.</li>\r\n              <li><strong>Примеры</strong>: <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;h1&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;section&gt;</code>.</li>\r\n            </ul>\r\n          `,\r\n        },\r\n        {\r\n          title: \"Строчные элементы\",\r\n          type: \"text\",\r\n          description: `\r\n            <p>Характеристики строчных элементов:</p>\r\n            <ul>\r\n              <li><strong>Занимают только необходимую ширину</strong>: Строчные элементы занимают только ту ширину, которая необходима для их содержания.</li>\r\n              <li><strong>Не начинают новую строку</strong>: Строчные элементы располагаются в одной строке с другими элементами, не создавая разрывов.</li>\r\n              <li><strong>Примеры</strong>: <code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code>, <code>&lt;img&gt;</code>.</li>\r\n            </ul>\r\n          `,\r\n        },\r\n        {\r\n          title: \"Сводная таблица различий\",\r\n          type: \"text\",\r\n          description: `\r\n            <p>Краткое сравнение:</p>\r\n            <ul>\r\n              <li><strong>Ширина</strong>: Блочные элементы — 100% ширины; строчные элементы — по содержимому.</li>\r\n              <li><strong>Перенос</strong>: Блочные элементы переносят последующий контент на новую строку; строчные элементы — нет.</li>\r\n              <li><strong>Использование</strong>: Блочные элементы для структуры; строчные элементы для форматирования текста.</li>\r\n            </ul>\r\n          `,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"HTML and CSS Slider\",\r\n      id: 2510,\r\n      children: [\r\n        {\r\n          title: \"\",\r\n          type: \"video\",\r\n          url: \"https://www.youtube.com/embed/gVxyTOPPEPc\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Принципы семантической верстки\",\r\n      id: 2511,\r\n      children: [\r\n        {\r\n          title: \"Принципы семантической верстки включают:\",\r\n          type: \"text\",\r\n          description: `\r\n          <ul>\r\n            <li>Использование HTML-тегов по назначению (например, &lt;header&gt;, &lt;article&gt;, &lt;footer&gt;).</li>\r\n            <li>Обеспечение доступности для технологий помощников (скринридеров).</li>\r\n            <li>Улучшение SEO (поисковой оптимизации).</li>\r\n          </ul>\r\n          <p>Пример:</p>\r\n          `,\r\n          code: `\r\n<article>\r\n<header>\r\n<h1>Заголовок статьи</h1>\r\n</header>\r\n<p>Содержимое статьи...</p>\r\n<footer>Автор: Иван Иванов</footer>\r\n</article>\r\n          `,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Что такое #shadow-root в инспекторе HTML-страницы\",\r\n      id: 2512,\r\n      children: [\r\n        {\r\n          title:\r\n            \"Shadow DOM позволяет создавать отдельные области DOM, чтобы избежать конфликтов стилей\",\r\n          type: \"text\",\r\n          description: `\r\n                  <ul>\r\n                      <li>Поддержка инкапсуляции: Стили внутри Shadow DOM не влияют на родительский DOM.</li>\r\n                      <li>Упрощение разработки компонентов: Позволяет создавать защищенные компоненты.</li>\r\n                  </ul>\r\n          `,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Названия популярных CSS-методологий и их отличия\",\r\n      id: 2513,\r\n      children: [\r\n        {\r\n          title: \"Существует несколько популярных CSS-методологий:\",\r\n          type: \"text\",\r\n          description: `\r\n                  <ul>\r\n                      <li><strong>BEM</strong> (Block, Element, Modifier) - способствует созданию доступных и модульных стилей.</li>\r\n                      <li><strong>SMACSS</strong> (Scalable and Modular Architecture for CSS) - структурирует стили по категориям.</li>\r\n                      <li><strong>OOCSS</strong> (Object-Oriented CSS) - акцентирует внимание на создании повторно используемых объектов.</li>\r\n                  </ul>\r\n          `,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Как изменить цвет в svg файле\",\r\n      id: 2514,\r\n      children: [\r\n        {\r\n          title: \"Изменение цвета\",\r\n          type: \"text\",\r\n          description: `\r\n                  <p>Существует несколько способов изменить цвет в SVG:</p>\r\n                  <ul>\r\n                      <li>Изменение атрибутов <code>fill</code> и <code>stroke</code> в самом SVG файле.</li>\r\n                      <li>Использование CSS для стилизации SVG элементов.</li>\r\n                      <li>Динамическое изменение с помощью JavaScript.</li>\r\n                  </ul>\r\n          `,\r\n          code: `\r\n// изменение атрибутов\r\n<svg width=\"100\" height=\"100\">\r\n<circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"red\" stroke=\"black\" \r\nstroke-width=\"2\" />\r\n</svg>\r\n\r\n\r\n// использование CSS \r\n<svg width=\"100\" height=\"100\">\r\n<style>\r\n.myCircle {\r\nfill: blue;\r\nstroke: green;\r\nstroke-width: 3;\r\n}\r\n</style>\r\n<circle class=\"myCircle\" cx=\"50\" cy=\"50\" r=\"40\" />\r\n</svg>\r\n\r\n\r\n// динамическое изменение\r\n<svg id=\"mySvg\" width=\"100\" height=\"100\">\r\n<circle id=\"myCircle\" cx=\"50\" cy=\"50\" r=\"40\" fill=\"orange\" \r\nstroke=\"black\" stroke-width=\"2\" />\r\n</svg>\r\n\r\n<button onclick=\"changeColor()\">Изменить цвет</button>\r\n\r\n<script>\r\nfunction changeColor() {\r\nvar circle = document.getElementById(\"myCircle\");\r\ncircle.setAttribute(\"fill\", \"purple\");  // Изменяем цвет заливки\r\ncircle.setAttribute(\"stroke\", \"yellow\"); // Изменяем цвет обводки\r\n}\r\n</script>\r\n          `,\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n","export const SASSModule = {\r\n  id: 502,\r\n  title: \"SASS\",\r\n  children: [\r\n    {\r\n      title: \"SASS cheat sheet\",\r\n      type: \"image\",\r\n      url: \"https://d1le3ohiuslpz1.cloudfront.net/skillcrush/wp-content/uploads/2023/07/how-sass-works-1024x506.png\",\r\n    },\r\n  ],\r\n};\r\n","export const SCSSModule = {\r\n  id: 503,\r\n  title: \"SCSS\",\r\n  children: [\r\n    {\r\n      title: \"SCSS cheat sheet\",\r\n      type: \"image\",\r\n      url: \"https://i0.wp.com/techprimelab.com/wp-content/uploads/2020/06/SCSS-or-CSS.jpg\",\r\n    },\r\n  ],\r\n};\r\n","export const styledComponentsModule = {\r\n  id: 504,\r\n  title: \"styled-components\",\r\n  children: [\r\n    {\r\n      title: \"styled-components cheat sheet\",\r\n      type: \"image\",\r\n      url: \"https://raw.githubusercontent.com/styled-components/brand/master/styled-components.png\",\r\n    },\r\n  ],\r\n};\r\n","import { reactJS } from \"./reactJS/reactJS\";\r\nimport { reactNative } from \"./ReactNative/reactNative\";\r\nimport { reactTS } from \"./reactTS/reactTS\";\r\n\r\nexport const react = {\r\n  id: 14,\r\n  title: \"React\",\r\n  children: [\r\n    reactJS,\r\n    reactTS,\r\n    reactNative,\r\n  ],\r\n};\r\n","import { CacheReact } from \"./CacheReact/CacheReact\";\r\nimport { componentRerenders } from \"./componentRerenders/componentRerendersReact\";\r\nimport { FiberTree } from \"./FiberTree/FiberTree\";\r\nimport { hooks } from \"./hooks/hooks\";\r\nimport { memoization } from \"./memoization/memoReact\";\r\nimport { polymorphismInReact } from \"./polymorphismInReact/polymorphismInReact\";\r\nimport { PortalsReact } from \"./PortalsReact/PortalsReact\";\r\nimport { Props } from \"./Props/Props\";\r\nimport { PureComponent } from \"./PureComponent/PureComponent\";\r\nimport { TwoWayBinding } from \"./TwoWayBinding/TwoWayBinding\";\r\nimport { VirtualDom } from \"./VirtualDom/VirtualDom\";\r\n\r\nexport const reactJS = {\r\n  id: 175,\r\n  title: \"React JS\",\r\n  children: [\r\n    PortalsReact,\r\n    Props,\r\n    polymorphismInReact,\r\n    PureComponent,\r\n    hooks,\r\n    memoization,\r\n    componentRerenders,\r\n    FiberTree,\r\n    VirtualDom,\r\n    CacheReact,\r\n    TwoWayBinding,\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"React JS Drag to Select\",\r\n      url: \"https://www.joshuawootonn.com/react-drag-to-select\",\r\n    },\r\n  ],\r\n};\r\n","export const PureComponent = {\r\n  id: 226,\r\n  title: \"PureComponent\",\r\n  children: [\r\n    {\r\n      title: \"Что такое PureComponent?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>PureComponent</strong> — это классовый компонент в React, который автоматически реализует метод <code>shouldComponentUpdate</code> с помощью поверхностного сравнения (<em>shallow comparison</em>) пропсов и состояния.</p>\r\n        <p>Если пропсы или состояние не изменились (по результатам сравнения), компонент не будет перерисован, что помогает оптимизировать производительность.</p>\r\n        <p>Основные характеристики:</p>\r\n        <ul>\r\n          <li>Поверхностное сравнение пропсов и состояния.</li>\r\n          <li>Не требует ручной реализации <code>shouldComponentUpdate</code>.</li>\r\n          <li>Подходит для простых компонентов без сложных структур данных.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Синтаксис\",\r\n      type: \"text\",\r\n      description: `\r\n        <pre><code>import React, { PureComponent } from 'react';\r\n\r\nclass MyComponent extends PureComponent {\r\n  render() {\r\n    return <div>{this.props.value}</div>;\r\n  }\r\n}\r\n\r\n// Использование\r\nfunction App() {\r\n  return <MyComponent value={42} />;\r\n}</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Как работает поверхностное сравнение?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Поверхностное сравнение</strong> означает, что React сравнивает только ссылки на объекты, массивы и примитивные значения:</p>\r\n        <ul>\r\n          <li><strong>Примитивы:</strong> Сравниваются по значению (например, <code>42 === 42</code>).</li>\r\n          <li><strong>Объекты и массивы:</strong> Сравниваются по ссылке (например, <code>{ a: 1 } !== { a: 1 }</code>).</li>\r\n        </ul>\r\n        <p>Если ссылка не изменилась, компонент не будет перерисован.</p>\r\n      `,\r\n      code: `\r\nconst obj1 = { a: 1 };\r\nconst obj2 = { a: 1 };\r\n\r\nconsole.log(obj1 === obj2); // false (разные ссылки)\r\n      `,\r\n    },\r\n    {\r\n      title: \"Когда использовать PureComponent?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Используйте <code>PureComponent</code>, когда:</p>\r\n        <ul>\r\n          <li>Компонент принимает только примитивные данные (числа, строки, булевы значения).</li>\r\n          <li>Пропсы и состояние не изменяются часто.</li>\r\n          <li>Вы хотите избежать ненужных перерисовок для повышения производительности.</li>\r\n        </ul>\r\n        <p>Не используйте <code>PureComponent</code>, если:</p>\r\n        <ul>\r\n          <li>Пропсы или состояние содержат сложные структуры данных (объекты, массивы).</li>\r\n          <li>Данные мутируют напрямую (React не сможет обнаружить изменения).</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример использования\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Пример компонента, который не перерисовывается при одинаковых пропсах:</p>\r\n      `,\r\n      code: `\r\nimport React, { PureComponent } from 'react';\r\n\r\nclass Counter extends PureComponent {\r\n  render() {\r\n    console.log('Render called');\r\n    return <div>Count: {this.props.count}</div>;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const [count, setCount] = React.useState(0);\r\n\r\n  return (\r\n    <>\r\n      <Counter count={count} />\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n      <button onClick={() => setCount(count)}>Set Same Value</button>\r\n    </>\r\n  );\r\n}\r\n// При нажатии на вторую кнопку компонент не перерисуется\r\n      `,\r\n    },\r\n    {\r\n      title: \"Разница между Component и PureComponent\",\r\n      type: \"text\",\r\n      description: `\r\n        <table border=\"1\">\r\n          <tr>\r\n            <th>Component</th>\r\n            <th>PureComponent</th>\r\n          </tr>\r\n          <tr>\r\n            <td>Всегда вызывает ререндер при изменении пропсов или состояния.</td>\r\n            <td>Вызывает ререндер только при изменении пропсов или состояния (по результатам поверхностного сравнения).</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Не имеет встроенной оптимизации.</td>\r\n            <td>Автоматически реализует <code>shouldComponentUpdate</code>.</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Подходит для сложных компонентов с частыми изменениями.</td>\r\n            <td>Подходит для простых компонентов с редкими изменениями.</td>\r\n          </tr>\r\n        </table>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Избегайте мутаций:</strong> Не изменяйте пропсы или состояние напрямую. Вместо этого создавайте новые объекты или массивы.</li>\r\n          <li><strong>Используйте для простых компонентов:</strong> Для сложных данных лучше использовать <code>React.memo</code> или <code>shouldComponentUpdate</code>.</li>\r\n          <li><strong>Тестируйте производительность:</strong> Убедитесь, что использование <code>PureComponent</code> действительно улучшает производительность.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Мутация данных:</strong></p>\r\n        <pre><code>// Плохо: мутация пропсов\r\nfunction updateData(data) {\r\n  data.value = 'new value'; // PureComponent не обнаружит изменения\r\n}\r\n\r\n// Лучше: создайте новый объект\r\nfunction updateData(data) {\r\n  return { ...data, value: 'new value' };\r\n}</code></pre>\r\n\r\n        <p><strong>2. Использование PureComponent для сложных данных:</strong></p>\r\n        <pre><code>// Плохо: PureComponent не справится с глубокими изменениями\r\nclass MyComponent extends PureComponent {\r\n  render() {\r\n    return <div>{this.props.data.nested.value}</div>;\r\n  }\r\n}\r\n\r\n// Лучше: используйте shouldComponentUpdate или React.memo\r\n</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Альтернативы PureComponent\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Для функциональных компонентов можно использовать <code>React.memo</code>, который также реализует поверхностное сравнение пропсов.</p>\r\n      `,\r\n      code: `\r\nimport React from 'react';\r\n\r\nconst MyComponent = React.memo(function MyComponent({ value }) {\r\n  console.log('Render called');\r\n  return <div>Value: {value}</div>;\r\n});\r\n\r\n// Использование\r\nfunction App() {\r\n  const [value, setValue] = React.useState(0);\r\n  return (\r\n    <>\r\n      <MyComponent value={value} />\r\n      <button onClick={() => setValue(value + 1)}>Increment</button>\r\n    </>\r\n  );\r\n}\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const VirtualDom = {\r\n  id: 534,\r\n  title: \"Virtual DOM (Виртуальный Дом)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое Virtual DOM?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Virtual DOM</strong> — это легковесное представление реального DOM в виде JavaScript-объектов. Вместо непосредственного взаимодействия с реальным DOM, библиотеки (например, React) создают копию DOM-дерева в памяти и выполняют изменения в этой копии.</p>\r\n        <p>После внесения изменений в Virtual DOM, библиотека сравнивает его с предыдущим состоянием (процесс называется <strong>реконсиляцией</strong>) и применяет только необходимые изменения к реальному DOM.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Зачем нужен Virtual DOM?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Virtual DOM решает проблему производительности при работе с реальным DOM:</p>\r\n        <ul>\r\n          <li><strong>Минимизация манипуляций с DOM:</strong> Операции с реальным DOM дорогие (например, перерисовка элементов), так как они вызывают рефлоу и репейнтинг.</li>\r\n          <li><strong>Оптимизация обновлений:</strong> Virtual DOM позволяет вычислить минимальный набор изменений, которые нужно применить к реальному DOM.</li>\r\n          <li><strong>Удобство разработки:</strong> Разработчики могут работать с декларативным API, не заботясь о деталях работы с DOM.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Как работает Virtual DOM?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Процесс работы Virtual DOM можно разделить на несколько этапов:</p>\r\n        <ol>\r\n          <li><strong>Создание Virtual DOM:</strong> Библиотека создает JavaScript-объект, представляющий текущее состояние DOM.</li>\r\n          <li><strong>Обновление Virtual DOM:</strong> При изменении данных библиотека создает новое дерево Virtual DOM.</li>\r\n          <li><strong>Реконсиляция:</strong> Сравниваются старое и новое деревья Virtual DOM, чтобы найти минимальный набор изменений.</li>\r\n          <li><strong>Применение изменений:</strong> Изменения применяются к реальному DOM.</li>\r\n        </ol>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример реконсиляции\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Предположим, у нас есть следующий компонент:</p>\r\n      `,\r\n      code: `\r\nfunction App() {\r\n  const [count, setCount] = React.useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Counter: {count}</h1>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n      `,\r\n      explanation: `\r\n        <p>Когда пользователь нажимает кнопку, React:</p>\r\n        <ol>\r\n          <li>Создает новое дерево Virtual DOM с обновленным значением <code>count</code>.</li>\r\n          <li>Сравнивает новое дерево с предыдущим (реконсиляция).</li>\r\n          <li>Находит, что изменился только текст внутри <code><h1></code>.</li>\r\n          <li>Обновляет только этот текст в реальном DOM, минимизируя затраты на перерисовку.</li>\r\n        </ol>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Преимущества Virtual DOM\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Производительность:</strong> Минимизация манипуляций с реальным DOM улучшает производительность.</li>\r\n          <li><strong>Декларативность:</strong> Разработчики описывают желаемое состояние интерфейса, а библиотека сама решает, как его достичь.</li>\r\n          <li><strong>Кросс-платформенность:</strong> Virtual DOM может быть использован не только в браузерах, но и в других средах (например, React Native).</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Недостатки Virtual DOM\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Дополнительные вычисления:</strong> Процесс реконсиляции требует времени и ресурсов, особенно для больших деревьев.</li>\r\n          <li><strong>Сложность отладки:</strong> Иногда бывает сложно понять, почему определенные изменения не применяются или применяются не так, как ожидалось.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Virtual DOM в React\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>React использует Virtual DOM для управления интерфейсом. Когда состояние компонента изменяется, React создает новое дерево Virtual DOM, сравнивает его с предыдущим и применяет изменения к реальному DOM.</p>\r\n        <p>Этот подход делает React быстрым и удобным для работы с динамическими интерфейсами.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Альтернативы Virtual DOM\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Некоторые библиотеки и фреймворки используют другие подходы для оптимизации работы с интерфейсом:</p>\r\n        <ul>\r\n          <li><strong>Svelte:</strong> Компилирует компоненты в высокооптимизированный JavaScript, минуя Virtual DOM.</li>\r\n          <li><strong>Vue.js:</strong> Использует комбинацию Virtual DOM и реактивной системы для управления состоянием.</li>\r\n          <li><strong>Angular:</strong> Использует механизм Change Detection для обнаружения изменений.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const TwoWayBinding = {\r\n  id: 536,\r\n  title: \"Two-Way Binding (двустороннее связывание)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое двустороннее связывание?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Двустороннее связывание</strong> — это механизм, при котором данные синхронизируются между пользовательским интерфейсом и моделью данных в реальном времени.</p>\r\n        <p>В React двустороннее связывание реализуется через:</p>\r\n        <ul>\r\n          <li>Использование управляемых компонентов (controlled components).</li>\r\n          <li>Состояние (<code>state</code>) для хранения данных.</li>\r\n          <li>Обработчики событий для обновления состояния.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Пример двустороннего связывания\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Пример использования двустороннего связывания с текстовым полем:</p>\r\n      `,\r\n      code: `\r\nimport React, { useState } from 'react';\r\n\r\nfunction TwoWayBindingExample() {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value); // Обновление состояния при изменении input\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={value} // Привязка значения к состоянию\r\n        onChange={handleChange} // Обновление состояния при вводе\r\n      />\r\n      <p>Вы ввели: {value}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TwoWayBindingExample;\r\n      `,\r\n    },\r\n    {\r\n      title: \"Как это работает?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>В React двустороннее связывание работает следующим образом:</p>\r\n        <ol>\r\n          <li><strong>Состояние:</strong> Данные хранятся в состоянии компонента (например, через <code>useState</code>).</li>\r\n          <li><strong>Привязка:</strong> Значение элемента интерфейса (например, <code><input></code>) привязывается к состоянию через атрибут <code>value</code>.</li>\r\n          <li><strong>Обновление:</strong> При изменении значения в интерфейсе (например, при вводе текста) вызывается обработчик события (например, <code>onChange</code>), который обновляет состояние.</li>\r\n          <li><strong>Ререндер:</strong> React автоматически обновляет интерфейс, когда состояние изменяется.</li>\r\n        </ol>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Преимущества двустороннего связывания\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Автоматическая синхронизация:</strong> Изменения в интерфейсе сразу отражаются в данных и наоборот.</li>\r\n          <li><strong>Предсказуемость:</strong> Все данные находятся в одном месте (состоянии).</li>\r\n          <li><strong>Удобство:</strong> Легко управлять формами и пользовательским вводом.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Недостатки двустороннего связывания\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Сложность:</strong> В больших приложениях может быть сложно отслеживать изменения состояния.</li>\r\n          <li><strong>Производительность:</strong> Частые обновления состояния могут привести к ненужным ререндерам.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Альтернатива: однонаправленное связывание\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>React по своей сути использует <strong>однонаправленное связывание</strong>, где данные передаются сверху вниз через пропсы. Однако двустороннее связывание можно реализовать, как показано выше.</p>\r\n        <p>Однонаправленное связывание проще для понимания и отладки, но требует больше кода для управления вводом пользователя.</p>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Лучшие практики\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>Используйте управляемые компоненты:</strong> Это делает код более предсказуемым и легким для тестирования.</li>\r\n          <li><strong>Ограничьте использование состояния:</strong> Храните только те данные, которые действительно нужны.</li>\r\n          <li><strong>Оптимизируйте производительность:</strong> Используйте <code>React.memo</code> или <code>useMemo</code> для минимизации ненужных ререндеров.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Частые ошибки\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Неправильная привязка значений:</strong></p>\r\n        <pre><code>// Плохо: забытая привязка значения\r\n<input type=\"text\" onChange={handleChange} />\r\n\r\n// Лучше: добавьте value\r\n<input type=\"text\" value={value} onChange={handleChange} />\r\n</code></pre>\r\n\r\n        <p><strong>2. Отсутствие обработчика событий:</strong></p>\r\n        <pre><code>// Плохо: забытый обработчик\r\n<input type=\"text\" value={value} />\r\n\r\n// Лучше: добавьте onChange\r\n<input type=\"text\" value={value} onChange={handleChange} />\r\n</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Продвинутые паттерны\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>1. Реализация двустороннего связывания с помощью хуков:</strong></p>\r\n        <pre><code>function useTwoWayBinding(initialValue) {\r\n  const [value, setValue] = useState(initialValue);\r\n  const handleChange = (event) => setValue(event.target.value);\r\n  return [value, handleChange];\r\n}\r\n\r\nfunction Component() {\r\n  const [value, handleChange] = useTwoWayBinding('');\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"text\" value={value} onChange={handleChange} />\r\n      <p>Вы ввели: {value}</p>\r\n    </div>\r\n  );\r\n}\r\n</code></pre>\r\n\r\n        <p><strong>2. Работа с формами:</strong></p>\r\n        <pre><code>function FormComponent() {\r\n  const [formData, setFormData] = useState({ name: '', email: '' });\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={formData.name}\r\n        onChange={handleChange}\r\n        placeholder=\"Введите имя\"\r\n      />\r\n      <input\r\n        type=\"email\"\r\n        name=\"email\"\r\n        value={formData.email}\r\n        onChange={handleChange}\r\n        placeholder=\"Введите email\"\r\n      />\r\n      <button type=\"submit\">Отправить</button>\r\n    </form>\r\n  );\r\n}\r\n</code></pre>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Дополнительные материалы\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Для более глубокого изучения:</p>\r\n        <ul>\r\n          <li><a href=\"https://reactjs.org/docs/forms.html\"  target=\"_blank\">React Documentation: Forms</a></li>\r\n          <li><a href=\"https://ru.reactjs.org/docs/hooks-state.html\"  target=\"_blank\">React Documentation: Using the State Hook</a></li>\r\n          <li><a href=\"https://medium.com/@stasonmars/%D0%B4%D0%B2%D1%83%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D0%BD%D0%B5%D0%B5-%D1%81%D0%B2%D1%8F%D0%B7%D1%8B%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B2-react-8c9b8f0d5e5a\"  target=\"_blank\">Medium: Двустороннее связывание в React</a></li>\r\n        </ul>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const reactTS = {\r\n  id: 176,\r\n  title: \"React TS\",\r\n  children: [\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"Introduction to React TypeScript\",\r\n      url: \"https://it-shpora.pp.ua/category/react-typescript/\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"Advanced React Typescript\",\r\n      url: \"https://reactjs.org/docs/getting-started\",\r\n    },\r\n  ],\r\n};\r\n","export const reactNative = {\r\n  id: 177,\r\n  title: \"React Native\",\r\n  children: [\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"Introduction to React Native\",\r\n      url: \"https://it-shpora.pp.ua/category/react-native/\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      type: \"text\",\r\n      link: \"Advanced React Native\",\r\n      url: \"https://reactnative.dev/\",\r\n    },\r\n  ],\r\n};\r\n","import { redux } from \"./Redux/redux\";\r\nimport { reduxToolkit } from \"./Redux/ReduxToolkit/reduxToolkit\";\r\n\r\nexport const stateManaging = {\r\n    id: 21,\r\n    title: \"State Managing\",\r\n    children: [\r\n        redux,\r\n        reduxToolkit,\r\n    ],\r\n};","import { middleware } from \"./middleware/middleware\";\r\nimport { workCycle } from \"./workCycle/workCycle\";\r\n\r\nexport const redux = {\r\n    id: 213,\r\n    title: \"Redux\",\r\n    children: [\r\n        workCycle,\r\n        middleware,\r\n    ],\r\n}","export const workCycle = {\r\n    id: 530,\r\n    title: \"Цикл работы Redux\",\r\n    children: [\r\n        {\r\n            title: '1.Начальное состояние',\r\n            type: 'text',\r\n            description: `\r\n                <p>Начальное состояние определяется в редьюсерах.</p>\r\n            `,\r\n            code: `\r\nconst initialState = {\r\n    user: null,\r\n    cart: [],\r\n    products: []\r\n};\r\n            `,\r\n        },\r\n        {\r\n            title: '2.Подключение store к приложению',\r\n            type: 'text',\r\n            description: `\r\n                <p>Подключение store к приложению с помощью провайдера Provider из react-redux.</p>\r\n            `,\r\n            code: `\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n            `,\r\n        },\r\n        {\r\n            title: '3.UI-компоненты читают состояние из Redux',\r\n            type: 'text',\r\n            description: `\r\n                <p>UI-компоненты читают состояние из Redux с помощью useSelector или connect.</p>\r\n            `,\r\n            code: `\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction Cart(){\r\n    const cartItems = useSelector(state => state.cart);\r\n\r\n    return (\r\n        <ul>\r\n            {cartItems.map(item => (\r\n                <li key={item.id}>{item.name}</li>\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n            `,\r\n        },\r\n        {\r\n            title: '4.Пользователь взаимодействует с UI',\r\n            type: 'text',\r\n            description: `\r\n                <p>Пользователь взаимодействует с UI, вызывая dispatch.</p>\r\n            `,\r\n            code: `\r\nimport { useDispatch } from 'react-redux';\r\n\r\nfunction AddToCartButton({product}) {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClick = () => {\r\n        dispatch({ \r\n            type: 'ADD_TO_CART', \r\n            payload: product\r\n        });\r\n    };\r\n\r\n    return <button onClick={handleClick}>Add to Cart</button>\r\n}\r\n            `,\r\n        },\r\n        {\r\n            title: '5.Action отправляется в store c помощью dispatch',\r\n            type: 'text',\r\n            description: `\r\n                <p>Action отправляется в store с помощью dispatch.</p>\r\n            `,\r\n            code: `\r\n{\r\n  type: 'ADD_TO_CART',\r\n  payload: { id: 1, name: 'Laptop' }\r\n}\r\n            `,\r\n        },\r\n        {\r\n            title: '6.Middleware обрабатывает action',\r\n            type: 'text',\r\n            description: `\r\n                <p>Middleware обрабатывает action, пример с redux-thunk.</p>\r\n            `,\r\n            code: `\r\nconst fetchProducts = () => {\r\n    return async (dispatch) => {\r\n        const response = await fetch ('/api/products');\r\n        const data = await response.json();\r\n        dispatch({ type: 'SET_PRODUCTS', payload: data });\r\n    };\r\n};\r\n            `,\r\n        },\r\n        {\r\n            title: '7.Редьюсер обновляет состояние',\r\n            type: 'text',\r\n            description: `\r\n                <p>Редьюсер обновляет состояние.</p>\r\n            `,\r\n            code: `\r\nfunction cartReducer(state = [], action) {\r\n    switch(action.type){\r\n        case 'ADD_TO_CART': return [...state, action.payload]; // создаем новый массив\r\n        default: return state;\r\n    }\r\n}\r\n            `,\r\n        },\r\n        {\r\n            title: '8.Store уведомляет подписчика',\r\n            type: 'text',\r\n            description: `\r\n                <p>После обновления состояния store уведомляет всех подписчиков. Компоненты перерисовываются с новыми данными.</p>\r\n            `,\r\n        },\r\n        {\r\n            title: '9.UI обновляется',\r\n            type: 'text',\r\n            description: `\r\n                <p>Компоненты, которые зависят от состояния Redux, автоматически перерисовываются с новыми данными.</p>\r\n            `,\r\n        }\r\n    ],\r\n}","export const middleware = {\r\n  id: 531,\r\n  title: \"Middleware\",\r\n  children: [\r\n    {\r\n      title: \"Определение\",\r\n      type: \"text\",\r\n      description: `\r\n        <p>Middleware - это функция, которая обрабатывает action перед тем, как она достигнет редьюсера.</p>\r\n        <p>Middleware может использоваться:</p>\r\n        <ul>\r\n          <li>Логирования действий</li>\r\n          <li>Обработки асинхронных операций (например, запросов к API)</li>\r\n          <li>Добавления дополнительной логики (например, аналитика)</li>\r\n        </ul>\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","import { reduxCreateSliceExample } from \"./reduxCreateSliceExample/reduxCreateSliceExample\";\r\n\r\nexport const reduxToolkit = {\r\n  id: 214,\r\n  title: \"Redux Toolkit\",\r\n  children: [\r\n    reduxCreateSliceExample,\r\n  ],\r\n};\r\n","export const reduxCreateSliceExample = {\r\n  id: 532,\r\n  title: \"Пример использования createSlice (Redux Toolkit)\",\r\n  children: [\r\n    {\r\n      title: \"Что такое createSlice?\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>createSlice</strong> — это основной инструмент Redux Toolkit для создания редьюсеров. Он автоматически генерирует:</p>\r\n        <ul>\r\n            <li>Action creators : Функции для отправки действий.</li>\r\n            <li>Reducer : Функцию для обновления состояния.</li>\r\n        </ul>\r\n        <p>Основные параметры <strong>createSlice:</strong></p>\r\n        <ul>\r\n            <li><strong>name</strong> : Имя слайса (используется для генерации типов actions).</li>\r\n            <li><strong>initialState</strong> : Начальное состояние.</li>\r\n            <li><strong>reducers</strong> : Объект, где ключи — это названия actions, а значения — функции-редьюсеры.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Шаг 1: Создание слайса\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Создаём slice с помощью createSlice:</strong></p>\r\n      `,\r\n      code: `\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst counterSlice = createSlice({\r\n  name: 'counter', // Имя слайса\r\n  initialState: 0, // Начальное состояние\r\n  reducers: {\r\n    increment: (state) => state + 1, // Action и reducer\r\n    decrement: (state) => state - 1,\r\n    incrementByAmount: (state, action) => state + action.payload, // Action с payload\r\n  },\r\n});\r\n\r\n// Экспортируем reducer\r\nexport const counterReducer = counterSlice.reducer;\r\n\r\n// Экспортируем action creators\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n      `,\r\n    },\r\n    {\r\n      title: \"Как это работает\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>increment</strong> и <strong>decrement</strong> : Эти функции увеличивают и уменьшают состояние на 1.</li>\r\n          <li><strong>incrementByAmount</strong> : Эта функция увеличивает состояние на значение, переданное в payload.</li>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Шаг 2: Настройка store\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Создаём store с помощью configureStore:</strong></p>\r\n      `,\r\n      code: `\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { counterReducer } from './counterSlice';\r\n\r\n// Создаём store\r\nconst store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer, // Подключаем reducer\r\n  },\r\n});\r\n\r\nexport default store;\r\n      `,\r\n    },\r\n    {\r\n      title: \"Шаг 3: Использование в компонентах\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Теперь можно использовать состояние и отправлять действия в компонентах:</strong></p>\r\n      `,\r\n      code: `\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { increment, decrement, incrementByAmount } from './counterSlice';\r\n\r\nfunction Counter() {\r\n  const count = useSelector((state) => state.counter); // Читаем состояние\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div>\r\n      <h1>Count: {count}</h1>\r\n      <button onClick={() => dispatch(increment())}>Increment</button>\r\n      <button onClick={() => dispatch(decrement())}>Decrement</button>\r\n      <button onClick={() => dispatch(incrementByAmount(5))}>Add 5</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Counter;\r\n      `,\r\n    },\r\n    {\r\n      title: \"Обработка иммутабельности\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Redux Toolkit использует библиотеку Immer</strong>, которая позволяет писать мутации напрямую, но под капотом создаёт новые объекты. Это упрощает работу с иммутабельными данными.</p>\r\n        <p><strong>Пример с объектом:</strong></p>\r\n      `,\r\n      code: `\r\nconst userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: { name: '', age: 0 },\r\n  reducers: {\r\n    setName: (state, action) => {\r\n      state.name = action.payload; // \"Мутация\", но безопасная\r\n    },\r\n    setAge: (state, action) => {\r\n      state.age = action.payload;\r\n    },\r\n  },\r\n});\r\n      `,\r\n    },\r\n    {\r\n      title: \"Асинхронные операции (thunk)\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Redux Toolkit включает встроенную поддержку redux-thunk</strong>, что позволяет выполнять асинхронные операции (например, запросы к API).</p>\r\n        <p><strong>Пример:</strong></p>\r\n      `,\r\n      code: `\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n// Асинхронный action\r\nexport const fetchUser = createAsyncThunk('user/fetchUser', async (userId) => {\r\n  const response = await axios.get(\\`/api/users/\\${userId}\\`);\r\n  return response.data;\r\n});\r\n\r\nconst userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: { user: null, status: 'idle', error: null },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchUser.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchUser.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(fetchUser.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport const userReducer = userSlice.reducer;\r\n      `,\r\n    },\r\n    {\r\n      title: \"Как это работает\",\r\n      type: \"text\",\r\n      description: `\r\n        <ul>\r\n          <li><strong>createAsyncThunk</strong> : Создаёт асинхронный action для выполнения запроса.</li>\r\n          <li><strong>extraReducers</strong> : Обрабатывает три состояния асинхронного запроса:</li>\r\n          <ul>\r\n            <li><strong>pending</strong>: Запрос начался.</li>\r\n            <li><strong>fulfilled</strong>: Запрос завершился успешно.</li>\r\n            <li><strong>rejected</strong>: Запрос завершился с ошибкой.</li>\r\n          </ul>\r\n        </ul>\r\n      `,\r\n    },\r\n    {\r\n      title: \"Объединение нескольких слайсов\",\r\n      type: \"text\",\r\n      description: `\r\n        <p><strong>Redux Toolkit позволяет легко объединять несколько слайсов в один store.</strong></p>\r\n        <p><strong>Пример:</strong></p>\r\n      `,\r\n      code: `\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { counterReducer } from './counterSlice';\r\nimport { userReducer } from './userSlice';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    user: userReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n      `,\r\n    },\r\n  ]\r\n}","import { Git } from \"./Git/git\";\r\nimport { gitCommands } from \"./gitCommands/gitCommands\";\r\nimport { gitFlow } from \"./gitFlow/gitFlow\";\r\n\r\nexport const gitParent = {\r\n    id: 20,\r\n    title: \"Git\",\r\n    children: [\r\n      Git,\r\n      gitCommands,\r\n      gitFlow,\r\n    ],\r\n  };\r\n  ","export const Git = {\r\n  id: 208,\r\n  title: \"Что такое Git\",\r\n  children: [\r\n    {\r\n      title: \"Основное понятие Git\",\r\n      type: \"text\",\r\n      description: `\r\n                  <ul>\r\n                    <li>Git — это распределённая система контроля версий, которая позволяет отслеживать изменения в файлах и работать в команде над проектами.</li>\r\n                    <li>Она была создана Линусом Торвальдсом в 2005 году для разработки ядра Linux.</li>\r\n                  </ul>\r\n                `,\r\n    },\r\n  ],\r\n};\r\n","export const gitCommands = {\r\n  id: 210,\r\n  title: \"методы Git\",\r\n  children: [\r\n    {\r\n      title: \"Основные команды Git\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><code>git init</code> — инициализация нового репозитория.</li>\r\n              <li><code>git clone</code> — клонирование удалённого репозитория.</li>\r\n              <li><code>git add</code> — добавление изменений в индекс.</li>\r\n              <li><code>git commit</code> — создание нового коммита.</li>\r\n              <li><code>git push</code> — отправка изменений в удалённый репозиторий.</li>\r\n              <li><code>git pull</code> — получение изменений из удалённого репозитория.</li>\r\n              <li><code>git branch</code> — управление ветками.</li>\r\n              <li><code>git merge</code> — слияние веток.</li>\r\n              <li><code>git rebase</code> — копирование истории из одной ветки в другую.</li>\r\n              <li><code>git cherry-pick</code> — перенос выбранных коммитов по хэшу из одной ветки в другую.</li>\r\n            </ul>\r\n          `,\r\n      link: `Подробнее о методах Git`,\r\n      url: `https://docs.google.com/spreadsheets/d/17ze48FSKuw9B9qVtrFa5O_iWgAo5-Lvv5vPRpCYiVNI/edit?usp=sharing`,\r\n    },\r\n    {\r\n      title: \"Ветвление в Git\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li>Ветвление позволяет работать над разными версиями проекта одновременно.</li>\r\n              <li>Основная ветка обычно называется <code>main</code> или <code>master</code>.</li>\r\n              <li>Для создания новой ветки используется команда <code>git branch &lt;имя_ветки&gt;</code>.</li>\r\n              <li>Для переключения между ветками — <code>git checkout &lt;имя_ветки&gt;</code>.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Работа с удалёнными репозиториями\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li>Удалённый репозиторий — это версия проекта, хранящаяся на сервере (например, GitHub, GitLab, Bitbucket).</li>\r\n              <li>Команда <code>git remote add origin &lt;URL&gt;</code> добавляет удалённый репозиторий.</li>\r\n              <li>Команда <code>git fetch</code> загружает изменения из удалённого репозитория без слияния.</li>\r\n              <li>Команда <code>git pull</code> загружает изменения и сразу объединяет их с текущей веткой.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Конфликты и их разрешение\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li>Конфликты возникают, когда Git не может автоматически объединить изменения из разных веток.</li>\r\n              <li>Для разрешения конфликтов нужно вручную отредактировать файлы, указать изменения и выполнить <code>git add</code>.</li>\r\n              <li>После разрешения конфликтов необходимо завершить слияние командой <code>git commit</code>.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Прогрессивная развертка\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li>Прогрессивная развертка — это подход к разработке страниц, при котором отображение контента происходит по мере его загрузки.</li>\r\n              <li>Сначала загружается основной контент.</li>\r\n              <li>Второстепенный контент загружается позже.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","export const gitFlow = {\r\n  id: 209,\r\n  title: \"Git Flow\",\r\n  children: [\r\n    {\r\n      title: \"Основное понятие Git Flow\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li>Git Flow — это стратегия ветвления для Git, которая помогает организовать процесс разработки, выпуска и поддержки проектов.</li>\r\n              <li>Она была предложена Винсентом Дриссеном и стала популярной благодаря своей простоте и эффективности.</li>\r\n              <li>Git Flow использует две основные ветки: <code>main</code> (или <code>master</code>) и <code>develop</code>, а также вспомогательные ветки для фич, релизов и исправлений.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Основные ветки в Git Flow\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><strong>main (master)</strong> — ветка, содержащая стабильную версию кода, готовая к релизу.</li>\r\n              <li><strong>develop</strong> — ветка для текущей разработки, куда сливаются все завершённые фичи.</li>\r\n              <li><strong>feature/*</strong> — ветки для разработки новых функциональностей. Создаются от <code>develop</code> и сливаются обратно в неё.</li>\r\n              <li><strong>release/*</strong> — ветки для подготовки релиза. Создаются от <code>develop</code> и сливаются в <code>main</code> и <code>develop</code>.</li>\r\n              <li><strong>hotfix/*</strong> — ветки для срочных исправлений в <code>main</code>. Создаются от <code>main</code> и сливаются в <code>main</code> и <code>develop</code>.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Процесс работы с Git Flow\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><strong>Инициализация Git Flow</strong>: Используйте команду <code>git flow init</code>, чтобы настроить ветки <code>main</code> и <code>develop</code>.</li>\r\n              <li><strong>Разработка фич</strong>:\r\n                <ul>\r\n                  <li>Создайте ветку для фичи: <code>git flow feature start &lt;имя_фичи&gt;</code>.</li>\r\n                  <li>Завершите разработку фичи: <code>git flow feature finish &lt;имя_фичи&gt;</code>.</li>\r\n                </ul>\r\n              </li>\r\n              <li><strong>Подготовка релиза</strong>:\r\n                <ul>\r\n                  <li>Создайте ветку для релиза: <code>git flow release start &lt;версия&gt;</code>.</li>\r\n                  <li>Завершите релиз: <code>git flow release finish &lt;версия&gt;</code>.</li>\r\n                </ul>\r\n              </li>\r\n              <li><strong>Исправление багов</strong>:\r\n                <ul>\r\n                  <li>Создайте ветку для исправления: <code>git flow hotfix start &lt;имя_исправления&gt;</code>.</li>\r\n                  <li>Завершите исправление: <code>git flow hotfix finish &lt;имя_исправления&gt;</code>.</li>\r\n                </ul>\r\n              </li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Преимущества Git Flow\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li>Чёткая структура веток, которая упрощает управление проектом.</li>\r\n              <li>Подходит для проектов с регулярными релизами.</li>\r\n              <li>Позволяет параллельно разрабатывать новые фичи и поддерживать стабильную версию.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Недостатки Git Flow\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li>Может быть избыточным для небольших проектов или команд.</li>\r\n              <li>Требует строгого соблюдения процесса, что может замедлять разработку.</li>\r\n              <li>Сложнее управлять в проектах с непрерывной доставкой (Continuous Delivery).</li>\r\n            </ul>\r\n          `,\r\n    },\r\n    {\r\n      title: \"Альтернативы Git Flow\",\r\n      type: \"text\",\r\n      description: `\r\n            <ul>\r\n              <li><strong>GitHub Flow</strong> — более простая стратегия, ориентированная на непрерывную доставку.</li>\r\n              <li><strong>GitLab Flow</strong> — стратегия, которая сочетает в себе элементы Git Flow и Continuous Delivery.</li>\r\n              <li><strong>Trunk-Based Development</strong> — стратегия, при которой разработка ведётся в одной основной ветке.</li>\r\n            </ul>\r\n          `,\r\n    },\r\n  ],\r\n};\r\n","import { testAgile } from \"./Common/Development/testAgile\";\r\nimport { testEventLoop } from \"./Javascript/Browser/testEventLoop\";\r\nimport { testCORS } from \"./Common/GeneralPrinciples/testCORS\";\r\nimport { testRESTAPI } from \"./Common/GeneralPrinciples/testRESTAPI\";\r\nimport { testClasses } from \"./Javascript/Core/testClasses\";\r\nimport { testRequestParamJSON } from \"./Common/GeneralPrinciples/testRequestParamJSON\";\r\nimport { testWorkWithBackend } from \"./Common/GeneralPrinciples/testWorkWithBackend\";\r\nimport { testCookie } from \"./Javascript/Storage/testCookie\";\r\nimport { testSearchMethods } from \"./Javascript/Core/testSearchMethods\";\r\nimport { testEvents } from \"./Javascript/Browser/testEvents\";\r\nimport { testSemanticCriticalRenderingPath } from \"./Javascript/HTML/testSemanticCriticalRenderingPath\";\r\nimport { testDOM } from \"./Javascript/Browser/testDOM\";\r\nimport { testClosure } from \"./Javascript/Core/testClosure\";\r\nimport { testPromise } from \"./Javascript/Core/testPromise\";\r\nimport { testVirtualDom } from \"./React/Reconciliation/testVirtualDom\";\r\nimport { testFiber } from \"./React/Reconciliation/testFiber\";\r\nimport { testBOM } from \"./Javascript/Browser/testBOM\";\r\nimport { testDataType } from \"./Javascript/Core/testDataType\";\r\nimport { testDataStructure } from \"./Common/DataStructures/testDataStructure\";\r\nimport { testDataBase } from \"./Common/DataStructures/testDataBase\";\r\nimport { testOOP } from \"./Common/Patterns/testOOP\";\r\nimport { testSOLID } from \"./Common/Patterns/testSOLID\";\r\nimport { testVarLetConst } from \"./Javascript/Core/testVarLetConst\";\r\nimport { testStyleIsolation } from \"./Javascript/CSS/testStyleIsolation\";\r\nimport { testFunctionalProgramming } from \"./Common/GeneralPrinciples/testFunctionalProgramming\";\r\nimport { testEquality } from \"./Javascript/Core/testEquality\";\r\nimport { testFunctions } from \"./Javascript/Core/testFunctions\";\r\nimport { testMapVsForEach } from \"./Javascript/Core/testMapVsForEach\";\r\nimport { testNullVsUndefined } from \"./Javascript/Core/testNullVsUndefined\";\r\nimport { testGenerics } from \"./TypeScript/Advanced/testGenerics\";\r\nimport { testMemo } from \"./React/Optimization/testMemo\";\r\nimport { testSemanticVersioning } from \"./Javascript/HTML/testSemanticVersioning\";\r\nimport { testThis } from \"./Javascript/Core/testThis\";\r\nimport { testLocalStorageLocalSession } from \"./Javascript/Storage/testLocalStorageLocalSession\";\r\nimport { testHooks } from \"./React/Hooks/testHooks\";\r\nimport { testScope } from \"./Javascript/Core/testScope\";\r\nimport { testPosition } from \"./Javascript/CSS/testPosition\";\r\nimport { testMethodsArrays } from \"./Javascript/Core/testMethodsArrays\";\r\nimport { testSemantic } from \"./Javascript/HTML/testSemantic\";\r\nimport { testMethodologyBem } from \"./Common/Patterns/testMethodologyBem\";\r\nimport { testPrototype } from \"./Javascript/Core/testPrototype\";\r\nimport { testContext } from \"./Javascript/Core/testContext\";\r\nimport { testTwoWayDataBinding } from \"./React/Optimization/testTwoWayDataBinding\";\r\nimport { testGitFlow } from \"./Common/Git/testGitFlow\";\r\nimport { testUseTSJS } from \"./Common/GeneralPrinciples/testUseTSJS\";\r\nimport { testPsevdoelement } from \"./Javascript/CSS/testPsevdoelement\";\r\nimport { testIIFE } from \"./Javascript/Core/testIIFE\";\r\nimport { testCSS } from \"./Javascript/CSS/testCSS\";\r\nimport { testProps } from \"./React/Components/testProps\";\r\nimport { testJSX } from \"./React/JSX/testJSX\";\r\nimport { testReact } from \"./React/testReact\";\r\nimport { testSelectorsCSS } from \"./Javascript/CSS/testSelectorsCSS\";\r\nimport { testTernaryOperator } from \"./Javascript/Core/testTernaryOperator\";\r\nimport { testDestructurization } from \"./Javascript/Core/testDestructurization\";\r\nimport { testSetTimeout } from \"./Javascript/Core/testSetTimeout\";\r\nimport { testInheritance } from \"./Javascript/Core/testInheritance\";\r\nimport { testAsyncAwait } from \"./Javascript/Core/testAsyncAwait\";\r\nimport { testLibrary } from \"./Common/GeneralPrinciples/testLibrary\";\r\nimport { testHTML } from \"./Javascript/HTML/testHTML\";\r\nimport { testTesting } from \"./React/Testing/testTesting\";\r\nimport { testProcessors } from \"./Common/GeneralPrinciples/testProcessors\";\r\nimport { testPureFunction } from \"./Javascript/Core/testPureFunction\";\r\nimport { testCache } from \"./Javascript/Storage/testCache\";\r\nimport { testTypescript } from \"./TypeScript/Core/testTypescript\";\r\nimport { testRouteRef } from \"./React/Routing/testRouteRef\";\r\nimport { testMethodsObjects } from \"./Javascript/Core/testMethodsObjects\";\r\nimport { testPureComponent } from \"./React/Optimization/testPureComponent\";\r\nimport { testHTTP } from \"./Common/GeneralPrinciples/testHTTP\";\r\nimport { testAppSpeedEstimation } from \"./Common/Debugging/testAppSpeedEstimation\";\r\nimport { testMapSet } from \"./Common/DataStructures/testMapSet\";\r\nimport { testCommonPrinciples } from \"./Common/GeneralPrinciples/testCommonPrinciples\";\r\nimport { testProgrammingParadigms } from \"./Common/GeneralPrinciples/testProgrammingParadigms\";\r\nimport { testDesignPatterns } from \"./Common/Patterns/testDesignPatterns\";\r\nimport { testEnum } from \"./TypeScript/Advanced/testEnum\";\r\nimport { testTypeGuards } from \"./TypeScript/Advanced/testTypeGuards\";\r\nimport { testE2E } from \"./React/Testing/testE2E\";\r\nimport { testJestEnzymeOtherTools } from \"./React/Testing/testJestEnzymeOtherTools\";\r\nimport { testUtilityTypes } from \"./TypeScript/Advanced/testUtilityTypes\";\r\nimport { testClassesTypeScript } from \"./TypeScript/Core/testClassesTypeScript\";\r\nimport { testModuleTypeScript } from \"./TypeScript/Core/testModuleTypeScript\";\r\nimport { testStrictModeTypeScript } from \"./TypeScript/Core/testStrictModeTypeScript\";\r\nimport { testRegularExpressions } from \"./Javascript/Core/testRegularExpressions\";\r\nimport { testGarbageCollector } from \"./Javascript/Core/testGarbageCollector\";\r\nimport { testSnapshotTesting } from \"./React/Testing/testSnapshotTesting\";\r\nimport { testReactRouter } from \"./React/Routing/testReactRouter\";\r\nimport { testReactRouterAPI } from \"./React/Routing/testReactRouterAPI\";\r\nimport { testHooksRouting } from \"./React/Routing/testHooksRouting\";\r\nimport { testHistoryLocationMatch } from \"./React/Routing/testHistoryLocationMatch\";\r\nimport { testUnionTypeIntersection } from \"./TypeScript/Core/testUnionType&Intersection\";\r\nimport { testSelectorsRedux } from \"./React/Redux/testSelectorsRedux\";\r\nimport { testReduxAlternative } from \"./React/Redux/testReduxAlternative\";\r\nimport { testRedux } from \"./React/Redux/testRedux\";\r\nimport { testReducersRedux } from \"./React/Redux/testReducersRedux\";\r\nimport { testUseEffect } from \"./React/Hooks/testUseEffect\";\r\nimport { testUseContext } from \"./React/Hooks/testUseContext\";\r\nimport { testOtherHooks } from \"./React/Hooks/testOtherHooks\";\r\nimport { testCustomHooks } from \"./React/Hooks/testCustomHooks\";\r\nimport { testSyntheticEvent } from \"./React/Events/testSyntheticEvent\";\r\nimport { testJSXHandlers } from \"./React/Events/testJSXHandlers\";\r\nimport { testBubblingEventInReact } from \"./React/Events/testBubblingEventInReact\";\r\nimport { test3ReduxMainPrinciples } from \"./React/Redux/test3ReduxMainPrinciples\";\r\nimport { testBindingEvents } from \"./React/Events/testBindingEvents\";\r\nimport { testWorkingWithFormsReact } from \"./React/Components/testWorkingWithForms\";\r\nimport { testWhyHooks } from \"./React/Components/testWhyHooks\";\r\nimport { testState } from \"./React/Components/testState\";\r\nimport { testRefs } from \"./React/Components/testRefs\";\r\nimport { testPropsValidation } from \"./React/Components/testPropsValidation\";\r\nimport { testPortals } from \"./React/Components/testPortals\";\r\nimport { testPatternsReact } from \"./React/Components/testPatternsReact\";\r\nimport { testLifecycleMethods } from \"./React/Components/testLifecycleMethods\";\r\nimport { testFunctionalComponents } from \"./React/Components/testFunctionalComponents\";\r\nimport { testControlledUncontrolled } from \"./React/Components/testControlledUncontrolled\";\r\nimport { testContextReact } from \"./React/Components/testContextReact\";\r\nimport { testClassComponents } from \"./React/Components/testClassComponents\";\r\nimport { testVirtualization } from \"./React/Optimization/testVirtualization\";\r\nimport { testUseMemoUseCallback } from \"./React/Optimization/testUseMemo&UseCallback\";\r\nimport { testReselectRecompose } from \"./React/Optimization/testReselect&Recompose\";\r\nimport { testReduxDevtools } from \"./React/Optimization/testReduxDevtools\";\r\nimport { testReactDevtools } from \"./React/Optimization/testReactDevtools\";\r\nimport { testRenderReact } from \"./React/JSX/testRenderReact\";\r\nimport { testFragments } from \"./React/JSX/testFragments\";\r\nimport { testLazyImports } from \"./React/Optimization/testLazyImports&DynamicImports\";\r\nimport { testConcurrentModeSuspense } from \"./React/Optimization/testConcurrentMode&Suspense\";\r\nimport { testBundleOptimization } from \"./React/Optimization/testBundleOptimization\";\r\nimport { testBasicReactOptimization } from \"./React/Optimization/testBasicReactOptimization\";\r\nimport { testUseLayoutEffect } from \"./React/Hooks/testUseLayoutEffect\";\r\nimport { testUseReducer } from \"./React/Hooks/testUseReducer\";\r\nimport { testUseState } from \"./React/Hooks/testUseState\";\r\nimport { testMiddlewares } from \"./React/Redux/testMiddlewares\";\r\nimport { testHOCconnect } from \"./React/Redux/testHOCconnect\";\r\nimport { testActions } from \"./React/Redux/testActions\";\r\nimport { testErrorHandling } from \"./Javascript/Core/testErrorHandling\";\r\n\r\nexport const test = [\r\n  // Main themes\r\n  testProgrammingParadigms,\r\n  testFunctionalProgramming,\r\n  testCommonPrinciples,\r\n  testEventLoop,\r\n  testOOP,\r\n  testClosure,\r\n  testPromise,\r\n  testDOM,\r\n  testBOM,\r\n  testFiber,\r\n  testThis,\r\n  testVirtualDom,\r\n  testDataType,\r\n  testSOLID,\r\n  testRESTAPI,\r\n  testCORS,\r\n  testVarLetConst,\r\n  testEquality,\r\n  testFunctions,\r\n  testIIFE,\r\n  testMapVsForEach,\r\n  testScope,\r\n  testMethodsArrays,\r\n  testMethodsObjects,\r\n  testNullVsUndefined,\r\n  testMemo,\r\n  testHooks,\r\n  testPureComponent,\r\n  testContext,\r\n  testContextReact,\r\n  testInheritance,\r\n  testGenerics,\r\n  testTypescript,\r\n  testHTTP,\r\n  testMapSet,\r\n  testCookie,\r\n  testCache,\r\n  testReact,\r\n  testProps,\r\n  testLocalStorageLocalSession,\r\n  testJSX,\r\n  testSemantic,\r\n  testSemanticCriticalRenderingPath,\r\n  testClasses,\r\n  testEvents,\r\n  testPureFunction,\r\n  testReactRouter,\r\n  testReactRouterAPI,\r\n  testRedux,\r\n  test3ReduxMainPrinciples,\r\n  testSelectorsRedux,\r\n  testReducersRedux,\r\n  testUseEffect,\r\n  testUseContext,\r\n  testCustomHooks,\r\n  testWorkingWithFormsReact,\r\n  testState,\r\n  testRefs,\r\n  testPatternsReact,\r\n  testFunctionalComponents,\r\n  testLifecycleMethods,\r\n  testClassComponents,\r\n  testUseMemoUseCallback,\r\n  testLazyImports,\r\n  testBasicReactOptimization,\r\n  testUseLayoutEffect,\r\n  testUseReducer,\r\n  testUseState,\r\n  testMiddlewares,\r\n  testHOCconnect,\r\n  testActions,\r\n\r\n  // Additional themes\r\n  testDesignPatterns,\r\n  testDataStructure,\r\n  testDataBase,\r\n  testStyleIsolation,\r\n  testPrototype,\r\n  testMethodologyBem,\r\n  testAppSpeedEstimation,\r\n  testRouteRef,\r\n  testUseTSJS,\r\n  testCSS,\r\n  testSelectorsCSS,\r\n  testEnum,\r\n  testGitFlow,\r\n  testTypeGuards,\r\n  testE2E,\r\n  testSemanticVersioning,\r\n  testUtilityTypes,\r\n  testClassesTypeScript,\r\n  testModuleTypeScript,\r\n  testStrictModeTypeScript,\r\n  testRegularExpressions,\r\n  testGarbageCollector,\r\n  testAsyncAwait,\r\n  testHTML,\r\n  testDestructurization,\r\n  testTernaryOperator,\r\n  testSetTimeout,\r\n  testWorkWithBackend,\r\n  testSnapshotTesting,\r\n  testAgile,\r\n  testRequestParamJSON,\r\n  testSearchMethods,\r\n  testTesting,\r\n  testHooksRouting,\r\n  testHistoryLocationMatch,\r\n  testUnionTypeIntersection,\r\n  testOtherHooks,\r\n  testSyntheticEvent,\r\n  testJSXHandlers,\r\n  testBubblingEventInReact,\r\n  testBindingEvents,\r\n  testWhyHooks,\r\n  testPosition,\r\n  testTwoWayDataBinding,\r\n  testPsevdoelement,\r\n  testPropsValidation,\r\n  testPortals,\r\n  testControlledUncontrolled,\r\n  testVirtualization,\r\n  testReselectRecompose,\r\n  testReduxDevtools,\r\n  testReactDevtools,\r\n  testRenderReact,\r\n  testFragments,\r\n  testConcurrentModeSuspense,\r\n  testBundleOptimization,\r\n  testErrorHandling,\r\n\r\n  // other themes\r\n  testProcessors,\r\n  testLibrary,\r\n  testJestEnzymeOtherTools,\r\n  testReduxAlternative,\r\n];\r\n","export const testProgrammingParadigms = {\r\n  id: 101875,\r\n  title: \"Тест по парадигмам программирования\",\r\n  questions: [\r\n    {\r\n      id: 101876,\r\n      question: \"Что такое парадигма программирования?\",\r\n      answer: `\r\n      **Парадигма программирования:**\r\n      - Это способ организации структуры и процесса разработки программного обеспечения.\r\n      - Определяет стиль написания кода, подходы к решению задач и принципы проектирования.\r\n\r\n      **Основные парадигмы:**\r\n      1. Императивное программирование.\r\n      2. Объектно-ориентированное программирование (ООП).\r\n      3. Функциональное программирование.\r\n      4. Логическое программирование.\r\n      5. Декларативное программирование.\r\n\r\n      **Пример:**\r\n      - В ООП программы организованы вокруг объектов, а в функциональном программировании — вокруг функций.\r\n      `,\r\n    },\r\n    {\r\n      id: 101877,\r\n      question: \"Что такое императивное программирование?\",\r\n      answer: `\r\n      **Императивное программирование:**\r\n      - Это парадигма, которая фокусируется на описании *как* выполнить задачу.\r\n      - Программа представляет собой последовательность инструкций, которые изменяют состояние программы.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      let sum = 0;\r\n      for (let i = 1; i <= 5; i++) {\r\n        sum += i;\r\n      }\r\n      console.log(sum); // 15\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101878,\r\n      question: \"Что такое объектно-ориентированное программирование (ООП)?\",\r\n      answer: `\r\n      **Объектно-ориентированное программирование (ООП):**\r\n      - Это парадигма, основанная на использовании объектов, которые содержат данные (свойства) и поведение (методы).\r\n      - Ключевые концепции:\r\n        1. **Инкапсуляция:** Скрытие деталей реализации.\r\n        2. **Наследование:** Создание новых классов на основе существующих.\r\n        3. **Полиморфизм:** Возможность использовать один интерфейс для разных типов данных.\r\n        4. **Абстракция:** Выделение ключевых характеристик объекта.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Animal {\r\n        constructor(name) {\r\n          this.name = name;\r\n        }\r\n        speak() {\r\n          console.log(\\`\\${this.name} makes a noise.\\`);\r\n        }\r\n      }\r\n\r\n      class Dog extends Animal {\r\n        speak() {\r\n          console.log(\\`\\${this.name} barks.\\`);\r\n        }\r\n      }\r\n\r\n      const dog = new Dog('Rex');\r\n      dog.speak(); // Rex barks.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101879,\r\n      question: \"Что такое функциональное программирование?\",\r\n      answer: `\r\n      **Функциональное программирование:**\r\n      - Это парадигма, которая фокусируется на использовании *чистых функций* (функций без побочных эффектов).\r\n      - Основные принципы:\r\n        1. Неизменяемость данных.\r\n        2. Отсутствие состояния (stateless).\r\n        3. Композиция функций.\r\n        4. Рекурсия вместо циклов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const numbers = [1, 2, 3, 4];\r\n      const doubled = numbers.map(n => n * 2);\r\n      console.log(doubled); // [2, 4, 6, 8]\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101880,\r\n      question: \"Что такое декларативное программирование?\",\r\n      answer: `\r\n      **Декларативное программирование:**\r\n      - Это парадигма, которая фокусируется на описании *что* нужно сделать, а не *как* это делать.\r\n      - Примеры: SQL, HTML, React.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Императивный подход:\r\n      const numbers = [1, 2, 3, 4];\r\n      const evenNumbers = [];\r\n      for (let num of numbers) {\r\n        if (num % 2 === 0) {\r\n          evenNumbers.push(num);\r\n        }\r\n      }\r\n\r\n      // Декларативный подход:\r\n      const evenNumbersDeclarative = numbers.filter(n => n % 2 === 0);\r\n      console.log(evenNumbersDeclarative); // [2, 4]\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101881,\r\n      question: \"Что такое логическое программирование?\",\r\n      answer: `\r\n      **Логическое программирование:**\r\n      - Это парадигма, которая основана на использовании логических правил и фактов для решения задач.\r\n      - Примеры языков: Prolog.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`prolog\r\n      % Факты\r\n      родитель(анна, борис).\r\n      родитель(борис, катя).\r\n\r\n      % Правило\r\n      предок(X, Y) :- родитель(X, Y).\r\n      предок(X, Y) :- родитель(X, Z), предок(Z, Y).\r\n\r\n      % Запрос\r\n      ?- предок(анна, катя). % true\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101882,\r\n      question:\r\n        \"В чем разница между императивным и декларативным программированием?\",\r\n      answer: `\r\n      **Разница:**\r\n      1. **Императивное:**\r\n         - Описывает шаги для достижения результата.\r\n         - Пример: Циклы, условные операторы.\r\n      2. **Декларативное:**\r\n         - Описывает желаемый результат, не указывая, как его достичь.\r\n         - Пример: SQL-запросы, React.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Императивный подход:\r\n      const result = [];\r\n      for (let i = 0; i < 5; i++) {\r\n        result.push(i * 2);\r\n      }\r\n\r\n      // Декларативный подход:\r\n      const resultDeclarative = Array.from({ length: 5 }, (_, i) => i * 2);\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101883,\r\n      question: \"Что такое полиморфизм в ООП?\",\r\n      answer: `\r\n      **Полиморфизм:**\r\n      - Это возможность использовать один интерфейс для работы с объектами разных типов.\r\n      - Типы полиморфизма:\r\n        1. **Ад-хок полиморфизм:** Перегрузка функций или операторов.\r\n        2. **Параметрический полиморфизм:** Шаблоны или обобщения.\r\n        3. **Подтипизация:** Наследование и переопределение методов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Shape {\r\n        draw() {\r\n          console.log('Drawing a shape');\r\n        }\r\n      }\r\n\r\n      class Circle extends Shape {\r\n        draw() {\r\n          console.log('Drawing a circle');\r\n        }\r\n      }\r\n\r\n      const shapes = [new Shape(), new Circle()];\r\n      shapes.forEach(shape => shape.draw());\r\n      // Drawing a shape\r\n      // Drawing a circle\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101884,\r\n      question:\r\n        \"Что такое рекурсия и как она используется в функциональном программировании?\",\r\n      answer: `\r\n      **Рекурсия:**\r\n      - Это техника, при которой функция вызывает саму себя для решения подзадач.\r\n      - В функциональном программировании рекурсия часто используется вместо циклов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function factorial(n) {\r\n        if (n === 0) return 1;\r\n        return n * factorial(n - 1);\r\n      }\r\n\r\n      console.log(factorial(5)); // 120\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101885,\r\n      question: \"Какие преимущества у функционального программирования?\",\r\n      answer: `\r\n      **Преимущества:**\r\n      1. **Чистые функции:** Предсказуемость и отсутствие побочных эффектов.\r\n      2. **Неизменяемость данных:** Упрощает отладку и тестирование.\r\n      3. **Композиция функций:** Возможность комбинировать функции для создания сложных решений.\r\n      4. **Параллелизм:** Легче писать многопоточные программы.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const add = x => y => x + y;\r\n      const increment = add(1);\r\n      console.log(increment(5)); // 6\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testFunctionalProgramming = {\r\n  id: 100500,\r\n  title: \"Functional Programming (Функциональное программирование)\",\r\n  questions: [\r\n    {\r\n      id: 100501,\r\n      question: \"Что такое функциональное программирование?\",\r\n      answer: `\r\n      **Функциональное программирование** — это парадигма программирования, в которой основное внимание уделяется:\r\n      - Использованию функций как основных строительных блоков.\r\n      - Избеганию изменения состояния и данных (иммутабельность).\r\n      - Минимизации побочных эффектов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Чистая функция\r\n      const add = (a, b) => a + b;\r\n\r\n      console.log(add(2, 3)); // 5\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100502,\r\n      question: \"Какие концепции в функциональном программировании?\",\r\n      answer: `\r\n      **Основные концепции:**\r\n      1. **Чистые функции:**\r\n         - Всегда возвращают одинаковый результат для одинаковых входных данных.\r\n         - Не имеют побочных эффектов.\r\n         \\`\\`\\`javascript\r\n         function add(a, b) {\r\n           return a + b;\r\n         }\r\n         \\`\\`\\`\r\n\r\n      2. **Иммутабельность:**\r\n         - Данные не изменяются, вместо этого создаются новые значения.\r\n         \\`\\`\\`javascript\r\n         const arr = [1, 2, 3];\r\n         const newArr = [...arr, 4]; // Создается новый массив\r\n         \\`\\`\\`\r\n\r\n      3. **Функции высшего порядка:**\r\n         - Принимают или возвращают другие функции.\r\n         \\`\\`\\`javascript\r\n         function applyFunction(fn, value) {\r\n           return fn(value);\r\n         }\r\n\r\n         const double = (x) => x * 2;\r\n         console.log(applyFunction(double, 5)); // 10\r\n         \\`\\`\\`\r\n\r\n      4. **Рекурсия:**\r\n         - Функция вызывает саму себя для решения подзадач.\r\n         \\`\\`\\`javascript\r\n         function factorial(n) {\r\n           return n === 0 ? 1 : n * factorial(n - 1);\r\n         }\r\n         console.log(factorial(5)); // 120\r\n         \\`\\`\\`\r\n\r\n      5. **Ленивые вычисления:**\r\n         - Вычисления выполняются только тогда, когда их результат нужен.\r\n         \\`\\`\\`javascript\r\n         function* lazySquares(numbers) {\r\n           for (const num of numbers) {\r\n             yield num * num;\r\n           }\r\n         }\r\n\r\n         const squares = lazySquares([1, 2, 3]);\r\n         console.log(squares.next().value); // 1\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100503,\r\n      question: \"Пример чистой функции\",\r\n      answer: `\r\n      **Чистая функция:**\r\n      - Всегда возвращает одинаковый результат для одинаковых входных данных.\r\n      - Не имеет побочных эффектов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function add(a, b) {\r\n        return a + b;\r\n      }\r\n\r\n      console.log(add(2, 3)); // 5\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100504,\r\n      question: \"Функции высшего порядка\",\r\n      answer: `\r\n      **Функции высшего порядка:**\r\n      - Принимают или возвращают другие функции.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function applyFunction(fn, value) {\r\n        return fn(value);\r\n      }\r\n\r\n      const double = (x) => x * 2;\r\n      console.log(applyFunction(double, 5)); // 10\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100505,\r\n      question: \"Пример рекурсии\",\r\n      answer: `\r\n      **Рекурсия:**\r\n      - Функция вызывает саму себя для решения подзадач.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function factorial(n) {\r\n        if (n === 0) {\r\n          return 1; // Базовый случай\r\n        } else {\r\n          return n * factorial(n - 1); // Рекурсивный случай\r\n        }\r\n      }\r\n\r\n      console.log(factorial(5)); // 120\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100506,\r\n      question: \"Пример ленивых вычислений\",\r\n      answer: `\r\n      **Ленивые вычисления:**\r\n      - Вычисления выполняются только тогда, когда их результат нужен.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function* lazySquares(numbers) {\r\n        for (const num of numbers) {\r\n          yield num * num;\r\n        }\r\n      }\r\n\r\n      const squares = lazySquares([1, 2, 3]);\r\n      console.log(squares.next().value); // 1\r\n      console.log(squares.next().value); // 4\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100507,\r\n      question: \"Что такое каррирование?\",\r\n      answer: `\r\n      **Каррирование:**\r\n      - Преобразование функции с несколькими аргументами в последовательность функций, каждая из которых принимает один аргумент.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function curry(fn) {\r\n        return function curried(...args) {\r\n          if (args.length >= fn.length) {\r\n            return fn.apply(this, args);\r\n          } else {\r\n            return function (...nextArgs) {\r\n              return curried.apply(this, args.concat(nextArgs));\r\n            };\r\n          }\r\n        };\r\n      }\r\n\r\n      function add(a, b, c) {\r\n        return a + b + c;\r\n      }\r\n\r\n      const curriedAdd = curry(add);\r\n      console.log(curriedAdd(1)(2)(3)); // 6\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100508,\r\n      question: \"Что такое композиция функций?\",\r\n      answer: `\r\n      **Композиция функций:**\r\n      - Комбинирование нескольких функций в одну, где результат одной функции передается как аргумент другой.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const compose = (f, g) => (x) => f(g(x));\r\n\r\n      const double = (x) => x * 2;\r\n      const square = (x) => x * x;\r\n\r\n      const doubleThenSquare = compose(square, double);\r\n      console.log(doubleThenSquare(3)); // (3 * 2)^2 = 36\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100509,\r\n      question: \"Что такое монады (monads)?\",\r\n      answer: `\r\n      **Монады:**\r\n      - Структуры данных, которые позволяют обрабатывать цепочки операций с учетом контекста (например, Maybe, Either).\r\n\r\n      **Пример (Maybe):**\r\n      \\`\\`\\`javascript\r\n      class Maybe {\r\n        constructor(value) {\r\n          this.value = value;\r\n        }\r\n\r\n        static of(value) {\r\n          return new Maybe(value);\r\n        }\r\n\r\n        map(fn) {\r\n          return this.value !== null && this.value !== undefined\r\n            ? Maybe.of(fn(this.value))\r\n            : Maybe.of(null);\r\n        }\r\n      }\r\n\r\n      const result = Maybe.of(5)\r\n        .map((x) => x + 2)\r\n        .map((x) => x * 3);\r\n\r\n      console.log(result.value); // 21\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100510,\r\n      question: \"Что такое функторы (functors)?\",\r\n      answer: `\r\n      **Функторы:**\r\n      - Структуры данных, которые позволяют работать с функциями как с обычными значениями.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Functor {\r\n        constructor(value) {\r\n          this.value = value;\r\n        }\r\n\r\n        map(fn) {\r\n          return new Functor(fn(this.value));\r\n        }\r\n      }\r\n\r\n      const result = new Functor(5)\r\n        .map((x) => x + 2)\r\n        .map((x) => x * 3);\r\n\r\n      console.log(result.value); // 21\r\n        }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testCommonPrinciples = {\r\n  id: 101850,\r\n  title: \"Общие принципы\",\r\n  questions: [\r\n    {\r\n      id: 101851,\r\n      question: \"Что такое DRY и почему это важно?\",\r\n      answer: `\r\n      **DRY (Don't Repeat Yourself):**\r\n      - Это принцип разработки, который гласит, что каждая часть знаний или логики должна иметь единственное, однозначное представление в системе.\r\n      - Цель — избежать дублирования кода, чтобы упростить поддержку и уменьшить количество ошибок.\r\n\r\n      **Пример:**\r\n      - Вместо копирования одного и того же кода в разных местах программы, вынесите его в функцию или модуль.\r\n      \\`\\`\\`javascript\r\n      // Плохо (дублирование):\r\n      function calculateArea1(radius) {\r\n        return Math.PI * radius * radius;\r\n      }\r\n      function calculateArea2(radius) {\r\n        return Math.PI * radius * radius;\r\n      }\r\n\r\n      // Хорошо (DRY):\r\n      function calculateArea(radius) {\r\n        return Math.PI * radius * radius;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101852,\r\n      question: \"Что такое KISS и как он применяется?\",\r\n      answer: `\r\n      **KISS (Keep It Simple, Stupid):**\r\n      - Принцип, который рекомендует делать системы максимально простыми для понимания и использования.\r\n      - Сложные решения увеличивают вероятность ошибок и затрудняют поддержку.\r\n\r\n      **Пример:**\r\n      - Вместо сложной цепочки условий используйте более простые структуры данных.\r\n      \\`\\`\\`javascript\r\n      // Плохо:\r\n      if (type === 'A') {\r\n        doSomething();\r\n      } else if (type === 'B') {\r\n        doSomethingElse();\r\n      }\r\n\r\n      // Хорошо:\r\n      const actions = {\r\n        A: doSomething,\r\n        B: doSomethingElse,\r\n      };\r\n      actions[type]?.();\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101853,\r\n      question: \"Что такое YAGNI и зачем он нужен?\",\r\n      answer: `\r\n      **YAGNI (You Aren't Gonna Need It):**\r\n      - Принцип, который говорит: не добавляйте функциональность, пока она действительно не нужна.\r\n      - Это помогает избежать переработки и усложнения системы.\r\n\r\n      **Пример:**\r\n      - Не реализуйте функции \"на будущее\", если они не требуются сейчас.\r\n      \\`\\`\\`javascript\r\n      // Плохо:\r\n      function calculateArea(radius) {\r\n        // Сейчас не нужно, но \"вдруг пригодится\":\r\n        if (radius < 0) throw new Error(\"Radius cannot be negative\");\r\n        return Math.PI * radius * radius;\r\n      }\r\n\r\n      // Хорошо:\r\n      function calculateArea(radius) {\r\n        return Math.PI * radius * radius;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101854,\r\n      question: \"Что такое SOLID и какие принципы в него входят?\",\r\n      answer: `\r\n      **SOLID:**\r\n      - Это набор принципов объектно-ориентированного программирования, которые помогают создавать гибкие и поддерживаемые системы.\r\n\r\n      **Принципы:**\r\n      1. **S**ingle Responsibility Principle (SRP): Каждый класс должен иметь одну ответственность.\r\n      2. **O**pen/Closed Principle (OCP): Классы должны быть открыты для расширения, но закрыты для изменения.\r\n      3. **L**iskov Substitution Principle (LSP): Подклассы должны заменять свои базовые классы без изменения поведения.\r\n      4. **I**nterface Segregation Principle (ISP): Лучше много маленьких интерфейсов, чем один большой.\r\n      5. **D**ependency Inversion Principle (DIP): Зависимости должны строиться на абстракциях, а не на конкретных реализациях.\r\n\r\n      **Пример SRP:**\r\n      \\`\\`\\`javascript\r\n      // Плохо:\r\n      class User {\r\n        saveToDatabase() { /* ... */ }\r\n        sendEmail() { /* ... */ }\r\n      }\r\n\r\n      // Хорошо:\r\n      class UserRepository {\r\n        saveToDatabase() { /* ... */ }\r\n      }\r\n      class EmailService {\r\n        sendEmail() { /* ... */ }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101855,\r\n      question: \"Что такое принцип единственной ответственности (SRP)?\",\r\n      answer: `\r\n      **Single Responsibility Principle (SRP):**\r\n      - Каждый модуль или класс должен выполнять только одну задачу.\r\n      - Это упрощает тестирование, поддержку и переиспользование кода.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Плохо:\r\n      class Report {\r\n        generateReport() { /* ... */ }\r\n        saveToFileSystem() { /* ... */ }\r\n      }\r\n\r\n      // Хорошо:\r\n      class ReportGenerator {\r\n        generateReport() { /* ... */ }\r\n      }\r\n      class FileSaver {\r\n        saveToFileSystem() { /* ... */ }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101856,\r\n      question: \"Что такое принцип открытости/закрытости (OCP)?\",\r\n      answer: `\r\n      **Open/Closed Principle (OCP):**\r\n      - Классы должны быть открыты для расширения, но закрыты для изменения.\r\n      - Это позволяет добавлять новую функциональность, не изменяя существующий код.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Плохо:\r\n      class Rectangle {\r\n        draw() { console.log('Drawing rectangle'); }\r\n      }\r\n      class Circle {\r\n        draw() { console.log('Drawing circle'); }\r\n      }\r\n      function drawShapes(shapes) {\r\n        shapes.forEach(shape => {\r\n          if (shape.type === 'rectangle') shape.draw();\r\n          else if (shape.type === 'circle') shape.draw();\r\n        });\r\n      }\r\n\r\n      // Хорошо:\r\n      class Shape {\r\n        draw() { throw new Error('Method not implemented'); }\r\n      }\r\n      class Rectangle extends Shape {\r\n        draw() { console.log('Drawing rectangle'); }\r\n      }\r\n      class Circle extends Shape {\r\n        draw() { console.log('Drawing circle'); }\r\n      }\r\n      function drawShapes(shapes) {\r\n        shapes.forEach(shape => shape.draw());\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101857,\r\n      question: \"Что такое принцип подстановки Барбары Лисков (LSP)?\",\r\n      answer: `\r\n      **Liskov Substitution Principle (LSP):**\r\n      - Объекты базового класса должны быть заменяемы объектами подкласса без изменения корректности программы.\r\n      - Это гарантирует, что наследование используется правильно.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Bird {\r\n        fly() { console.log('Flying'); }\r\n      }\r\n      class Penguin extends Bird {\r\n        fly() { throw new Error('Penguins can\\'t fly'); }\r\n      }\r\n\r\n      // Нарушение LSP:\r\n      const bird = new Penguin();\r\n      bird.fly(); // Ошибка\r\n\r\n      // Решение:\r\n      class Bird {}\r\n      class FlyingBird extends Bird {\r\n        fly() { console.log('Flying'); }\r\n      }\r\n      class Penguin extends Bird {}\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101858,\r\n      question: \"Что такое принцип разделения интерфейса (ISP)?\",\r\n      answer: `\r\n      **Interface Segregation Principle (ISP):**\r\n      - Лучше создавать маленькие специализированные интерфейсы, чем один большой универсальный.\r\n      - Это упрощает использование и уменьшает зависимость между компонентами.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Плохо:\r\n      class Machine {\r\n        print() { /* ... */ }\r\n        scan() { /* ... */ }\r\n      }\r\n\r\n      // Хорошо:\r\n      class Printer {\r\n        print() { /* ... */ }\r\n      }\r\n      class Scanner {\r\n        scan() { /* ... */ }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101859,\r\n      question: \"Что такое принцип инверсии зависимостей (DIP)?\",\r\n      answer: `\r\n      **Dependency Inversion Principle (DIP):**\r\n      - Модули высокого уровня не должны зависеть от модулей низкого уровня. Оба должны зависеть от абстракций.\r\n      - Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Плохо:\r\n      class LightBulb {\r\n        turnOn() { console.log('Light is on'); }\r\n      }\r\n      class Switch {\r\n        constructor() {\r\n          this.bulb = new LightBulb();\r\n        }\r\n        operate() { this.bulb.turnOn(); }\r\n      }\r\n\r\n      // Хорошо:\r\n      class SwitchableDevice {\r\n        turnOn() { throw new Error('Method not implemented'); }\r\n      }\r\n      class LightBulb extends SwitchableDevice {\r\n        turnOn() { console.log('Light is on'); }\r\n      }\r\n      class Switch {\r\n        constructor(device) {\r\n          this.device = device;\r\n        }\r\n        operate() { this.device.turnOn(); }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testEventLoop = {\r\n  id: 100025,\r\n  title: \"Eventloop\",\r\n  questions: [\r\n    {\r\n      id: 100026,\r\n      question: \"Что такое Eventloop?\",\r\n      answer: `Цикл событий (event loop) — это механизм, который позволяет JavaScript выполнять асинхронные \r\n      операции, не блокируя основной поток выполнения. Он обеспечивает обработку событий и выполнение \r\n      колбеков (callback functions) в ответ на события, такие как клики мыши, нажатия клавиш и завершение \r\n      асинхронных операций.`,\r\n    },\r\n    {\r\n      id: 100027,\r\n      question: \"Как работает цикл событий?\",\r\n      answer: `Event Loop работает следующим образом:\r\n      1. **Call Stack (Стек вызовов):** Содержит текущие выполняемые функции. Когда функция вызывается, она \r\n      добавляется в стек, а после завершения — удаляется.\r\n      2. **Callback Queue (Очередь обратных вызовов):** Когда асинхронная операция завершается, её колбэк \r\n      помещается в очередь.\r\n      3. **Microtasks Queue (Очередь микрозадач):** Колбэки Promises обрабатываются здесь и имеют приоритет \r\n      перед макрозадачами.\r\n      4. **Event Loop:** Проверяет, пуст ли Call Stack. Если да, то выполняет задачи из очередей: сначала \r\n      микрозадачи, затем макрозадачи.\r\n      \r\n      Пример:\r\n      \\`\\`\\`javascript\r\n      console.log(\"Start\");\r\n      setTimeout(() => console.log(\"Timeout\"), 0);\r\n      Promise.resolve().then(() => console.log(\"Promise\"));\r\n      console.log(\"End\");\r\n\r\n      // Вывод: Start, End, Promise, Timeout\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100028,\r\n      question: \"Что такое макро и микро задачи?\",\r\n      answer: `**Микрозадачи (Microtasks):**\r\n      - Выполняются сразу после текущего скрипта, но до обработки макрозадач.\r\n      - Примеры: \\`Promise.then\\`, \\`MutationObserver\\`.\r\n      \r\n      **Макрозадачи (Macrotasks):**\r\n      - Выполняются в рамках отдельных циклов Event Loop.\r\n      - Примеры: \\`setTimeout\\`, \\`setInterval\\`, события DOM.\r\n      \r\n      Пример:\r\n      \\`\\`\\`javascript\r\n      console.log(\"Start\");\r\n      setTimeout(() => console.log(\"Timeout\"), 0); // Macrotask\r\n      Promise.resolve().then(() => console.log(\"Promise\")); // Microtask\r\n      console.log(\"End\");\r\n\r\n      // Вывод: Start, End, Promise, Timeout\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100029,\r\n      question: \"Для чего нужен eventloop в js?\",\r\n      answer: `Event Loop позволяет JavaScript обрабатывать асинхронные операции, такие как сетевые запросы, \r\n      таймеры и события, не блокируя основной поток выполнения. Это обеспечивает отзывчивость приложения, \r\n      даже когда происходят длительные операции.`,\r\n    },\r\n    {\r\n      id: 100030,\r\n      question: \"В чём разница между макро и микро задачами?\",\r\n      answer: `Различия:\r\n      1. **Приоритет:** Микрозадачи выполняются перед макрозадачами.\r\n      2. **Циклы Event Loop:** Макрозадачи обрабатываются в рамках отдельных циклов, а микрозадачи — внутри \r\n      одного цикла.\r\n      3. **Пример:**\r\n      \\`\\`\\`javascript\r\n      console.log(\"Start\");\r\n      setTimeout(() => console.log(\"Timeout\"), 0); // Macrotask\r\n      Promise.resolve().then(() => console.log(\"Promise\")); // Microtask\r\n      console.log(\"End\");\r\n\r\n      // Вывод: Start, End, Promise, Timeout\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100031,\r\n      question: \"В чём разница в работе eventloop на сервере и в браузере?\",\r\n      answer: `В браузере Event Loop управляет интерфейсом пользователя, DOM и сетевыми запросами в однопоточной \r\n      среде. В Node.js Event Loop также является основой асинхронности, но он использует дополнительные потоки \r\n      для операций ввода-вывода, что делает его более эффективным для серверных задач.`,\r\n    },\r\n    {\r\n      id: 100032,\r\n      question: \"Что такое Call stack?\",\r\n      answer: `Call Stack (Стек вызовов) — это структура данных, которая хранит текущие выполняемые функции. \r\n      Когда функция вызывается, она добавляется в стек, а после завершения — удаляется. Если стек переполняется, \r\n      возникает ошибка \\`RangeError: Maximum call stack size exceeded\\`.`,\r\n    },\r\n    {\r\n      id: 100033,\r\n      question: \"Какие проблемы решает eventloop?\",\r\n      answer: `Event Loop решает проблему одновременной обработки асинхронных операций и поддержания отзывчивости \r\n      пользовательского интерфейса в однопоточной среде. Он позволяет избежать блокировки основного потока \r\n      выполнения при выполнении длительных задач, таких как сетевые запросы или таймеры.`,\r\n    },\r\n    {\r\n      id: 100034,\r\n      question: \"Сколько в один кадр eventloop'а может войти reflow и repaint?\",\r\n      answer: `В рамках одного кадра Event Loop'а может произойти несколько операций reflow и repaint, если \r\n      изменения требуют пересчета макета или перерисовки страницы. Однако частые reflow и repaint могут \r\n      негативно сказаться на производительности.\r\n\r\n      **Refactor:** Происходит при изменении геометрии элементов (например, ширины, высоты).\r\n      **Repaint:** Происходит при изменении визуальных свойств (например, цвета фона).`,\r\n    },\r\n    {\r\n      id: 100035,\r\n      question: \"Как работает eventloop в web api?\",\r\n      answer: `Web API (например, \\`setTimeout\\`, \\`fetch\\`) перемещают колбэки асинхронных функций в свои \r\n      внутренние очереди. После завершения операции колбэк передается в очередь Event Loop. Сам движок \r\n      JavaScript продолжает выполнять другие операции, пока колбэк находится под управлением Web API.`,\r\n    },\r\n  ],\r\n};","export const testOOP = {\r\n  id: 100350,\r\n  title: \"ООП\",\r\n  questions: [\r\n    {\r\n      id: 100351,\r\n      question: \"Что такое ООП?\",\r\n      answer: `Объектно-ориентированное программирование (ООП) — это парадигма программирования, \r\n      основанная на концепции 'объектов', которые могут содержать данные (свойства) и код (методы). \r\n      Основные принципы ООП:\r\n      - **Инкапсуляция:** Сокрытие данных и управление доступом через методы.\r\n      - **Наследование:** Создание новых классов на основе существующих.\r\n      - **Полиморфизм:** Использование одного интерфейса для разных типов объектов.\r\n      - **Абстракция:** Упрощение сложных систем через общие интерфейсы.`,\r\n    },\r\n    {\r\n      id: 100352,\r\n      question: \"Что такое инкапсуляция?\",\r\n      answer: `**Инкапсуляция** — это механизм сокрытия внутреннего состояния объекта и предоставление \r\n      контролируемого доступа к нему через методы. Это помогает:\r\n      - Защитить данные от несанкционированного доступа.\r\n      - Обеспечить целостность объекта.\r\n      \r\n      Пример:\r\n      \\`\\`\\`javascript\r\n      class User {\r\n        #password; // Приватное поле\r\n        constructor(name, password) {\r\n          this.name = name;\r\n          this.#password = password;\r\n        }\r\n        getPassword() {\r\n          return this.#password;\r\n        }\r\n      }\r\n      const user = new User(\"Alice\", \"secret\");\r\n      console.log(user.getPassword()); // \"secret\"\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100353,\r\n      question: \"Что такое наследование?\",\r\n      answer: `**Наследование** — это возможность создавать новые классы на основе существующих. Новый \r\n      класс (потомок) наследует свойства и методы родительского класса, что позволяет повторно \r\n      использовать и расширять код.\r\n      \r\n      Пример:\r\n      \\`\\`\\`javascript\r\n      class Animal {\r\n        speak() {\r\n          console.log(\"Animal speaks\");\r\n        }\r\n      }\r\n      class Dog extends Animal {\r\n        speak() {\r\n          console.log(\"Dog barks\");\r\n        }\r\n      }\r\n      const dog = new Dog();\r\n      dog.speak(); // \"Dog barks\"\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100354,\r\n      question: \"Что такое полиморфизм?\",\r\n      answer: `**Полиморфизм** — это способность объектов разных классов обрабатывать данные через \r\n      одинаковый интерфейс. Это позволяет использовать один и тот же метод для объектов разных типов, \r\n      что увеличивает гибкость кода.\r\n      \r\n      Пример:\r\n      \\`\\`\\`javascript\r\n      class Shape {\r\n        draw() {\r\n          console.log(\"Drawing a shape\");\r\n        }\r\n      }\r\n      class Circle extends Shape {\r\n        draw() {\r\n          console.log(\"Drawing a circle\");\r\n        }\r\n      }\r\n      class Square extends Shape {\r\n        draw() {\r\n          console.log(\"Drawing a square\");\r\n        }\r\n      }\r\n      const shapes = [new Circle(), new Square()];\r\n      shapes.forEach(shape => shape.draw());\r\n      // Output: \"Drawing a circle\", \"Drawing a square\"\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100355,\r\n      question: \"Что такое абстракция?\",\r\n      answer: `**Абстракция** — это упрощение сложных систем путем определения общих интерфейсов и \r\n      скрытия деталей реализации. Это помогает сосредоточиться на взаимодействии между объектами, \r\n      не вникая в их внутренние механизмы.\r\n      \r\n      Пример:\r\n      \\`\\`\\`javascript\r\n      class Database {\r\n        connect() {\r\n          throw new Error(\"Method 'connect()' must be implemented.\");\r\n        }\r\n      }\r\n      class MySQLDatabase extends Database {\r\n        connect() {\r\n          console.log(\"Connecting to MySQL database...\");\r\n        }\r\n      }\r\n      const db = new MySQLDatabase();\r\n      db.connect(); // \"Connecting to MySQL database...\"\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100356,\r\n      question: \"Что выбираешь: ООП или функциональное программирование?\",\r\n      answer: `Выбор зависит от задачи:\r\n      - **ООП** лучше подходит для моделирования сложных систем с множеством взаимосвязанных сущностей.\r\n      - **Функциональное программирование (ФП)** лучше подходит для задач, связанных с чистыми \r\n      вычислениями и обработкой данных.\r\n      \r\n      В реальности часто используются оба подхода в зависимости от контекста.`,\r\n    },\r\n    {\r\n      id: 100357,\r\n      question: \"Чем ООП в JS отличается от ООП в других языках?\",\r\n      answer: `В JavaScript ООП реализовано через прототипное наследование, а не через классическое \r\n      наследование (как в Java или C++):\r\n      - Вместо классов используются прототипы.\r\n      - Наследование реализуется через цепочку прототипов (\\`__proto__\\`).\r\n      - С версии ES6 появились классы, но они являются синтаксическим сахаром над прототипами.\r\n      \r\n      Пример:\r\n      \\`\\`\\`javascript\r\n      function Person(name) {\r\n        this.name = name;\r\n      }\r\n      Person.prototype.greet = function () {\r\n        console.log(\\`Hello, my name is \\${this.name}\\`);\r\n      };\r\n      const person = new Person(\"Alice\");\r\n      person.greet(); // \"Hello, my name is Alice\"\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100358,\r\n      question: \"Преимущества ООП?\",\r\n      answer: `Преимущества ООП:\r\n      - **Модульность:** Код организован в виде объектов, что упрощает его понимание и поддержку.\r\n      - **Повторное использование кода:** Через наследование и полиморфизм.\r\n      - **Гибкость:** Легко расширять и модифицировать систему.\r\n      - **Моделирование реальных систем:** Объекты могут представлять реальные сущности.`,\r\n    },\r\n    {\r\n      id: 100359,\r\n      question: \"Недостатки ООП?\",\r\n      answer: `Недостатки ООП:\r\n      - **Сложность:** Может привести к избыточному усложнению кода в небольших проектах.\r\n      - **Производительность:** В некоторых случаях может потреблять больше ресурсов (памяти).\r\n      - **Кривая обучения:** Требует понимания концепций ООП, таких как абстракция, инкапсуляция и т.д.`,\r\n    },\r\n    {\r\n      id: 100360,\r\n      question: \"Что такое SOLID-принципы?\",\r\n      answer: `SOLID — это набор принципов проектирования, которые помогают создавать гибкие и \r\n      поддерживаемые системы:\r\n      - **S (Single Responsibility):** Каждый класс должен иметь одну ответственность.\r\n      - **O (Open/Closed):** Классы должны быть открыты для расширения, но закрыты для изменения.\r\n      - **L (Liskov Substitution):** Подклассы должны быть заменяемы своими базовыми классами.\r\n      - **I (Interface Segregation):** Лучше много маленьких интерфейсов, чем один большой.\r\n      - **D (Dependency Inversion):** Модули должны зависеть от абстракций, а не от конкретных реализаций.`,\r\n    },\r\n  ],\r\n};\r\n","export const testClosure = {\r\n  id: 100150,\r\n  title: \"Closure (Замыкания)\",\r\n  questions: [\r\n    {\r\n      id: 100151,\r\n      question: \"Что такое замыкание?\",\r\n      answer: `\r\n      **Замыкание (closure)** — это функция, которая имеет доступ к переменным своего лексического окружения \r\n      (lexical environment), даже после того, как внешняя функция, в которой она была определена, завершила \r\n      свое выполнение.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function createCounter() {\r\n        let count = 0; // Лексическое окружение\r\n        return function () {\r\n          count++; // Замыкание сохраняет доступ к count\r\n          return count;\r\n        };\r\n      }\r\n\r\n      const counter = createCounter();\r\n      console.log(counter()); // 1\r\n      console.log(counter()); // 2\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100152,\r\n      question: \"Для чего замыкание нужно?\",\r\n      answer: `\r\n      **Основные применения замыканий:**\r\n      1. **Сохранение состояния:**\r\n         - Замыкания позволяют сохранять состояние между вызовами функции.\r\n         \\`\\`\\`javascript\r\n         function createMultiplier(multiplier) {\r\n           return function (value) {\r\n             return value * multiplier;\r\n           };\r\n         }\r\n\r\n         const double = createMultiplier(2);\r\n         console.log(double(5)); // 10\r\n         \\`\\`\\`\r\n\r\n      2. **Инкапсуляция:**\r\n         - Замыкания могут использоваться для создания приватных переменных.\r\n         \\`\\`\\`javascript\r\n         function createBankAccount(initialBalance) {\r\n           let balance = initialBalance;\r\n           return {\r\n             deposit(amount) {\r\n               balance += amount;\r\n               return balance;\r\n             },\r\n             withdraw(amount) {\r\n               if (amount <= balance) {\r\n                 balance -= amount;\r\n               }\r\n               return balance;\r\n             },\r\n           };\r\n         }\r\n\r\n         const account = createBankAccount(100);\r\n         console.log(account.deposit(50)); // 150\r\n         console.log(account.withdraw(30)); // 120\r\n         \\`\\`\\`\r\n\r\n      3. **Асинхронное программирование:**\r\n         - Замыкания часто используются в асинхронных операциях (например, \\`setTimeout\\`).\r\n         \\`\\`\\`javascript\r\n         function delayedGreeting(name) {\r\n           setTimeout(() => {\r\n             console.log(\\`Hello, \\${name}!\\`);\r\n           }, 1000);\r\n         }\r\n\r\n         delayedGreeting('Alice'); // Hello, Alice! (через 1 секунду)\r\n         \\`\\`\\`\r\n\r\n      4. **Паттерны проектирования:**\r\n         - Замыкания являются основой для многих паттернов, таких как модули, каррирование и ленивые вычисления.\r\n      `,\r\n    },\r\n    {\r\n      id: 100153,\r\n      question: \"В чём разница между видами замыкания?\",\r\n      answer: `\r\n      **Глобальное замыкание:**\r\n      - Предоставляет доступ к переменным в любом месте кода.\r\n      - Может привести к проблемам с организацией кода и конфликтам имён.\r\n      \\`\\`\\`javascript\r\n      const globalVar = 'I am global';\r\n\r\n      function accessGlobal() {\r\n        console.log(globalVar); // Доступ к глобальной переменной\r\n      }\r\n\r\n      accessGlobal(); // I am global\r\n      \\`\\`\\`\r\n\r\n      **Функциональное замыкание:**\r\n      - Обеспечивает более строгую организацию кода.\r\n      - Позволяет создавать скрытые переменные и функциональность, доступные только внутри функции.\r\n      \\`\\`\\`javascript\r\n      function createSecret() {\r\n        const secret = 'hidden';\r\n        return function () {\r\n          return secret;\r\n        };\r\n      }\r\n\r\n      const revealSecret = createSecret();\r\n      console.log(revealSecret()); // hidden\r\n      \\`\\`\\`\r\n\r\n      **Блочное замыкание:**\r\n      - Обеспечивает мелкий уровень контроля над областью видимости переменных.\r\n      - Переменные, объявленные через \\`let\\` или \\`const\\`, доступны только в рамках блока.\r\n      \\`\\`\\`javascript\r\n      {\r\n        const blockScoped = 'I am block scoped';\r\n        console.log(blockScoped); // I am block scoped\r\n      }\r\n      console.log(blockScoped); // ReferenceError\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100154,\r\n      question: \"Чем отличается замыкание от области видимости?\",\r\n      answer: `\r\n      **Область видимости (scope):**\r\n      - Определяет, где в коде переменная является доступной.\r\n      - Виды областей видимости: глобальная, функциональная, блочная.\r\n\r\n      **Замыкание (closure):**\r\n      - Это способность функции запоминать и получать доступ к переменным из своей лексической области \r\n        видимости, даже если функция выполняется вне этой области.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function outerFunction() {\r\n        const outerVariable = 'I am from outer scope';\r\n        function innerFunction() {\r\n          console.log(outerVariable); // Замыкание\r\n        }\r\n        return innerFunction;\r\n      }\r\n\r\n      const closure = outerFunction();\r\n      closure(); // I am from outer scope\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100155,\r\n      question:\r\n        \"Какой смысл замыканий, если бы не было функций высшего порядка?\",\r\n      answer: `\r\n      **Значение замыканий без функций высшего порядка:**\r\n      - Замыкания всё равно полезны для создания инкапсулированного кода и приватных переменных.\r\n      - Они позволяют реализовывать паттерны, такие как каррирование.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function createLogger(prefix) {\r\n        return function (message) {\r\n          console.log(\\`\\${prefix}: \\${message}\\`);\r\n        };\r\n      }\r\n\r\n      const infoLogger = createLogger('INFO');\r\n      infoLogger('This is a log message'); // INFO: This is a log message\r\n      \\`\\`\\`\r\n\r\n      **Функции высшего порядка расширяют возможности замыканий:**\r\n      - Они позволяют передавать и возвращать функции, создавая более гибкие и сложные структуры.\r\n      \\`\\`\\`javascript\r\n      function multiplyBy(factor) {\r\n        return function (number) {\r\n          return number * factor;\r\n        };\r\n      }\r\n\r\n      const double = multiplyBy(2);\r\n      console.log(double(5)); // 10\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100156,\r\n      question: \"Как замыкания используются в реальных проектах?\",\r\n      answer: `\r\n      **Примеры использования замыканий в реальных проектах:**\r\n      1. **Модули:**\r\n         - Замыкания используются для создания приватных переменных и методов.\r\n         \\`\\`\\`javascript\r\n         const Module = (function () {\r\n           let privateData = 'I am private';\r\n           return {\r\n             getData() {\r\n               return privateData;\r\n             },\r\n           };\r\n         })();\r\n\r\n         console.log(Module.getData()); // I am private\r\n         \\`\\`\\`\r\n\r\n      2. **Каррирование:**\r\n         - Замыкания позволяют создавать функции с частичным применением аргументов.\r\n         \\`\\`\\`javascript\r\n         function add(a) {\r\n           return function (b) {\r\n             return a + b;\r\n           };\r\n         }\r\n\r\n         const addFive = add(5);\r\n         console.log(addFive(3)); // 8\r\n         \\`\\`\\`\r\n\r\n      3. **Ленивая загрузка данных:**\r\n         - Замыкания могут использоваться для отложенной загрузки ресурсов.\r\n         \\`\\`\\`javascript\r\n         function lazyLoadResource() {\r\n           let resource = null;\r\n           return function () {\r\n             if (!resource) {\r\n               resource = 'Resource loaded';\r\n             }\r\n             return resource;\r\n           };\r\n         }\r\n\r\n         const load = lazyLoadResource();\r\n         console.log(load()); // Resource loaded\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100157,\r\n      question: \"Как замыкания связаны с асинхронным программированием?\",\r\n      answer: `\r\n      **Связь с асинхронным программированием:**\r\n      - Замыкания позволяют сохранять контекст выполнения при работе с асинхронными операциями.\r\n\r\n      **Пример с \\`setTimeout\\`:**\r\n      \\`\\`\\`javascript\r\n      function delayedLog(message) {\r\n        setTimeout(() => {\r\n          console.log(message); // Замыкание сохраняет доступ к message\r\n        }, 1000);\r\n      }\r\n\r\n      delayedLog('Hello after 1 second'); // Hello after 1 second (через 1 секунду)\r\n      \\`\\`\\`\r\n\r\n      **Пример с обработчиками событий:**\r\n      \\`\\`\\`javascript\r\n      function createButtonHandler(buttonId) {\r\n        return function () {\r\n          console.log(\\`Button \\${buttonId} clicked\\`);\r\n        };\r\n      }\r\n\r\n      const handler = createButtonHandler('submit');\r\n      document.getElementById('submit').addEventListener('click', handler);\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testPromise = {\r\n  id: 100175,\r\n  title: \"Promise (Промисы)\",\r\n  questions: [\r\n    {\r\n      id: 100176,\r\n      question: \"Что такое Promise?\",\r\n      answer: `\r\n      **Promise** — это объект, представляющий результат асинхронной операции. Он может находиться в одном из трех состояний:\r\n      - \\`pending\\` (ожидание): Начальное состояние.\r\n      - \\`fulfilled\\` (выполнено успешно): Операция завершена успешно.\r\n      - \\`rejected\\` (отклонено): Операция завершена с ошибкой.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const promise = new Promise((resolve, reject) => {\r\n        setTimeout(() => resolve('Success!'), 1000);\r\n      });\r\n\r\n      promise.then((result) => console.log(result)); // Success!\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100177,\r\n      question: \"Какие есть состояния у Promise?\",\r\n      answer: `\r\n      **Состояния Promise:**\r\n      1. **Pending (ожидание):** Начальное состояние, когда операция еще не завершена.\r\n      2. **Fulfilled (выполнено успешно):** Состояние, когда операция успешно завершена.\r\n      3. **Rejected (отклонено):** Состояние, когда произошла ошибка.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const promise = new Promise((resolve, reject) => {\r\n        const success = true;\r\n        if (success) {\r\n          resolve('Operation completed successfully');\r\n        } else {\r\n          reject('Operation failed');\r\n        }\r\n      });\r\n\r\n      promise\r\n        .then((result) => console.log(result))\r\n        .catch((error) => console.error(error));\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100178,\r\n      question: \"Зачем появились Promise?\",\r\n      answer: `\r\n      **Причины появления Promise:**\r\n      1. **Избежание \"callback hell\":** Промисы помогают организовать асинхронный код более читаемым образом.\r\n      2. **Упрощение обработки ошибок:** Централизованная обработка ошибок через \\`catch()\\`.\r\n      3. **Цепочки вызовов:** Возможность создавать цепочки методов (\\`then()\\`).\r\n\r\n      **Пример без Promise (callback hell):**\r\n      \\`\\`\\`javascript\r\n      fetchData(function (data) {\r\n        processData(data, function (processedData) {\r\n          saveData(processedData, function () {\r\n            console.log('Data saved!');\r\n          });\r\n        });\r\n      });\r\n      \\`\\`\\`\r\n\r\n      **Пример с Promise:**\r\n      \\`\\`\\`javascript\r\n      fetchData()\r\n        .then(processData)\r\n        .then(saveData)\r\n        .then(() => console.log('Data saved!'))\r\n        .catch((error) => console.error(error));\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100179,\r\n      question: \"Какие методы есть у Promise?\",\r\n      answer: `\r\n      **Методы Promise:**\r\n      1. **then(onFulfilled, onRejected):**\r\n         - Обрабатывает успешное выполнение или ошибку.\r\n         \\`\\`\\`javascript\r\n         promise.then(\r\n           (result) => console.log(result),\r\n           (error) => console.error(error)\r\n         );\r\n         \\`\\`\\`\r\n\r\n      2. **catch(onRejected):**\r\n         - Обрабатывает ошибки.\r\n         \\`\\`\\`javascript\r\n         promise.catch((error) => console.error(error));\r\n         \\`\\`\\`\r\n\r\n      3. **finally(onFinally):**\r\n         - Выполняется независимо от результата.\r\n         \\`\\`\\`javascript\r\n         promise.finally(() => console.log('Operation finished'));\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100180,\r\n      question: \"Какими способами можно создать Promise?\",\r\n      answer: `\r\n      **Создание Promise:**\r\n      - Используется конструктор \\`new Promise()\\`, который принимает функцию с двумя аргументами: \\`resolve\\` и \\`reject\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const promise = new Promise((resolve, reject) => {\r\n        const success = true;\r\n        if (success) {\r\n          resolve('Resolved!');\r\n        } else {\r\n          reject('Rejected!');\r\n        }\r\n      });\r\n\r\n      promise\r\n        .then((result) => console.log(result))\r\n        .catch((error) => console.error(error));\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100181,\r\n      question: \"Какие статические методы Promise знаешь?\",\r\n      answer: `\r\n      **Статические методы Promise:**\r\n      1. **Promise.all(iterable):**\r\n         - Ждет выполнения всех промисов.\r\n         \\`\\`\\`javascript\r\n         Promise.all([promise1, promise2])\r\n           .then((results) => console.log(results))\r\n           .catch((error) => console.error(error));\r\n         \\`\\`\\`\r\n\r\n      2. **Promise.allSettled(iterable):**\r\n         - Ждет завершения всех промисов (успешных или отклоненных).\r\n         \\`\\`\\`javascript\r\n         Promise.allSettled([promise1, promise2]).then((results) => console.log(results));\r\n         \\`\\`\\`\r\n\r\n      3. **Promise.race(iterable):**\r\n         - Возвращает первый завершившийся промис.\r\n         \\`\\`\\`javascript\r\n         Promise.race([promise1, promise2]).then((result) => console.log(result));\r\n         \\`\\`\\`\r\n\r\n      4. **Promise.any(iterable):**\r\n         - Возвращает первый успешно завершившийся промис.\r\n         \\`\\`\\`javascript\r\n         Promise.any([promise1, promise2]).then((result) => console.log(result));\r\n         \\`\\`\\`\r\n\r\n      5. **Promise.resolve(value):**\r\n         - Создает успешно завершенный промис.\r\n         \\`\\`\\`javascript\r\n         Promise.resolve('Resolved!').then((result) => console.log(result));\r\n         \\`\\`\\`\r\n\r\n      6. **Promise.reject(reason):**\r\n         - Создает отклоненный промис.\r\n         \\`\\`\\`javascript\r\n         Promise.reject('Rejected!').catch((error) => console.error(error));\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100182,\r\n      question: \"Что произойдёт, если я использую await вместо Promise?\",\r\n      answer: `\r\n      **Работа \\`await\\`:**\r\n      - Если \\`await\\` используется с чем-то, что не является промисом, JavaScript вернет это значение напрямую.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      async function example() {\r\n        const value = await 42; // Не промис, просто число\r\n        console.log(value); // 42\r\n      }\r\n\r\n      example();\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100183,\r\n      question: \"Где используются Promise?\",\r\n      answer: `\r\n      **Применение Promise:**\r\n      - Сетевые запросы (например, \\`fetch\\`).\r\n      - Чтение/запись файлов.\r\n      - Анимации.\r\n      - Работа с базами данных.\r\n      - Любые асинхронные операции.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      fetch('https://api.example.com/data') \r\n        .then((response) => response.json())\r\n        .then((data) => console.log(data))\r\n        .catch((error) => console.error(error));\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100184,\r\n      question: \"В чём отличие async/await от Promise?\",\r\n      answer: `\r\n      **Отличия:**\r\n      1. **Async/await:**\r\n         - Делает асинхронный код похожим на синхронный.\r\n         - \\`async\\` автоматически оборачивает функцию в промис.\r\n         - \\`await\\` приостанавливает выполнение до завершения промиса.\r\n\r\n      2. **Promise:**\r\n         - Требует явного использования методов \\`then()\\` и \\`catch()\\`.\r\n\r\n      **Пример с Promise:**\r\n      \\`\\`\\`javascript\r\n      function fetchData() {\r\n        return fetch('https://api.example.com/data') \r\n          .then((response) => response.json())\r\n          .catch((error) => console.error(error));\r\n      }\r\n      \\`\\`\\`\r\n\r\n      **Пример с async/await:**\r\n      \\`\\`\\`javascript\r\n      async function fetchData() {\r\n        try {\r\n          const response = await fetch('https://api.example.com/data'); \r\n          const data = await response.json();\r\n          console.log(data);\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100185,\r\n      question: \"Можно ли перезапустить остановленный Promise?\",\r\n      answer: `\r\n      **Нет, нельзя.**\r\n      - Остановленный промис (завершенный или отклоненный) не может быть перезапущен.\r\n      - Для повторного выполнения нужно создать новый промис.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const promise = new Promise((resolve) => resolve('Done!'));\r\n      promise.then((result) => console.log(result)); // Done!\r\n\r\n      // Перезапуск невозможен, нужно создать новый промис:\r\n      const newPromise = new Promise((resolve) => resolve('Restarted!'));\r\n      newPromise.then((result) => console.log(result)); // Restarted!\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100186,\r\n      question: \"Сходство и отличия Observable от Promise?\",\r\n      answer: `\r\n      **Observable vs Promise:**\r\n      1. **Сходства:**\r\n         - Оба используются для работы с асинхронными операциями.\r\n\r\n      2. **Отличия:**\r\n         - **Observable:** Может выдавать несколько значений во времени (поток данных).\r\n         - **Promise:** Разрешается только один раз (одно значение или ошибка).\r\n\r\n      **Пример с Promise:**\r\n      \\`\\`\\`javascript\r\n      const promise = Promise.resolve('Single value');\r\n      promise.then((value) => console.log(value)); // Single value\r\n      \\`\\`\\`\r\n\r\n      **Пример с Observable (RxJS):**\r\n      \\`\\`\\`javascript\r\n      const observable = new Observable((observer) => {\r\n        observer.next('Value 1');\r\n        observer.next('Value 2');\r\n        observer.complete();\r\n      });\r\n\r\n      observable.subscribe((value) => console.log(value)); // Value 1, Value 2\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100187,\r\n      question: \"Какая самая важная отличительная черта Promise?\",\r\n      answer: `\r\n      **Отличительная черта Promise:**\r\n      - Единый интерфейс для работы с асинхронными операциями.\r\n      - Позволяет обрабатывать результаты будущих операций (успешные или ошибочные) через \\`then()\\` и \\`catch()\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const promise = new Promise((resolve, reject) => {\r\n        setTimeout(() => resolve('Future result'), 1000);\r\n      });\r\n\r\n      promise\r\n        .then((result) => console.log(result)) // Future result\r\n        .catch((error) => console.error(error));\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100188,\r\n      question: \"Что использовали до Promise?\",\r\n      answer: `\r\n      **До Promise:**\r\n      - Колбэки (\\`callbacks\\`) были основным способом обработки асинхронных операций.\r\n      - Это часто приводило к \"callback hell\" (вложенные колбэки).\r\n\r\n      **Пример с колбэками:**\r\n      \\`\\`\\`javascript\r\n      fetchData(function (data) {\r\n        processData(data, function (processedData) {\r\n          saveData(processedData, function () {\r\n            console.log('Data saved!');\r\n          });\r\n        });\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100189,\r\n      question: \"К какой категории относятся Promise?\",\r\n      answer: `\r\n      **Категория Promise:**\r\n      - Промисы относятся к асинхронному программированию.\r\n      - Они предоставляют удобный способ работы с асинхронными операциями.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const promise = new Promise((resolve) => setTimeout(() => resolve('Async!'), 1000));\r\n      promise.then((result) => console.log(result)); // Async!\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100190,\r\n      question: \"Как обработать ошибки в Promise?\",\r\n      answer: `\r\n      **Обработка ошибок:**\r\n      - Используйте \\`catch()\\` для централизованной обработки ошибок.\r\n      - Можно также передать обработчик ошибок вторым аргументом в \\`then()\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const promise = new Promise((resolve, reject) => {\r\n        reject('Error occurred');\r\n      });\r\n\r\n      promise\r\n        .then((result) => console.log(result))\r\n        .catch((error) => console.error(error)); // Error occurred\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100191,\r\n      question: \"Как создать цепочку промисов?\",\r\n      answer: `\r\n      **Цепочка промисов:**\r\n      - Метод \\`then()\\` возвращает новый промис, что позволяет создавать цепочки.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const promise = Promise.resolve(1);\r\n\r\n      promise\r\n        .then((value) => value + 1)\r\n        .then((value) => value * 2)\r\n        .then((value) => console.log(value)) // 4\r\n        .catch((error) => console.error(error));\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testDOM = {\r\n  id: 100120,\r\n  title: \"DOM\",\r\n  questions: [\r\n    {\r\n      id: 100103,\r\n      question: \"Какие существуют типы узлов в DOM?\",\r\n      answer: `\r\n      **Типы узлов в DOM (nodeType):**\r\n      1. **ELEMENT_NODE (1):** Элемент HTML (например, \\`<div>\\`, \\`<p>\\`).\r\n      2. **ATTRIBUTE_NODE (2):** Атрибут элемента (устаревший, почти не используется в современных API).\r\n      3. **TEXT_NODE (3):** Текстовое содержимое элемента (включая пробелы и переносы строк).\r\n      4. **COMMENT_NODE (8):** Комментарий (\\`<!-- ... -->\\`).\r\n      5. **DOCUMENT_NODE (9):** Корневой узел документа (\\`document\\`).\r\n      6. **DOCUMENT_TYPE_NODE (10):** Объявление типа документа (\\`<!DOCTYPE html>\\`).\r\n      7. **DOCUMENT_FRAGMENT_NODE (11):** \"Виртуальный\" узел (\\`DocumentFragment\\`), не являющийся частью DOM.\r\n\r\n      **Пример проверки типа узла:**\r\n      \\`\\`\\`javascript\r\n      const element = document.querySelector('div');\r\n      console.log(element.nodeType); // 1 (ELEMENT_NODE)\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100104,\r\n      question: \"Объясните, что такое DOM-дерево и как оно структурировано.\",\r\n      answer: `\r\n      **DOM-дерево (Document Object Model):**\r\n      - Это иерархическая структура, в которой браузер представляет HTML-документ как набор объектов (узлов) в виде дерева.\r\n\r\n      **Структура DOM-дерева:**\r\n      1. **Корень:** Объект \\`document\\`.\r\n      2. **Дочерние узлы:** Элементы (\\`<html>\\`, \\`<body>\\`, \\`<div>\\`), текстовые узлы и т.д.\r\n      3. **Ветвление:** Каждый элемент может содержать другие элементы или текстовые узлы.\r\n      4. **Связи:** У каждого узла есть родитель, дети, братья и сёстры.\r\n\r\n      **Пример структуры:**\r\n      \\`\\`\\`html\r\n      <html>\r\n        <head>\r\n          <title>Заголовок</title>\r\n        </head>\r\n        <body>\r\n          <div>Привет!</div>\r\n        </body>\r\n      </html>\r\n      \\`\\`\\`\r\n      **DOM-представление:**\r\n      - \\`document\\` → \\`<html>\\` → \\`<head>\\` → \\`<title>\\` → \"Заголовок\"\r\n      - \\`document\\` → \\`<html>\\` → \\`<body>\\` → \\`<div>\\` → \"Привет!\"\r\n      `,\r\n    },\r\n    {\r\n      id: 100105,\r\n      question:\r\n        \"Каким образом изменения в DOM могут влиять на производительность веб-страницы?\",\r\n      answer: `\r\n      **Основные операции, влияющие на производительность:**\r\n      1. **Reflow (перекомпоновка):**\r\n         - Происходит при изменении геометрии элемента (ширина, высота, позиция).\r\n         - Браузер пересчитывает расположение других элементов.\r\n         - Пример:\r\n           \\`\\`\\`javascript\r\n           const div = document.querySelector('div');\r\n           div.style.width = '200px'; // Вызовет reflow\r\n           \\`\\`\\`\r\n\r\n      2. **Repaint (перерисовка):**\r\n         - Происходит при изменении визуальных свойств, не затрагивающих геометрию (например, \\`color\\`, \\`background\\`).\r\n         - Браузер только перерисовывает элемент.\r\n         - Пример:\r\n           \\`\\`\\`javascript\r\n           const div = document.querySelector('div');\r\n           div.style.backgroundColor = 'red'; // Вызовет repaint\r\n           \\`\\`\\`\r\n\r\n      **Оптимизация:**\r\n      - Минимизируйте количество изменений DOM.\r\n      - Используйте \\`DocumentFragment\\` для массовых изменений.\r\n      - Группируйте изменения стилей через \\`classList\\`.\r\n      `,\r\n    },\r\n    {\r\n      id: 100106,\r\n      question: \"Какие методы используются для манипуляции DOM?\",\r\n      answer: `\r\n      **Методы манипуляции DOM:**\r\n      1. **Получение элементов:**\r\n         - \\`document.getElementById(id)\\`: Получить элемент по ID.\r\n         - \\`document.querySelector(selector)\\`: Получить первый элемент по CSS-селектору.\r\n         - \\`document.querySelectorAll(selector)\\`: Получить все элементы по CSS-селектору.\r\n\r\n      2. **Создание и добавление элементов:**\r\n         - \\`document.createElement(tagName)\\`: Создать новый элемент.\r\n         - \\`parentNode.appendChild(childNode)\\`: Добавить дочерний элемент.\r\n         - \\`parentNode.removeChild(childNode)\\`: Удалить дочерний элемент.\r\n\r\n      3. **Изменение содержимого:**\r\n         - \\`element.innerHTML\\`: Получить/установить HTML-содержимое.\r\n         - \\`element.textContent\\`: Получить/установить текстовое содержимое.\r\n\r\n      4. **Работа с атрибутами:**\r\n         - \\`element.setAttribute(name, value)\\`: Установить атрибут.\r\n         - \\`element.getAttribute(name)\\`: Получить значение атрибута.\r\n         - \\`element.removeAttribute(name)\\`: Удалить атрибут.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const div = document.createElement('div');\r\n      div.textContent = 'Привет, мир!';\r\n      document.body.appendChild(div);\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100107,\r\n      question: \"Что такое Shadow DOM и чем он отличается от обычного DOM?\",\r\n      answer: `\r\n      **Shadow DOM:**\r\n      - Это инкапсулированный DOM, который изолирует стили и структуру компонента от основного DOM.\r\n      - Используется для создания веб-компонентов.\r\n\r\n      **Отличия от обычного DOM:**\r\n      1. **Инкапсуляция:** Стили и скрипты внутри Shadow DOM не влияют на основной DOM.\r\n      2. **Изолированные события:** События из Shadow DOM не распространяются за его пределы.\r\n      3. **Использование:** Shadow DOM часто применяется в веб-компонентах (\\`<custom-element>\\`).\r\n\r\n      **Пример создания Shadow DOM:**\r\n      \\`\\`\\`javascript\r\n      const host = document.createElement('div');\r\n      const shadowRoot = host.attachShadow({ mode: 'open' });\r\n      shadowRoot.innerHTML = '<p>Это Shadow DOM</p>';\r\n      document.body.appendChild(host);\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100108,\r\n      question: \"Как работают события в DOM?\",\r\n      answer: `\r\n      **События в DOM:**\r\n      - События — это действия или происшествия, которые происходят в DOM (например, клики, нажатия клавиш, загрузка страницы).\r\n      - Они позволяют реагировать на взаимодействие пользователя с интерфейсом.\r\n\r\n      **Основные методы работы с событиями:**\r\n      1. \\`element.addEventListener(type, handler)\\`: Добавить обработчик события.\r\n      2. \\`element.removeEventListener(type, handler)\\`: Удалить обработчик события.\r\n      3. \\`event.stopPropagation()\\`: Остановить всплытие события.\r\n      4. \\`event.preventDefault()\\`: Отменить стандартное поведение.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const button = document.querySelector('button');\r\n      button.addEventListener('click', (event) => {\r\n        console.log('Кнопка нажата!');\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testBOM = {\r\n  id: 100250,\r\n  title: \"BOM (Browser Object Model)\",\r\n  questions: [\r\n    {\r\n      id: 100251,\r\n      question: \"Что такое BOM?\",\r\n      answer: `\r\n      **BOM (Browser Object Model)** — это набор объектов, предоставляемых браузером для взаимодействия с окном, \r\n      документом, историей, расположением и другими аспектами браузера. Основной объект BOM — \\`window\\`, который \r\n      является глобальным объектом в браузере.\r\n\r\n      **Основные объекты BOM:**\r\n      - \\`window\\`: Представляет окно браузера.\r\n      - \\`navigator\\`: Содержит информацию о браузере и устройстве пользователя.\r\n      - \\`location\\`: Предоставляет доступ к URL текущей страницы.\r\n      - \\`history\\`: Позволяет управлять историей браузера.\r\n      - \\`screen\\`: Содержит информацию о экране пользователя.\r\n      `,\r\n    },\r\n    {\r\n      id: 100252,\r\n      question: \"Как использовать объект window в JavaScript?\",\r\n      answer: `\r\n      **Объект \\`window\\`:**\r\n      - Является глобальным объектом в браузере.\r\n      - Содержит методы и свойства для управления окном браузера.\r\n\r\n      **Примеры использования:**\r\n      \\`\\`\\`javascript\r\n      // Открытие нового окна\r\n      window.open('https://example.com'); \r\n\r\n      // Закрытие текущего окна\r\n      window.close();\r\n\r\n      // Установка таймера\r\n      setTimeout(() => console.log('Hello!'), 1000);\r\n\r\n      // Получение высоты окна\r\n      console.log(window.innerHeight);\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100253,\r\n      question: \"Как работать с объектом location?\",\r\n      answer: `\r\n      **Объект \\`location\\`:**\r\n      - Предоставляет доступ к URL текущей страницы.\r\n      - Позволяет перенаправлять пользователя на другую страницу или изменять URL.\r\n\r\n      **Свойства и методы:**\r\n      - \\`location.href\\`: Полный URL текущей страницы.\r\n      - \\`location.pathname\\`: Путь к текущему файлу.\r\n      - \\`location.search\\`: Параметры запроса (query string).\r\n      - \\`location.reload()\\`: Перезагружает страницу.\r\n      - \\`location.assign(url)\\`: Перенаправляет на указанный URL.\r\n\r\n      **Примеры:**\r\n      \\`\\`\\`javascript\r\n      // Получение текущего URL\r\n      console.log(location.href);\r\n\r\n      // Перенаправление на другой сайт\r\n      location.assign('https://example.com'); \r\n\r\n      // Перезагрузка страницы\r\n      location.reload();\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100254,\r\n      question: \"Как управлять историей браузера с помощью объекта history?\",\r\n      answer: `\r\n      **Объект \\`history\\`:**\r\n      - Позволяет управлять историей браузера (переходы вперед и назад).\r\n\r\n      **Методы:**\r\n      - \\`history.back()\\`: Переход назад.\r\n      - \\`history.forward()\\`: Переход вперед.\r\n      - \\`history.go(n)\\`: Переход на определенное количество страниц (положительное или отрицательное значение).\r\n\r\n      **Примеры:**\r\n      \\`\\`\\`javascript\r\n      // Переход назад\r\n      history.back();\r\n\r\n      // Переход вперед\r\n      history.forward();\r\n\r\n      // Переход на две страницы назад\r\n      history.go(-2);\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100255,\r\n      question:\r\n        \"Как получить информацию о браузере с помощью объекта navigator?\",\r\n      answer: `\r\n      **Объект \\`navigator\\`:**\r\n      - Содержит информацию о браузере, устройстве и операционной системе пользователя.\r\n\r\n      **Свойства:**\r\n      - \\`navigator.userAgent\\`: Информация о браузере и устройстве.\r\n      - \\`navigator.language\\`: Язык браузера.\r\n      - \\`navigator.geolocation\\`: API для работы с геолокацией.\r\n      - \\`navigator.platform\\`: Информация о платформе (например, Windows, Mac).\r\n\r\n      **Примеры:**\r\n      \\`\\`\\`javascript\r\n      // Получение информации о браузере\r\n      console.log(navigator.userAgent);\r\n\r\n      // Получение языка браузера\r\n      console.log(navigator.language);\r\n\r\n      // Получение геолокации\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        console.log(position.coords.latitude, position.coords.longitude);\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100256,\r\n      question: \"Как использовать объект screen?\",\r\n      answer: `\r\n      **Объект \\`screen\\`:**\r\n      - Содержит информацию о экране пользователя, такую как разрешение, цветовая глубина и доступная область.\r\n\r\n      **Свойства:**\r\n      - \\`screen.width\\`: Ширина экрана в пикселях.\r\n      - \\`screen.height\\`: Высота экрана в пикселях.\r\n      - \\`screen.availWidth\\`: Доступная ширина экрана (без учета панелей задач).\r\n      - \\`screen.availHeight\\`: Доступная высота экрана.\r\n      - \\`screen.colorDepth\\`: Глубина цвета экрана.\r\n\r\n      **Примеры:**\r\n      \\`\\`\\`javascript\r\n      // Получение разрешения экрана\r\n      console.log(screen.width, screen.height);\r\n\r\n      // Получение доступной области экрана\r\n      console.log(screen.availWidth, screen.availHeight);\r\n\r\n      // Получение глубины цвета\r\n      console.log(screen.colorDepth);\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100257,\r\n      question:\r\n        \"Как обрабатывать события окна, такие как загрузка страницы или изменение размера?\",\r\n      answer: `\r\n      **Обработка событий окна:**\r\n      - Браузер предоставляет события для управления состоянием окна.\r\n\r\n      **Примеры событий:**\r\n      - \\`load\\`: Срабатывает, когда страница полностью загружена.\r\n      - \\`resize\\`: Срабатывает при изменении размера окна.\r\n      - \\`scroll\\`: Срабатывает при прокрутке страницы.\r\n\r\n      **Примеры:**\r\n      \\`\\`\\`javascript\r\n      // Обработка загрузки страницы\r\n      window.addEventListener('load', () => {\r\n        console.log('Страница загружена');\r\n      });\r\n\r\n      // Обработка изменения размера окна\r\n      window.addEventListener('resize', () => {\r\n        console.log('Размер окна изменен:', window.innerWidth, window.innerHeight);\r\n      });\r\n\r\n      // Обработка прокрутки\r\n      window.addEventListener('scroll', () => {\r\n        console.log('Прокручено:', window.scrollY);\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100258,\r\n      question:\r\n        \"Как использовать метод prompt() для взаимодействия с пользователем?\",\r\n      answer: `\r\n      **Метод \\`prompt()\\`:**\r\n      - Отображает диалоговое окно с полем для ввода текста.\r\n      - Возвращает введенный текст или \\`null\\`, если пользователь отменил ввод.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const name = prompt('Введите ваше имя:');\r\n      if (name) {\r\n        console.log('Привет,', name);\r\n      } else {\r\n        console.log('Вы не ввели имя.');\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100259,\r\n      question: \"Как использовать метод alert() и confirm()?\",\r\n      answer: `\r\n      **Методы \\`alert()\\` и \\`confirm()\\`:**\r\n      - \\`alert()\\`: Отображает сообщение с кнопкой \"OK\".\r\n      - \\`confirm()\\`: Отображает сообщение с кнопками \"OK\" и \"Cancel\". Возвращает \\`true\\` или \\`false\\`.\r\n\r\n      **Примеры:**\r\n      \\`\\`\\`javascript\r\n      // Отображение сообщения\r\n      alert('Это важное сообщение!');\r\n\r\n      // Подтверждение действия\r\n      const isConfirmed = confirm('Вы уверены?');\r\n      if (isConfirmed) {\r\n        console.log('Пользователь согласился.');\r\n      } else {\r\n        console.log('Пользователь отменил.');\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testFiber = {\r\n  id: 100225,\r\n  title: \"Файбер дерево\",\r\n  questions: [\r\n    {\r\n      id: 100226,\r\n      question: \"Что такое fiber дерево?\",\r\n      answer: `\r\n      **Fiber-дерево** — это механизм согласования (reconciliation) в React, появившийся в версии 16. \r\n      Он переосмысливает процесс рендеринга и обновления компонентов, делая его инкрементным и более отзывчивым.\r\n\r\n      **Основные особенности:**\r\n      - Разбивает работу на небольшие задачи (\"unit of work\").\r\n      - Управляет приоритетами задач.\r\n      - Позволяет приостанавливать, возобновлять или отменять обновления.\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`javascript\r\n      // React автоматически использует Fiber под капотом.\r\n      function App() {\r\n        const [count, setCount] = React.useState(0);\r\n\r\n        return (\r\n          <div>\r\n            <p>Count: {count}</p>\r\n            <button onClick={() => setCount(count + 1)}>Increment</button>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100227,\r\n      question: \"Какие проблемы решает Fiber в React?\",\r\n      answer: `\r\n      **Проблемы, решаемые Fiber:**\r\n      1. **Блокировка основного потока браузера:** До Fiber React выполнял обновления синхронно, что могло привести к задержкам.\r\n      2. **Низкая отзывчивость интерфейса:** Тяжелые операции рендеринга могли замедлять UI.\r\n      3. **Отсутствие управления приоритетами:** Все обновления выполнялись с одинаковым приоритетом.\r\n\r\n      **Решение:**\r\n      Fiber разбивает работу на маленькие задачи, приостанавливает их и дает браузеру время на выполнение других задач (например, анимаций).\r\n      `,\r\n    },\r\n    {\r\n      id: 100228,\r\n      question: \"Что такое reconciliation в контексте Fiber?\",\r\n      answer: `\r\n      **Reconciliation** — это процесс сравнения текущего и нового состояния виртуального DOM для определения минимального количества изменений.\r\n\r\n      **Особенности Fiber:**\r\n      - Reconciliation становится асинхронным.\r\n      - Задачи делятся на части (\"unit of work\").\r\n      - React может приостанавливать и возобновлять процесс.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // React автоматически управляет reconciliation через Fiber.\r\n      function Counter() {\r\n        const [value, setValue] = React.useState(0);\r\n        return (\r\n          <div>\r\n            <p>{value}</p>\r\n            <button onClick={() => setValue(value + 1)}>Increase</button>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100229,\r\n      question: \"Как Fiber управляет приоритетами задач?\",\r\n      answer: `\r\n      **Управление приоритетами:**\r\n      1. **Высокий приоритет:** Пользовательские события (например, клики, ввод текста).\r\n      2. **Средний приоритет:** Обновления интерфейса (например, переключение вкладок).\r\n      3. **Низкий приоритет:** Фоновые задачи (например, загрузка данных).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Высокоприоритетное обновление\r\n      function handleClick() {\r\n        setState(newState); // Это обновление будет выполнено немедленно.\r\n      }\r\n\r\n      // Низкоприоритетное обновление\r\n      setTimeout(() => {\r\n        setState(newState); // Это обновление может быть отложено.\r\n      }, 0);\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100230,\r\n      question: \"Что такое 'unit of work' в Fiber?\",\r\n      answer: `\r\n      **\"Unit of work\":**\r\n      - Минимальная единица работы, которую Fiber выполняет за один шаг.\r\n      - Каждый Fiber-узел представляет собой часть работы (например, вызов функции рендера или обновление состояния).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Каждый компонент создает свой Fiber-узел.\r\n      function ChildComponent() {\r\n        return <p>Child</p>;\r\n      }\r\n\r\n      function ParentComponent() {\r\n        return (\r\n          <div>\r\n            <ChildComponent />\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100231,\r\n      question: \"Как Fiber помогает с анимациями?\",\r\n      answer: `\r\n      **Помощь с анимациями:**\r\n      - Fiber позволяет React приостанавливать менее важные задачи (например, обновление фоновых данных).\r\n      - Браузер получает больше времени для отрисовки каждого кадра, что делает анимации плавными.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function AnimationExample() {\r\n        const [position, setPosition] = React.useState(0);\r\n\r\n        React.useEffect(() => {\r\n          const interval = setInterval(() => {\r\n            setPosition((pos) => pos + 1); // Высокоприоритетное обновление.\r\n          }, 16); // ~60 FPS\r\n          return () => clearInterval(interval);\r\n        }, []);\r\n\r\n        return <div style={{ transform: \\`translateX(\\${position}px)\\` }}>Moving Box</div>;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100232,\r\n      question: \"Что такое 'fiber node'?\",\r\n      answer: `\r\n      **Fiber node:**\r\n      - Это структура данных, представляющая единицу работы в Fiber-дереве.\r\n      - Содержит информацию о компоненте, его состоянии, свойствах (props) и связях с дочерними/родительскими узлами.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Каждый компонент создает свой Fiber-узел.\r\n      function MyComponent() {\r\n        return <div>Hello, World!</div>;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100233,\r\n      question: \"Как Fiber влияет на производительность React?\",\r\n      answer: `\r\n      **Влияние на производительность:**\r\n      1. **Асинхронное выполнение задач:** Разбиение работы на маленькие части.\r\n      2. **Управление приоритетами:** Выполнение высокоприоритетных задач в первую очередь.\r\n      3. **Приостановка и возобновление:** Возможность приостановить выполнение задачи и продолжить позже.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // React автоматически использует Fiber для оптимизации.\r\n      function HeavyComponent() {\r\n        const data = Array.from({ length: 10000 }, (_, i) => i);\r\n        return (\r\n          <ul>\r\n            {data.map((item) => (\r\n              <li key={item}>{item}</li>\r\n            ))}\r\n          </ul>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100234,\r\n      question: \"Как работает жизненный цикл Fiber-узла?\",\r\n      answer: `\r\n      **Жизненный цикл Fiber-узла:**\r\n      1. **Создание:** React создает Fiber-узел для каждого компонента.\r\n      2. **Работа:** Fiber выполняет \"unit of work\" (например, вызов функции рендера).\r\n      3. **Приостановка:** Если необходимо, React приостанавливает выполнение задачи.\r\n      4. **Завершение:** После завершения всех задач React обновляет реальный DOM.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Жизненный цикл Fiber-узла автоматически управляется React.\r\n      function LifecycleComponent() {\r\n        React.useEffect(() => {\r\n          console.log('Component mounted');\r\n          return () => console.log('Component unmounted');\r\n        }, []);\r\n        return <p>Lifecycle Example</p>;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100235,\r\n      question: \"Как Fiber отличается от старого механизма согласования?\",\r\n      answer: `\r\n      **Разница между Fiber и старым механизмом:**\r\n      1. **Старый механизм:**\r\n         - Выполнял обновления синхронно.\r\n         - Блокировал основной поток браузера.\r\n      2. **Fiber:**\r\n         - Выполняет обновления асинхронно.\r\n         - Разбивает работу на маленькие задачи.\r\n         - Управляет приоритетами задач.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Старый механизм мог блокировать интерфейс:\r\n      function HeavyTask() {\r\n        const data = Array.from({ length: 1e6 }, (_, i) => i);\r\n        return <ul>{data.map((item) => <li key={item}>{item}</li>)}</ul>;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testThis = {\r\n  id: 100700,\r\n  title: \"This (привязка контекста)\",\r\n  questions: [\r\n    {\r\n      id: 100701,\r\n      question: \"Что такое `this` в JavaScript?\",\r\n      answer: `\r\n      **Ключевое слово \\`this\\`:**\r\n      - \\`this\\` — это специальное ключевое слово, которое указывает на текущий контекст выполнения.\r\n      - Значение \\`this\\` зависит от того, как функция вызывается.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const person = {\r\n        name: 'Alice',\r\n        greet() {\r\n          console.log(\\`Hello, my name is \\${this.name}\\`);\r\n        },\r\n      };\r\n\r\n      person.greet(); // Hello, my name is Alice\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100702,\r\n      question: \"Как определяется значение `this`?\",\r\n      answer: `\r\n      **Определение значения \\`this\\`:**\r\n      1. **В методах объекта:** \\`this\\` ссылается на объект, которому принадлежит метод.\r\n         \\`\\`\\`javascript\r\n         const obj = {\r\n           value: 42,\r\n           getValue() {\r\n             return this.value;\r\n           },\r\n         };\r\n         console.log(obj.getValue()); // 42\r\n         \\`\\`\\`\r\n\r\n      2. **В глобальной области видимости:** \\`this\\` ссылается на глобальный объект (\\`window\\` в браузере).\r\n         \\`\\`\\`javascript\r\n         console.log(this === window); // true (в браузере)\r\n         \\`\\`\\`\r\n\r\n      3. **В строгом режиме (\\`'use strict'\\`):** \\`this\\` становится \\`undefined\\`.\r\n         \\`\\`\\`javascript\r\n         'use strict';\r\n         function test() {\r\n           console.log(this);\r\n         }\r\n         test(); // undefined\r\n         \\`\\`\\`\r\n\r\n      4. **В конструкторах:** \\`this\\` ссылается на создаваемый экземпляр объекта.\r\n         \\`\\`\\`javascript\r\n         function Person(name) {\r\n           this.name = name;\r\n         }\r\n         const alice = new Person('Alice');\r\n         console.log(alice.name); // Alice\r\n         \\`\\`\\`\r\n\r\n      5. **В обработчиках событий:** \\`this\\` обычно ссылается на элемент, который вызвал событие.\r\n         \\`\\`\\`javascript\r\n         document.querySelector('button').addEventListener('click', function () {\r\n           console.log(this); // <button>...</button>\r\n         });\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100703,\r\n      question: \"Как работает привязка контекста (`bind`, `call`, `apply`)?\",\r\n      answer: `\r\n      **Привязка контекста:**\r\n      - Методы \\`bind\\`, \\`call\\` и \\`apply\\` позволяют явно задать значение \\`this\\`.\r\n\r\n      1. **\\`bind\\`:** Возвращает новую функцию с привязанным контекстом.\r\n         \\`\\`\\`javascript\r\n         function greet() {\r\n           console.log(\\`Hello, my name is \\${this.name}\\`);\r\n         }\r\n\r\n         const person = { name: 'Alice' };\r\n         const boundGreet = greet.bind(person);\r\n         boundGreet(); // Hello, my name is Alice\r\n         \\`\\`\\`\r\n\r\n      2. **\\`call\\`:** Вызывает функцию с указанным контекстом и аргументами.\r\n         \\`\\`\\`javascript\r\n         function introduce(greeting) {\r\n           console.log(\\`\\${greeting}, my name is \\${this.name}\\`);\r\n         }\r\n\r\n         const person = { name: 'Bob' };\r\n         introduce.call(person, 'Hi'); // Hi, my name is Bob\r\n         \\`\\`\\`\r\n\r\n      3. **\\`apply\\`:** Аналогично \\`call\\`, но принимает аргументы в виде массива.\r\n         \\`\\`\\`javascript\r\n         function sum(a, b) {\r\n           return this.multiplier * (a + b);\r\n         }\r\n\r\n         const context = { multiplier: 2 };\r\n         console.log(sum.apply(context, [3, 4])); // 14\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100704,\r\n      question: \"Что такое потеря контекста и как её избежать?\",\r\n      answer: `\r\n      **Потеря контекста:**\r\n      - Происходит, когда значение \\`this\\` теряется при передаче метода объекта как колбэка или при вызове \r\n        функции без контекста.\r\n\r\n      **Пример потери контекста:**\r\n      \\`\\`\\`javascript\r\n      const user = {\r\n        name: 'Alice',\r\n        greet() {\r\n          console.log(\\`Hello, \\${this.name}\\`);\r\n        },\r\n      };\r\n\r\n      const greet = user.greet;\r\n      greet(); // TypeError: Cannot read properties of undefined (потеря контекста)\r\n      \\`\\`\\`\r\n\r\n      **Решения:**\r\n      1. Использование \\`bind\\`:\r\n         \\`\\`\\`javascript\r\n         const greet = user.greet.bind(user);\r\n         greet(); // Hello, Alice\r\n         \\`\\`\\`\r\n\r\n      2. Стрелочные функции:\r\n         - Стрелочные функции не имеют собственного \\`this\\`, они заимствуют его из внешнего лексического окружения.\r\n         \\`\\`\\`javascript\r\n         const user = {\r\n           name: 'Alice',\r\n           greet: () => {\r\n             console.log(\\`Hello, \\${this.name}\\`);\r\n           },\r\n         };\r\n\r\n         user.greet(); // Hello, undefined (не рекомендуется использовать стрелочные функции для методов)\r\n         \\`\\`\\`\r\n\r\n      3. Использование замыканий:\r\n         \\`\\`\\`javascript\r\n         const user = {\r\n           name: 'Alice',\r\n           greet() {\r\n             const self = this; // Сохраняем контекст\r\n             setTimeout(function () {\r\n               console.log(\\`Hello, \\${self.name}\\`);\r\n             }, 1000);\r\n           },\r\n         };\r\n\r\n         user.greet(); // Hello, Alice\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100705,\r\n      question: \"Как работает `this` в стрелочных функциях?\",\r\n      answer: `\r\n      **Стрелочные функции и \\`this\\`:**\r\n      - Стрелочные функции не имеют собственного \\`this\\`.\r\n      - Они заимствуют \\`this\\` из внешнего лексического окружения.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const obj = {\r\n        value: 42,\r\n        regularFunction() {\r\n          console.log(this.value); // 42\r\n        },\r\n        arrowFunction: () => {\r\n          console.log(this.value); // undefined (this берется из глобального контекста)\r\n        },\r\n      };\r\n\r\n      obj.regularFunction(); // 42\r\n      obj.arrowFunction(); // undefined\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100706,\r\n      question: \"Как работает `this` в классах?\",\r\n      answer: `\r\n      **\\`this\\` в классах:**\r\n      - В методах класса \\`this\\` ссылается на экземпляр класса.\r\n      - Если метод передается как колбэк, контекст может быть потерян.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Person {\r\n        constructor(name) {\r\n          this.name = name;\r\n        }\r\n\r\n        greet() {\r\n          console.log(\\`Hello, my name is \\${this.name}\\`);\r\n        }\r\n      }\r\n\r\n      const person = new Person('Alice');\r\n      person.greet(); // Hello, my name is Alice\r\n\r\n      const greet = person.greet;\r\n      greet(); // TypeError: Cannot read properties of undefined (потеря контекста)\r\n      \\`\\`\\`\r\n\r\n      **Решение:**\r\n      \\`\\`\\`javascript\r\n      const boundGreet = person.greet.bind(person);\r\n      boundGreet(); // Hello, my name is Alice\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100707,\r\n      question: \"Как работает `this` в обработчиках событий?\",\r\n      answer: `\r\n      **\\`this\\` в обработчиках событий:**\r\n      - В обработчиках событий \\`this\\` обычно ссылается на элемент, который вызвал событие.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      document.querySelector('button').addEventListener('click', function () {\r\n        console.log(this); // <button>...</button>\r\n      });\r\n      \\`\\`\\`\r\n\r\n      **Исключение:**\r\n      Если используется стрелочная функция, \\`this\\` будет заимствован из внешнего контекста.\r\n      \\`\\`\\`javascript\r\n      document.querySelector('button').addEventListener('click', () => {\r\n        console.log(this); // window (или undefined в строгом режиме)\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    \r\n  ],\r\n};\r\n","export const testVirtualDom = {\r\n  id: 100200,\r\n  title: \"Virtual Dom (Виртуальный Дом)\",\r\n  questions: [\r\n    {\r\n      id: 100201,\r\n      question: \"Что такое Virtual DOM?\",\r\n      answer: `\r\n      **Virtual DOM** — это легковесная копия реального DOM, представленная в виде JavaScript-объектов. \r\n      Она используется для оптимизации обновлений интерфейса, минимизируя прямые изменения реального DOM.\r\n\r\n      **Преимущества:**\r\n      - Уменьшает количество дорогостоящих операций с реальным DOM.\r\n      - Позволяет эффективно сравнивать и обновлять только те части интерфейса, которые изменились.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Реальный DOM:\r\n      <div id=\"app\">\r\n        <p>Hello, World!</p>\r\n      </div>\r\n\r\n      // Virtual DOM:\r\n      const virtualDOM = {\r\n        type: 'div',\r\n        props: { id: 'app' },\r\n        children: [\r\n          { type: 'p', props: {}, children: ['Hello, World!'] },\r\n        ],\r\n      };\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100202,\r\n      question: \"Как работает Virtual DOM?\",\r\n      answer: `\r\n      **Процесс работы Virtual DOM:**\r\n      1. **Создание:** Фреймворк создает виртуальное представление DOM на основе компонентов.\r\n      2. **Сравнение:** При изменении состояния создается новое виртуальное дерево, которое сравнивается с предыдущим (diffing).\r\n      3. **Обновление:** Определяются минимальные изменения, которые нужно применить к реальному DOM.\r\n      4. **Рендеринг:** Применяются изменения к реальному DOM.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // React автоматически использует Virtual DOM:\r\n      function App() {\r\n        const [count, setCount] = React.useState(0);\r\n\r\n        return (\r\n          <div>\r\n            <p>Count: {count}</p>\r\n            <button onClick={() => setCount(count + 1)}>Increment</button>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100203,\r\n      question: \"Зачем нужен Virtual DOM?\",\r\n      answer: `\r\n      **Причины использования Virtual DOM:**\r\n      1. **Оптимизация производительности:** Изменения в реальном DOM дороги, особенно при частых обновлениях.\r\n      2. **Минимизация операций:** Virtual DOM позволяет вычислить минимальный набор изменений перед обновлением реального DOM.\r\n      3. **Кросс-платформенность:** Virtual DOM может быть использован не только в браузерах, но и в других средах (например, серверный рендеринг).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Без Virtual DOM:\r\n      document.getElementById('app').innerHTML = '<p>New content</p>'; // Полная перерисовка\r\n\r\n      // С Virtual DOM:\r\n      // React обновляет только измененные части интерфейса.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100204,\r\n      question: \"Как происходит сравнение (diffing) в Virtual DOM?\",\r\n      answer: `\r\n      **Diffing (сравнение):**\r\n      - Алгоритм сравнения двух деревьев Virtual DOM для определения минимальных изменений.\r\n      - React использует стратегию \"разделяй и властвуй\":\r\n        1. **Сравнение типов элементов:** Если тип элемента изменился, React заменяет весь поддерево.\r\n        2. **Сравнение атрибутов:** Обновляются только измененные атрибуты.\r\n        3. **Сравнение дочерних элементов:** Используется ключ (\\`key\\`) для идентификации элементов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // До:\r\n      <ul>\r\n        <li key=\"1\">Item 1</li>\r\n        <li key=\"2\">Item 2</li>\r\n      </ul>\r\n\r\n      // После:\r\n      <ul>\r\n        <li key=\"1\">Item 1</li>\r\n        <li key=\"3\">Item 3</li>\r\n      </ul>\r\n\r\n      // React определяет, что второй элемент изменился, и обновляет только его.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100205,\r\n      question: \"Какие преимущества Virtual DOM перед реальным DOM?\",\r\n      answer: `\r\n      **Преимущества Virtual DOM:**\r\n      1. **Производительность:** Меньше операций с реальным DOM, что ускоряет рендеринг.\r\n      2. **Удобство разработки:** Разработчики могут описывать интерфейс декларативно, без ручного управления DOM.\r\n      3. **Кросс-платформенность:** Virtual DOM может быть использован в браузерах, на сервере и даже в мобильных приложениях.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Реальный DOM требует ручного управления:\r\n      const element = document.createElement('div');\r\n      element.textContent = 'Hello';\r\n      document.body.appendChild(element);\r\n\r\n      // Virtual DOM управляет DOM автоматически:\r\n      ReactDOM.render(<div>Hello</div>, document.getElementById('root'));\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100206,\r\n      question: \"Какие недостатки Virtual DOM?\",\r\n      answer: `\r\n      **Недостатки Virtual DOM:**\r\n      1. **Дополнительные вычисления:** Сравнение деревьев требует времени и ресурсов.\r\n      2. **Не всегда оптимально:** В некоторых случаях прямое управление реальным DOM может быть быстрее.\r\n      3. **Сложность реализации:** Создание и поддержка алгоритма diffing требует усилий.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // В простых случаях прямое управление реальным DOM может быть эффективнее:\r\n      const element = document.getElementById('app');\r\n      element.textContent = 'Updated'; // Нет необходимости в Virtual DOM.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100207,\r\n      question: \"Как Virtual DOM помогает в React?\",\r\n      answer: `\r\n      **Virtual DOM в React:**\r\n      - React использует Virtual DOM для эффективного обновления интерфейса.\r\n      - Компоненты React описывают, как должен выглядеть интерфейс, а React автоматически обновляет реальный DOM.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function Counter() {\r\n        const [count, setCount] = React.useState(0);\r\n\r\n        return (\r\n          <div>\r\n            <p>Count: {count}</p>\r\n            <button onClick={() => setCount(count + 1)}>Increment</button>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      ReactDOM.render(<Counter />, document.getElementById('root'));\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100208,\r\n      question: \"Что такое reconciliation в контексте Virtual DOM?\",\r\n      answer: `\r\n      **Reconciliation (согласование):**\r\n      - Процесс сравнения текущего и нового Virtual DOM для определения минимальных изменений.\r\n      - React использует алгоритм diffing для выполнения согласования.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // React автоматически выполняет reconciliation:\r\n      function App() {\r\n        const [show, setShow] = React.useState(true);\r\n\r\n        return (\r\n          <div>\r\n            {show && <p>Hello, World!</p>}\r\n            <button onClick={() => setShow(!show)}>Toggle</button>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100209,\r\n      question: \"Как ключи (keys) помогают в работе с Virtual DOM?\",\r\n      answer: `\r\n      **Ключи (keys):**\r\n      - Ключи помогают React идентифицировать элементы в списке.\r\n      - Они обеспечивают стабильность идентификации элементов при обновлении списка.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const items = [\r\n        { id: 1, text: 'Item 1' },\r\n        { id: 2, text: 'Item 2' },\r\n      ];\r\n\r\n      function List() {\r\n        return (\r\n          <ul>\r\n            {items.map((item) => (\r\n              <li key={item.id}>{item.text}</li>\r\n            ))}\r\n          </ul>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100210,\r\n      question: \"Какие есть альтернативы Virtual DOM?\",\r\n      answer: `\r\n      **Альтернативы Virtual DOM:**\r\n      1. **Svelte:** Использует компиляцию во время сборки, минуя Virtual DOM.\r\n      2. **Vue.js:** Использует реактивную систему, которая отслеживает изменения напрямую.\r\n      3. **Solid.js:** Использует реактивные сигналы вместо Virtual DOM.\r\n\r\n      **Пример Svelte:**\r\n      \\`\\`\\`svelte\r\n      <script>\r\n        let count = 0;\r\n      </script>\r\n\r\n      <button on:click={() => count++}>Count: {count}</button>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testDataType = {\r\n  id: 100275,\r\n  title: \"Data Type (Типы Данных)\",\r\n  questions: [\r\n    {\r\n      id: 100276,\r\n      question: \"Какие типы данных существуют в JavaScript?\",\r\n      answer: `\r\n      **Типы данных в JavaScript:**\r\n      - **Примитивные типы:**\r\n        1. \\`String\\`: Строки (например, \\`\"hello\"\\`).\r\n        2. \\`Number\\`: Числа (например, \\`42\\`, \\`3.14\\`).\r\n        3. \\`BigInt\\`: Большие целые числа (например, \\`123456789012345678901234567890n\\`).\r\n        4. \\`Boolean\\`: Логические значения (\\`true\\` или \\`false\\`).\r\n        5. \\`Undefined\\`: Переменная объявлена, но не инициализирована.\r\n        6. \\`Null\\`: Отсутствие значения.\r\n        7. \\`Symbol\\`: Уникальные идентификаторы.\r\n\r\n      - **Ссылочный тип:**\r\n        1. \\`Object\\`: Коллекции ключ-значение (включая массивы, функции и другие структуры).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const str = \"Hello\"; // String\r\n      const num = 42; // Number\r\n      const bool = true; // Boolean\r\n      const undef = undefined; // Undefined\r\n      const nul = null; // Null\r\n      const sym = Symbol(\"id\"); // Symbol\r\n      const obj = { key: \"value\" }; // Object\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100277,\r\n      question: \"Что такое примитивные типы данных?\",\r\n      answer: `\r\n      **Примитивные типы данных:**\r\n      - Это неизменяемые (immutable) значения, которые передаются по значению.\r\n      - Включают: \\`String\\`, \\`Number\\`, \\`BigInt\\`, \\`Boolean\\`, \\`Undefined\\`, \\`Null\\`, \\`Symbol\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      let a = 42;\r\n      let b = a; // Копируется значение\r\n      b = 100;\r\n      console.log(a); // 42 (не изменилось)\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100278,\r\n      question: \"Что такое ссылочные типы данных?\",\r\n      answer: `\r\n      **Ссылочные типы данных:**\r\n      - Это изменяемые (mutable) значения, которые передаются по ссылке.\r\n      - Включают: \\`Object\\`, \\`Array\\`, \\`Function\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const obj1 = { value: 42 };\r\n      const obj2 = obj1; // Копируется ссылка\r\n      obj2.value = 100;\r\n      console.log(obj1.value); // 100 (изменилось)\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100279,\r\n      question: \"Чем отличаются примитивные типы от ссылочных?\",\r\n      answer: `\r\n      **Отличия:**\r\n      1. **Хранение:**\r\n         - Примитивные типы хранятся в стеке (stack).\r\n         - Ссылочные типы хранятся в куче (heap), а в стеке хранится ссылка на них.\r\n      \r\n      2. **Изменяемость:**\r\n         - Примитивные типы неизменяемы.\r\n         - Ссылочные типы изменяемы.\r\n\r\n      3. **Передача:**\r\n         - Примитивные типы передаются по значению.\r\n         - Ссылочные типы передаются по ссылке.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Примитив:\r\n      let a = 42;\r\n      let b = a;\r\n      b = 100;\r\n      console.log(a); // 42\r\n\r\n      // Ссылочный:\r\n      let obj1 = { value: 42 };\r\n      let obj2 = obj1;\r\n      obj2.value = 100;\r\n      console.log(obj1.value); // 100\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100280,\r\n      question: \"Что такое typeof и как он работает?\",\r\n      answer: `\r\n      **Оператор \\`typeof\\`:**\r\n      - Используется для определения типа данных значения.\r\n      - Возвращает строку с названием типа.\r\n\r\n      **Особенности:**\r\n      - \\`typeof null\\` возвращает \\`\"object\"\\` (историческая ошибка).\r\n      - \\`typeof []\\` возвращает \\`\"object\"\\`.\r\n      - \\`typeof function() {}\\` возвращает \\`\"function\"\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      console.log(typeof 42); // \"number\"\r\n      console.log(typeof \"hello\"); // \"string\"\r\n      console.log(typeof true); // \"boolean\"\r\n      console.log(typeof undefined); // \"undefined\"\r\n      console.log(typeof null); // \"object\"\r\n      console.log(typeof {}); // \"object\"\r\n      console.log(typeof []); // \"object\"\r\n      console.log(typeof function() {}); // \"function\"\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100281,\r\n      question: \"Что такое NaN и как его проверить?\",\r\n      answer: `\r\n      **NaN (Not-a-Number):**\r\n      - Это специальное значение, которое указывает на ошибку в математических операциях.\r\n      - \\`NaN\\` не равно ничему, даже самому себе.\r\n\r\n      **Проверка:**\r\n      - Используйте метод \\`isNaN()\\` или \\`Number.isNaN()\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      console.log(0 / 0); // NaN\r\n      console.log(NaN === NaN); // false\r\n      console.log(isNaN(NaN)); // true\r\n      console.log(Number.isNaN(NaN)); // true\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100282,\r\n      question: \"Что такое BigInt и зачем он нужен?\",\r\n      answer: `\r\n      **BigInt:**\r\n      - Это числовой тип данных, который позволяет работать с большими целыми числами.\r\n      - Поддерживает числа больше, чем \\`Number.MAX_SAFE_INTEGER\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const bigInt = 123456789012345678901234567890n;\r\n      console.log(bigInt); // 123456789012345678901234567890n\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100283,\r\n      question: \"Что такое Symbol и как его использовать?\",\r\n      answer: `\r\n      **Symbol:**\r\n      - Это уникальный и неизменяемый тип данных, используемый для создания уникальных идентификаторов.\r\n      - Каждый \\`Symbol\\` уникален, даже если создан с одинаковым описанием.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const id1 = Symbol(\"id\");\r\n      const id2 = Symbol(\"id\");\r\n      console.log(id1 === id2); // false\r\n\r\n      const obj = {};\r\n      obj[id1] = \"value1\";\r\n      console.log(obj[id1]); // \"value1\"\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100284,\r\n      question: \"Что такое null и undefined?\",\r\n      answer: `\r\n      **null:**\r\n      - Представляет собой отсутствие значения или \"пустое место\".\r\n      - Является ссылочным типом, но ведет себя как примитив.\r\n\r\n      **undefined:**\r\n      - Означает, что переменная объявлена, но не инициализирована.\r\n      - Это значение по умолчанию для неинициализированных переменных.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      let a;\r\n      console.log(a); // undefined\r\n\r\n      let b = null;\r\n      console.log(b); // null\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100285,\r\n      question: \"Как преобразовать типы данных в JavaScript?\",\r\n      answer: `\r\n      **Преобразование типов:**\r\n      1. **Явное преобразование:**\r\n         - \\`String(value)\\`: Преобразует значение в строку.\r\n         - \\`Number(value)\\`: Преобразует значение в число.\r\n         - \\`Boolean(value)\\`: Преобразует значение в логическое.\r\n\r\n      2. **Неявное преобразование:**\r\n         - Происходит автоматически при выполнении операций.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Явное:\r\n      console.log(String(42)); // \"42\"\r\n      console.log(Number(\"42\")); // 42\r\n      console.log(Boolean(0)); // false\r\n\r\n      // Неявное:\r\n      console.log(42 + \"\"); // \"42\"\r\n      console.log(\"42\" * 1); // 42\r\n      console.log(!!42); // true\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testSOLID = {\r\n  id: 100375,\r\n  title: \"S.O.L.I.D.\",\r\n  questions: [\r\n    {\r\n      id: 100376,\r\n      question: \"Что такое S.O.L.I.D.?\",\r\n      answer: `\r\n      **S.O.L.I.D.** — это аббревиатура, представляющая пять основных принципов объектно-ориентированного проектирования:\r\n      1. **S**ingle Responsibility Principle (Принцип единственной ответственности).\r\n      2. **O**pen/Closed Principle (Принцип открытости/закрытости).\r\n      3. **L**iskov Substitution Principle (Принцип подстановки Барбары Лисков).\r\n      4. **I**nterface Segregation Principle (Принцип разделения интерфейса).\r\n      5. **D**ependency Inversion Principle (Принцип инверсии зависимостей).\r\n\r\n      Эти принципы помогают создавать гибкий, поддерживаемый и расширяемый код.\r\n      `,\r\n    },\r\n    {\r\n      id: 100377,\r\n      question: \"Что такое Single Responsibility Principle (SRP)?\",\r\n      answer: `\r\n      **Принцип единственной ответственности (SRP):**\r\n      - Каждый класс или модуль должен иметь только одну причину для изменения.\r\n      - Другими словами, каждый класс должен решать только одну задачу.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Плохо: Класс выполняет две задачи\r\n      class User {\r\n        constructor(name, email) {\r\n          this.name = name;\r\n          this.email = email;\r\n        }\r\n\r\n        saveToDatabase() {\r\n          console.log('Сохранение пользователя в базу данных...');\r\n        }\r\n\r\n        sendEmail(message) {\r\n          console.log(\\`Отправка письма на \\${this.email}: \\${message}\\`);\r\n        }\r\n      }\r\n\r\n      // Хорошо: Разделение ответственностей\r\n      class User {\r\n        constructor(name, email) {\r\n          this.name = name;\r\n          this.email = email;\r\n        }\r\n      }\r\n\r\n      class UserRepository {\r\n        save(user) {\r\n          console.log('Сохранение пользователя в базу данных...');\r\n        }\r\n      }\r\n\r\n      class EmailService {\r\n        send(user, message) {\r\n          console.log(\\`Отправка письма на \\${user.email}: \\${message}\\`);\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100378,\r\n      question: \"Что такое Open/Closed Principle (OCP)?\",\r\n      answer: `\r\n      **Принцип открытости/закрытости (OCP):**\r\n      - Программные сущности (классы, модули, функции) должны быть открыты для расширения, но закрыты для изменения.\r\n      - Это означает, что можно добавлять новую функциональность без изменения существующего кода.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Плохо: Изменение существующего класса\r\n      class Rectangle {\r\n        draw() {\r\n          console.log('Рисуем прямоугольник');\r\n        }\r\n      }\r\n\r\n      class Circle {\r\n        draw() {\r\n          console.log('Рисуем круг');\r\n        }\r\n      }\r\n\r\n      class ShapeDrawer {\r\n        drawShape(shape) {\r\n          if (shape instanceof Rectangle) {\r\n            shape.draw();\r\n          } else if (shape instanceof Circle) {\r\n            shape.draw();\r\n          }\r\n        }\r\n      }\r\n\r\n      // Хорошо: Использование полиморфизма\r\n      class Shape {\r\n        draw() {\r\n          throw new Error('Метод draw должен быть переопределен');\r\n        }\r\n      }\r\n\r\n      class Rectangle extends Shape {\r\n        draw() {\r\n          console.log('Рисуем прямоугольник');\r\n        }\r\n      }\r\n\r\n      class Circle extends Shape {\r\n        draw() {\r\n          console.log('Рисуем круг');\r\n        }\r\n      }\r\n\r\n      class ShapeDrawer {\r\n        drawShape(shape) {\r\n          shape.draw();\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100379,\r\n      question: \"Что такое Liskov Substitution Principle (LSP)?\",\r\n      answer: `\r\n      **Принцип подстановки Барбары Лисков (LSP):**\r\n      - Объекты базового класса должны быть заменяемыми объектами подкласса без изменения корректности программы.\r\n      - Подклассы должны расширять, а не изменять поведение базового класса.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Плохо: Нарушение LSP\r\n      class Bird {\r\n        fly() {\r\n          console.log('Птица летит');\r\n        }\r\n      }\r\n\r\n      class Penguin extends Bird {\r\n        fly() {\r\n          throw new Error('Пингвины не умеют летать');\r\n        }\r\n      }\r\n\r\n      // Хорошо: Устранение нарушения\r\n      class FlyingBird {\r\n        fly() {\r\n          console.log('Птица летит');\r\n        }\r\n      }\r\n\r\n      class Penguin {\r\n        swim() {\r\n          console.log('Пингвин плывет');\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100380,\r\n      question: \"Что такое Interface Segregation Principle (ISP)?\",\r\n      answer: `\r\n      **Принцип разделения интерфейса (ISP):**\r\n      - Клиенты не должны зависеть от интерфейсов, которые они не используют.\r\n      - Лучше иметь несколько специализированных интерфейсов, чем один общий.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Плохо: Один большой интерфейс\r\n      class Worker {\r\n        work() {\r\n          console.log('Работаю');\r\n        }\r\n\r\n        eat() {\r\n          console.log('Ем');\r\n        }\r\n      }\r\n\r\n      // Хорошо: Разделение интерфейсов\r\n      class Workable {\r\n        work() {\r\n          console.log('Работаю');\r\n        }\r\n      }\r\n\r\n      class Eatable {\r\n        eat() {\r\n          console.log('Ем');\r\n        }\r\n      }\r\n\r\n      class HumanWorker extends Workable {\r\n        eat() {\r\n          console.log('Ем');\r\n        }\r\n      }\r\n\r\n      class RobotWorker extends Workable {}\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100381,\r\n      question: \"Что такое Dependency Inversion Principle (DIP)?\",\r\n      answer: `\r\n      **Принцип инверсии зависимостей (DIP):**\r\n      - Модули верхнего уровня не должны зависеть от модулей нижнего уровня. Оба должны зависеть от абстракций.\r\n      - Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Плохо: Зависимость от конкретной реализации\r\n      class LightBulb {\r\n        turnOn() {\r\n          console.log('Лампочка включена');\r\n        }\r\n      }\r\n\r\n      class Switch {\r\n        constructor(bulb) {\r\n          this.bulb = bulb;\r\n        }\r\n\r\n        operate() {\r\n          this.bulb.turnOn();\r\n        }\r\n      }\r\n\r\n      // Хорошо: Использование абстракции\r\n      class SwitchableDevice {\r\n        turnOn() {\r\n          throw new Error('Метод turnOn должен быть переопределен');\r\n        }\r\n      }\r\n\r\n      class LightBulb extends SwitchableDevice {\r\n        turnOn() {\r\n          console.log('Лампочка включена');\r\n        }\r\n      }\r\n\r\n      class Fan extends SwitchableDevice {\r\n        turnOn() {\r\n          console.log('Вентилятор включен');\r\n        }\r\n      }\r\n\r\n      class Switch {\r\n        constructor(device) {\r\n          this.device = device;\r\n        }\r\n\r\n        operate() {\r\n          this.device.turnOn();\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100382,\r\n      question: \"Почему важно следовать принципам S.O.L.I.D.?\",\r\n      answer: `\r\n      **Важность S.O.L.I.D.:**\r\n      1. **Гибкость:** Код легче адаптировать к изменениям.\r\n      2. **Поддерживаемость:** Упрощается понимание и модификация кода.\r\n      3. **Масштабируемость:** Легко добавлять новые функции без нарушения существующих.\r\n      4. **Тестируемость:** Код становится более изолированным и тестируемым.\r\n      5. **Уменьшение ошибок:** Четкое разделение ответственностей снижает риск ошибок.\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testRESTAPI = {\r\n  id: 100075,\r\n  title: \"Тест по REST API\",\r\n  questions: [\r\n    {\r\n      id: 100076,\r\n      question: \"Что такое REST API?\",\r\n      answer: `\r\n      <strong>REST API</strong> (Representational State Transfer Application Programming Interface) — это архитектурный стиль взаимодействия компонентов распределенного приложения в сети. \r\n      В контексте веб-разработки, он позволяет веб-сервисам общаться друг с другом через HTTP, используя стандартные методы HTTP (GET, POST, PUT, DELETE и т.д.) для выполнения операций над данными.\r\n      `,\r\n    },\r\n    {\r\n      id: 100077,\r\n      question: \"Основные принципы REST\",\r\n      answer: `\r\n      **Основные принципы REST:**\r\n      1. **Без состояния (Stateless):** Каждый запрос от клиента к серверу должен содержать всю информацию, необходимую для его выполнения. Сервер не сохраняет состояние клиента между запросами.\r\n      2. **Единообразие интерфейса (Uniform Interface):** Определяет стандартный способ взаимодействия между клиентом и сервером, что облегчает разработку и унифицирует взаимодействие компонентов системы.\r\n      3. **Кэширование (Cacheable):** Ответы на запросы могут быть кэшируемыми или некэшируемыми, что позволяет улучшить производительность системы за счет уменьшения нагрузки на сервер.\r\n      4. **Клиент-сервер (Client-Server):** Разделение обязанностей между клиентом (например, пользовательским интерфейсом) и сервером (хранилище данных), что упрощает разработку и масштабирование компонентов независимо друг от друга.\r\n      5. **Многоуровневая система (Layered System):** Клиент не может обязательно знать, общается ли он напрямую с сервером или через посредников, что повышает безопасность системы и позволяет использовать балансировщики нагрузки, кэширующие сервера и т.д.\r\n      6. **Код по требованию (Code on Demand, необязательно):** Сервер может временно расширять или настраивать функциональность клиента, передавая ему исполняемый код.\r\n      `,\r\n    },\r\n    {\r\n      id: 100078,\r\n      question: \"Примеры использования REST API:\",\r\n      answer: `\r\n      **Примеры использования:**\r\n      1. **Веб-сервисы:** Веб-сайты используют REST API для запроса данных с сервера (например, загрузка списка пользователей, публикации сообщений в блоге).\r\n      2. **Мобильные приложения:** Мобильные приложения общаются с сервером для получения и отправки данных (например, проверка погоды, отправка сообщений).\r\n      3. **Интеграция с внешними сервисами:** Приложения могут интегрироваться с внешними API для расширения своего функционала (например, использование карт Google Maps, интеграция с социальными сетями).\r\n\r\n      **Пример запроса:**\r\n      \\`\\`\\`http\r\n      GET /users/1 HTTP/1.1\r\n      Host: api.example.com\r\n      Authorization: Bearer token\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100079,\r\n      question: \"Заключение\",\r\n      answer: `\r\n      <strong>REST API</strong> — это набор принципов и ограничений для создания веб-сервисов, который обеспечивает гибкое и эффективное взаимодействие между компонентами распределенных систем через HTTP. \r\n      Благодаря своей простоте, масштабируемости и гибкости, REST стал доминирующим стилем для разработки API для веб-приложений.\r\n      `,\r\n    },\r\n    {\r\n      id: 100080,\r\n      question: \"Форматы данных в REST API\",\r\n      answer: `\r\n      **Основные форматы данных:**\r\n      1. **JSON (JavaScript Object Notation):** Наиболее распространенный формат для передачи данных. Легко читается и используется как людьми, так и машинами.\r\n         \\`\\`\\`json\r\n         {\r\n           \"id\": 1,\r\n           \"name\": \"John Doe\"\r\n         }\r\n         \\`\\`\\`\r\n      2. **XML (eXtensible Markup Language):** Используется реже, но все еще поддерживается некоторыми системами.\r\n         \\`\\`\\`xml\r\n         <user>\r\n           <id>1</id>\r\n           <name>John Doe</name>\r\n         </user>\r\n         \\`\\`\\`\r\n      3. **HTML:** Может использоваться для возвращения веб-страниц.\r\n      `,\r\n    },\r\n    {\r\n      id: 100081,\r\n      question: \"HTTP-методы в REST API\",\r\n      answer: `\r\n      **Основные HTTP-методы:**\r\n      1. **GET:** Получение информации о ресурсе.\r\n      2. **POST:** Создание нового ресурса.\r\n      3. **PUT:** Обновление существующего ресурса.\r\n      4. **DELETE:** Удаление ресурса.\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`http\r\n      POST /users HTTP/1.1\r\n      Content-Type: application/json\r\n      {\r\n        \"name\": \"Alice\",\r\n        \"email\": \"alice@example.com\"\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100082,\r\n      question: \"Статусные коды HTTP в REST API\",\r\n      answer: `\r\n      **Основные статусные коды:**\r\n      - **200 OK:** Запрос выполнен успешно.\r\n      - **201 Created:** Ресурс успешно создан.\r\n      - **400 Bad Request:** Некорректный запрос.\r\n      - **401 Unauthorized:** Необходима авторизация.\r\n      - **403 Forbidden:** Доступ запрещен.\r\n      - **404 Not Found:** Ресурс не найден.\r\n      - **500 Internal Server Error:** Ошибка на стороне сервера.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`http\r\n      HTTP/1.1 404 Not Found\r\n      Content-Type: application/json\r\n      {\r\n        \"error\": \"User not found\"\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100083,\r\n      question: \"Как организовать версионирование REST API?\",\r\n      answer: `\r\n      **Способы версионирования:**\r\n      1. **URI версионирование:** Включение номера версии в URL.\r\n         \\`\\`\\`http\r\n         GET /api/v1/users\r\n         \\`\\`\\`\r\n      2. **Заголовок версионирования:** Передача версии через HTTP-заголовок.\r\n         \\`\\`\\`http\r\n         GET /api/users\r\n         Accept: application/vnd.example.v1+json\r\n         \\`\\`\\`\r\n      3. **Параметры запроса:** Передача версии через параметр.\r\n         \\`\\`\\`http\r\n         GET /api/users?version=1\r\n         \\`\\`\\`\r\n\r\n      **Рекомендация:** URI версионирование является наиболее распространенным и удобным подходом.\r\n      `,\r\n    },\r\n    {\r\n      id: 100084,\r\n      question: \"Как обрабатывать ошибки в REST API?\",\r\n      answer: `\r\n      **Обработка ошибок:**\r\n      1. Используйте соответствующие HTTP-статусы (например, 400, 404, 500).\r\n      2. Возвращайте JSON-ответ с описанием ошибки.\r\n      \r\n      **Пример:**\r\n      \\`\\`\\`http\r\n      HTTP/1.1 400 Bad Request\r\n      Content-Type: application/json\r\n      {\r\n        \"error\": \"Invalid input\",\r\n        \"details\": \"The 'email' field is required.\"\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testCORS = {\r\n  id: 100050,\r\n  title: \"Тест по CORS\",\r\n  questions: [\r\n    {\r\n      id: 100051,\r\n      question: \"Что такое CORS?\",\r\n      answer: `<strong>CORS (Cross-Origin Resource Sharing — «совместное использование ресурсов между разными источниками»)</strong> — \r\n      это механизм, который позволяет веб-страницам запрашивать ресурсы с другого домена, отличного от домена, \r\n      с которого была загружена сама страница. По умолчанию, в целях безопасности, веб-браузеры ограничивают \r\n      кросс-доменные запросы с использованием так называемой политики одного источника (Same-Origin Policy). \r\n      CORS предоставляет веб-серверам возможность явно разрешать некоторые кросс-доменные запросы, сохраняя при этом безопасность.`,\r\n    },\r\n    {\r\n      id: 100052,\r\n      question: \"Как работает CORS?\",\r\n      answer: `Когда веб-приложение пытается сделать запрос к ресурсу, который находится на другом домене (кросс-доменный запрос), \r\n      браузер автоматически добавляет к запросу заголовок \\`Origin\\`. Этот заголовок содержит домен, с которого был сделан запрос. \r\n      Веб-сервер проверяет этот заголовок и решает, разрешить ли запрос. Если сервер разрешает запросы из этого источника, он отвечает \r\n      с соответствующими CORS-заголовками:\r\n      \r\n      - \\`Access-Control-Allow-Origin\\`: Указывает, какие источники могут получать доступ к ресурсу.\r\n      - \\`Access-Control-Allow-Methods\\`: Указывает, какие HTTP-методы разрешены.\r\n      - \\`Access-Control-Allow-Headers\\`: Указывает, какие заголовки могут быть использованы в запросе.\r\n      \r\n      Пример:\r\n      \\`\\`\\`http\r\n      GET /data HTTP/1.1\r\n      Host: api.example.com\r\n      Origin: https://frontend.example.com \r\n\r\n      HTTP/1.1 200 OK\r\n      Access-Control-Allow-Origin: https://frontend.example.com \r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100053,\r\n      question: \"Основные CORS-заголовки?\",\r\n      answer: `Основные CORS-заголовки:\r\n      1. **Access-Control-Allow-Origin**: Указывает, какие источники могут получать доступ к ресурсу. Пример: \\`*\\` (все домены) или конкретный домен.\r\n      2. **Access-Control-Allow-Methods**: Указывает, какие HTTP-методы разрешены. Пример: \\`GET, POST, PUT, DELETE\\`.\r\n      3. **Access-Control-Allow-Headers**: Указывает, какие заголовки могут быть использованы в запросе. Пример: \\`Content-Type, Authorization\\`.\r\n      4. **Access-Control-Allow-Credentials**: Указывает, разрешено ли использование учетных данных (например, куки). Пример: \\`true\\` или \\`false\\`.\r\n      5. **Access-Control-Expose-Headers**: Указывает, какие заголовки могут быть доступны клиенту.`,\r\n    },\r\n    {\r\n      id: 100054,\r\n      question: \"Проблемы с CORS\",\r\n      answer: `Проблемы с CORS:\r\n      - **Слишком широкие разрешения**: Использование \\`Access-Control-Allow-Origin: *\\` может случайно разрешить небезопасные запросы.\r\n      - **Неправильная настройка**: Некорректные заголовки могут привести к блокировке легитимных запросов.\r\n      - **Безопасность**: Разрешение использования учетных данных (\\`Access-Control-Allow-Credentials: true\\`) без ограничений может создать уязвимости.\r\n      \r\n      Решение:\r\n      - Тщательно настраивайте CORS-политики.\r\n      - Используйте конкретные домены вместо \\`*\\`.\r\n      - Проверяйте и тестируйте конфигурацию сервера.`,\r\n    },\r\n    {\r\n      id: 100055,\r\n      question: \"Что такое предварительный запрос (preflight)?\",\r\n      answer: `Предварительный запрос (preflight) — это OPTIONS-запрос, который браузер отправляет перед основным запросом, если:\r\n      - Запрос использует метод, отличный от GET, POST или HEAD.\r\n      - Запрос содержит нестандартные заголовки (например, \\`Authorization\\`).\r\n      - Тип содержимого отличается от \\`application/x-www-form-urlencoded\\`, \\`multipart/form-data\\` или \\`text/plain\\`.\r\n      \r\n      Сервер должен ответить на preflight-запрос, указав разрешенные методы, заголовки и другие параметры.\r\n      \r\n      Пример:\r\n      \\`\\`\\`http\r\n      OPTIONS /data HTTP/1.1\r\n      Host: api.example.com\r\n      Access-Control-Request-Method: POST\r\n      Access-Control-Request-Headers: Content-Type\r\n\r\n      HTTP/1.1 200 OK\r\n      Access-Control-Allow-Origin: https://frontend.example.com \r\n      Access-Control-Allow-Methods: POST, GET\r\n      Access-Control-Allow-Headers: Content-Type\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100056,\r\n      question: \"Разница между простыми и сложными запросами?\",\r\n      answer: `**Простые запросы**:\r\n      - Методы: GET, POST, HEAD.\r\n      - Заголовки: Только стандартные (например, \\`Accept\\`, \\`Content-Type\\` с типами \\`application/x-www-form-urlencoded\\`, \\`multipart/form-data\\`, \\`text/plain\\`).\r\n      - Не требуют предварительного запроса (preflight).\r\n\r\n      **Сложные запросы**:\r\n      - Используют методы, отличные от GET, POST, HEAD (например, PUT, DELETE).\r\n      - Содержат нестандартные заголовки (например, \\`Authorization\\`).\r\n      - Требуют предварительного запроса (preflight).`,\r\n    },\r\n    {\r\n      id: 100057,\r\n      question: \"Как настроить CORS на сервере?\",\r\n      answer: `Настройка CORS зависит от сервера. Вот примеры:\r\n      - **Node.js (Express)**:\r\n      \\`\\`\\`javascript\r\n      const cors = require('cors');\r\n      app.use(cors({\r\n        origin: 'https://frontend.example.com', \r\n        methods: ['GET', 'POST'],\r\n        allowedHeaders: ['Content-Type', 'Authorization'],\r\n        credentials: true,\r\n      }));\r\n      \\`\\`\\`\r\n\r\n      - **Nginx**:\r\n      \\`\\`\\`nginx\r\n      add_header Access-Control-Allow-Origin \"https://frontend.example.com\"; \r\n      add_header Access-Control-Allow-Methods \"GET, POST, OPTIONS\";\r\n      add_header Access-Control-Allow-Headers \"Content-Type, Authorization\";\r\n      \\`\\`\\`\r\n\r\n      - **Apache**:\r\n      \\`\\`\\`apache\r\n      Header set Access-Control-Allow-Origin \"https://frontend.example.com\" \r\n      Header set Access-Control-Allow-Methods \"GET, POST, OPTIONS\"\r\n      Header set Access-Control-Allow-Headers \"Content-Type, Authorization\"\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testVarLetConst = {\r\n  id: 100400,\r\n  title: \"Var Let Const\",\r\n  questions: [\r\n    {\r\n      id: 100401,\r\n      question: \"Что такое var, let и const?\",\r\n      answer: `\r\n      **var, let, const** — это ключевые слова для объявления переменных в JavaScript.\r\n\r\n      1. **var:**\r\n         - Область видимости: функциональная или глобальная.\r\n         - Может быть переопределена и повторно объявлена.\r\n         - Подвержена **hoisting** (поднятие).\r\n\r\n      2. **let:**\r\n         - Область видимости: блочная (\\`{ }\\`).\r\n         - Может быть переопределена, но не может быть повторно объявлена в одной области видимости.\r\n         - Не подвержена hoisting в том же виде, как \\`var\\`.\r\n\r\n      3. **const:**\r\n         - Область видимости: блочная (\\`{ }\\`).\r\n         - Не может быть переопределена или повторно объявлена.\r\n         - Должна быть инициализирована при объявлении.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      var a = 10;\r\n      let b = 20;\r\n      const c = 30;\r\n\r\n      console.log(a); // 10\r\n      console.log(b); // 20\r\n      console.log(c); // 30\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100402,\r\n      question: \"Какова разница между var и let?\",\r\n      answer: `\r\n      **Разница между var и let:**\r\n\r\n      1. **Область видимости:**\r\n         - \\`var\\`: Функциональная или глобальная область видимости.\r\n         - \\`let\\`: Блочная область видимости (\\`{ }\\`).\r\n\r\n      2. **Hoisting:**\r\n         - \\`var\\`: Поднимается (hoisting), но значение становится \\`undefined\\`.\r\n         - \\`let\\`: Поднимается, но находится в \"временной мертвой зоне\" (TDZ) до инициализации.\r\n\r\n      3. **Повторное объявление:**\r\n         - \\`var\\`: Позволяет повторное объявление.\r\n         - \\`let\\`: Не позволяет повторное объявление в одной области видимости.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function example() {\r\n        if (true) {\r\n          var x = 10; // Глобально доступна внутри функции\r\n          let y = 20; // Доступна только внутри блока\r\n        }\r\n        console.log(x); // 10\r\n        console.log(y); // ReferenceError: y is not defined\r\n      }\r\n\r\n      example();\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100403,\r\n      question: \"Какова разница между let и const?\",\r\n      answer: `\r\n      **Разница между let и const:**\r\n\r\n      1. **Изменяемость:**\r\n         - \\`let\\`: Может быть переопределена.\r\n         - \\`const\\`: Не может быть переопределена после инициализации.\r\n\r\n      2. **Инициализация:**\r\n         - \\`let\\`: Может быть объявлена без инициализации.\r\n         - \\`const\\`: Должна быть инициализирована при объявлении.\r\n\r\n      3. **Объекты и массивы:**\r\n         - \\`const\\`: Защищает только ссылку на объект или массив, но не их содержимое.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      let a = 10;\r\n      a = 20; // Можно переопределить\r\n\r\n      const b = 30;\r\n      b = 40; // TypeError: Assignment to constant variable\r\n\r\n      const obj = { name: 'Alice' };\r\n      obj.name = 'Bob'; // Можно изменить свойство\r\n      console.log(obj.name); // Bob\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100404,\r\n      question: \"Что такое hoisting и как он работает с var, let и const?\",\r\n      answer: `\r\n      **Hoisting (поднятие):**\r\n      - Это механизм, при котором объявления переменных и функций \"поднимаются\" в начало своей области видимости.\r\n\r\n      1. **var:**\r\n         - Поднимается, но значение становится \\`undefined\\`.\r\n         \\`\\`\\`javascript\r\n         console.log(a); // undefined\r\n         var a = 10;\r\n         \\`\\`\\`\r\n\r\n      2. **let и const:**\r\n         - Поднимаются, но находятся в \"временной мертвой зоне\" (TDZ) до инициализации.\r\n         \\`\\`\\`javascript\r\n         console.log(b); // ReferenceError: Cannot access 'b' before initialization\r\n         let b = 20;\r\n\r\n         console.log(c); // ReferenceError: Cannot access 'c' before initialization\r\n         const c = 30;\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100405,\r\n      question: \"Какие ошибки могут возникнуть при использовании var?\",\r\n      answer: `\r\n      **Ошибки при использовании var:**\r\n\r\n      1. **Глобальное загрязнение:**\r\n         - \\`var\\` может случайно создать глобальную переменную, если используется вне функции.\r\n\r\n      2. **Переопределение:**\r\n         - \\`var\\` позволяет повторное объявление, что может привести к непредсказуемым результатам.\r\n\r\n      3. **Hoisting:**\r\n         - Из-за hoisting переменные могут быть доступны до их объявления, что усложняет отладку.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      var x = 10;\r\n      var x = 20; // Нет ошибки, но это может быть нежелательно\r\n\r\n      function example() {\r\n        console.log(y); // undefined (из-за hoisting)\r\n        var y = 30;\r\n      }\r\n      example();\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100406,\r\n      question: \"Почему рекомендуется использовать let и const вместо var?\",\r\n      answer: `\r\n      **Почему let и const лучше var:**\r\n\r\n      1. **Блочная область видимости:**\r\n         - \\`let\\` и \\`const\\` ограничивают переменные блоком (\\`{ }\\`), что делает код более предсказуемым.\r\n\r\n      2. **Защита от переопределения:**\r\n         - \\`const\\` защищает от случайного изменения значений.\r\n\r\n      3. **Отсутствие глобального загрязнения:**\r\n         - \\`let\\` и \\`const\\` не создают глобальных переменных случайно.\r\n\r\n      4. **Меньше ошибок из-за hoisting:**\r\n         - \\`let\\` и \\`const\\` находятся в TDZ, что помогает избежать использования переменных до их объявления.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      if (true) {\r\n        var a = 10; // Глобально доступна\r\n        let b = 20; // Доступна только внутри блока\r\n      }\r\n      console.log(a); // 10\r\n      console.log(b); // ReferenceError: b is not defined\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100407,\r\n      question: \"Можно ли изменить значение const?\",\r\n      answer: `\r\n      **Изменение значения const:**\r\n      - Нет, значение \\`const\\` нельзя переопределить после инициализации.\r\n      - Однако, если \\`const\\` ссылается на объект или массив, их содержимое можно изменить.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const number = 10;\r\n      number = 20; // TypeError: Assignment to constant variable\r\n\r\n      const obj = { name: 'Alice' };\r\n      obj.name = 'Bob'; // Можно изменить свойство\r\n      console.log(obj.name); // Bob\r\n\r\n      const arr = [1, 2, 3];\r\n      arr.push(4); // Можно изменить массив\r\n      console.log(arr); // [1, 2, 3, 4]\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100408,\r\n      question: \"Как работает временная мертвая зона (TDZ)?\",\r\n      answer: `\r\n      **Временная мертвая зона (TDZ):**\r\n      - Это состояние, при котором переменные \\`let\\` и \\`const\\` недоступны до их объявления.\r\n      - Они \"поднимаются\", но находятся в TDZ до инициализации.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      console.log(a); // ReferenceError: Cannot access 'a' before initialization\r\n      let a = 10;\r\n\r\n      console.log(b); // ReferenceError: Cannot access 'b' before initialization\r\n      const b = 20;\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100409,\r\n      question: \"Как выбрать между let и const?\",\r\n      answer: `\r\n      **Выбор между let и const:**\r\n\r\n      1. **Используйте const по умолчанию:**\r\n         - Если значение не будет меняться, используйте \\`const\\`.\r\n\r\n      2. **Используйте let, если значение может измениться:**\r\n         - Если значение переменной должно быть переопределено, используйте \\`let\\`.\r\n\r\n      3. **Избегайте var:**\r\n         - \\`var\\` устарел и может привести к ошибкам.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const pi = 3.14; // Значение не меняется\r\n      let count = 0;   // Значение может меняться\r\n      count++;\r\n      console.log(count); // 1\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testEquality = {\r\n  id: 100525,\r\n  title: \"Equality (Равенство)\",\r\n  questions: [\r\n    {\r\n      id: 100526,\r\n      question: \"Что такое оператор строгого равенства (===)?\",\r\n      answer: `\r\n      **Оператор строгого равенства (\\`===\\`):**\r\n      - Проверяет, равны ли два значения без преобразования типов.\r\n      - Возвращает \\`true\\`, если значения и их типы одинаковы.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      console.log(5 === 5); // true\r\n      console.log(5 === '5'); // false (разные типы)\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100527,\r\n      question: \"Что такое оператор нестрогого равенства (==)?\",\r\n      answer: `\r\n      **Оператор нестрогого равенства (\\`==\\`):**\r\n      - Проверяет, равны ли два значения с преобразованием типов.\r\n      - Может привести к неожиданным результатам из-за неявного преобразования.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      console.log(5 == '5'); // true (строка '5' преобразуется в число 5)\r\n      console.log(false == 0); // true (false преобразуется в 0)\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100528,\r\n      question: \"Как работает метод Object.is?\",\r\n      answer: `\r\n      **Метод \\`Object.is\\`:**\r\n      - Проверяет, являются ли два значения одинаковыми.\r\n      - Отличается от \\`===\\` в случаях:\r\n        - \\`NaN\\`: \\`Object.is(NaN, NaN)\\` возвращает \\`true\\`.\r\n        - \\`-0\\` и \\`+0\\`: \\`Object.is(-0, +0)\\` возвращает \\`false\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      console.log(Object.is(NaN, NaN)); // true\r\n      console.log(Object.is(-0, +0)); // false\r\n      console.log(Object.is(5, 5)); // true\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100529,\r\n      question: \"Какие различия между ==, === и Object.is?\",\r\n      answer: `\r\n      **Различия:**\r\n      1. \\`==\\`:\r\n         - Выполняет неявное преобразование типов.\r\n         - Пример: \\`5 == '5'\\` → \\`true\\`.\r\n\r\n      2. \\`===\\`:\r\n         - Не выполняет преобразование типов.\r\n         - Пример: \\`5 === '5'\\` → \\`false\\`.\r\n\r\n      3. \\`Object.is\\`:\r\n         - Аналогично \\`===\\`, но правильно обрабатывает \\`NaN\\` и \\`-0\\`/ \\`+0\\`.\r\n         - Пример: \\`Object.is(NaN, NaN)\\` → \\`true\\`.\r\n\r\n      **Таблица сравнения:**\r\n      | Операция          | Результат   |\r\n      |-------------------|-------------|\r\n      | \\`5 == '5'\\`       | \\`true\\`    |\r\n      | \\`5 === '5'\\`      | \\`false\\`   |\r\n      | \\`Object.is(NaN, NaN)\\` | \\`true\\` |\r\n      | \\`Object.is(-0, +0)\\` | \\`false\\` |\r\n      `,\r\n    },\r\n    {\r\n      id: 100530,\r\n      question: \"Почему NaN не равно NaN при использовании == или ===?\",\r\n      answer: `\r\n      **Причины:**\r\n      - Согласно спецификации IEEE 754, \\`NaN\\` определяется как значение, которое не равно ничему, включая само себя.\r\n      - Это поведение сохраняется в \\`==\\` и \\`===\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      console.log(NaN == NaN); // false\r\n      console.log(NaN === NaN); // false\r\n      \\`\\`\\`\r\n\r\n      **Решение:**\r\n      - Используйте \\`Object.is(NaN, NaN)\\` или метод \\`isNaN()\\`.\r\n      `,\r\n    },\r\n    {\r\n      id: 100531,\r\n      question: \"Как проверить, является ли значение NaN?\",\r\n      answer: `\r\n      **Способы проверки:**\r\n      1. \\`isNaN()\\`:\r\n         - Преобразует значение в число перед проверкой.\r\n         - Может дать ложноположительные результаты для нечисловых значений.\r\n\r\n      2. \\`Number.isNaN()\\`:\r\n         - Проверяет, является ли значение именно \\`NaN\\`.\r\n         - Без преобразования типов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      console.log(isNaN('abc')); // true (не рекомендуется)\r\n      console.log(Number.isNaN('abc')); // false\r\n      console.log(Number.isNaN(NaN)); // true\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100532,\r\n      question: \"Как сравнить два объекта на равенство?\",\r\n      answer: `\r\n      **Сравнение объектов:**\r\n      - \\`==\\` и \\`===\\` сравнивают ссылки, а не содержимое.\r\n      - Для глубокого сравнения используйте рекурсивную функцию или библиотеки (например, Lodash).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const obj1 = { a: 1 };\r\n      const obj2 = { a: 1 };\r\n\r\n      console.log(obj1 === obj2); // false (разные ссылки)\r\n      console.log(JSON.stringify(obj1) === JSON.stringify(obj2)); // true (сравнение строк)\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100533,\r\n      question: \"Что такое глубокое сравнение объектов?\",\r\n      answer: `\r\n      **Глубокое сравнение:**\r\n      - Проверяет равенство всех свойств объектов, включая вложенные.\r\n      - Требует рекурсивной проверки.\r\n\r\n      **Пример реализации:**\r\n      \\`\\`\\`javascript\r\n      function deepEqual(obj1, obj2) {\r\n        if (obj1 === obj2) return true;\r\n\r\n        if (typeof obj1 !== 'object' || obj1 === null || typeof obj2 !== 'object' || obj2 === null) {\r\n          return false;\r\n        }\r\n\r\n        const keys1 = Object.keys(obj1);\r\n        const keys2 = Object.keys(obj2);\r\n\r\n        if (keys1.length !== keys2.length) return false;\r\n\r\n        for (const key of keys1) {\r\n          if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      const obj1 = { a: 1, b: { c: 2 } };\r\n      const obj2 = { a: 1, b: { c: 2 } };\r\n      console.log(deepEqual(obj1, obj2)); // true\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100534,\r\n      question: \"Как сравнить массивы на равенство?\",\r\n      answer: `\r\n      **Сравнение массивов:**\r\n      - \\`==\\` и \\`===\\` сравнивают ссылки, а не содержимое.\r\n      - Для сравнения содержимого используйте методы, такие как \\`JSON.stringify()\\` или циклы.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const arr1 = [1, 2, 3];\r\n      const arr2 = [1, 2, 3];\r\n\r\n      console.log(arr1 === arr2); // false (разные ссылки)\r\n      console.log(JSON.stringify(arr1) === JSON.stringify(arr2)); // true\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100535,\r\n      question:\r\n        \"Что такое ложные значения (falsy values) и как они влияют на равенство?\",\r\n      answer: `\r\n      **Ложные значения:**\r\n      - Значения, которые становятся \\`false\\` при приведении к булевому типу.\r\n      - Примеры: \\`false\\`, \\`0\\`, \\`''\\` (пустая строка), \\`null\\`, \\`undefined\\`, \\`NaN\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      console.log(0 == false); // true\r\n      console.log('' == false); // true\r\n      console.log(null == undefined); // true\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testFunctions = {\r\n  id: 100550,\r\n  title: \"Functions (функции)\",\r\n  questions: [\r\n    {\r\n      id: 100551,\r\n      question: \"Что такое функция в JavaScript?\",\r\n      answer: `\r\n      **Функция** — это блок кода, который можно вызывать многократно для выполнения определенной задачи.\r\n      - Функции могут принимать параметры и возвращать значения.\r\n      - В JavaScript функции являются объектами первого класса (first-class objects), что означает, что их можно передавать как аргументы, возвращать из других функций и присваивать переменным.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function greet(name) {\r\n        return \\`Hello, \\${name}!\\`;\r\n      }\r\n\r\n      console.log(greet('Alice')); // Hello, Alice!\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100552,\r\n      question: \"Какие способы объявления функций существуют?\",\r\n      answer: `\r\n      **Способы объявления функций:**\r\n      1. **Function Declaration (Объявление функции):**\r\n         - Объявляется с помощью ключевого слова \\`function\\`.\r\n         - Поднимается (hoisting).\r\n         \\`\\`\\`javascript\r\n         function add(a, b) {\r\n           return a + b;\r\n         }\r\n         \\`\\`\\`\r\n\r\n      2. **Function Expression (Функциональное выражение):**\r\n         - Присваивается переменной.\r\n         - Не поднимается.\r\n         \\`\\`\\`javascript\r\n         const multiply = function (a, b) {\r\n           return a * b;\r\n         };\r\n         \\`\\`\\`\r\n\r\n      3. **Arrow Function (Стрелочная функция):**\r\n         - Имеет сокращенный синтаксис.\r\n         - Нет своего \\`this\\`.\r\n         \\`\\`\\`javascript\r\n         const divide = (a, b) => a / b;\r\n         \\`\\`\\`\r\n\r\n      4. **Immediately Invoked Function Expression (IIFE):**\r\n         - Функция, которая выполняется сразу после объявления.\r\n         \\`\\`\\`javascript\r\n         (function () {\r\n           console.log('IIFE executed');\r\n         })();\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100553,\r\n      question: \"Что такое параметры и аргументы функции?\",\r\n      answer: `\r\n      **Параметры и аргументы:**\r\n      - **Параметры:** Переменные, указанные в объявлении функции.\r\n      - **Аргументы:** Значения, передаваемые при вызове функции.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function greet(name, age) {\r\n        console.log(\\`Hello, my name is \\${name} and I am \\${age} years old.\\`);\r\n      }\r\n\r\n      greet('Alice', 30); // name = 'Alice', age = 30\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100554,\r\n      question: \"Что такое возвращаемое значение функции?\",\r\n      answer: `\r\n      **Возвращаемое значение:**\r\n      - Функция может возвращать значение с помощью ключевого слова \\`return\\`.\r\n      - Если \\`return\\` отсутствует, функция возвращает \\`undefined\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function add(a, b) {\r\n        return a + b;\r\n      }\r\n\r\n      console.log(add(2, 3)); // 5\r\n\r\n      function noReturn() {\r\n        console.log('No return value');\r\n      }\r\n\r\n      console.log(noReturn()); // undefined\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100555,\r\n      question: \"Что такое замыкания (closures)?\",\r\n      answer: `\r\n      **Замыкания:**\r\n      - Функция, которая имеет доступ к переменным из своей внешней области видимости, даже после завершения работы внешней функции.\r\n      - Часто используется для создания приватных переменных или каррирования.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function createCounter() {\r\n        let count = 0;\r\n        return function () {\r\n          count++;\r\n          return count;\r\n        };\r\n      }\r\n\r\n      const counter = createCounter();\r\n      console.log(counter()); // 1\r\n      console.log(counter()); // 2\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100556,\r\n      question: \"Что такое рекурсия?\",\r\n      answer: `\r\n      **Рекурсия:**\r\n      - Функция вызывает саму себя для решения подзадач.\r\n      - Рекурсия должна иметь базовый случай, чтобы избежать бесконечного цикла.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function factorial(n) {\r\n        if (n === 0) {\r\n          return 1; // Базовый случай\r\n        } else {\r\n          return n * factorial(n - 1); // Рекурсивный случай\r\n        }\r\n      }\r\n\r\n      console.log(factorial(5)); // 120\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100557,\r\n      question: \"Что такое функции высшего порядка?\",\r\n      answer: `\r\n      **Функции высшего порядка:**\r\n      - Функции, которые принимают другие функции в качестве аргументов или возвращают их в качестве результата.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function applyOperation(a, b, operation) {\r\n        return operation(a, b);\r\n      }\r\n\r\n      const add = (x, y) => x + y;\r\n      const multiply = (x, y) => x * y;\r\n\r\n      console.log(applyOperation(2, 3, add));      // 5\r\n      console.log(applyOperation(2, 3, multiply)); // 6\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100558,\r\n      question: \"Чем стрелочные функции отличаются от обычных?\",\r\n      answer: `\r\n      **Отличия стрелочных функций:**\r\n      1. **Синтаксис:**\r\n         - Стрелочные функции имеют более короткий синтаксис.\r\n         \\`\\`\\`javascript\r\n         const square = (x) => x * x;\r\n         \\`\\`\\`\r\n\r\n      2. **Нет своего \\`this\\`:**\r\n         - \\`this\\` берется из внешнего лексического окружения.\r\n         \\`\\`\\`javascript\r\n         const obj = {\r\n           value: 42,\r\n           regularFunction: function () {\r\n             console.log(this.value);\r\n           },\r\n           arrowFunction: () => {\r\n             console.log(this.value);\r\n           },\r\n         };\r\n\r\n         obj.regularFunction(); // 42\r\n         obj.arrowFunction();   // undefined\r\n         \\`\\`\\`\r\n\r\n      3. **Не могут быть использованы как конструкторы:**\r\n         - Вызов \\`new\\` с стрелочной функцией вызовет ошибку.\r\n         \\`\\`\\`javascript\r\n         const ArrowFunc = () => {};\r\n         new ArrowFunc(); // TypeError: ArrowFunc is not a constructor\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100559,\r\n      question: \"Что такое IIFE (Immediately Invoked Function Expression)?\",\r\n      answer: `\r\n      **IIFE (Immediately Invoked Function Expression):**\r\n      - Функция, которая выполняется сразу после объявления.\r\n      - Часто используется для создания изолированной области видимости.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      (function () {\r\n        const secret = 'This is a secret';\r\n        console.log(secret);\r\n      })();\r\n\r\n      console.log(typeof secret); // undefined\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100560,\r\n      question: \"Что такое каррирование?\",\r\n      answer: `\r\n      **Каррирование:**\r\n      - Преобразование функции с несколькими аргументами в последовательность функций, каждая из которых принимает один аргумент.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function curry(fn) {\r\n        return function curried(...args) {\r\n          if (args.length >= fn.length) {\r\n            return fn.apply(this, args);\r\n          } else {\r\n            return function (...nextArgs) {\r\n              return curried.apply(this, args.concat(nextArgs));\r\n            };\r\n          }\r\n        };\r\n      }\r\n\r\n      function add(a, b, c) {\r\n        return a + b + c;\r\n      }\r\n\r\n      const curriedAdd = curry(add);\r\n      console.log(curriedAdd(1)(2)(3)); // 6\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testIIFE = {\r\n  id: 101150,\r\n  title: \"IIFE\",\r\n  questions: [\r\n    {\r\n      id: 101151,\r\n      question: \"Что такое IIFE?\",\r\n      answer: `\r\n      **IIFE (Immediately Invoked Function Expression):**\r\n      - Это функция, которая выполняется сразу после своего определения.\r\n      - Используется для создания изолированной области видимости, чтобы избежать загрязнения глобальной области.\r\n\r\n      **Синтаксис:**\r\n      \\`\\`\\`javascript\r\n      (function() {\r\n        console.log('Эта функция выполнится сразу');\r\n      })();\r\n      \\`\\`\\`\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      (function () {\r\n        const message = 'Hello, IIFE!';\r\n        console.log(message); // 'Hello, IIFE!'\r\n      })();\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101152,\r\n      question: \"Зачем нужен IIFE?\",\r\n      answer: `\r\n      **Цели использования IIFE:**\r\n      1. **Изоляция переменных:**\r\n         - Переменные внутри IIFE не попадают в глобальную область видимости.\r\n         - Это помогает избежать конфликтов имен.\r\n\r\n      2. **Мгновенное выполнение кода:**\r\n         - Код внутри IIFE выполняется сразу после его определения.\r\n\r\n      3. **Защита данных:**\r\n         - IIFE может использоваться для создания закрытых данных, недоступных извне.\r\n\r\n      **Пример изоляции переменных:**\r\n      \\`\\`\\`javascript\r\n      (function () {\r\n        const secret = 'Это секрет';\r\n        console.log(secret); // 'Это секрет'\r\n      })();\r\n\r\n      console.log(secret); // ReferenceError: secret is not defined\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101153,\r\n      question: \"Как передать аргументы в IIFE?\",\r\n      answer: `\r\n      **Передача аргументов в IIFE:**\r\n      - Аргументы можно передать как обычные параметры функции.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      (function (name, age) {\r\n        console.log(\\`Имя: \\${name}, Возраст: \\${age}\\`);\r\n      })('Alice', 25);\r\n      // Вывод: Имя: Alice, Возраст: 25\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101154,\r\n      question: \"Как вернуть значение из IIFE?\",\r\n      answer: `\r\n      **Возврат значения из IIFE:**\r\n      - IIFE может возвращать значение, которое можно сохранить в переменной.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const result = (function () {\r\n        return 'Результат IIFE';\r\n      })();\r\n\r\n      console.log(result); // 'Результат IIFE'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101155,\r\n      question: \"Как использовать IIFE с асинхронным кодом?\",\r\n      answer: `\r\n      **IIFE с асинхронным кодом:**\r\n      - IIFE может быть асинхронным, если используется \\`async\\`/ \\`await\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      (async function () {\r\n        const response = await fetch('https://api.example.com/data'); \r\n        const data = await response.json();\r\n        console.log(data);\r\n      })();\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101156,\r\n      question: \"Какие альтернативы IIFE существуют в современном JavaScript?\",\r\n      answer: `\r\n      **Альтернативы IIFE:**\r\n      1. **Блоки \\`let\\`/ \\`const\\`:**\r\n         - Создают локальную область видимости без необходимости IIFE.\r\n         \\`\\`\\`javascript\r\n         {\r\n           const message = 'Локальная переменная';\r\n           console.log(message); // 'Локальная переменная'\r\n         }\r\n         console.log(message); // ReferenceError\r\n         \\`\\`\\`\r\n\r\n      2. **Модули ES6:**\r\n         - Модули автоматически имеют изолированную область видимости.\r\n         \\`\\`\\`javascript\r\n         // module.js\r\n         const message = 'Экспортированное сообщение';\r\n         export { message };\r\n\r\n         // main.js\r\n         import { message } from './module.js';\r\n         console.log(message); // 'Экспортированное сообщение'\r\n         \\`\\`\\`\r\n\r\n      3. **Функции:**\r\n         - Обычные функции также могут создавать изолированные области видимости.\r\n         \\`\\`\\`javascript\r\n         function myFunction() {\r\n           const message = 'Локальное сообщение';\r\n           console.log(message);\r\n         }\r\n         myFunction();\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101157,\r\n      question: \"Как работает IIFE с замыканиями?\",\r\n      answer: `\r\n      **IIFE и замыкания:**\r\n      - IIFE может создавать замыкания для хранения состояния.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const counter = (function () {\r\n        let count = 0;\r\n        return {\r\n          increment: function () {\r\n            count++;\r\n            return count;\r\n          },\r\n          decrement: function () {\r\n            count--;\r\n            return count;\r\n          },\r\n        };\r\n      })();\r\n\r\n      console.log(counter.increment()); // 1\r\n      console.log(counter.increment()); // 2\r\n      console.log(counter.decrement()); // 1\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101158,\r\n      question: \"Что произойдет, если не добавить скобки вокруг IIFE?\",\r\n      answer: `\r\n      **Отсутствие скобок:**\r\n      - Без скобок функция будет восприниматься как объявление, а не выражение.\r\n      - Это вызовет ошибку синтаксиса.\r\n\r\n      **Пример ошибки:**\r\n      \\`\\`\\`javascript\r\n      function () {\r\n        console.log('Ошибка');\r\n      }(); // SyntaxError: Unexpected token '('\r\n      \\`\\`\\`\r\n\r\n      **Решение:**\r\n      - Добавьте скобки вокруг функции:\r\n      \\`\\`\\`javascript\r\n      (function () {\r\n        console.log('Работает!');\r\n      })();\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testMapVsForEach = {\r\n  id: 100575,\r\n  title: \"Map и forEach\",\r\n  questions: [\r\n    {\r\n      id: 100576,\r\n      question: \"Что такое метод map?\",\r\n      answer: `\r\n      **Метод \\`map\\`:**\r\n      - Создает новый массив, применяя функцию к каждому элементу исходного массива.\r\n      - Не изменяет исходный массив.\r\n      - Возвращает новый массив с результатами.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const numbers = [1, 2, 3];\r\n      const doubled = numbers.map((num) => num * 2);\r\n\r\n      console.log(doubled); // [2, 4, 6]\r\n      console.log(numbers); // [1, 2, 3] (исходный массив не изменился)\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100577,\r\n      question: \"Что такое метод forEach?\",\r\n      answer: `\r\n      **Метод \\`forEach\\`:**\r\n      - Выполняет функцию для каждого элемента массива.\r\n      - Не создает новый массив.\r\n      - Используется для выполнения действий (например, вывода в консоль), но ничего не возвращает.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const numbers = [1, 2, 3];\r\n      numbers.forEach((num) => console.log(num));\r\n\r\n      // Вывод:\r\n      // 1\r\n      // 2\r\n      // 3\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100578,\r\n      question: \"Какая разница между map и forEach?\",\r\n      answer: `\r\n      **Разница между \\`map\\` и \\`forEach\\`:**\r\n      1. **Возвращаемое значение:**\r\n         - \\`map\\`: Возвращает новый массив с результатами.\r\n         - \\`forEach\\`: Ничего не возвращает (\\`undefined\\`).\r\n\r\n      2. **Изменение исходного массива:**\r\n         - \\`map\\`: Не изменяет исходный массив.\r\n         - \\`forEach\\`: Также не изменяет исходный массив, но используется для побочных эффектов.\r\n\r\n      3. **Цель использования:**\r\n         - \\`map\\`: Когда нужно преобразовать данные и получить новый массив.\r\n         - \\`forEach\\`: Когда нужно выполнить действие для каждого элемента (например, вывести в консоль).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const numbers = [1, 2, 3];\r\n\r\n      // map\r\n      const doubled = numbers.map((num) => num * 2);\r\n      console.log(doubled); // [2, 4, 6]\r\n\r\n      // forEach\r\n      numbers.forEach((num) => console.log(num));\r\n      // Вывод:\r\n      // 1\r\n      // 2\r\n      // 3\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100579,\r\n      question: \"Когда использовать map?\",\r\n      answer: `\r\n      **Когда использовать \\`map\\`:**\r\n      - Когда нужно преобразовать массив в новый массив.\r\n      - Например, для удвоения значений, фильтрации или форматирования данных.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const users = [\r\n        { name: 'Alice', age: 30 },\r\n        { name: 'Bob', age: 25 },\r\n      ];\r\n\r\n      const names = users.map((user) => user.name);\r\n      console.log(names); // ['Alice', 'Bob']\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100580,\r\n      question: \"Когда использовать forEach?\",\r\n      answer: `\r\n      **Когда использовать \\`forEach\\`:**\r\n      - Когда нужно выполнить действие для каждого элемента массива без создания нового массива.\r\n      - Например, для вывода данных в консоль или отправки запросов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const numbers = [1, 2, 3];\r\n      numbers.forEach((num) => {\r\n        console.log(\\`Current number: \\${num}\\`);\r\n      });\r\n\r\n      // Вывод:\r\n      // Current number: 1\r\n      // Current number: 2\r\n      // Current number: 3\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100581,\r\n      question: \"Можно ли заменить map на forEach?\",\r\n      answer: `\r\n      **Ответ:**\r\n      - Да, но это не рекомендуется.\r\n      - \\`forEach\\` не возвращает новый массив, поэтому для имитации \\`map\\` потребуется вручную создавать массив.\r\n\r\n      **Пример замены map на forEach:**\r\n      \\`\\`\\`javascript\r\n      const numbers = [1, 2, 3];\r\n\r\n      // С использованием map\r\n      const doubledMap = numbers.map((num) => num * 2);\r\n      console.log(doubledMap); // [2, 4, 6]\r\n\r\n      // С использованием forEach\r\n      const doubledForEach = [];\r\n      numbers.forEach((num) => {\r\n        doubledForEach.push(num * 2);\r\n      });\r\n      console.log(doubledForEach); // [2, 4, 6]\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100582,\r\n      question: \"Как работает асинхронный код внутри map и forEach?\",\r\n      answer: `\r\n      **Асинхронный код:**\r\n      - \\`map\\` и \\`forEach\\` выполняют функции синхронно, если они не содержат асинхронных операций.\r\n      - Если функция содержит асинхронные операции, порядок выполнения может быть нарушен.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const numbers = [1, 2, 3];\r\n\r\n      // map с асинхронной функцией\r\n      const promises = numbers.map(async (num) => {\r\n        return num * 2;\r\n      });\r\n      console.log(promises); // [Promise, Promise, Promise]\r\n\r\n      // forEach с асинхронной функцией\r\n      numbers.forEach(async (num) => {\r\n        console.log(await Promise.resolve(num * 2));\r\n      });\r\n      // Вывод (порядок может быть нарушен):\r\n      // 2\r\n      // 4\r\n      // 6\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testScope = {\r\n  id: 100775,\r\n  title: \"Scope (Область видимости)\",\r\n  questions: [\r\n    {\r\n      id: 100776,\r\n      question: \"Что такое Scope?\",\r\n      answer: `\r\n      **Scope (область видимости):**\r\n      - Определяет, где переменные и функции доступны в программе.\r\n      - Обеспечивает организацию кода и предотвращает конфликты имен.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      let globalVar = 'I am global';\r\n\r\n      function example() {\r\n        let localVar = 'I am local';\r\n        console.log(globalVar); // Доступно\r\n        console.log(localVar);  // Доступно\r\n      }\r\n\r\n      example();\r\n      console.log(globalVar); // Доступно\r\n      console.log(localVar);  // ReferenceError: localVar is not defined\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100777,\r\n      question: \"Какие есть области видимости?\",\r\n      answer: `\r\n      **Типы областей видимости:**\r\n      1. **Глобальная область видимости:**\r\n         - Переменные доступны везде в программе.\r\n         \\`\\`\\`javascript\r\n         const globalVar = 'Global';\r\n         function example() {\r\n           console.log(globalVar); // Global\r\n         }\r\n         example();\r\n         \\`\\`\\`\r\n\r\n      2. **Функциональная область видимости:**\r\n         - Переменные, объявленные внутри функции, доступны только внутри этой функции.\r\n         \\`\\`\\`javascript\r\n         function example() {\r\n           const funcVar = 'Function scope';\r\n           console.log(funcVar);\r\n         }\r\n         example();\r\n         console.log(funcVar); // ReferenceError: funcVar is not defined\r\n         \\`\\`\\`\r\n\r\n      3. **Блочная область видимости:**\r\n         - Переменные, объявленные с помощью \\`let\\` и \\`const\\`, доступны только внутри блока (\\`{ }\\`).\r\n         \\`\\`\\`javascript\r\n         if (true) {\r\n           const blockVar = 'Block scope';\r\n           console.log(blockVar); // Block scope\r\n         }\r\n         console.log(blockVar); // ReferenceError: blockVar is not defined\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100778,\r\n      question: \"Как Scope влияет на разработку?\",\r\n      answer: `\r\n      **Влияние Scope:**\r\n      1. **Предотвращение конфликтов имен:**\r\n         - Scope ограничивает доступ к переменным, предотвращая случайное переопределение.\r\n         \\`\\`\\`javascript\r\n         let x = 10;\r\n         function example() {\r\n           let x = 20; // Локальная переменная\r\n           console.log(x); // 20\r\n         }\r\n         example();\r\n         console.log(x); // 10\r\n         \\`\\`\\`\r\n\r\n      2. **Организация кода:**\r\n         - Scope помогает структурировать код и изолировать переменные.\r\n\r\n      3. **Отладка:**\r\n         - Понимание Scope помогает находить ошибки, связанные с недоступностью переменных.\r\n      `,\r\n    },\r\n    {\r\n      id: 100779,\r\n      question: \"Scope в контексте замыкания\",\r\n      answer: `\r\n      **Scope и замыкания:**\r\n      - Замыкания позволяют функции сохранять доступ к переменным из внешней области видимости, \r\n        даже после завершения работы родительской функции.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function createCounter() {\r\n        let count = 0;\r\n        return function () {\r\n          count++;\r\n          return count;\r\n        };\r\n      }\r\n\r\n      const counter = createCounter();\r\n      console.log(counter()); // 1\r\n      console.log(counter()); // 2\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100780,\r\n      question: \"Чем отличаются var, let и const в контексте Scope?\",\r\n      answer: `\r\n      **Различия:**\r\n      1. **var:**\r\n         - Имеет функциональную область видимости.\r\n         - Подвержена hoisting.\r\n         \\`\\`\\`javascript\r\n         if (true) {\r\n           var x = 10;\r\n         }\r\n         console.log(x); // 10\r\n         \\`\\`\\`\r\n\r\n      2. **let и const:**\r\n         - Имеют блочную область видимости.\r\n         - Не подвержены hoisting в том же виде, как \\`var\\`.\r\n         \\`\\`\\`javascript\r\n         if (true) {\r\n           let y = 20;\r\n           const z = 30;\r\n         }\r\n         console.log(y); // ReferenceError: y is not defined\r\n         console.log(z); // ReferenceError: z is not defined\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100781,\r\n      question: \"Что такое лексический Scope?\",\r\n      answer: `\r\n      **Лексический Scope:**\r\n      - Scope определяется статически (во время написания кода), а не динамически (во время выполнения).\r\n      - Функции имеют доступ к переменным из области видимости, в которой они были объявлены.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const outerVar = 'I am outside';\r\n\r\n      function outerFunction() {\r\n        const innerVar = 'I am inside';\r\n\r\n        function innerFunction() {\r\n          console.log(outerVar); // I am outside\r\n          console.log(innerVar); // I am inside\r\n        }\r\n\r\n        innerFunction();\r\n      }\r\n\r\n      outerFunction();\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100782,\r\n      question: \"Что такое TDZ (Temporal Dead Zone)?\",\r\n      answer: `\r\n      **TDZ (Temporal Dead Zone):**\r\n      - Это состояние, при котором переменные \\`let\\` и \\`const\\` недоступны до их объявления.\r\n      - Они находятся в TDZ до момента инициализации.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      console.log(a); // ReferenceError: Cannot access 'a' before initialization\r\n      let a = 10;\r\n\r\n      console.log(b); // ReferenceError: Cannot access 'b' before initialization\r\n      const b = 20;\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testMethodsArrays = {\r\n  id: 100825,\r\n  title: \"Arrays (массивы)\",\r\n  questions: [\r\n    {\r\n      id: 100826,\r\n      question: \"Что такое массив в JavaScript?\",\r\n      answer: `\r\n      **Массив** — это упорядоченная коллекция значений, которая может содержать элементы любого типа.\r\n      - Элементы массива нумеруются с нуля.\r\n      - Массивы являются изменяемыми (mutable).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const arr = [1, 'two', true];\r\n      console.log(arr[0]); // 1\r\n      console.log(arr.length); // 3\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100827,\r\n      question: \"Как создать массив?\",\r\n      answer: `\r\n      **Способы создания массива:**\r\n      1. **Литеральный синтаксис:**\r\n         \\`\\`\\`javascript\r\n         const arr = [1, 2, 3];\r\n         \\`\\`\\`\r\n\r\n      2. **Конструктор \\`Array\\`:**\r\n         \\`\\`\\`javascript\r\n         const arr = new Array(1, 2, 3);\r\n         const emptyArr = new Array(5); // Создает массив с 5 пустыми слотами\r\n         \\`\\`\\`\r\n\r\n      3. **Статические методы:**\r\n         \\`\\`\\`javascript\r\n         const arr = Array.of(1, 2, 3); // [1, 2, 3]\r\n         const fromArr = Array.from('hello'); // ['h', 'e', 'l', 'l', 'o']\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100828,\r\n      question: \"Какие методы массивов существуют?\",\r\n      answer: `\r\n      **Основные методы массивов:**\r\n      1. **Добавление/удаление элементов:**\r\n         - \\`push()\\`: Добавляет элемент в конец.\r\n         - \\`pop()\\`: Удаляет последний элемент.\r\n         - \\`unshift()\\`: Добавляет элемент в начало.\r\n         - \\`shift()\\`: Удаляет первый элемент.\r\n         - \\`splice()\\`: Изменяет массив, добавляя/удаляя элементы.\r\n\r\n      2. **Итерация:**\r\n         - \\`forEach()\\`: Выполняет функцию для каждого элемента.\r\n         - \\`map()\\`: Создает новый массив с результатами.\r\n         - \\`filter()\\`: Фильтрует элементы по условию.\r\n         - \\`reduce()\\`: Сводит массив к одному значению.\r\n\r\n      3. **Поиск:**\r\n         - \\`find()\\`: Находит первый элемент, удовлетворяющий условию.\r\n         - \\`findIndex()\\`: Находит индекс первого элемента, удовлетворяющего условию.\r\n         - \\`includes()\\`: Проверяет наличие элемента.\r\n\r\n      4. **Другие:**\r\n         - \\`slice()\\`: Возвращает часть массива.\r\n         - \\`concat()\\`: Объединяет массивы.\r\n         - \\`join()\\`: Преобразует массив в строку.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const arr = [1, 2, 3];\r\n\r\n      arr.push(4); // [1, 2, 3, 4]\r\n      arr.pop();   // [1, 2, 3]\r\n\r\n      const doubled = arr.map((num) => num * 2); // [2, 4, 6]\r\n      const filtered = arr.filter((num) => num > 1); // [2, 3]\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100829,\r\n      question: \"Что такое деструктуризация массива?\",\r\n      answer: `\r\n      **Деструктуризация массива:**\r\n      - Позволяет извлекать значения из массива и присваивать их переменным.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const arr = [1, 2, 3];\r\n      const [first, second] = arr;\r\n\r\n      console.log(first);  // 1\r\n      console.log(second); // 2\r\n\r\n      // Пропуск значений:\r\n      const [a, , c] = arr;\r\n      console.log(a); // 1\r\n      console.log(c); // 3\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100830,\r\n      question: \"Как работает метод reduce?\",\r\n      answer: `\r\n      **Метод \\`reduce\\`:**\r\n      - Сводит массив к одному значению, применяя функцию к каждому элементу.\r\n      - Принимает два аргумента: функцию-аккумулятор и начальное значение.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const numbers = [1, 2, 3, 4];\r\n\r\n      const sum = numbers.reduce((acc, num) => acc + num, 0);\r\n      console.log(sum); // 10\r\n\r\n      const product = numbers.reduce((acc, num) => acc * num, 1);\r\n      console.log(product); // 24\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100831,\r\n      question: \"Как проверить, является ли объект массивом?\",\r\n      answer: `\r\n      **Проверка на массив:**\r\n      - Используйте метод \\`Array.isArray()\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const arr = [1, 2, 3];\r\n      const obj = { key: 'value' };\r\n\r\n      console.log(Array.isArray(arr)); // true\r\n      console.log(Array.isArray(obj)); // false\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100832,\r\n      question: \"Что такое spread оператор для массивов?\",\r\n      answer: `\r\n      **Spread оператор (\\`...\\`):**\r\n      - Позволяет расширять массив или создавать его копию.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const arr1 = [1, 2, 3];\r\n      const arr2 = [...arr1, 4, 5]; // [1, 2, 3, 4, 5]\r\n\r\n      const copy = [...arr1]; // Копия массива\r\n      console.log(copy); // [1, 2, 3]\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100833,\r\n      question: \"Как отсортировать массив?\",\r\n      answer: `\r\n      **Метод \\`sort\\`:**\r\n      - Сортирует массив на месте (изменяет исходный массив).\r\n      - Для чисел используйте функцию сравнения.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const arr = [3, 1, 2];\r\n\r\n      // Сортировка строк:\r\n      const sortedStrings = ['b', 'c', 'a'].sort();\r\n      console.log(sortedStrings); // ['a', 'b', 'c']\r\n\r\n      // Сортировка чисел:\r\n      const sortedNumbers = arr.sort((a, b) => a - b);\r\n      console.log(sortedNumbers); // [1, 2, 3]\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100834,\r\n      question: \"Что такое многомерные массивы?\",\r\n      answer: `\r\n      **Многомерные массивы:**\r\n      - Это массивы, содержащие другие массивы.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const matrix = [\r\n        [1, 2, 3],\r\n        [4, 5, 6],\r\n        [7, 8, 9],\r\n      ];\r\n\r\n      console.log(matrix[0][1]); // 2\r\n      console.log(matrix[2][2]); // 9\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testMethodsObjects = {\r\n  id: 100100,\r\n  title: \"Methods of Objects (методы объекта)\",\r\n  questions: [\r\n    {\r\n      id: 100101,\r\n      question:\r\n        \"Объясните, как работает метод Object.keys и приведите пример его использования.\",\r\n      answer: `\r\n      Метод Object.keys() возвращает массив строк с именами всех собственных перечисляемых (enumerable) свойств объекта.\r\n      const person = {\r\n        name: 'Alice',\r\n        age: 25,\r\n        city: 'Berlin'\r\n      };\r\n      const keys = Object.keys(person);\r\n      console.log(keys); // ['name', 'age', 'city']\r\n      `,\r\n    },\r\n    {\r\n      id: 100102,\r\n      question:\r\n        \"Как с помощью метода reduce можно получить сумму всех чисел в массиве? Напишите пример кода.\",\r\n      answer: `\r\n      Метод reduce() последовательно обрабатывает элементы массива и сводит их к одному значению (например, сумме).\r\n      array.reduce((accumulator, currentValue) => {\r\n        return accumulator + currentValue;\r\n      }, initialValue);\r\n      accumulator — накопленное значение (на каждом шаге добавляется currentValue).\r\n      currentValue — текущий элемент массива.\r\n      initialValue (опционально) — начальное значение аккумулятора (если не указано, берётся первый элемент массива).\r\n      `,\r\n    },\r\n    {\r\n      id: 100103,\r\n      question:\r\n        \"Опишите разницу между методами клонирования объектов в JavaScript и как можно изолировать ссылки при клонировании.\",\r\n      answer: `\r\n      Разница между методами клонирования:\r\n      Поверхностное клонирование (...spread, Object.assign())\r\n      Копирует только первый уровень объекта.\r\n      Вложенные объекты остаются ссылками (изменения в клоне влияют на оригинал).\r\n      Глубокое клонирование (JSON.parse(JSON.stringify()), рекурсивное копирование, lodash.cloneDeep)\r\n      Полностью копирует объект, включая вложенные структуры.\r\n      Изолирует все ссылки (изменения в клоне не затрагивают оригинал).\r\n      Как изолировать ссылки?\r\n      Использовать глубокое клонирование, особенно для объектов с вложенными свойствами.\r\n      Для простых объектов хватит spread или Object.assign().\r\n      Лучший вариант — lodash.cloneDeep (работает с любыми типами данных).\r\n      Вывод:\r\n      Поверхностное = быстро, но не для вложенных объектов.\r\n      Глубокое = надежно, но сложнее (может не поддерживать функции и Date).\r\n      Библиотеки (lodash) = универсальное решение.\r\n      `,\r\n    },\r\n    {\r\n      id: 100104,\r\n      question: \"Какие есть встроенные методы у объектов?\",\r\n      answer: `У объектов есть встроенные методы, такие как hasOwnProperty(), toString(), \r\n      valueOf() и другие. \r\n      Эти методы предоставляют стандартные операции для работы с объектами. `,\r\n    },\r\n    {\r\n      id: 100105,\r\n      question: \"метод Object.entries()\",\r\n      answer: `  **Object.entries():**\r\n      - Возвращает массив пар [ключ, значение] для всех собственных перечисляемых свойств объекта.\r\n      - Полезен для перебора свойств объекта.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const obj = { a: 1, b: 2, c: 3 };\r\n      const entries = Object.entries(obj);\r\n      console.log(entries); // [['a', 1], ['b', 2], ['c', 3]]\r\n\r\n      // Перебор с for...of:\r\n      for (const [key, value] of entries) {\r\n        console.log(\\`\\${key}: \\${value}\\`);\r\n      }\r\n      // Вывод:\r\n      // a: 1\r\n      // b: 2\r\n      // c: 3\r\n      \\`\\`\\``,\r\n    },\r\n    {\r\n      id: 100106,\r\n      question: \"Какие знаешь способы клонирования объектов?\",\r\n      answer: `Существует два основных способа клонирования объектов: поверхностное \r\n      (shallow cloning) и глубокое (deep cloning). Поверхностное клонирование создает копию, \r\n      где вложенные объекты или массивы ссылаются на те же самые объекты в памяти, что и \r\n      оригинальный объект. Глубокое клонирование, напротив, создает полностью независимые копии \r\n      всех вложенных объектов и массивов. \r\n      Поверхностное клонирование:\r\n      Оператор spread (...):\r\n      . С его помощью можно копировать свойства объекта, но не вложенные объекты или массивы, \r\n      которые будут ссылаться на оригинал. \r\n      Object.assign():\r\n      . Аналогично spread, он также создает поверхностную копию, не копируя вложенные объекты. \r\n      Присвоение (=):\r\n      . Простое присваивание создает ссылку, а не копию. \r\n      Глубокое клонирование:\r\n      structuredClone() (в JavaScript):\r\n      . Это наиболее современный и надежный способ глубокого клонирования, который поддерживает \r\n      различные типы данных, включая циклические ссылки. \r\n      JSON (с использованием JSON.stringify() и JSON.parse()):\r\n      . Этот способ хорошо работает для объектов, содержащих только простые типы данных (числа, \r\n      строки, булевы значения), но не поддерживает функции, символы, или вложенные циклические \r\n      ссылки. \r\n      Библиотеки (Lodash, Immutable.js):\r\n      . Эти библиотеки предоставляют функции для глубокого клонирования, которые могут быть \r\n      полезны для работы с более сложными структурами данных. \r\n      Рекурсивные функции (в ручном программировании):\r\n      . можно написать рекурсивную функцию, которая будет копировать объект и все его вложенные \r\n      объекты. `,\r\n    },\r\n    {\r\n      id: 100107,\r\n      question: \"Назови основные методы перебора массивов и объектов\",\r\n      answer: `Перебор массивов:\r\n      forEach(callback(currentValue, index, array)):\r\n      Выполняет заданную функцию один раз для каждого элемента массива. Не возвращает новый массив. \r\n      map(callback(currentValue, index, array)):\r\n      Создаёт новый массив с результатами вызова переданной функции для каждого элемента массива. \r\n      filter(callback(currentValue, index, array)):\r\n      Создаёт новый массив со всеми элементами, прошедшими проверку, заданную в передаваемой функции. \r\n      reduce(callback(accumulator, currentValue, index, array), initialValue):\r\n      Применяет функцию-редьюсер к каждому элементу массива, приводя его к единственному выходному значению. \r\n      every(callback(currentValue, index, array)):\r\n      Проверяет, удовлетворяют ли все элементы массива условию, заданному в функции. Возвращает true или false. \r\n      some(callback(currentValue, index, array)):\r\n      Проверяет, удовлетворяет ли хотя бы один элемент массива условию, заданному в функции. Возвращает true или false. \r\n      Цикл for:\r\n      Классический цикл, позволяющий перебирать элементы по индексу. \r\n      Цикл for...of:\r\n      Позволяет перебирать значения элементов массива. \r\n      Перебор объектов:\r\n      Цикл for...in:\r\n      Перебирает перечисляемые свойства объекта.\r\n      Цикл for...of:\r\n      Позволяет перебирать значения свойств объекта, если свойства объекта являются итерируемыми.\r\n      Object.keys(object):\r\n      Возвращает массив, содержащий имена (ключи) собственных перечисляемых свойств объекта.\r\n      Object.values(object):\r\n      Возвращает массив, содержащий значения собственных перечисляемых свойств объекта.\r\n      Object.entries(object):\r\n      Возвращает массив, содержащий массивы пар [ключ, значение] для собственных перечисляемых свойств объекта. `,\r\n    },\r\n    {\r\n      id: 100108,\r\n      question: \"В чём разница между Object.GetOwnPropertyNames и Object.Keys?\",\r\n      answer: `Object.getOwnPropertyNames() и Object.keys() оба возвращают массив \r\n      ключей объекта, но есть ключевое различие: Object.getOwnPropertyNames() возвращает все \r\n      собственные (непосредственно принадлежащие объекту) свойства, в то время как Object.keys() \r\n      возвращает только перечисляемые собственные свойства. `,\r\n    },\r\n    {\r\n      id: 100109,\r\n      question: \"Что такое метод объекта?\",\r\n      answer: `Метод объекта - это функция, которая является свойством объекта. \r\n      Он может выполнять действия, связанные с данными объекта, используя this для доступа к \r\n      его свойствам.`,\r\n    },\r\n    {\r\n      id: 100110,\r\n      question: \"Как определить метод в объекте?\",\r\n      answer: `Методы определяются как свойства объекта, значениями которых являются функции. \r\n      Например: obj = { method: function() { ... } }. `,\r\n    },\r\n    {\r\n      id: 100111,\r\n      question: \"Как вызвать метод объекта?\",\r\n      answer: `Методы вызываются с помощью оператора точки (.) после имени объекта и имени метода. \r\n      Например: obj.method()`,\r\n    },\r\n    {\r\n      id: 100112,\r\n      question: \"В чем разница между свойством и методом?\",\r\n      answer: `Свойство - это пара \"ключ: значение\" в объекте, где значением может быть любое \r\n      значение, включая функцию. \r\n      Метод - это функция, которая является свойством объекта. \r\n      Свойство хранит данные, а метод выполняет действия. `,\r\n    },\r\n    {\r\n      id: 100113,\r\n      question: \"Как проверить наличие метода в объекте?\",\r\n      answer: `Можно использовать оператор in или метод hasOwnProperty() для проверки \r\n      существования свойства (включая методы) в объекте. \r\n      Например: if ('method' in obj) { ... } или if (obj.hasOwnProperty('method')) { ... }. `,\r\n    },\r\n    {\r\n      id: 100114,\r\n      question: \"Могут ли методы содержать другие методы?\",\r\n      answer: `Да, метод может содержать вызовы других методов, в том числе и методов этого же объекта. \r\n      Это позволяет создавать сложные иерархии методов и логику обработки данных. `,\r\n    },\r\n    {\r\n      id: 100115,\r\n      question: \"Может ли метод быть переопределен?\",\r\n      answer: `Да, метод объекта может быть переопределен, если его имя совпадает с именем \r\n      существующего метода в прототипе объекта. \r\n      При переопределении важно учитывать область видимости и порядок наследования. `,\r\n    },\r\n    {\r\n      id: 100116,\r\n      question: \"Как передать аргументы в метод?\",\r\n      answer: `Аргументы передаются в метод, как в обычную функцию, после имени метода и \r\n      в скобках, разделяя их запятыми. \r\n      Например: obj.method(arg1, arg2). `,\r\n    },\r\n    {\r\n      id: 100117,\r\n      question: \"Какие методы объектов существуют в JavaScript?\",\r\n      answer: `\r\n      **Основные методы объектов:**\r\n      1. **Object.keys(obj):** Возвращает массив ключей объекта.\r\n        \\`\\`\\`javascript\r\n        const obj = { a: 1, b: 2 };\r\n        console.log(Object.keys(obj)); // ['a', 'b']\r\n        \\`\\`\\`\r\n\r\n      2. **Object.values(obj):** Возвращает массив значений объекта.\r\n        \\`\\`\\`javascript\r\n        console.log(Object.values(obj)); // [1, 2]\r\n        \\`\\`\\`\r\n\r\n      3. **Object.entries(obj):** Возвращает массив пар [ключ, значение].\r\n        \\`\\`\\`javascript\r\n        console.log(Object.entries(obj)); // [['a', 1], ['b', 2]]\r\n        \\`\\`\\`\r\n\r\n      4. **Object.assign(target, ...sources):** Копирует свойства из исходных объектов в целевой.\r\n        \\`\\`\\`javascript\r\n        const target = { a: 1 };\r\n        const source = { b: 2 };\r\n        Object.assign(target, source);\r\n        console.log(target); // { a: 1, b: 2 }\r\n        \\`\\`\\`\r\n\r\n      5. **Object.freeze(obj):** Замораживает объект (предотвращает изменения).\r\n        \\`\\`\\`javascript\r\n        const frozen = Object.freeze({ a: 1 });\r\n        frozen.a = 2; // Не изменится\r\n        console.log(frozen.a); // 1\r\n        \\`\\`\\`\r\n\r\n      6. **Object.seal(obj):** Запечатывает объект (предотвращает добавление/удаление свойств).\r\n        \\`\\`\\`javascript\r\n        const sealed = Object.seal({ a: 1 });\r\n        sealed.b = 2; // Не добавится\r\n        console.log(sealed); // { a: 1 }\r\n        \\`\\`\\`\r\n\r\n      7. **Object.getPrototypeOf(obj):** Возвращает прототип объекта.\r\n        \\`\\`\\`javascript\r\n        const proto = { x: 10 };\r\n        const obj = Object.create(proto);\r\n        console.log(Object.getPrototypeOf(obj) === proto); // true\r\n        \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testNullVsUndefined = {\r\n  id: 100600,\r\n  title: \"null и undefined\",\r\n  questions: [\r\n    {\r\n      id: 100601,\r\n      question: \"Что такое null и undefined в JavaScript?\",\r\n      answer: `\r\n**null:**\r\n- Представляет собой намеренно отсутствующее или пустое значение.\r\n- Является объектом по типу данных (это историческая особенность языка).\r\n\r\n**undefined:**\r\n- Указывает, что переменная объявлена, но не инициализирована.\r\n- Является примитивным типом данных.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nlet emptyValue = null; // Явно заданное пустое значение\r\nlet uninitializedValue; // undefined (не инициализировано)\r\nconsole.log(emptyValue); // null\r\nconsole.log(uninitializedValue); // undefined\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100602,\r\n      question: \"В чем разница между null и undefined?\",\r\n      answer: `\r\n**Разница:**\r\n1. **Значение:**\r\n   - \\`null\\`: Представляет собой явно заданное \"пустое\" значение.\r\n   - \\`undefined\\`: Указывает на неинициализированное значение.\r\n2. **Тип данных:**\r\n   - \\`typeof null\\` возвращает \\`\"object\"\\` (историческая ошибка).\r\n   - \\`typeof undefined\\` возвращает \\`\"undefined\"\\`.\r\n3. **Использование:**\r\n   - \\`null\\`: Используется для обозначения отсутствия значения.\r\n   - \\`undefined\\`: Автоматически присваивается неинициализированным переменным.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconsole.log(typeof null); // \"object\"\r\nconsole.log(typeof undefined); // \"undefined\"\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100603,\r\n      question: \"Как проверить, является ли значение null или undefined?\",\r\n      answer: `\r\n**Проверка:**\r\n1. **Строгое сравнение:**\r\n   - Сравнивайте с \\`null\\` или \\`undefined\\` через \\`===\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst value = null;\r\nif (value === null) {\r\n  console.log('Value is null');\r\n}\r\nif (value === undefined) {\r\n  console.log('Value is undefined');\r\n}\r\n\\`\\`\\`\r\n\r\n2. **Объединение проверок:**\r\n   - Используйте логическое выражение \\`value == null\\`, которое проверяет как \\`null\\`, так и \\`undefined\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst value = undefined;\r\nif (value == null) {\r\n  console.log('Value is null or undefined');\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100604,\r\n      question: \"Как работает оператор ?? (nullish coalescing)?\",\r\n      answer: `\r\n**Оператор \\`??\\`:**\r\n- Возвращает правый операнд, если левый равен \\`null\\` или \\`undefined\\`.\r\n- Игнорирует такие значения, как \\`false\\`, \\`0\\`, \\`''\\` (пустая строка).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst value = null;\r\nconst result = value ?? 'Default';\r\nconsole.log(result); // 'Default'\r\n\r\nconst number = 0;\r\nconst result2 = number ?? 42;\r\nconsole.log(result2); // 0 (не заменяется)\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100605,\r\n      question: \"Как использовать null и undefined в условиях?\",\r\n      answer: `\r\n**Использование в условиях:**\r\n- \\`null\\` и \\`undefined\\` считаются \"ложными\" (\\`falsy\\`) значениями.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst value = null;\r\n\r\nif (!value) {\r\n  console.log('Value is null or undefined'); // Выполнится\r\n}\r\n\r\nconst definedValue = 'Hello';\r\nif (definedValue) {\r\n  console.log('Value is defined'); // Выполнится\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testMemo = {\r\n  id: 100650,\r\n  title: \"Memoization (мемоизация)\",\r\n  questions: [\r\n    {\r\n      id: 100651,\r\n      question: \"Что такое мемоизация?\",\r\n      answer: `\r\n      **Мемоизация** — это техника оптимизации, при которой результаты вычислений сохраняются в кэше.\r\n      Если функция вызывается с теми же входными данными, результат берется из кэша вместо повторного вычисления.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function memoize(fn) {\r\n        const cache = {};\r\n        return function (...args) {\r\n          const key = JSON.stringify(args);\r\n          if (cache[key]) {\r\n            console.log('Используется кэш');\r\n            return cache[key];\r\n          }\r\n          const result = fn(...args);\r\n          cache[key] = result;\r\n          return result;\r\n        };\r\n      }\r\n\r\n      function add(a, b) {\r\n        console.log('Выполняется вычисление');\r\n        return a + b;\r\n      }\r\n\r\n      const memoizedAdd = memoize(add);\r\n\r\n      console.log(memoizedAdd(2, 3)); // Выполняется вычисление, 5\r\n      console.log(memoizedAdd(2, 3)); // Используется кэш, 5\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100652,\r\n      question: \"Зачем нужна мемоизация?\",\r\n      answer: `\r\n      **Цели мемоизации:**\r\n      1. **Оптимизация производительности:**\r\n         - Повторное использование результатов для одних и тех же входных данных.\r\n         - Уменьшение количества вычислений.\r\n\r\n      2. **Сокращение времени выполнения:**\r\n         - Особенно полезно для рекурсивных функций (например, вычисление чисел Фибоначчи).\r\n\r\n      3. **Экономия ресурсов:**\r\n         - Уменьшение нагрузки на процессор и память.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function fibonacci(n) {\r\n        if (n <= 1) return n;\r\n        return fibonacci(n - 1) + fibonacci(n - 2);\r\n      }\r\n\r\n      const memoizedFibonacci = memoize(fibonacci);\r\n\r\n      console.log(memoizedFibonacci(10)); // Быстрее благодаря кэшированию\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100653,\r\n      question: \"Как реализовать мемоизацию в JavaScript?\",\r\n      answer: `\r\n      **Реализация мемоизации:**\r\n      - Создайте кэш (обычно объект).\r\n      - При вызове функции проверяйте, есть ли результат в кэше.\r\n      - Если результат есть, возвращайте его.\r\n      - Если нет, выполняйте вычисления и сохраняйте результат в кэш.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function memoize(fn) {\r\n        const cache = {};\r\n        return function (...args) {\r\n          const key = JSON.stringify(args);\r\n          if (key in cache) {\r\n            return cache[key];\r\n          }\r\n          const result = fn.apply(this, args);\r\n          cache[key] = result;\r\n          return result;\r\n        };\r\n      }\r\n\r\n      function factorial(n) {\r\n        if (n === 0) return 1;\r\n        return n * factorial(n - 1);\r\n      }\r\n\r\n      const memoizedFactorial = memoize(factorial);\r\n\r\n      console.log(memoizedFactorial(5)); // 120\r\n      console.log(memoizedFactorial(5)); // Из кэша\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100654,\r\n      question: \"Какие ограничения у мемоизации?\",\r\n      answer: `\r\n      **Ограничения мемоизации:**\r\n      1. **Память:**\r\n         - Кэш занимает место в памяти, что может быть проблемой для больших объемов данных.\r\n\r\n      2. **Изменяемые данные:**\r\n         - Мемоизация работает только с чистыми функциями (без побочных эффектов).\r\n\r\n      3. **Ключи кэша:**\r\n         - Нужно правильно сериализовать аргументы для ключей кэша (например, массивы или объекты).\r\n\r\n      **Пример проблемы:**\r\n      \\`\\`\\`javascript\r\n      const memoizedFn = memoize((obj) => Object.keys(obj).length);\r\n\r\n      console.log(memoizedFn({ a: 1 })); // Работает\r\n      console.log(memoizedFn({ a: 1 })); // Не использует кэш (разные ссылки)\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100655,\r\n      question: \"Как использовать мемоизацию в React?\",\r\n      answer: `\r\n      **Мемоизация в React:**\r\n      - В React мемоизация используется для оптимизации рендеринга компонентов.\r\n      - Основные инструменты:\r\n        - \\`React.memo\\` — для мемоизации функциональных компонентов.\r\n        - \\`useMemo\\` — для мемоизации значений.\r\n        - \\`useCallback\\` — для мемоизации функций.\r\n\r\n      **Пример с \\`React.memo\\`:**\r\n      \\`\\`\\`javascript\r\n      import React from 'react';\r\n\r\n      const MyComponent = React.memo(({ value }) => {\r\n        console.log('Rendered');\r\n        return <div>{value}</div>;\r\n      });\r\n\r\n      export default function App() {\r\n        const [count, setCount] = React.useState(0);\r\n\r\n        return (\r\n          <div>\r\n            <button onClick={() => setCount(count + 1)}>Increment</button>\r\n            <MyComponent value={count % 2 === 0 ? 'Even' : 'Odd'} />\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      - Компонент \\`MyComponent\\` перерисовывается только при изменении \\`value\\`.\r\n      `,\r\n    },\r\n    {\r\n      id: 100656,\r\n      question:\r\n        \"Что такое динамическое программирование и как оно связано с мемоизацией?\",\r\n      answer: `\r\n      **Динамическое программирование (DP):**\r\n      - Метод решения задач, который разбивает их на подзадачи и решает каждую подзадачу один раз.\r\n      - Часто использует мемоизацию для хранения промежуточных результатов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function fibonacci(n, memo = {}) {\r\n        if (n in memo) return memo[n];\r\n        if (n <= 1) return n;\r\n        memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\r\n        return memo[n];\r\n      }\r\n\r\n      console.log(fibonacci(50)); // Эффективно благодаря DP и мемоизации\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testHooks = {\r\n  id: 100750,\r\n  title: \"Hooks (Хуки)\",\r\n  questions: [\r\n    {\r\n      id: 100751,\r\n      question: \"Что такое хуки в React?\",\r\n      answer: `\r\n      **Хуки (Hooks):**\r\n      - Это функции, которые позволяют использовать состояние и другие возможности React в функциональных компонентах.\r\n      - Появились в React 16.8 как альтернатива классовым компонентам.\r\n      - Упрощают работу с состоянием и побочными эффектами.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      import React, { useState } from 'react';\r\n\r\n      function Counter() {\r\n        const [count, setCount] = useState(0);\r\n\r\n        return (\r\n          <div>\r\n            <p>Счетчик: {count}</p>\r\n            <button onClick={() => setCount(count + 1)}>Увеличить</button>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100752,\r\n      question: \"Какие основные хуки существуют?\",\r\n      answer: `\r\n      **Основные хуки:**\r\n      1. **useState:**\r\n         - Добавляет состояние в функциональный компонент.\r\n         \\`\\`\\`javascript\r\n         const [state, setState] = useState(initialValue);\r\n         \\`\\`\\`\r\n\r\n      2. **useEffect:**\r\n         - Используется для выполнения побочных эффектов (например, запросы к API).\r\n         \\`\\`\\`javascript\r\n         useEffect(() => {\r\n           console.log('Компонент смонтирован');\r\n           return () => {\r\n             console.log('Компонент размонтирован');\r\n           };\r\n         }, []);\r\n         \\`\\`\\`\r\n\r\n      3. **useContext:**\r\n         - Позволяет использовать контекст для передачи данных между компонентами.\r\n         \\`\\`\\`javascript\r\n         const value = useContext(MyContext);\r\n         \\`\\`\\`\r\n\r\n      4. **useReducer:**\r\n         - Альтернатива \\`useState\\` для сложного состояния.\r\n         \\`\\`\\`javascript\r\n         const [state, dispatch] = useReducer(reducer, initialState);\r\n         \\`\\`\\`\r\n\r\n      5. **useCallback:**\r\n         - Возвращает мемоизированную версию функции.\r\n         \\`\\`\\`javascript\r\n         const memoizedCallback = useCallback(() => {\r\n           doSomething();\r\n         }, [dependencies]);\r\n         \\`\\`\\`\r\n\r\n      6. **useMemo:**\r\n         - Возвращает мемоизированное значение.\r\n         \\`\\`\\`javascript\r\n         const memoizedValue = useMemo(() => computeExpensiveValue(), [dependencies]);\r\n         \\`\\`\\`\r\n\r\n      7. **useRef:**\r\n         - Создает ссылку на DOM-элемент или сохраняет изменяемое значение.\r\n         \\`\\`\\`javascript\r\n         const ref = useRef(initialValue);\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100753,\r\n      question: \"Зачем нужен хук useState?\",\r\n      answer: `\r\n      **Хук \\`useState\\`:**\r\n      - Позволяет добавить состояние в функциональный компонент.\r\n      - Возвращает текущее значение состояния и функцию для его обновления.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      import React, { useState } from 'react';\r\n\r\n      function Toggle() {\r\n        const [isOn, setIsOn] = useState(false);\r\n\r\n        return (\r\n          <button onClick={() => setIsOn(!isOn)}>\r\n            {isOn ? 'Вкл' : 'Выкл'}\r\n          </button>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100754,\r\n      question: \"Как работает хук useEffect?\",\r\n      answer: `\r\n      **Хук \\`useEffect\\`:**\r\n      - Выполняет побочные эффекты после рендеринга компонента.\r\n      - Может использоваться для замены методов жизненного цикла (\\`componentDidMount\\`, \\`componentDidUpdate\\`, \\`componentWillUnmount\\`).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      import React, { useEffect, useState } from 'react';\r\n\r\n      function Example() {\r\n        const [count, setCount] = useState(0);\r\n\r\n        useEffect(() => {\r\n          document.title = \\`Вы нажали \\${count} раз\\`;\r\n        });\r\n\r\n        return (\r\n          <div>\r\n            <p>Вы нажали {count} раз</p>\r\n            <button onClick={() => setCount(count + 1)}>Нажми меня</button>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100755,\r\n      question: \"Что такое хук useContext?\",\r\n      answer: `\r\n      **Хук \\`useContext\\`:**\r\n      - Позволяет подписаться на изменения контекста.\r\n      - Упрощает доступ к данным из контекста без использования \\`Context.Consumer\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      import React, { createContext, useContext } from 'react';\r\n\r\n      const ThemeContext = createContext('light');\r\n\r\n      function ThemedButton() {\r\n        const theme = useContext(ThemeContext);\r\n        return <button style={{ background: theme === 'dark' ? '#333' : '#fff' }}>Кнопка</button>;\r\n      }\r\n\r\n      function App() {\r\n        return (\r\n          <ThemeContext.Provider value=\"dark\">\r\n            <ThemedButton />\r\n          </ThemeContext.Provider>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100756,\r\n      question: \"Как создать собственный хук?\",\r\n      answer: `\r\n      **Создание собственного хука:**\r\n      - Пользовательские хуки позволяют вынести логику в отдельные функции.\r\n      - Название хука должно начинаться с \\`use\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      import { useState, useEffect } from 'react';\r\n\r\n      function useFetch(url) {\r\n        const [data, setData] = useState(null);\r\n\r\n        useEffect(() => {\r\n          fetch(url)\r\n            .then((response) => response.json())\r\n            .then((data) => setData(data));\r\n        }, [url]);\r\n\r\n        return data;\r\n      }\r\n\r\n      function UserList() {\r\n        const users = useFetch('/api/users');\r\n\r\n        return (\r\n          <ul>\r\n            {users?.map((user) => (\r\n              <li key={user.id}>{user.name}</li>\r\n            ))}\r\n          </ul>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100757,\r\n      question: \"Какие правила использования хуков?\",\r\n      answer: `\r\n      **Правила использования хуков:**\r\n      1. **Вызывать хуки только на верхнем уровне:**\r\n         - Не вызывайте хуки внутри циклов, условий или вложенных функций.\r\n      2. **Вызывать хуки только в React-компонентах или пользовательских хуках:**\r\n         - Хуки не должны использоваться вне React-компонентов.\r\n\r\n      Эти правила обеспечивают правильное управление состоянием и эффектами.\r\n      `,\r\n    },\r\n    {\r\n      id: 100758,\r\n      question: \"Чем отличается useCallback от useMemo?\",\r\n      answer: `\r\n      **Разница между \\`useCallback\\` и \\`useMemo\\`:**\r\n      - \\`useCallback\\`: Возвращает мемоизированную **функцию**.\r\n      - \\`useMemo\\`: Возвращает мемоизированное **значение**.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const memoizedFunction = useCallback(() => {\r\n        doSomething();\r\n      }, [dependencies]);\r\n\r\n      const memoizedValue = useMemo(() => computeValue(), [dependencies]);\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100759,\r\n      question: \"Для чего используется хук useRef?\",\r\n      answer: `\r\n      **Хук \\`useRef\\`:**\r\n      - Создает изменяемый объект, который сохраняется между рендерами.\r\n      - Часто используется для доступа к DOM-элементам или хранения изменяемых значений.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      import React, { useRef } from 'react';\r\n\r\n      function TextInputWithFocusButton() {\r\n        const inputRef = useRef(null);\r\n\r\n        const handleFocus = () => {\r\n          inputRef.current.focus();\r\n        };\r\n\r\n        return (\r\n          <>\r\n            <input ref={inputRef} type=\"text\" />\r\n            <button onClick={handleFocus}>Фокус</button>\r\n          </>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testPureComponent = {\r\n  id: 101750,\r\n  title: \"PureComponent (чистый компонент)\",\r\n  questions: [\r\n    {\r\n      id: 101751,\r\n      question: \"Что такое PureComponent?\",\r\n      answer: `\r\n      **React.PureComponent:**\r\n      - Это базовый класс для компонентов React, который автоматически реализует метод \\`shouldComponentUpdate\\` с использованием поверхностного сравнения пропсов и состояния.\r\n      - Если пропсы или состояние не изменились, компонент не будет перерисовываться.\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`javascript\r\n      class DisplayValue extends React.PureComponent {\r\n        render() {\r\n          return <div>{this.props.value}</div>;\r\n        }\r\n      }\r\n\r\n      // Перерисовка произойдет только при изменении \\`value\\`.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101752,\r\n      question: \"Как работает поверхностное сравнение в PureComponent?\",\r\n      answer: `\r\n      **Поверхностное сравнение:**\r\n      - Сравниваются только ссылки на объекты или значения примитивных типов (числа, строки, булевы значения).\r\n      - Если ссылки на объекты или массивы не изменились, компонент считается неизменным.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class MyComponent extends React.PureComponent {\r\n        render() {\r\n          return <div>{this.props.data.title}</div>;\r\n        }\r\n      }\r\n\r\n      const data = { title: 'Hello' };\r\n      ReactDOM.render(<MyComponent data={data} />, document.getElementById('root'));\r\n\r\n      // Изменение данных не вызовет перерисовку, так как ссылка на объект не изменилась:\r\n      data.title = 'World';\r\n      ReactDOM.render(<MyComponent data={data} />, document.getElementById('root'));\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101753,\r\n      question: \"Чем отличается PureComponent от Component?\",\r\n      answer: `\r\n      **Различия:**\r\n      1. **PureComponent:**\r\n         - Автоматически реализует \\`shouldComponentUpdate\\` с поверхностным сравнением.\r\n         - Предотвращает ненужные перерисовки, если пропсы и состояние не изменились.\r\n\r\n      2. **Component:**\r\n         - Не имеет встроенной логики сравнения.\r\n         - Перерисовывается при каждом обновлении, даже если пропсы и состояние не изменились.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class RegularComponent extends React.Component {\r\n        render() {\r\n          console.log('RegularComponent rendered');\r\n          return <div>{this.props.value}</div>;\r\n        }\r\n      }\r\n\r\n      class PureChild extends React.PureComponent {\r\n        render() {\r\n          console.log('PureChild rendered');\r\n          return <div>{this.props.value}</div>;\r\n        }\r\n      }\r\n\r\n      // RegularComponent будет перерисовываться всегда, даже если \\`value\\` не изменился.\r\n      // PureChild будет перерисовываться только при изменении \\`value\\`.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101754,\r\n      question: \"В каких случаях использовать PureComponent?\",\r\n      answer: `\r\n      **Когда использовать:**\r\n      1. **Компоненты с простыми пропсами и состоянием:**\r\n         - Например, отображение текста или чисел.\r\n      2. **Оптимизация производительности:**\r\n         - Когда нужно избежать ненужных перерисовок.\r\n      3. **Автоматическое сравнение:**\r\n         - Когда поверхностное сравнение достаточно для обработки изменений.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class DisplayValue extends React.PureComponent {\r\n        render() {\r\n          return <p>{this.props.value}</p>;\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101755,\r\n      question: \"В каких случаях не использовать PureComponent?\",\r\n      answer: `\r\n      **Когда не использовать:**\r\n      1. **Сложные вложенные структуры данных:**\r\n         - Поверхностное сравнение не работает с вложенными объектами или массивами.\r\n      2. **Глубокое сравнение:**\r\n         - Если требуется проверка на глубокое равенство.\r\n      3. **Изменяемое состояние:**\r\n         - Если компонент изменяет свои пропсы или состояние в методах жизненного цикла.\r\n\r\n      **Пример проблемы:**\r\n      \\`\\`\\`javascript\r\n      class ProblematicComponent extends React.PureComponent {\r\n        state = { data: { value: 0 } };\r\n\r\n        updateData = () => {\r\n          this.state.data.value++;\r\n          this.setState({ data: this.state.data });\r\n        };\r\n\r\n        render() {\r\n          return <div>{this.state.data.value}</div>;\r\n        }\r\n      }\r\n\r\n      // PureComponent не заметит изменения, так как ссылка на \\`data\\` не меняется.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101756,\r\n      question: \"Какие ограничения у PureComponent?\",\r\n      answer: `\r\n      **Ограничения:**\r\n      1. **Поверхностное сравнение:**\r\n         - Не подходит для сложных структур данных (например, вложенных объектов или массивов).\r\n      2. **Изменяемые данные:**\r\n         - Если пропсы или состояние мутируют, PureComponent не сможет обнаружить изменения.\r\n      3. **Производительность:**\r\n         - Для очень больших объектов поверхностное сравнение может быть затратным.\r\n\r\n      **Решение:**\r\n      - Используйте иммутабельность данных.\r\n      - Для сложных случаев используйте \\`React.memo\\` или ручную реализацию \\`shouldComponentUpdate\\`.\r\n      `,\r\n    },\r\n    {\r\n      id: 101757,\r\n      question:\r\n        \"Как создать функциональный компонент с поведением PureComponent?\",\r\n      answer: `\r\n      **React.memo:**\r\n      - Это функциональный аналог PureComponent.\r\n      - Выполняет поверхностное сравнение пропсов и предотвращает ненужные перерисовки.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const MyComponent = React.memo(function MyComponent({ value }) {\r\n        console.log('Rendered');\r\n        return <div>{value}</div>;\r\n      });\r\n\r\n      // Компонент будет перерисовываться только при изменении \\`value\\`.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101758,\r\n      question: \"Как улучшить производительность с помощью PureComponent?\",\r\n      answer: `\r\n      **Способы улучшения:**\r\n      1. **Использование иммутабельности:**\r\n         - Всегда создавайте новые объекты или массивы вместо изменения существующих.\r\n      2. **Ограничение количества перерисовок:**\r\n         - Используйте PureComponent для компонентов, которые часто обновляются.\r\n      3. **Разбиение сложных компонентов:**\r\n         - Разделяйте компоненты на более мелкие, чтобы минимизировать перерисовки.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class ListItem extends React.PureComponent {\r\n        render() {\r\n          return <li>{this.props.text}</li>;\r\n        }\r\n      }\r\n\r\n      class List extends React.Component {\r\n        render() {\r\n          return (\r\n            <ul>\r\n              {this.props.items.map((item) => (\r\n                <ListItem key={item.id} text={item.text} />\r\n              ))}\r\n            </ul>\r\n          );\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101759,\r\n      question:\r\n        \"Что такое shouldComponentUpdate и как он связан с PureComponent?\",\r\n      answer: `\r\n      **shouldComponentUpdate:**\r\n      - Метод жизненного цикла, который определяет, нужно ли перерисовывать компонент.\r\n      - Возвращает \\`true\\` (перерисовать) или \\`false\\` (не перерисовывать).\r\n\r\n      **Связь с PureComponent:**\r\n      - PureComponent автоматически реализует \\`shouldComponentUpdate\\` с поверхностным сравнением пропсов и состояния.\r\n\r\n      **Пример ручной реализации:**\r\n      \\`\\`\\`javascript\r\n      class MyComponent extends React.Component {\r\n        shouldComponentUpdate(nextProps, nextState) {\r\n          return nextProps.value !== this.props.value;\r\n        }\r\n\r\n        render() {\r\n          return <div>{this.props.value}</div>;\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testContext = {\r\n  id: 100975,\r\n  title: \"Context (контекст)\",\r\n  questions: [\r\n    {\r\n      id: 100976,\r\n      question: \"Что такое Context в React?\",\r\n      answer: `\r\n      **Context** — это механизм в React, который позволяет передавать данные через дерево компонентов без необходимости передавать пропсы на каждом уровне.\r\n      - Используется для глобальных данных, таких как темы, аутентификация или локализация.\r\n\r\n      **Пример создания контекста:**\r\n      \\`\\`\\`javascript\r\n      import React from 'react';\r\n\r\n      const ThemeContext = React.createContext('light');\r\n\r\n      function App() {\r\n        return (\r\n          <ThemeContext.Provider value=\"dark\">\r\n            <Toolbar />\r\n          </ThemeContext.Provider>\r\n        );\r\n      }\r\n\r\n      function Toolbar() {\r\n        return <ThemedButton />;\r\n      }\r\n\r\n      function ThemedButton() {\r\n        const theme = React.useContext(ThemeContext);\r\n        return <button style={{ background: theme }}>Кнопка</button>;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100977,\r\n      question: \"Как создать контекст в React?\",\r\n      answer: `\r\n      **Создание контекста:**\r\n      - Используйте \\`React.createContext(defaultValue)\\`.\r\n      - \\`defaultValue\\` используется, если компонент не обернут в провайдер.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const MyContext = React.createContext('default value');\r\n      \\`\\`\\`\r\n\r\n      **Использование провайдера:**\r\n      \\`\\`\\`javascript\r\n      <MyContext.Provider value={/* значение */}>\r\n        {/* Дочерние компоненты */}\r\n      </MyContext.Provider>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100978,\r\n      question: \"Как использовать контекст в функциональных компонентах?\",\r\n      answer: `\r\n      **Использование контекста:**\r\n      - В функциональных компонентах используйте хук \\`useContext\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      import React, { useContext } from 'react';\r\n\r\n      const ThemeContext = React.createContext('light');\r\n\r\n      function ThemedButton() {\r\n        const theme = useContext(ThemeContext);\r\n        return <button style={{ background: theme }}>Кнопка</button>;\r\n      }\r\n\r\n      function App() {\r\n        return (\r\n          <ThemeContext.Provider value=\"dark\">\r\n            <ThemedButton />\r\n          </ThemeContext.Provider>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100979,\r\n      question: \"Как использовать контекст в классовых компонентах?\",\r\n      answer: `\r\n      **Использование контекста:**\r\n      - В классовых компонентах используйте \\`Context.Consumer\\` или \\`this.context\\`.\r\n\r\n      **Пример с \\`Consumer\\`:**\r\n      \\`\\`\\`javascript\r\n      const ThemeContext = React.createContext('light');\r\n\r\n      class ThemedButton extends React.Component {\r\n        render() {\r\n          return (\r\n            <ThemeContext.Consumer>\r\n              {(theme) => <button style={{ background: theme }}>Кнопка</button>}\r\n            </ThemeContext.Consumer>\r\n          );\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n\r\n      **Пример с \\`this.context\\`:**\r\n      \\`\\`\\`javascript\r\n      const ThemeContext = React.createContext('light');\r\n\r\n      class ThemedButton extends React.Component {\r\n        static contextType = ThemeContext;\r\n        render() {\r\n          return <button style={{ background: this.context }}>Кнопка</button>;\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100980,\r\n      question: \"Зачем нужен Context?\",\r\n      answer: `\r\n      **Цели использования:**\r\n      1. **Глобальные данные:**\r\n         - Передача данных, которые нужны во многих компонентах (например, темы, пользовательские данные).\r\n      2. **Упрощение кода:**\r\n         - Избавление от необходимости передавать пропсы через множество уровней.\r\n      3. **Динамические значения:**\r\n         - Возможность обновлять значения контекста с помощью состояния.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const UserContext = React.createContext();\r\n\r\n      function App() {\r\n        const [user, setUser] = React.useState('Guest');\r\n        return (\r\n          <UserContext.Provider value={user}>\r\n            <div>\r\n              <Profile />\r\n              <button onClick={() => setUser('Admin')}>Стать админом</button>\r\n            </div>\r\n          </UserContext.Provider>\r\n        );\r\n      }\r\n\r\n      function Profile() {\r\n        const user = React.useContext(UserContext);\r\n        return <p>Пользователь: {user}</p>;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100981,\r\n      question: \"Как обновить значение контекста?\",\r\n      answer: `\r\n      **Обновление значения:**\r\n      - Значение контекста можно обновить с помощью состояния (\\`useState\\`).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const ThemeContext = React.createContext();\r\n\r\n      function App() {\r\n        const [theme, setTheme] = React.useState('light');\r\n\r\n        return (\r\n          <ThemeContext.Provider value={theme}>\r\n            <Toolbar />\r\n            <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\r\n              Сменить тему\r\n            </button>\r\n          </ThemeContext.Provider>\r\n        );\r\n      }\r\n\r\n      function Toolbar() {\r\n        return <ThemedButton />;\r\n      }\r\n\r\n      function ThemedButton() {\r\n        const theme = React.useContext(ThemeContext);\r\n        return <button style={{ background: theme }}>Кнопка</button>;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100982,\r\n      question: \"Какие ограничения у Context?\",\r\n      answer: `\r\n      **Ограничения:**\r\n      1. **Перерисовка компонентов:**\r\n         - Обновление контекста может вызвать перерисовку всех подписанных компонентов.\r\n      2. **Сложность управления:**\r\n         - При большом количестве контекстов может стать сложно управлять состоянием.\r\n      3. **Необходимость провайдера:**\r\n         - Если компонент не обернут в провайдер, он использует значение по умолчанию.\r\n\r\n      **Решение:**\r\n      - Используйте контекст только для глобальных данных.\r\n      - Для сложного состояния рассмотрите использование сторонних библиотек (например, Redux).\r\n      `,\r\n    },\r\n    {\r\n      id: 100983,\r\n      question: \"Можно ли использовать несколько контекстов?\",\r\n      answer: `\r\n      **Использование нескольких контекстов:**\r\n      - Да, можно создавать и использовать несколько контекстов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const ThemeContext = React.createContext('light');\r\n      const UserContext = React.createContext('Guest');\r\n\r\n      function App() {\r\n        return (\r\n          <ThemeContext.Provider value=\"dark\">\r\n            <UserContext.Provider value=\"Alice\">\r\n              <Layout />\r\n            </UserContext.Provider>\r\n          </ThemeContext.Provider>\r\n        );\r\n      }\r\n\r\n      function Layout() {\r\n        return (\r\n          <div>\r\n            <Sidebar />\r\n            <Content />\r\n          </div>\r\n        );\r\n      }\r\n\r\n      function Sidebar() {\r\n        const theme = React.useContext(ThemeContext);\r\n        return <div style={{ background: theme }}>Sidebar</div>;\r\n      }\r\n\r\n      function Content() {\r\n        const user = React.useContext(UserContext);\r\n        return <p>Пользователь: {user}</p>;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100984,\r\n      question: \"Что такое Consumer в контексте?\",\r\n      answer: `\r\n      **Consumer:**\r\n      - Компонент, который подписывается на изменения контекста.\r\n      - Используется в классовых компонентах.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const ThemeContext = React.createContext('light');\r\n\r\n      class ThemedButton extends React.Component {\r\n        render() {\r\n          return (\r\n            <ThemeContext.Consumer>\r\n              {(theme) => <button style={{ background: theme }}>Кнопка</button>}\r\n            </ThemeContext.Consumer>\r\n          );\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100985,\r\n      question: \"Что такое Provider в контексте?\",\r\n      answer: `\r\n      **Provider:**\r\n      - Компонент, который предоставляет значение контекста своим дочерним компонентам.\r\n      - Значение передается через пропс \\`value\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const ThemeContext = React.createContext('light');\r\n\r\n      function App() {\r\n        return (\r\n          <ThemeContext.Provider value=\"dark\">\r\n            <ThemedButton />\r\n          </ThemeContext.Provider>\r\n        );\r\n      }\r\n\r\n      function ThemedButton() {\r\n        const theme = React.useContext(ThemeContext);\r\n        return <button style={{ background: theme }}>Кнопка</button>;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testContextReact = {\r\n  id: 102925,\r\n  title: \"Context API (контекст)\",\r\n  questions: [\r\n    {\r\n      id: 102926,\r\n      question: \"Что такое Context API в React?\",\r\n      answer: `\r\n**Context API:**\r\n- Это механизм для передачи данных через дерево компонентов без необходимости передавать пропсы на каждом уровне.\r\n- Позволяет управлять глобальным состоянием, например, темой, аутентификацией или языковыми настройками.\r\n\r\n**Пример создания контекста:**\r\n\\`\\`\\`javascript\r\nconst ThemeContext = React.createContext();\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeContext.Provider value=\"dark\">\r\n      <ChildComponent />\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nfunction ChildComponent() {\r\n  const theme = React.useContext(ThemeContext);\r\n  return <p>Current theme: {theme}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102927,\r\n      question: \"Как создать контекст в React?\",\r\n      answer: `\r\n**Создание контекста:**\r\n- Используйте \\`React.createContext(defaultValue)\\`.\r\n\r\n**Шаги:**\r\n1. Создайте контекст с помощью \\`React.createContext\\`.\r\n2. Оберните дочерние компоненты в провайдер (\\`Provider\\`).\r\n3. Получите значение контекста с помощью \\`useContext\\` или \\`Consumer\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst UserContext = React.createContext();\r\n\r\nfunction App() {\r\n  const user = { name: 'Alice', age: 25 };\r\n\r\n  return (\r\n    <UserContext.Provider value={user}>\r\n      <Profile />\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Profile() {\r\n  const user = React.useContext(UserContext);\r\n  return <p>{user.name}, {user.age} years old</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102928,\r\n      question: \"Зачем нужен Context API?\",\r\n      answer: `\r\n**Зачем нужен Context API:**\r\n1. **Глобальное состояние:**\r\n   - Упрощает управление данными, которые нужны в нескольких компонентах.\r\n2. **Устранение prop-drilling:**\r\n   - Избавляет от необходимости передавать пропсы через многоуровневую иерархию.\r\n3. **Динамические данные:**\r\n   - Позволяет обновлять данные в реальном времени.\r\n\r\n**Пример использования:**\r\n\\`\\`\\`javascript\r\nconst LanguageContext = React.createContext('en');\r\n\r\nfunction App() {\r\n  const [language, setLanguage] = React.useState('en');\r\n\r\n  return (\r\n    <LanguageContext.Provider value={language}>\r\n      <button onClick={() => setLanguage('ru')}>Change to Russian</button>\r\n      <Content />\r\n    </LanguageContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Content() {\r\n  const language = React.useContext(LanguageContext);\r\n  return <p>Current language: {language}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102929,\r\n      question: \"Как использовать useContext для работы с контекстом?\",\r\n      answer: `\r\n**Использование useContext:**\r\n- Хук \\`useContext\\` позволяет получить доступ к значению контекста.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst ThemeContext = React.createContext('light');\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeContext.Provider value=\"dark\">\r\n      <ThemedButton />\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nfunction ThemedButton() {\r\n  const theme = React.useContext(ThemeContext);\r\n  return <button style={{ background: theme }}>Themed Button</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102930,\r\n      question: \"Можно ли обновлять контекст динамически?\",\r\n      answer: `\r\n**Динамическое обновление контекста:**\r\n- Да, можно обновлять контекст с помощью состояния или редюсеров.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst CounterContext = React.createContext();\r\n\r\nfunction CounterProvider({ children }) {\r\n  const [count, setCount] = React.useState(0);\r\n\r\n  return (\r\n    <CounterContext.Provider value={{ count, setCount }}>\r\n      {children}\r\n    </CounterContext.Provider>\r\n  );\r\n}\r\n\r\nfunction CounterDisplay() {\r\n  const { count } = React.useContext(CounterContext);\r\n  return <p>Count: {count}</p>;\r\n}\r\n\r\nfunction IncrementButton() {\r\n  const { setCount } = React.useContext(CounterContext);\r\n  return <button onClick={() => setCount((c) => c + 1)}>Increment</button>;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <CounterProvider>\r\n      <CounterDisplay />\r\n      <IncrementButton />\r\n    </CounterProvider>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102931,\r\n      question: \"Какие есть альтернативы Context API?\",\r\n      answer: `\r\n**Альтернативы Context API:**\r\n1. **Prop Drilling:**\r\n   - Передача данных через пропсы на каждом уровне.\r\n2. **Redux:**\r\n   - Библиотека для управления глобальным состоянием.\r\n3. **MobX:**\r\n   - Реактивное управление состоянием.\r\n4. **Recoil/Zustand:**\r\n   - Легковесные библиотеки для управления состоянием.\r\n\r\n**Пример Redux:**\r\n\\`\\`\\`javascript\r\nimport { createStore } from 'redux';\r\nimport { Provider, useSelector, useDispatch } from 'react-redux';\r\n\r\nconst store = createStore((state = { count: 0 }, action) => {\r\n  if (action.type === 'increment') return { count: state.count + 1 };\r\n  return state;\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Counter />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nfunction Counter() {\r\n  const count = useSelector((state) => state.count);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102932,\r\n      question:\r\n        \"Как избежать лишних перерисовок при использовании Context API?\",\r\n      answer: `\r\n**Оптимизация перерисовок:**\r\n1. **Разделение контекстов:**\r\n   - Используйте отдельные контексты для разных данных.\r\n2. **Мемоизация:**\r\n   - Используйте \\`React.memo\\` для предотвращения лишних ререндеров.\r\n3. **Обновление только необходимых частей:**\r\n   - Передавайте только нужные данные через контекст.\r\n\r\n**Пример разделения контекстов:**\r\n\\`\\`\\`javascript\r\nconst ThemeContext = React.createContext();\r\nconst AuthContext = React.createContext();\r\n\r\nfunction App() {\r\n  const [theme, setTheme] = React.useState('light');\r\n  const [user, setUser] = React.useState(null);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={theme}>\r\n      <AuthContext.Provider value={user}>\r\n        <Content />\r\n      </AuthContext.Provider>\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Content() {\r\n  const theme = React.useContext(ThemeContext);\r\n  const user = React.useContext(AuthContext);\r\n  return (\r\n    <div>\r\n      <p>Theme: {theme}</p>\r\n      <p>User: {user ? user.name : 'Guest'}</p>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102933,\r\n      question: \"Как использовать несколько контекстов в одном приложении?\",\r\n      answer: `\r\n**Использование нескольких контекстов:**\r\n- Создайте отдельные контексты для разных данных.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst ThemeContext = React.createContext('light');\r\nconst UserContext = React.createContext({ name: 'Guest' });\r\n\r\nfunction App() {\r\n  const [theme, setTheme] = React.useState('dark');\r\n  const [user, setUser] = React.useState({ name: 'Alice' });\r\n\r\n  return (\r\n    <ThemeContext.Provider value={theme}>\r\n      <UserContext.Provider value={user}>\r\n        <Profile />\r\n      </UserContext.Provider>\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Profile() {\r\n  const theme = React.useContext(ThemeContext);\r\n  const user = React.useContext(UserContext);\r\n  return (\r\n    <div style={{ background: theme }}>\r\n      <p>Name: {user.name}</p>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102934,\r\n      question: \"Как тестировать компоненты с Context API?\",\r\n      answer: `\r\n**Тестирование компонентов:**\r\n- Используйте \\`render\\` из \\`@testing-library/react\\` и оборачивайте компоненты в провайдер.\r\n\r\n**Пример теста:**\r\n\\`\\`\\`javascript\r\nimport { render, screen } from '@testing-library/react';\r\nimport React from 'react';\r\n\r\nconst ThemeContext = React.createContext('light');\r\n\r\nfunction ThemedText() {\r\n  const theme = React.useContext(ThemeContext);\r\n  return <p>Theme: {theme}</p>;\r\n}\r\n\r\ntest('renders dark theme', () => {\r\n  render(\r\n    <ThemeContext.Provider value=\"dark\">\r\n      <ThemedText />\r\n    </ThemeContext.Provider>\r\n  );\r\n\r\n  expect(screen.getByText('Theme: dark')).toBeInTheDocument();\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102935,\r\n      question: \"Как работает Consumer в Context API?\",\r\n      answer: `\r\n**Consumer:**\r\n- Компонент \\`Consumer\\` используется для получения значения контекста в классовых компонентах.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst ThemeContext = React.createContext('light');\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeContext.Provider value=\"dark\">\r\n      <ThemedButton />\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nclass ThemedButton extends React.Component {\r\n  render() {\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {(theme) => <button style={{ background: theme }}>Themed Button</button>}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testInheritance = {\r\n  id: 101400,\r\n  title: \"Inheritance (Наследование)\",\r\n  questions: [\r\n    {\r\n      id: 101401,\r\n      question: \"Что такое прототипное наследование?\",\r\n      answer: `\r\n      **Прототипное наследование:**\r\n      - Это механизм в JavaScript, который позволяет объектам наследовать свойства и методы от других объектов.\r\n      - Каждый объект имеет внутреннюю ссылку на другой объект, называемый его **прототипом** (\\`__proto__\\` или \\`Object.getPrototypeOf()\\`).\r\n      - Если свойство или метод не найдены в объекте, JavaScript ищет их в прототипе, затем в прототипе прототипа и так далее (цепочка прототипов).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const parent = {\r\n        greet() {\r\n          console.log('Hello from parent!');\r\n        },\r\n      };\r\n\r\n      const child = Object.create(parent);\r\n      child.greet(); // 'Hello from parent!'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101402,\r\n      question: \"Как создать объект с определенным прототипом?\",\r\n      answer: `\r\n      **Создание объекта с прототипом:**\r\n      - Используйте \\`Object.create(proto)\\`, чтобы создать объект с указанным прототипом.\r\n      - Также можно использовать конструкторы или классы.\r\n\r\n      **Пример с \\`Object.create\\`:**\r\n      \\`\\`\\`javascript\r\n      const proto = {\r\n        greet() {\r\n          console.log('Hello!');\r\n        },\r\n      };\r\n\r\n      const obj = Object.create(proto);\r\n      obj.greet(); // 'Hello!'\r\n      \\`\\`\\`\r\n\r\n      **Пример с конструктором:**\r\n      \\`\\`\\`javascript\r\n      function Parent() {}\r\n      Parent.prototype.greet = function () {\r\n        console.log('Hello from Parent!');\r\n      };\r\n\r\n      const child = new Parent();\r\n      child.greet(); // 'Hello from Parent!'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101403,\r\n      question: \"Как работает цепочка прототипов?\",\r\n      answer: `\r\n      **Цепочка прототипов:**\r\n      - Когда вы обращаетесь к свойству или методу объекта, JavaScript проверяет, существует ли оно в самом объекте.\r\n      - Если нет, он ищет это свойство или метод в прототипе объекта.\r\n      - Если и там нет, поиск продолжается в прототипе прототипа, пока не достигнет конца цепочки (\\`null\\`).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const parent = {\r\n        greet() {\r\n          console.log('Hello from parent!');\r\n        },\r\n      };\r\n\r\n      const child = Object.create(parent);\r\n      child.greet(); // 'Hello from parent!'\r\n      console.log(child.hasOwnProperty('greet')); // false\r\n      console.log('greet' in child); // true\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101404,\r\n      question: \"Что такое \\`__proto__\\` и \\`prototype\\`?\",\r\n      answer: `\r\n      **Разница между \\`__proto__\\` и \\`prototype\\`:**\r\n      1. **\\`__proto__\\`:**\r\n         - Внутреннее свойство объекта, которое указывает на его прототип.\r\n         - Устаревшее, лучше использовать \\`Object.getPrototypeOf()\\`.\r\n\r\n      2. **\\`prototype\\`:**\r\n         - Свойство функции-конструктора, которое используется для создания прототипа новых объектов при вызове \\`new\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function Person(name) {\r\n        this.name = name;\r\n      }\r\n\r\n      Person.prototype.greet = function () {\r\n        console.log(\\`Hello, my name is \\${this.name}\\`);\r\n      };\r\n\r\n      const person = new Person('Alice');\r\n      person.greet(); // 'Hello, my name is Alice'\r\n\r\n      console.log(person.__proto__ === Person.prototype); // true\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101405,\r\n      question: \"Как добавить метод в прототип?\",\r\n      answer: `\r\n      **Добавление метода в прототип:**\r\n      - Методы можно добавлять в прототип функции-конструктора или класса.\r\n      - Все экземпляры, созданные из этой функции или класса, будут иметь доступ к этому методу.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function Animal(name) {\r\n        this.name = name;\r\n      }\r\n\r\n      Animal.prototype.speak = function () {\r\n        console.log(\\`\\${this.name} makes a noise.\\`);\r\n      };\r\n\r\n      const dog = new Animal('Dog');\r\n      dog.speak(); // 'Dog makes a noise.'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101406,\r\n      question:\r\n        \"Что такое классы в JavaScript и как они связаны с наследованием?\",\r\n      answer: `\r\n      **Классы в JavaScript:**\r\n      - Классы — это синтаксический сахар над прототипным наследованием.\r\n      - Они позволяют определять конструкторы и методы более удобным способом.\r\n\r\n      **Пример наследования с классами:**\r\n      \\`\\`\\`javascript\r\n      class Animal {\r\n        constructor(name) {\r\n          this.name = name;\r\n        }\r\n\r\n        speak() {\r\n          console.log(\\`\\${this.name} makes a noise.\\`);\r\n        }\r\n      }\r\n\r\n      class Dog extends Animal {\r\n        speak() {\r\n          console.log(\\`\\${this.name} barks.\\`);\r\n        }\r\n      }\r\n\r\n      const dog = new Dog('Rex');\r\n      dog.speak(); // 'Rex barks.'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101407,\r\n      question: \"Как проверить, является ли один объект прототипом другого?\",\r\n      answer: `\r\n      **Проверка прототипа:**\r\n      - Используйте метод \\`Object.prototype.isPrototypeOf()\\` или \\`Object.getPrototypeOf()\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const parent = {};\r\n      const child = Object.create(parent);\r\n\r\n      console.log(parent.isPrototypeOf(child)); // true\r\n      console.log(Object.getPrototypeOf(child) === parent); // true\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101408,\r\n      question: \"Что такое \\`super\\` в JavaScript?\",\r\n      answer: `\r\n      **\\`super\\`:**\r\n      - Ключевое слово, которое используется для вызова методов родительского класса.\r\n      - Доступно только внутри классов и методов, определенных через \\`class\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Animal {\r\n        speak() {\r\n          console.log('Animal speaks.');\r\n        }\r\n      }\r\n\r\n      class Dog extends Animal {\r\n        speak() {\r\n          super.speak();\r\n          console.log('Dog barks.');\r\n        }\r\n      }\r\n\r\n      const dog = new Dog();\r\n      dog.speak();\r\n      // Animal speaks.\r\n      // Dog barks.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101409,\r\n      question: \"Можно ли изменить прототип объекта после его создания?\",\r\n      answer: `\r\n      **Изменение прототипа:**\r\n      - Да, используйте \\`Object.setPrototypeOf(obj, newProto)\\`.\r\n      - Однако это может быть медленной операцией и может повлиять на производительность.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const obj = {};\r\n      const newProto = { greet() { console.log('Hello!'); } };\r\n\r\n      Object.setPrototypeOf(obj, newProto);\r\n      obj.greet(); // 'Hello!'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101410,\r\n      question: \"Что происходит, если прототип равен \\`null\\`?\",\r\n      answer: `\r\n      **Прототип \\`null\\`:**\r\n      - Если прототип равен \\`null\\`, объект не имеет цепочки прототипов.\r\n      - Такой объект называется \"чистым\" объектом и не наследует никаких свойств или методов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const obj = Object.create(null);\r\n      console.log(obj.toString); // undefined\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testGenerics = {\r\n  id: 100625,\r\n  title: \"Generic (дженерик)\",\r\n  questions: [\r\n    {\r\n      id: 100626,\r\n      question: \"Что такое дженерики (Generics)?\",\r\n      answer: `\r\n      **Дженерики (Generics):**\r\n      - Это механизм, позволяющий создавать компоненты (функции, классы, интерфейсы), которые работают с различными типами данных.\r\n      - Обеспечивают повторное использование кода без потери типобезопасности.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      function identity<T>(arg: T): T {\r\n        return arg;\r\n      }\r\n\r\n      const output1 = identity<string>('Hello'); // 'Hello'\r\n      const output2 = identity<number>(42); // 42\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100627,\r\n      question: \"Зачем нужны дженерики?\",\r\n      answer: `\r\n      **Цели использования дженериков:**\r\n      1. **Типобезопасность:**\r\n         - Позволяют явно указывать типы данных, что помогает избежать ошибок во время выполнения.\r\n      2. **Повторное использование кода:**\r\n         - Один дженерик может работать с разными типами данных.\r\n      3. **Гибкость:**\r\n         - Упрощают работу с коллекциями и структурами данных.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      function reverseArray<T>(items: T[]): T[] {\r\n        return items.reverse();\r\n      }\r\n\r\n      const numbers = reverseArray<number>([1, 2, 3]); // [3, 2, 1]\r\n      const strings = reverseArray<string>(['a', 'b', 'c']); // ['c', 'b', 'a']\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100628,\r\n      question: \"Как использовать дженерики в функциях?\",\r\n      answer: `\r\n      **Использование дженериков в функциях:**\r\n      - Указывается параметр типа (например, \\`<T>\\`) при определении функции.\r\n      - Параметр типа используется для аргументов и возвращаемого значения.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      function getValue<T>(value: T): T {\r\n        return value;\r\n      }\r\n\r\n      const numberValue = getValue<number>(42); // 42\r\n      const stringValue = getValue<string>('Hello'); // 'Hello'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100629,\r\n      question: \"Как использовать дженерики в классах?\",\r\n      answer: `\r\n      **Использование дженериков в классах:**\r\n      - Параметр типа указывается после имени класса.\r\n      - Параметр типа используется для свойств, методов и аргументов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      class Box<T> {\r\n        private value: T;\r\n\r\n        constructor(value: T) {\r\n          this.value = value;\r\n        }\r\n\r\n        getValue(): T {\r\n          return this.value;\r\n        }\r\n      }\r\n\r\n      const numberBox = new Box<number>(42);\r\n      console.log(numberBox.getValue()); // 42\r\n\r\n      const stringBox = new Box<string>('Hello');\r\n      console.log(stringBox.getValue()); // 'Hello'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100630,\r\n      question: \"Как ограничить типы в дженериках?\",\r\n      answer: `\r\n      **Ограничение типов:**\r\n      - Используйте ключевое слово \\`extends\\`, чтобы ограничить типы, которые могут использоваться.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      function getLength<T extends { length: number }>(item: T): number {\r\n        return item.length;\r\n      }\r\n\r\n      console.log(getLength('Hello')); // 5\r\n      console.log(getLength([1, 2, 3])); // 3\r\n      // console.log(getLength(42)); // Ошибка: число не имеет свойства 'length'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100631,\r\n      question: \"Что такое дженерик-интерфейс?\",\r\n      answer: `\r\n      **Дженерик-интерфейс:**\r\n      - Интерфейс, который работает с различными типами данных через параметры типа.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      interface KeyValuePair<K, V> {\r\n        key: K;\r\n        value: V;\r\n      }\r\n\r\n      const pair1: KeyValuePair<string, number> = { key: 'age', value: 25 };\r\n      const pair2: KeyValuePair<number, string> = { key: 1, value: 'one' };\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100632,\r\n      question: \"Как использовать несколько параметров типа в дженериках?\",\r\n      answer: `\r\n      **Несколько параметров типа:**\r\n      - Можно указать несколько параметров типа через запятую.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      function combineArrays<T, U>(arr1: T[], arr2: U[]): (T | U)[] {\r\n        return [...arr1, ...arr2];\r\n      }\r\n\r\n      const result = combineArrays<number, string>([1, 2], ['a', 'b']);\r\n      console.log(result); // [1, 2, 'a', 'b']\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100633,\r\n      question: \"Какие преимущества дженериков перед any?\",\r\n      answer: `\r\n      **Преимущества дженериков:**\r\n      1. **Типобезопасность:**\r\n         - \\`any\\` отключает проверку типов, тогда как дженерики сохраняют контроль над типами.\r\n      2. **Повторное использование:**\r\n         - Дженерики позволяют создавать универсальные компоненты без потери типизации.\r\n      3. **Читаемость кода:**\r\n         - Явные типы делают код более понятным.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      function processAny(data: any): any {\r\n        return data;\r\n      }\r\n\r\n      function processGeneric<T>(data: T): T {\r\n        return data;\r\n      }\r\n\r\n      const result1 = processAny(42); // Тип неизвестен\r\n      const result2 = processGeneric<number>(42); // Тип number\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100634,\r\n      question: \"Как использовать дженерики с массивами?\",\r\n      answer: `\r\n      **Дженерики с массивами:**\r\n      - Можно указать тип элементов массива.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      function firstElement<T>(arr: T[]): T | undefined {\r\n        return arr[0];\r\n      }\r\n\r\n      const numbers = [1, 2, 3];\r\n      const strings = ['a', 'b', 'c'];\r\n\r\n      console.log(firstElement(numbers)); // 1\r\n      console.log(firstElement(strings)); // 'a'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100635,\r\n      question: \"Как использовать дженерики с Promise?\",\r\n      answer: `\r\n      **Дженерики с Promise:**\r\n      - \\`Promise<T>\\` указывает тип данных, которые будут разрешены.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      function fetchData<T>(url: string): Promise<T> {\r\n        return fetch(url).then((response) => response.json());\r\n      }\r\n\r\n      fetchData<{ name: string }>('https://api.example.com/user') \r\n        .then((user) => console.log(user.name));\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testTypescript = {\r\n  id: 101700,\r\n  title: \"Typescript\",\r\n  questions: [\r\n    {\r\n      id: 101701,\r\n      question: \"Что такое TypeScript?\",\r\n      answer: `\r\n      **TypeScript:**\r\n      - Это строго типизированный язык программирования, который является надмножеством JavaScript.\r\n      - Добавляет статическую типизацию, интерфейсы, классы, дженерики и другие возможности.\r\n      - Компилируется в чистый JavaScript, совместимый с любыми браузерами и платформами.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      let message: string = 'Hello, TypeScript!';\r\n      console.log(message); // 'Hello, TypeScript!'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101702,\r\n      question: \"Какие преимущества TypeScript перед JavaScript?\",\r\n      answer: `\r\n      **Преимущества TypeScript:**\r\n      1. **Статическая типизация:**\r\n         - Позволяет находить ошибки на этапе разработки.\r\n      2. **Автоматическое завершение кода (IntelliSense):**\r\n         - Упрощает написание кода благодаря подсказкам.\r\n      3. **Поддержка современных стандартов:**\r\n         - Включает ES6+ функции, такие как классы, модули и декораторы.\r\n      4. **Масштабируемость:**\r\n         - Подходит для больших проектов благодаря явной типизации.\r\n      5. **Интерфейсы и дженерики:**\r\n         - Упрощают работу с сложными структурами данных.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      interface User {\r\n        name: string;\r\n        age: number;\r\n      }\r\n\r\n      function greet(user: User): string {\r\n        return \\`Hello, \\${user.name}!\\`;\r\n      }\r\n\r\n      const user: User = { name: 'Alice', age: 25 };\r\n      console.log(greet(user)); // 'Hello, Alice!'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101703,\r\n      question: \"Что такое интерфейсы в TypeScript?\",\r\n      answer: `\r\n      **Интерфейсы:**\r\n      - Описывают структуру объекта или функции.\r\n      - Используются для проверки типов на этапе компиляции.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      interface Person {\r\n        name: string;\r\n        age?: number; // Необязательное свойство\r\n      }\r\n\r\n      function printPerson(person: Person): void {\r\n        console.log(\\`Name: \\${person.name}, Age: \\${person.age || 'Unknown'}\\`);\r\n      }\r\n\r\n      const person: Person = { name: 'Bob' };\r\n      printPerson(person); // 'Name: Bob, Age: Unknown'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101704,\r\n      question: \"Как работает система типов в TypeScript?\",\r\n      answer: `\r\n      **Система типов:**\r\n      - TypeScript использует статическую типизацию, что означает, что типы проверяются во время компиляции.\r\n      - Типы могут быть явно указаны или выводиться автоматически.\r\n\r\n      **Примеры типов:**\r\n      1. **Базовые типы:**\r\n         \\`\\`\\`typescript\r\n         let isDone: boolean = true;\r\n         let total: number = 100;\r\n         let title: string = 'TypeScript';\r\n         \\`\\`\\`\r\n\r\n      2. **Массивы:**\r\n         \\`\\`\\`typescript\r\n         let numbers: number[] = [1, 2, 3];\r\n         let strings: Array<string> = ['a', 'b', 'c'];\r\n         \\`\\`\\`\r\n\r\n      3. **Объединения (Union Types):**\r\n         \\`\\`\\`typescript\r\n         let value: string | number = 'hello';\r\n         value = 42;\r\n         \\`\\`\\`\r\n\r\n      4. **Any и Unknown:**\r\n         \\`\\`\\`typescript\r\n         let anything: any = 'string'; // Любой тип\r\n         let unknownValue: unknown = 42; // Неизвестный тип\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101705,\r\n      question: \"Что такое дженерики в TypeScript?\",\r\n      answer: `\r\n      **Дженерики:**\r\n      - Позволяют создавать универсальные функции, классы или интерфейсы, работающие с различными типами данных.\r\n      - Обеспечивают повторное использование кода без потери типобезопасности.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      function identity<T>(arg: T): T {\r\n        return arg;\r\n      }\r\n\r\n      const output1 = identity<string>('Hello'); // 'Hello'\r\n      const output2 = identity<number>(42); // 42\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101706,\r\n      question: \"Что такое декораторы в TypeScript?\",\r\n      answer: `\r\n      **Декораторы:**\r\n      - Специальные объявления, которые добавляют метаданные или изменяют поведение классов, методов или свойств.\r\n      - Часто используются в Angular и других фреймворках.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      function log(target: any, key: string, descriptor: PropertyDescriptor) {\r\n        const originalMethod = descriptor.value;\r\n\r\n        descriptor.value = function (...args: any[]) {\r\n          console.log(\\`Вызов метода \\${key} с аргументами: \\${JSON.stringify(args)}\\`);\r\n          return originalMethod.apply(this, args);\r\n        };\r\n\r\n        return descriptor;\r\n      }\r\n\r\n      class Calculator {\r\n        @log\r\n        add(a: number, b: number): number {\r\n          return a + b;\r\n        }\r\n      }\r\n\r\n      const calc = new Calculator();\r\n      console.log(calc.add(2, 3)); // 'Вызов метода add с аргументами: [2,3]', затем '5'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101707,\r\n      question: \"Как использовать Enums в TypeScript?\",\r\n      answer: `\r\n      **Enums (перечисления):**\r\n      - Предоставляют удобный способ работы с набором констант.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      enum Direction {\r\n        Up = 1,\r\n        Down,\r\n        Left,\r\n        Right,\r\n      }\r\n\r\n      console.log(Direction.Up); // 1\r\n      console.log(Direction[2]); // 'Down'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101708,\r\n      question: \"Что такое Union Types и Intersection Types?\",\r\n      answer: `\r\n      **Union Types:**\r\n      - Позволяют переменной иметь несколько типов.\r\n\r\n      **Intersection Types:**\r\n      - Объединяют несколько типов в один.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      type A = { a: number };\r\n      type B = { b: string };\r\n\r\n      type C = A & B; // Intersection\r\n      const obj: C = { a: 1, b: 'text' };\r\n\r\n      type D = string | number; // Union\r\n      const value: D = 'hello';\r\n      value = 42;\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101709,\r\n      question: \"Как работают Utility Types в TypeScript?\",\r\n      answer: `\r\n      **Utility Types:**\r\n      - Это встроенные типы, которые помогают преобразовывать существующие типы.\r\n\r\n      **Примеры:**\r\n      1. **Partial<T>:**\r\n         - Делает все свойства типа необязательными.\r\n         \\`\\`\\`typescript\r\n         interface Todo {\r\n           title: string;\r\n           description: string;\r\n         }\r\n\r\n         const updateTodo = (todo: Partial<Todo>) => {};\r\n         updateTodo({ title: 'New Title' });\r\n         \\`\\`\\`\r\n\r\n      2. **Pick<T, K>:**\r\n         - Выбирает подмножество свойств из типа.\r\n         \\`\\`\\`typescript\r\n         interface Todo {\r\n           title: string;\r\n           description: string;\r\n           completed: boolean;\r\n         }\r\n\r\n         type TodoPreview = Pick<Todo, 'title' | 'completed'>;\r\n         const preview: TodoPreview = { title: 'Clean room', completed: false };\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101710,\r\n      question: \"Как настроить TypeScript для проекта?\",\r\n      answer: `\r\n      **Настройка TypeScript:**\r\n      1. **Установка:**\r\n         - Установите TypeScript через npm:\r\n         \\`\\`\\`bash\r\n         npm install typescript --save-dev\r\n         \\`\\`\\`\r\n\r\n      2. **Файл конфигурации:**\r\n         - Создайте \\`tsconfig.json\\`:\r\n         \\`\\`\\`bash\r\n         npx tsc --init\r\n         \\`\\`\\`\r\n\r\n      3. **Основные параметры \\`tsconfig.json\\`:**\r\n         \\`\\`\\`json\r\n         {\r\n           \"compilerOptions\": {\r\n             \"target\": \"ES6\",\r\n             \"module\": \"commonjs\",\r\n             \"strict\": true,\r\n             \"outDir\": \"./dist\"\r\n           },\r\n           \"include\": [\"src/**/*\"]\r\n         }\r\n         \\`\\`\\`\r\n\r\n      4. **Компиляция:**\r\n         - Скомпилируйте TypeScript в JavaScript:\r\n         \\`\\`\\`bash\r\n         npx tsc\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testHTTP = {\r\n  id: 101800,\r\n  title: \"Тест по HTTP и HTTPS\",\r\n  questions: [\r\n    {\r\n      id: 101801,\r\n      question: \"Что такое HTTP?\",\r\n      answer: `\r\n      **HTTP (HyperText Transfer Protocol):**\r\n      - Это протокол передачи данных, используемый для обмена информацией между клиентом (например, браузером) и сервером.\r\n      - Основная задача — доставка HTML-документов, изображений, стилей и других ресурсов.\r\n      - Работает поверх TCP/IP и использует текстовый формат для запросов и ответов.\r\n\r\n      **Основные характеристики:**\r\n      1. **Безопасность:** Не защищает данные (все передается в открытом виде).\r\n      2. **Порт:** По умолчанию использует порт 80.\r\n      3. **Пример запроса:**\r\n         \\`\\`\\`\r\n         GET /index.html HTTP/1.1\r\n         Host: example.com\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101802,\r\n      question: \"Что такое HTTPS?\",\r\n      answer: `\r\n      **HTTPS (HyperText Transfer Protocol Secure):**\r\n      - Это безопасная версия HTTP, которая шифрует данные с помощью протоколов SSL/TLS.\r\n      - Обеспечивает конфиденциальность, целостность и аутентификацию данных.\r\n\r\n      **Основные характеристики:**\r\n      1. **Шифрование:** Данные передаются в зашифрованном виде.\r\n      2. **Порт:** По умолчанию использует порт 443.\r\n      3. **SSL/TLS сертификат:** Сервер должен иметь сертификат для установления безопасного соединения.\r\n\r\n      **Пример:**\r\n      - \\`https://example.com \\` — безопасное соединение.\r\n      `,\r\n    },\r\n    {\r\n      id: 101803,\r\n      question: \"Какие основные различия между HTTP и HTTPS?\",\r\n      answer: `\r\n      **Различия:**\r\n      1. **Безопасность:**\r\n         - HTTP: Нет шифрования, данные передаются в открытом виде.\r\n         - HTTPS: Данные шифруются с помощью SSL/TLS.\r\n      2. **Порт:**\r\n         - HTTP: Порт 80.\r\n         - HTTPS: Порт 443.\r\n      3. **Сертификаты:**\r\n         - HTTP: Не требует сертификатов.\r\n         - HTTPS: Требует SSL/TLS сертификат.\r\n      4. **Производительность:**\r\n         - HTTP: Быстрее, так как нет шифрования.\r\n         - HTTPS: Медленнее из-за процесса шифрования/дешифрования.\r\n      5. **SEO:**\r\n         - HTTPS: Предпочтителен для поисковых систем.\r\n\r\n      **Пример:**\r\n      - \\`http://example.com\\` — небезопасное соединение.\r\n      - \\`https://example.com \\` — безопасное соединение.\r\n      `,\r\n    },\r\n    {\r\n      id: 101804,\r\n      question: \"Как работает SSL/TLS в HTTPS?\",\r\n      answer: `\r\n      **SSL/TLS:**\r\n      - Это протоколы, обеспечивающие безопасную передачу данных через HTTPS.\r\n      - Процесс работы:\r\n        1. **Handshake (рукопожатие):**\r\n           - Клиент и сервер обмениваются ключами для шифрования.\r\n        2. **Шифрование данных:**\r\n           - Все данные шифруются на стороне клиента и расшифровываются на стороне сервера.\r\n        3. **Аутентификация:**\r\n           - Сервер предоставляет SSL/TLS сертификат для подтверждения своей личности.\r\n\r\n      **Пример:**\r\n      - При посещении \\`https://example.com \\`, браузер проверяет SSL/TLS сертификат сервера и устанавливает защищенное соединение.\r\n      `,\r\n    },\r\n    {\r\n      id: 101805,\r\n      question: \"Какие методы HTTP вы знаете?\",\r\n      answer: `\r\n      **Методы HTTP:**\r\n      1. **GET:**\r\n         - Запрашивает данные с сервера (например, HTML-страницу).\r\n      2. **POST:**\r\n         - Отправляет данные на сервер (например, форму).\r\n      3. **PUT:**\r\n         - Обновляет существующий ресурс на сервере.\r\n      4. **DELETE:**\r\n         - Удаляет ресурс на сервере.\r\n      5. **HEAD:**\r\n         - Запрашивает только заголовки ответа (без тела).\r\n      6. **PATCH:**\r\n         - Частично обновляет ресурс.\r\n\r\n      **Пример запроса:**\r\n      \\`\\`\\`\r\n      GET /api/data HTTP/1.1\r\n      Host: example.com\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101806,\r\n      question: \"Что такое статусные коды HTTP?\",\r\n      answer: `\r\n      **Статусные коды HTTP:**\r\n      - Это трехзначные числа, которые сервер возвращает в ответ на HTTP-запрос.\r\n      - Коды делятся на категории:\r\n        1. **1xx (Информационные):** Запрос получен, продолжение процесса.\r\n        2. **2xx (Успешные):** Запрос успешно обработан.\r\n        3. **3xx (Перенаправления):** Дальнейшие действия необходимы для завершения запроса.\r\n        4. **4xx (Клиентские ошибки):** Ошибка на стороне клиента.\r\n        5. **5xx (Серверные ошибки):** Ошибка на стороне сервера.\r\n\r\n      **Примеры:**\r\n      - \\`200 OK\\`: Успешный запрос.\r\n      - \\`404 Not Found\\`: Ресурс не найден.\r\n      - \\`500 Internal Server Error\\`: Ошибка сервера.\r\n      `,\r\n    },\r\n    {\r\n      id: 101807,\r\n      question: \"Что такое кэширование в HTTP?\",\r\n      answer: `\r\n      **Кэширование:**\r\n      - Это механизм хранения копий ресурсов (например, HTML, CSS, изображений) для ускорения последующих запросов.\r\n      - Используются заголовки:\r\n        - \\`Cache-Control\\`: Управляет кэшированием.\r\n        - \\`ETag\\`: Идентификатор ресурса для проверки его актуальности.\r\n        - \\`Expires\\`: Время, до которого ресурс считается актуальным.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`\r\n      Cache-Control: max-age=3600\r\n      \\`\\`\\`\r\n      - Ресурс будет храниться в кэше 1 час.\r\n      `,\r\n    },\r\n    {\r\n      id: 101808,\r\n      question: \"Что такое CORS и как он связан с HTTP?\",\r\n      answer: `\r\n      **CORS (Cross-Origin Resource Sharing):**\r\n      - Это механизм, который позволяет серверу разрешать или запрещать запросы с других доменов.\r\n      - Используется для защиты от межсайтовых атак (CSRF).\r\n      - Заголовки:\r\n        - \\`Access-Control-Allow-Origin\\`: Разрешенные источники.\r\n        - \\`Access-Control-Allow-Methods\\`: Разрешенные методы (GET, POST и т.д.).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`\r\n      Access-Control-Allow-Origin: *\r\n      \\`\\`\\`\r\n      - Разрешены запросы с любого домена.\r\n      `,\r\n    },\r\n    {\r\n      id: 101809,\r\n      question: \"Что такое REST и как он связан с HTTP?\",\r\n      answer: `\r\n      **REST (Representational State Transfer):**\r\n      - Это архитектурный стиль для создания API, основанный на использовании HTTP-методов и URL.\r\n      - Основные принципы:\r\n        1. **Ресурсы:** Каждый ресурс имеет уникальный URL.\r\n        2. **Методы:** Используются HTTP-методы (GET, POST, PUT, DELETE).\r\n        3. **Состояние:** Сервер не хранит состояние клиента между запросами.\r\n\r\n      **Пример:**\r\n      - \\`GET /users\\`: Получить список пользователей.\r\n      - \\`POST /users\\`: Создать нового пользователя.\r\n      `,\r\n    },\r\n    {\r\n      id: 101810,\r\n      question: \"Какие заголовки HTTP вы знаете?\",\r\n      answer: `\r\n      **Заголовки HTTP:**\r\n      1. **Общие заголовки:**\r\n         - \\`Cache-Control\\`, \\`Connection\\`, \\`Date\\`.\r\n      2. **Заголовки запроса:**\r\n         - \\`Host\\`, \\`User-Agent\\`, \\`Accept\\`, \\`Authorization\\`.\r\n      3. **Заголовки ответа:**\r\n         - \\`Content-Type\\`, \\`Content-Length\\`, \\`Set-Cookie\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`\r\n      GET /index.html HTTP/1.1\r\n      Host: example.com\r\n      User-Agent: Mozilla/5.0\r\n      Accept: text/html\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testMapSet = {\r\n  id: 101100,\r\n  title: \"Map и Set\",\r\n  questions: [\r\n    {\r\n      id: 101101,\r\n      question: \"Что такое Map в JavaScript?\",\r\n      answer: `\r\n      **Map:**\r\n      - Это коллекция ключ-значение, где ключи могут быть любого типа (включая объекты, функции и примитивы).\r\n      - В отличие от объектов, ключи в \\`Map\\` не ограничиваются строками или символами.\r\n      - Порядок элементов сохраняется в порядке их добавления.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const map = new Map();\r\n      map.set('name', 'Alice');\r\n      map.set(42, 'Answer');\r\n      map.set({}, 'Empty Object');\r\n\r\n      console.log(map.get('name')); // 'Alice'\r\n      console.log(map.get(42)); // 'Answer'\r\n      console.log(map.size); // 3\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101102,\r\n      question: \"Как создать Map и добавить элементы?\",\r\n      answer: `\r\n      **Создание и добавление элементов:**\r\n      - Используйте конструктор \\`new Map()\\` для создания коллекции.\r\n      - Метод \\`set(key, value)\\` добавляет пару ключ-значение.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const map = new Map();\r\n      map.set('id', 1);\r\n      map.set('active', true);\r\n\r\n      // Или инициализация через массив:\r\n      const mapFromEntries = new Map([\r\n        ['name', 'Bob'],\r\n        ['age', 30],\r\n      ]);\r\n\r\n      console.log(mapFromEntries.get('name')); // 'Bob'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101103,\r\n      question: \"Как удалить элемент из Map?\",\r\n      answer: `\r\n      **Удаление элементов:**\r\n      - Используйте метод \\`delete(key)\\`, чтобы удалить элемент по ключу.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const map = new Map();\r\n      map.set('name', 'Alice');\r\n      map.set('age', 25);\r\n\r\n      map.delete('age'); // Удаляем элемент с ключом 'age'\r\n      console.log(map.has('age')); // false\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101104,\r\n      question: \"Что такое Set в JavaScript?\",\r\n      answer: `\r\n      **Set:**\r\n      - Это коллекция уникальных значений.\r\n      - Значения могут быть любого типа (примитивы и объекты).\r\n      - Дубликаты автоматически игнорируются.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const set = new Set();\r\n      set.add(1);\r\n      set.add(2);\r\n      set.add(2); // Этот элемент будет проигнорирован\r\n\r\n      console.log(set.size); // 2\r\n      console.log([...set]); // [1, 2]\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101105,\r\n      question: \"Как создать Set и добавить элементы?\",\r\n      answer: `\r\n      **Создание и добавление элементов:**\r\n      - Используйте конструктор \\`new Set()\\` для создания коллекции.\r\n      - Метод \\`add(value)\\` добавляет значение.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const set = new Set();\r\n      set.add('apple');\r\n      set.add('banana');\r\n      set.add('apple'); // Дубликат игнорируется\r\n\r\n      // Или инициализация через массив:\r\n      const setFromArray = new Set(['orange', 'grape', 'orange']);\r\n\r\n      console.log(setFromArray.size); // 2\r\n      console.log([...setFromArray]); // ['orange', 'grape']\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101106,\r\n      question: \"Как проверить наличие элемента в Set?\",\r\n      answer: `\r\n      **Проверка наличия:**\r\n      - Используйте метод \\`has(value)\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const set = new Set(['apple', 'banana']);\r\n      console.log(set.has('apple')); // true\r\n      console.log(set.has('cherry')); // false\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101107,\r\n      question: \"Как удалить элемент из Set?\",\r\n      answer: `\r\n      **Удаление элементов:**\r\n      - Используйте метод \\`delete(value)\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const set = new Set(['apple', 'banana']);\r\n      set.delete('apple'); // Удаляем элемент 'apple'\r\n\r\n      console.log(set.has('apple')); // false\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101108,\r\n      question: \"Как перебрать элементы в Map?\",\r\n      answer: `\r\n      **Перебор элементов:**\r\n      - \\`for...of\\` цикл.\r\n      - Методы \\`keys()\\`, \\`values()\\`, \\`entries()\\`.\r\n      - \\`forEach()\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const map = new Map([\r\n        ['name', 'Alice'],\r\n        ['age', 25],\r\n      ]);\r\n\r\n      // for...of\r\n      for (let [key, value] of map) {\r\n        console.log(\\`\\${key}: \\${value}\\`);\r\n      }\r\n\r\n      // forEach\r\n      map.forEach((value, key) => {\r\n        console.log(\\`\\${key}: \\${value}\\`);\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101109,\r\n      question: \"Как перебрать элементы в Set?\",\r\n      answer: `\r\n      **Перебор элементов:**\r\n      - \\`for...of\\` цикл.\r\n      - \\`forEach()\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const set = new Set(['apple', 'banana', 'cherry']);\r\n\r\n      // for...of\r\n      for (let item of set) {\r\n        console.log(item);\r\n      }\r\n\r\n      // forEach\r\n      set.forEach((item) => {\r\n        console.log(item);\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101110,\r\n      question: \"В чем разница между Map и объектом?\",\r\n      answer: `\r\n      **Различия:**\r\n      1. **Ключи:**\r\n         - В \\`Map\\` ключи могут быть любого типа.\r\n         - В объектах ключи ограничены строками и символами.\r\n      2. **Порядок элементов:**\r\n         - \\`Map\\` сохраняет порядок добавления элементов.\r\n         - Объекты не гарантируют порядок свойств.\r\n      3. **Размер:**\r\n         - Размер \\`Map\\` можно узнать через \\`size\\`.\r\n         - Для объектов нужно использовать \\`Object.keys(obj).length\\`.\r\n      4. **Производительность:**\r\n         - \\`Map\\` оптимизирован для частого добавления/удаления элементов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const map = new Map();\r\n      map.set({}, 'Object as key');\r\n\r\n      const obj = {};\r\n      obj[{}] = 'Stringified key';\r\n\r\n      console.log(map.get({})); // undefined (разные объекты)\r\n      console.log(obj[{}]); // 'Stringified key' (ключ преобразован в строку)\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101111,\r\n      question: \"В чем разница между Set и массивом?\",\r\n      answer: `\r\n      **Различия:**\r\n      1. **Уникальность:**\r\n         - \\`Set\\` хранит только уникальные значения.\r\n         - Массив может содержать дубликаты.\r\n      2. **Методы:**\r\n         - \\`Set\\` предоставляет методы \\`add\\`, \\`delete\\`, \\`has\\`.\r\n         - Массивы имеют богатый набор методов (\\`push\\`, \\`pop\\`, \\`map\\`, \\`filter\\` и т.д.).\r\n      3. **Производительность:**\r\n         - \\`Set\\` быстрее при проверке наличия элемента (\\`has\\`).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const array = [1, 2, 2, 3];\r\n      const set = new Set(array);\r\n\r\n      console.log(array); // [1, 2, 2, 3]\r\n      console.log([...set]); // [1, 2, 3]\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101112,\r\n      question: \"Как очистить Map или Set?\",\r\n      answer: `\r\n      **Очистка коллекции:**\r\n      - Используйте метод \\`clear()\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const map = new Map();\r\n      map.set('name', 'Alice');\r\n      map.clear(); // Очищаем коллекцию\r\n      console.log(map.size); // 0\r\n\r\n      const set = new Set([1, 2, 3]);\r\n      set.clear(); // Очищаем коллекцию\r\n      console.log(set.size); // 0\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101113,\r\n      question: \"Как преобразовать Map в объект?\",\r\n      answer: `\r\n      **Преобразование Map в объект:**\r\n      - Используйте метод \\`Object.fromEntries()\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const map = new Map([\r\n        ['name', 'Alice'],\r\n        ['age', 25],\r\n      ]);\r\n\r\n      const obj = Object.fromEntries(map);\r\n      console.log(obj); // { name: 'Alice', age: 25 }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101114,\r\n      question: \"Как преобразовать Set в массив?\",\r\n      answer: `\r\n      **Преобразование Set в массив:**\r\n      - Используйте оператор \\`[...spread]\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const set = new Set([1, 2, 3]);\r\n      const array = [...set];\r\n      console.log(array); // [1, 2, 3]\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testCookie = {\r\n  id: 101575,\r\n  title: \"Cookie\",\r\n  questions: [\r\n    {\r\n      id: 101576,\r\n      question:\r\n        \"Что такое cookie и для чего они используются в веб-разработке?\",\r\n      answer: `\r\n      <strong>Cookie (куки)</strong> — это небольшие текстовые файлы, которые веб-сайты сохраняют в браузере пользователя. \r\n      Они содержат пары ключ-значение и используются для хранения информации между сеансами.\r\n\r\n      **Основные случаи использования:**\r\n      - **Аутентификация:** Сохранение токенов (например, \\`session_id\\`), чтобы пользователь оставался авторизованным.\r\n      - **Персонализация:** Запоминание предпочтений (язык, тема, регион).\r\n      - **Отслеживание:** Аналитика поведения пользователей (Google Analytics, рекламные системы).\r\n      - **Корзины покупок:** Временное хранение данных о выбранных товарах.\r\n      - **Управление сессиями:** Связь между запросами (например, в банковских приложениях).\r\n      `,\r\n    },\r\n    {\r\n      id: 101577,\r\n      question:\r\n        \"Какие атрибуты могут быть у cookies и как они влияют на поведение cookies?\",\r\n      answer: `\r\n      **Основные атрибуты:**\r\n      1. **Name (Имя):** Уникальное имя, используемое для идентификации cookie.\r\n      2. **Value (Значение):** Данные, хранящиеся в cookie (например, информация о пользователе).\r\n      3. **Expires / Max-Age:** Определяют срок жизни cookie. \\`Expires\\` задает конкретную дату, а \\`Max-Age\\` — время в секундах.\r\n      4. **Domain:** Определяет, на какие домены и поддомены может быть отправлена cookie.\r\n      5. **Path:** Указывает, к каким путям на сайте будет применяться cookie.\r\n      6. **Secure:** Cookie будут отправляться только по HTTPS, защищая их от перехвата.\r\n      7. **HttpOnly:** Защищает cookie от доступа через JavaScript (\\`document.cookie\\`), снижая риск XSS-атак.\r\n      8. **SameSite:** Контролирует, когда cookie могут быть отправлены в межсайтовых запросах. Возможные значения: \\`Strict\\`, \\`Lax\\`, \\`None\\`.\r\n      9. **Partitioned:** Новый атрибут для разделения cookie в Privacy Sandbox (Chrome).\r\n      `,\r\n    },\r\n    {\r\n      id: 101578,\r\n      question:\r\n        \"Какие меры предосторожности необходимо соблюдать при работе с cookies с точки зрения безопасности?\",\r\n      answer: `\r\n      **Меры предосторожности:**\r\n      1. **HttpOnly:** Устанавливайте флаг \\`HttpOnly\\`, чтобы предотвратить доступ к cookie через JavaScript и уменьшить риск XSS-атак.\r\n      2. **Secure:** Устанавливайте флаг \\`Secure\\`, чтобы cookie передавались только по HTTPS, защищая их от перехвата.\r\n      3. **SameSite:** Используйте атрибут \\`SameSite\\` для ограничения отправки cookie вместе с кросс-доменные запросами (\\`Lax\\` или \\`Strict\\`)).\r\n      4. **Минимизация данных:** Храните в cookie только необходимые данные и избегайте чувствительной информации.\r\n      5. **Срок действия:** Устанавливайте срок действия cookie и регулярно обновляйте их для предотвращения злоупотреблений.\r\n      6. **Шифрование:** Используйте подписи или шифрование для защиты содержимого cookie от подделки.\r\n      7. **Защита от CSRF:** Реализуйте меры защиты от CSRF-атак, например, используя токены.\r\n      `,\r\n    },\r\n    {\r\n      id: 101579,\r\n      question: \"Как проверить что куки включены?\",\r\n      answer: `\r\n      Чтобы проверить, включены ли куки в браузере:\r\n      1. Откройте настройки браузера.\r\n      2. Перейдите в раздел \"Конфиденциальность и безопасность\".\r\n      3. Найдите настройки \"Файлы cookie\" или \"Cookies\".\r\n      4. Убедитесь, что опция \"Разрешить использование файлов cookie\" включена.\r\n\r\n      **Программная проверка:**\r\n      \\`\\`\\`javascript\r\n      document.cookie = \"test_cookie=enabled; path=/\";\r\n      if (document.cookie.includes(\"test_cookie\")) {\r\n        console.log(\"Cookies are enabled\");\r\n      } else {\r\n        console.log(\"Cookies are disabled\");\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101580,\r\n      question: \"Для чего используются куки?\",\r\n      answer: `\r\n      Куки используются для:\r\n      - **Аутентификации:** Сохранение токенов сессии для автоматического входа.\r\n      - **Персонализации:** Запоминание настроек пользователя (язык, тема, регион).\r\n      - **Отслеживания:** Анализ активности пользователей (например, Google Analytics).\r\n      - **Хранения данных:** Корзины покупок, временные данные.\r\n      `,\r\n    },\r\n    {\r\n      id: 101581,\r\n      question: \"Как создать куки в JavaScript?\",\r\n      answer: `\r\n      Куки создаются с помощью присвоения значения свойству \\`document.cookie\\`:\r\n      \\`\\`\\`javascript\r\n      document.cookie = \"username=JohnDoe; expires=Thu, 01 Jan 2025 00:00:00 UTC; path=/\";\r\n      \\`\\`\\`\r\n\r\n      **Параметры:**\r\n      - \\`expires\\`: Дата истечения срока действия.\r\n      - \\`path\\`: Путь, для которого действует куки.\r\n      - \\`domain\\`: Домен, для которого действует куки.\r\n      - \\`secure\\`: Куки будут отправляться только по HTTPS.\r\n      - \\`HttpOnly\\`: Защита от доступа через JavaScript.\r\n      `,\r\n    },\r\n    {\r\n      id: 101582,\r\n      question: \"Как получить значение куки в JavaScript?\",\r\n      answer: `\r\n      Значение куки можно получить из свойства \\`document.cookie\\`:\r\n      \\`\\`\\`javascript\r\n      const cookies = document.cookie.split(\"; \").reduce((acc, cookie) => {\r\n        const [name, value] = cookie.split(\"=\");\r\n        acc[name] = decodeURIComponent(value);\r\n        return acc;\r\n      }, {});\r\n      console.log(cookies.username); // Получить значение конкретного куки\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101583,\r\n      question: \"Как удалить куки в JavaScript?\",\r\n      answer: `\r\n      Для удаления куки установите срок действия в прошлое:\r\n      \\`\\`\\`javascript\r\n      document.cookie = \"username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/\";\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101584,\r\n      question: \"Какие бывают типы куки?\",\r\n      answer: `\r\n      **Типы куки:**\r\n      - **Сессионные (Session Cookies):** Действуют только пока открыт браузер.\r\n      - **Постоянные (Persistent Cookies):** Хранятся на компьютере пользователя до истечения срока действия.\r\n      `,\r\n    },\r\n    {\r\n      id: 101585,\r\n      question: \"Какие ограничения на размер и количество куки?\",\r\n      answer: `\r\n      **Ограничения:**\r\n      - Размер одной куки: До 4 КБ.\r\n      - Общее количество куки на домен: Обычно до 20–50 (зависит от браузера).\r\n      `,\r\n    },\r\n    {\r\n      id: 101586,\r\n      question:\r\n        \"Объясните разницу между cookies, sessionStorage и localStorage?\",\r\n      answer: `\r\n      **Различия:**\r\n      - **Cookies:** Маленький объем данных (до 4 КБ), могут отправляться на сервер, имеют срок действия.\r\n      - **sessionStorage:** Данные хранятся только в рамках текущей сессии (вкладки). Очищаются при закрытии вкладки.\r\n      - **localStorage:** Данные хранятся долго (до ручного удаления), больший объем (до 5–10 МБ), не отправляются на сервер.\r\n      `,\r\n    },\r\n    {\r\n      id: 101587,\r\n      question: \"Как обеспечить безопасность куки?\",\r\n      answer: `\r\n      **Методы защиты:**\r\n      1. Используйте флаг \\`Secure\\` для передачи только по HTTPS.\r\n      2. Установите флаг \\`HttpOnly\\`, чтобы защитить от XSS-атак.\r\n      3. Настройте атрибут \\`SameSite\\` для защиты от CSRF-атак.\r\n      4. Минимизируйте данные, хранящиеся в куки.\r\n      `,\r\n    },\r\n    {\r\n      id: 101588,\r\n      question:\r\n        \"Как работать с куки, если они не отображаются в document.cookie?\",\r\n      answer: `\r\n      Если куки не видны в \\`document.cookie\\`):\r\n      - Проверьте, установлен ли атрибут \\`HttpOnly\\` (такие куки недоступны через JavaScript).\r\n      - Убедитесь, что куки относятся к текущему домену и пути.\r\n      - Проверьте настройки браузера (блокировка сторонних куки или повышенная конфиденциальность).\r\n      `,\r\n    },\r\n    {\r\n      id: 101589,\r\n      question:\r\n        \"Кому видны данные, хранящиеся в local storage, session storage и cookies?\",\r\n      answer: `\r\n      **Видимость данных:**\r\n      - **localStorage:** Данные доступны только на клиенте, не отправляются на сервер.\r\n      - **sessionStorage:** Данные доступны только в рамках текущей сессии (вкладки).\r\n      - **Cookies:** Данные доступны как на клиенте, так и на сервере (если не установлен флаг \\`HttpOnly\\`).\r\n      `,\r\n    },\r\n    {\r\n      id: 101590,\r\n      question: \"Как работает атрибут SameSite?\",\r\n      answer: `\r\n      Атрибут \\`SameSite\\` контролирует, когда cookie могут быть отправлены в межсайтовых запросах:\r\n      - **Strict:** Cookie отправляются только на тот же сайт, который их установил.\r\n      - **Lax:** Cookie отправляются только при переходах по ссылкам (GET-запросы).\r\n      - **None:** Cookie отправляются на все сайты, но требуют флаг \\`Secure\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      document.cookie = \"sessionId=abc123; SameSite=Lax; Secure\";\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testCache = {\r\n  id: 101600,\r\n  title: \"Cache (Кэширование)\",\r\n  questions: [\r\n    {\r\n      id: 101601,\r\n      question: \"Что такое кэширование?\",\r\n      answer: `\r\n      **Кэширование** — это процесс хранения данных в более быстром, но меньшем по объему хранилище (кэше) \r\n      для ускорения доступа к ним в будущем. Кэш позволяет избежать повторных запросов к медленным ресурсам, \r\n      таким как сервер базы данных или внешние API.\r\n\r\n      **Пример использования:**\r\n      - Браузеры кэшируют изображения, скрипты и стили для ускорения загрузки страниц.\r\n      - Серверы кэшируют результаты вычислений, чтобы не пересчитывать их при каждом запросе.\r\n      `,\r\n    },\r\n    {\r\n      id: 101602,\r\n      question: \"Зачем нужно кэширование?\",\r\n      answer: `\r\n      **Цели кэширования:**\r\n      1. **Ускорение работы приложения:** Сокращение времени ожидания за счет использования заранее сохраненных данных.\r\n      2. **Снижение нагрузки на сервер:** Уменьшение количества запросов к базе данных или внешним API.\r\n      3. **Оптимизация использования ресурсов:** Экономия трафика и вычислительной мощности.\r\n\r\n      **Пример:**\r\n      Если данные профиля пользователя не меняются часто, их можно закэшировать, чтобы избежать повторных запросов к серверу.\r\n      `,\r\n    },\r\n    {\r\n      id: 101603,\r\n      question: \"Какие существуют типы кэширования?\",\r\n      answer: `\r\n      **Основные типы кэширования:**\r\n      1. **Кэширование в браузере:**\r\n         - Браузер сохраняет ресурсы (изображения, скрипты, стили) локально.\r\n         - Управляется через HTTP-заголовки (например, \\`Cache-Control\\`).\r\n\r\n      2. **Серверное кэширование:**\r\n         - Сервер сохраняет результаты вычислений (например, данные из базы данных).\r\n         - Используется для уменьшения нагрузки на сервер.\r\n\r\n      3. **Кэширование в памяти:**\r\n         - В приложении используются структуры данных (например, \\`Map\\`, \\`Set\\`) для хранения часто используемых данных.\r\n\r\n      4. **Дистрибутивное кэширование:**\r\n         - Используются системы вроде Redis или Memcached для распределенного хранения данных.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const cache = new Map();\r\n      function getData(key) {\r\n        if (cache.has(key)) {\r\n          return cache.get(key);\r\n        }\r\n        const data = fetchDataFromDatabase(key); // Медленная операция\r\n        cache.set(key, data);\r\n        return data;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101604,\r\n      question: \"Когда следует использовать кэширование?\",\r\n      answer: `\r\n      **Когда использовать кэширование:**\r\n      1. Данные редко меняются, но к ним часто обращаются (например, конфигурации, настройки).\r\n      2. Выполняются сложные вычисления или запросы к базе данных.\r\n      3. Необходимо ускорить загрузку статических ресурсов (скриптов, стилей, изображений).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const profileCache = {};\r\n      function getProfile(userId) {\r\n        if (profileCache[userId]) {\r\n          return Promise.resolve(profileCache[userId]);\r\n        }\r\n        return fetchProfileFromServer(userId).then((data) => {\r\n          profileCache[userId] = data;\r\n          return data;\r\n        });\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101605,\r\n      question: \"Как работает кэширование в браузере?\",\r\n      answer: `\r\n      **Кэширование в браузере:**\r\n      1. **HTTP-заголовки:**\r\n         - \\`Cache-Control\\`: Определяет правила кэширования (например, \\`max-age=3600\\`).\r\n         - \\`ETag\\`: Позволяет проверять актуальность ресурса.\r\n         - \\`Expires\\`: Указывает дату истечения срока действия.\r\n\r\n      2. **Проверка актуальности:**\r\n         - Браузер отправляет запрос с заголовком \\`If-None-Match\\` или \\`If-Modified-Since\\`.\r\n         - Сервер отвечает \\`304 Not Modified\\`, если ресурс не изменился.\r\n\r\n      **Пример заголовков:**\r\n      \\`\\`\\`http\r\n      Cache-Control: max-age=3600\r\n      ETag: \"abc123\"\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101606,\r\n      question: \"Как предотвратить кэширование?\",\r\n      answer: `\r\n      **Методы предотвращения кэширования:**\r\n      1. **Добавление уникального параметра:**\r\n         - Добавьте версию файла или случайную строку к URL.\r\n         \\`\\`\\`javascript\r\n         const url = '/script.js?v=1.0.1';\r\n         \\`\\`\\`\r\n\r\n      2. **HTTP-заголовки:**\r\n         - Используйте \\`Cache-Control: no-store\\` или \\`Cache-Control: no-cache\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <script src=\"/script.js?version=2\"></script>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101607,\r\n      question: \"Как очистить кэш браузера?\",\r\n      answer: `\r\n      **Очистка кэша браузера:**\r\n      1. **Вручную:**\r\n         - Откройте настройки браузера.\r\n         - Перейдите в раздел \"Конфиденциальность\" и очистите кэш.\r\n\r\n      2. **Через разработческие инструменты:**\r\n         - В Chrome: \\`Ctrl + Shift + R\\` (принудительная перезагрузка без кэша).\r\n         - В Firefox: \\`Ctrl + F5\\`.\r\n\r\n      **Программная очистка:**\r\n      Напрямую очистить кэш программно невозможно, но можно обновить ресурсы, изменив их URL.\r\n      `,\r\n    },\r\n    {\r\n      id: 101608,\r\n      question: \"Как реализовать кэширование в JavaScript?\",\r\n      answer: `\r\n      **Реализация кэширования:**\r\n      1. **Использование \\`Map\\`:**\r\n         \\`\\`\\`javascript\r\n         const cache = new Map();\r\n         function getCachedData(key, fetchDataFn) {\r\n           if (cache.has(key)) {\r\n             return cache.get(key);\r\n           }\r\n           const data = fetchDataFn();\r\n           cache.set(key, data);\r\n           return data;\r\n         }\r\n         \\`\\`\\`\r\n\r\n      2. **Использование объекта:**\r\n         \\`\\`\\`javascript\r\n         const cache = {};\r\n         function getCachedData(key, fetchDataFn) {\r\n           if (cache[key]) {\r\n             return cache[key];\r\n           }\r\n           const data = fetchDataFn();\r\n           cache[key] = data;\r\n           return data;\r\n         }\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101609,\r\n      question: \"Как управлять сроком жизни кэша?\",\r\n      answer: `\r\n      **Управление сроком жизни кэша:**\r\n      1. **Использование таймеров:**\r\n         \\`\\`\\`javascript\r\n         const cache = new Map();\r\n         function setWithExpiry(key, value, ttl) {\r\n           const item = { value, expiry: Date.now() + ttl };\r\n           cache.set(key, item);\r\n         }\r\n\r\n         function getWithExpiry(key) {\r\n           const item = cache.get(key);\r\n           if (!item || Date.now() > item.expiry) {\r\n             cache.delete(key);\r\n             return null;\r\n           }\r\n           return item.value;\r\n         }\r\n         \\`\\`\\`\r\n\r\n      2. **Библиотеки:**\r\n         - Используйте библиотеки, такие как \\`lru-cache\\` или \\`cache-manager\\`.\r\n      `,\r\n    },\r\n    {\r\n      id: 101610,\r\n      question: \"Как избежать проблем с неактуальным кэшем?\",\r\n      answer: `\r\n      **Методы решения проблем:**\r\n      1. **Обновление кэша при изменении данных:**\r\n         - При изменении данных в базе обновляйте кэш автоматически.\r\n         \\`\\`\\`javascript\r\n         function updateProfile(userId, newData) {\r\n           profileCache[userId] = newData;\r\n           return saveToDatabase(userId, newData);\r\n         }\r\n         \\`\\`\\`\r\n\r\n      2. **Использование версионирования:**\r\n         - Добавляйте версию к URL ресурсов (например, \\`style.css?v=2\\`).\r\n\r\n      3. **Настройка HTTP-заголовков:**\r\n         - Используйте \\`ETag\\` или \\`Cache-Control\\` для управления актуальностью.\r\n      `,\r\n    },\r\n    {\r\n      id: 101611,\r\n      question: \"Какие есть библиотеки для кэширования в JavaScript?\",\r\n      answer: `\r\n      **Популярные библиотеки:**\r\n      1. **lru-cache:** Реализует кэш с ограничением по размеру (LRU — Least Recently Used).\r\n      2. **cache-manager:** Предоставляет гибкие механизмы управления кэшем.\r\n      3. **Redis/Memcached:** Распределенные системы кэширования.\r\n\r\n      **Пример использования \\`lru-cache\\`:**\r\n      \\`\\`\\`javascript\r\n      const LRU = require('lru-cache');\r\n      const cache = new LRU({ max: 500, ttl: 1000 * 60 });\r\n\r\n      cache.set('key', 'value');\r\n      console.log(cache.get('key')); // \"value\"\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101612,\r\n      question: \"Как кэширование влияет на производительность?\",\r\n      answer: `\r\n      **Влияние кэширования:**\r\n      1. **Положительное:**\r\n         - Ускоряет загрузку страниц.\r\n         - Снижает задержки при выполнении операций.\r\n         - Уменьшает нагрузку на сервер.\r\n\r\n      2. **Отрицательное:**\r\n         - Может привести к использованию неактуальных данных.\r\n         - Требует дополнительной памяти для хранения кэша.\r\n\r\n      **Пример:**\r\n      Кэширование результатов запросов к базе данных может сократить время отклика с 500 мс до 10 мс.\r\n      `,\r\n    },\r\n    {\r\n      id: 101613,\r\n      question: \"Как избежать проблем безопасности при кэшировании?\",\r\n      answer: `\r\n      **Меры безопасности:**\r\n      1. **Не кэшировать конфиденциальные данные:**\r\n         - Избегайте кэширования токенов аутентификации или персональных данных.\r\n\r\n      2. **Использование HTTP-заголовков:**\r\n         - Настройте заголовки, такие как \\`Cache-Control: private\\`, чтобы данные были доступны только конкретному пользователю.\r\n\r\n      3. **Шифрование:**\r\n         - Шифруйте данные перед сохранением в кэш.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`http\r\n      Cache-Control: private, no-store\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testReact = {\r\n  id: 101250,\r\n  title: \"React\",\r\n  questions: [\r\n    {\r\n      id: 101251,\r\n      question: \"Что такое React?\",\r\n      answer: `\r\n      **React:**\r\n      - Это JavaScript-библиотека для создания пользовательских интерфейсов.\r\n      - Разработана Facebook (ныне Meta) и активно поддерживается сообществом.\r\n      - Основная концепция — компонентный подход, где UI разбивается на независимые, переиспользуемые компоненты.\r\n\r\n      **Основные особенности:**\r\n      - Декларативный подход: описывает, как должен выглядеть интерфейс.\r\n      - Однонаправленный поток данных: данные передаются от родительских компонентов к дочерним через props.\r\n      - Виртуальный DOM: оптимизирует обновление интерфейса, минимизируя изменения в реальном DOM.\r\n\r\n      **Пример простого компонента:**\r\n      \\`\\`\\`javascript\r\n      function Greeting({ name }) {\r\n        return <h1>Привет, {name}!</h1>;\r\n      }\r\n\r\n      function App() {\r\n        return <Greeting name=\"Алиса\" />;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101252,\r\n      question: \"Что такое компонент в React?\",\r\n      answer: `\r\n      **Компонент:**\r\n      - Это независимая, переиспользуемая часть интерфейса.\r\n      - Может быть функциональным или классовым.\r\n\r\n      **Типы компонентов:**\r\n      1. **Функциональные компоненты:**\r\n         - Простые функции, которые возвращают JSX.\r\n         \\`\\`\\`javascript\r\n         function Button({ label }) {\r\n           return <button>{label}</button>;\r\n         }\r\n         \\`\\`\\`\r\n\r\n      2. **Классовые компоненты:**\r\n         - Наследуются от \\`React.Component\\`.\r\n         \\`\\`\\`javascript\r\n         class Counter extends React.Component {\r\n           state = { count: 0 };\r\n\r\n           increment = () => {\r\n             this.setState({ count: this.state.count + 1 });\r\n           };\r\n\r\n           render() {\r\n             return (\r\n               <div>\r\n                 <p>{this.state.count}</p>\r\n                 <button onClick={this.increment}>Увеличить</button>\r\n               </div>\r\n             );\r\n           }\r\n         }\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101253,\r\n      question: \"Что такое состояние (state) в React?\",\r\n      answer: `\r\n      **State (состояние):**\r\n      - Это объект, который хранит данные компонента, которые могут изменяться.\r\n      - Изменение состояния вызывает перерисовку компонента.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function Counter() {\r\n        const [count, setCount] = React.useState(0);\r\n\r\n        return (\r\n          <div>\r\n            <p>{count}</p>\r\n            <button onClick={() => setCount(count + 1)}>Увеличить</button>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101254,\r\n      question: \"Что такое пропсы (props)?\",\r\n      answer: `\r\n      **Props (пропсы):**\r\n      - Это объект, который используется для передачи данных от родительского компонента к дочернему.\r\n      - Props являются неизменяемыми (read-only).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function Greeting({ name }) {\r\n        return <h1>Привет, {name}!</h1>;\r\n      }\r\n\r\n      function App() {\r\n        return <Greeting name=\"Алиса\" />;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101255,\r\n      question: \"Что такое хуки (hooks) в React?\",\r\n      answer: `\r\n      **Хуки (hooks):**\r\n      - Это функции, которые позволяют использовать состояние и другие возможности React в функциональных компонентах.\r\n      - Появились в React 16.8.\r\n\r\n      **Основные хуки:**\r\n      1. **useState:**\r\n         - Для управления состоянием.\r\n         \\`\\`\\`javascript\r\n         const [count, setCount] = React.useState(0);\r\n         \\`\\`\\`\r\n\r\n      2. **useEffect:**\r\n         - Для выполнения побочных эффектов (например, запросы к API).\r\n         \\`\\`\\`javascript\r\n         React.useEffect(() => {\r\n           console.log('Компонент отрендерился');\r\n         }, []);\r\n         \\`\\`\\`\r\n\r\n      3. **useContext:**\r\n         - Для работы с контекстом.\r\n         \\`\\`\\`javascript\r\n         const value = React.useContext(MyContext);\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101256,\r\n      question: \"Что такое Virtual DOM и как он работает?\",\r\n      answer: `\r\n      **Virtual DOM:**\r\n      - Это легковесное представление реального DOM.\r\n      - React создает копию DOM в памяти и обновляет её при изменении состояния.\r\n      - После этого React сравнивает новую версию Virtual DOM со старой (diffing algorithm) и обновляет только те части реального DOM, которые изменились.\r\n\r\n      **Преимущества:**\r\n      - Улучшает производительность за счет минимизации изменений в реальном DOM.\r\n      - Упрощает работу с интерфейсом.\r\n      `,\r\n    },\r\n    {\r\n      id: 101257,\r\n      question: \"Что такое ключи (keys) в React?\",\r\n      answer: `\r\n      **Keys (ключи):**\r\n      - Это специальные атрибуты, которые помогают React идентифицировать элементы в списке.\r\n      - Ключи должны быть уникальными среди соседних элементов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const items = ['Яблоко', 'Банан', 'Вишня'];\r\n\r\n      function App() {\r\n        return (\r\n          <ul>\r\n            {items.map((item) => (\r\n              <li key={item}>{item}</li>\r\n            ))}\r\n          </ul>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101258,\r\n      question: \"Как работает жизненный цикл компонента?\",\r\n      answer: `\r\n      **Жизненный цикл компонента:**\r\n      - Определяет этапы существования компонента: монтирование, обновление и размонтирование.\r\n\r\n      **Методы жизненного цикла (классовые компоненты):**\r\n      1. **componentDidMount:**\r\n         - Вызывается после первого рендера.\r\n      2. **componentDidUpdate:**\r\n         - Вызывается при каждом обновлении.\r\n      3. **componentWillUnmount:**\r\n         - Вызывается перед удалением компонента.\r\n\r\n      **Хуки (функциональные компоненты):**\r\n      - \\`useEffect\\` объединяет все три метода.\r\n      \\`\\`\\`javascript\r\n      React.useEffect(() => {\r\n        console.log('Component mounted or updated');\r\n\r\n        return () => {\r\n          console.log('Component will unmount');\r\n        };\r\n      }, []);\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101259,\r\n      question: \"Что такое React Router и зачем он нужен?\",\r\n      answer: `\r\n      **React Router:**\r\n      - Это библиотека для маршрутизации в React-приложениях.\r\n      - Позволяет создавать одностраничные приложения (SPA) с несколькими страницами.\r\n\r\n      **Основные компоненты:**\r\n      1. **BrowserRouter:**\r\n         - Обертка для всего приложения.\r\n      2. **Route:**\r\n         - Определяет маршрут.\r\n      3. **Link:**\r\n         - Создает ссылку между страницами.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      import { BrowserRouter, Route, Routes, Link } from 'react-router-dom';\r\n\r\n      function App() {\r\n        return (\r\n          <BrowserRouter>\r\n            <nav>\r\n              <Link to=\"/\">Главная</Link>\r\n              <Link to=\"/about\">О нас</Link>\r\n            </nav>\r\n            <Routes>\r\n              <Route path=\"/\" element={<Home />} />\r\n              <Route path=\"/about\" element={<About />} />\r\n            </Routes>\r\n          </BrowserRouter>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101260,\r\n      question: \"Что такое контекст (context) в React?\",\r\n      answer: `\r\n      **Context (контекст):**\r\n      - Позволяет передавать данные через дерево компонентов без необходимости передавать props на каждом уровне.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const ThemeContext = React.createContext('light');\r\n\r\n      function App() {\r\n        return (\r\n          <ThemeContext.Provider value=\"dark\">\r\n            <Toolbar />\r\n          </ThemeContext.Provider>\r\n        );\r\n      }\r\n\r\n      function Toolbar() {\r\n        return <ThemedButton />;\r\n      }\r\n\r\n      function ThemedButton() {\r\n        const theme = React.useContext(ThemeContext);\r\n        return <button style={{ background: theme }}>Кнопка</button>;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testProps = {\r\n  id: 101200,\r\n  title: \"Props (пропсы)\",\r\n  questions: [\r\n    {\r\n      id: 101201,\r\n      question: \"Что такое props в React?\",\r\n      answer: `\r\n      **Props (пропсы):**\r\n      - Это объект, который используется для передачи данных от родительского компонента к дочернему.\r\n      - Props являются неизменяемыми (read-only), то есть их нельзя изменять внутри дочернего компонента.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function Greeting(props) {\r\n        return <h1>Привет, {props.name}!</h1>;\r\n      }\r\n\r\n      function App() {\r\n        return <Greeting name=\"Алиса\" />;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101202,\r\n      question: \"Как передать пропсы в компонент?\",\r\n      answer: `\r\n      **Передача пропсов:**\r\n      - Пропсы передаются как атрибуты HTML-элементов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function Button(props) {\r\n        return <button>{props.label}</button>;\r\n      }\r\n\r\n      function App() {\r\n        return <Button label=\"Нажми меня\" />;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101203,\r\n      question: \"Можно ли передавать функции через props?\",\r\n      answer: `\r\n      **Передача функций:**\r\n      - Да, функции можно передавать через props для обработки событий или выполнения логики.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function Button({ onClick, label }) {\r\n        return <button onClick={onClick}>{label}</button>;\r\n      }\r\n\r\n      function App() {\r\n        const handleClick = () => alert('Кнопка нажата!');\r\n        return <Button label=\"Нажми меня\" onClick={handleClick} />;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101204,\r\n      question: \"Что такое defaultProps?\",\r\n      answer: `\r\n      **defaultProps:**\r\n      - Это свойство компонента, которое определяет значения по умолчанию для пропсов, если они не переданы.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function Greeting(props) {\r\n        return <h1>Привет, {props.name}!</h1>;\r\n      }\r\n\r\n      Greeting.defaultProps = {\r\n        name: 'Гость',\r\n      };\r\n\r\n      function App() {\r\n        return (\r\n          <>\r\n            <Greeting /> {/* Выведет: 'Привет, Гость!' */}\r\n            <Greeting name=\"Алиса\" /> {/* Выведет: 'Привет, Алиса!' */}\r\n          </>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101205,\r\n      question: \"Как проверить типы пропсов?\",\r\n      answer: `\r\n      **PropTypes:**\r\n      - Это библиотека для проверки типов пропсов. Помогает находить ошибки на этапе разработки.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      import PropTypes from 'prop-types';\r\n\r\n      function Greeting({ name }) {\r\n        return <h1>Привет, {name}!</h1>;\r\n      }\r\n\r\n      Greeting.propTypes = {\r\n        name: PropTypes.string.isRequired,\r\n      };\r\n\r\n      function App() {\r\n        return <Greeting name=\"Алиса\" />;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101206,\r\n      question: \"Что такое children в props?\",\r\n      answer: `\r\n      **children:**\r\n      - Это специальный пропс, который позволяет передавать содержимое между открывающим и закрывающим тегами компонента.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function Card({ children }) {\r\n        return <div className=\"card\">{children}</div>;\r\n      }\r\n\r\n      function App() {\r\n        return (\r\n          <Card>\r\n            <h1>Заголовок</h1>\r\n            <p>Текст внутри карточки.</p>\r\n          </Card>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101207,\r\n      question: \"Как использовать деструктуризацию props?\",\r\n      answer: `\r\n      **Деструктуризация props:**\r\n      - Упрощает доступ к значениям пропсов, извлекая их напрямую в параметры функции.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function Greeting({ name, age }) {\r\n        return <h1>Привет, {name}! Тебе {age} лет.</h1>;\r\n      }\r\n\r\n      function App() {\r\n        return <Greeting name=\"Алиса\" age={25} />;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101208,\r\n      question: \"Можно ли передавать объекты через props?\",\r\n      answer: `\r\n      **Передача объектов:**\r\n      - Да, объекты можно передавать через props для передачи сложных данных.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function UserInfo({ user }) {\r\n        return (\r\n          <div>\r\n            <p>Имя: {user.name}</p>\r\n            <p>Возраст: {user.age}</p>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      function App() {\r\n        const user = { name: 'Алиса', age: 25 };\r\n        return <UserInfo user={user} />;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101209,\r\n      question: \"Как работают defaultProps с деструктуризацией?\",\r\n      answer: `\r\n      **defaultProps с деструктуризацией:**\r\n      - Значения по умолчанию можно задать как в \\`defaultProps\\`, так и через параметры функции.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function Greeting({ name = 'Гость' }) {\r\n        return <h1>Привет, {name}!</h1>;\r\n      }\r\n\r\n      Greeting.defaultProps = {\r\n        name: 'Пользователь',\r\n      };\r\n\r\n      function App() {\r\n        return (\r\n          <>\r\n            <Greeting /> {/* Выведет: 'Привет, Пользователь!' */}\r\n            <Greeting name=\"Алиса\" /> {/* Выведет: 'Привет, Алиса!' */}\r\n          </>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101210,\r\n      question: \"Как работает переопределение пропсов?\",\r\n      answer: `\r\n      **Переопределение пропсов:**\r\n      - Если пропс передается явно, он переопределяет значение по умолчанию (\\`defaultProps\\`).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function Greeting({ name }) {\r\n        return <h1>Привет, {name}!</h1>;\r\n      }\r\n\r\n      Greeting.defaultProps = {\r\n        name: 'Гость',\r\n      };\r\n\r\n      function App() {\r\n        return (\r\n          <>\r\n            <Greeting /> {/* Выведет: 'Привет, Гость!' */}\r\n            <Greeting name=\"Алиса\" /> {/* Выведет: 'Привет, Алиса!' */}\r\n          </>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testLocalStorageLocalSession = {\r\n  id: 100725,\r\n  title: \"LocalStorage, SessionStorage\",\r\n  questions: [\r\n    {\r\n      id: 100726,\r\n      question:\r\n        \"Что такое LocalStorage и SessionStorage в JavaScript и для чего они используются?\",\r\n      answer: `\r\n      **LocalStorage**:\r\n      - **Применение:** Хранит данные, доступные между сессиями.\r\n      - **Размер:** Обычно ограничен до 5–10 МБ.\r\n      - **Время жизни:** Данные сохраняются до тех пор, пока пользователь их не удалит.\r\n      - **Доступ:** Доступен только для клиентских скриптов.\r\n\r\n      **SessionStorage**:\r\n      - **Применение:** Хранит данные, специфичные для одной сессии.\r\n      - **Размер:** Обычно ограничен до 5–10 МБ.\r\n      - **Время жизни:** Данные существуют лишь в течение одной вкладки браузера.\r\n      - **Доступ:** Доступен только из текущей вкладки.\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`javascript\r\n      // LocalStorage\r\n      localStorage.setItem('username', 'Alice');\r\n      console.log(localStorage.getItem('username')); // \"Alice\"\r\n\r\n      // SessionStorage\r\n      sessionStorage.setItem('theme', 'dark');\r\n      console.log(sessionStorage.getItem('theme')); // \"dark\"\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100727,\r\n      question:\r\n        \"Как можно использовать JSON для хранения сложных объектов в LocalStorage? Приведите пример.\",\r\n      answer: `\r\n      **LocalStorage может сохранять только строки**, поэтому для работы с объектами, массивами и другими \r\n      сложными структурами данных используется сериализация в JSON (преобразование в строку) и парсинг \r\n      (восстановление из строки).\r\n\r\n      **Сериализация (запись):**\r\n      \\`\\`\\`javascript\r\n      const data = { name: \"Alice\", age: 25, hobbies: [\"coding\", \"music\"] };\r\n      localStorage.setItem('userData', JSON.stringify(data));\r\n      \\`\\`\\`\r\n\r\n      **Парсинг (чтение):**\r\n      \\`\\`\\`javascript\r\n      const savedData = JSON.parse(localStorage.getItem('userData'));\r\n      console.log(savedData); // { name: \"Alice\", age: 25, hobbies: [\"coding\", \"music\"] }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100728,\r\n      question:\r\n        \"Как можно использовать паттерн обсервер для отслеживания изменений в данных, хранящихся в LocalStorage?\",\r\n      answer: `\r\n      **Паттерн Наблюдатель** позволяет отслеживать изменения данных в LocalStorage и автоматически уведомлять \r\n      подписанные компоненты.\r\n\r\n      **Пример реализации:**\r\n      \\`\\`\\`javascript\r\n      class LocalStorageObserver {\r\n        constructor() {\r\n          this.listeners = [];\r\n        }\r\n\r\n        subscribe(callback) {\r\n          this.listeners.push(callback);\r\n        }\r\n\r\n        notify(key, value) {\r\n          this.listeners.forEach((listener) => listener(key, value));\r\n        }\r\n\r\n        setItem(key, value) {\r\n          localStorage.setItem(key, value);\r\n          this.notify(key, value);\r\n        }\r\n\r\n        getItem(key) {\r\n          return localStorage.getItem(key);\r\n        }\r\n      }\r\n\r\n      const storage = new LocalStorageObserver();\r\n\r\n      // Подписка на изменения\r\n      storage.subscribe((key, value) => {\r\n        console.log(\\`Key \"\\${key}\" updated with value: \"\\${value}\"\\`);\r\n      });\r\n\r\n      // Изменение данных\r\n      storage.setItem('theme', 'dark'); // Key \"theme\" updated with value: \"dark\"\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100729,\r\n      question: \"В чём отличие хранения данных в local storage от куки?\",\r\n      answer: `\r\n      **Отличия между LocalStorage и Cookies:**\r\n      1. **Передача данных:** Cookies передаются на сервер при каждом запросе, в то время как данные LocalStorage — нет.\r\n      2. **Объем хранилища:** LocalStorage имеет больший объем (обычно 5–10 МБ), в то время как Cookies ограничены 4 КБ.\r\n      3. **Время жизни:** Cookies могут иметь срок действия, в то время как данные LocalStorage хранятся бессрочно (или удаляются вручную).\r\n      4. **Доступ:** Cookies доступны как на стороне клиента, так и на стороне сервера, а LocalStorage — только на стороне клиента.\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`javascript\r\n      // Cookie\r\n      document.cookie = \"username=Alice; expires=Thu, 01 Jan 2025 00:00:00 UTC; path=/\";\r\n\r\n      // LocalStorage\r\n      localStorage.setItem('username', 'Alice');\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100730,\r\n      question:\r\n        \"В чём отличие хранения данных в local storage от session storage?\",\r\n      answer: `\r\n      **Отличия между LocalStorage и SessionStorage:**\r\n      1. **Время жизни:** \r\n         - LocalStorage хранит данные бессрочно, пока они не будут удалены вручную.\r\n         - SessionStorage хранит данные только в течение одной вкладки браузера (до закрытия вкладки).\r\n      2. **Доступ:** \r\n         - LocalStorage доступен для всех вкладок одного домена.\r\n         - SessionStorage доступен только для текущей вкладки.\r\n      3. **Применение:** \r\n         - LocalStorage используется для долгосрочного хранения данных.\r\n         - SessionStorage используется для временных данных, таких как состояние формы или фильтры.\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`javascript\r\n      // LocalStorage\r\n      localStorage.setItem('theme', 'dark');\r\n\r\n      // SessionStorage\r\n      sessionStorage.setItem('sessionTheme', 'light');\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100731,\r\n      question: \"Какие ограничения есть у LocalStorage и SessionStorage?\",\r\n      answer: `\r\n      **Ограничения:**\r\n      1. **Размер:** Обычно ограничен до 5–10 МБ (зависит от браузера).\r\n      2. **Тип данных:** Может хранить только строки. Для хранения сложных данных требуется сериализация (JSON).\r\n      3. **Безопасность:** Данные доступны только на стороне клиента, но могут быть уязвимы к XSS-атакам.\r\n      4. **Производительность:** Не подходит для хранения больших объемов данных, так как это может замедлить работу приложения.\r\n      `,\r\n    },\r\n    {\r\n      id: 100732,\r\n      question:\r\n        \"Как обеспечить безопасность данных в LocalStorage и SessionStorage?\",\r\n      answer: `\r\n      **Меры безопасности:**\r\n      1. **Защита от XSS-атак:** \r\n         - Используйте Content Security Policy (CSP) для блокировки вредоносных скриптов.\r\n         - Не храните чувствительные данные (например, токены аутентификации) в LocalStorage.\r\n      2. **Шифрование:** \r\n         - Шифруйте данные перед сохранением.\r\n      3. **Минимизация данных:** \r\n         - Храните только необходимые данные.\r\n      4. **Использование HTTP-only Cookies:** \r\n         - Для чувствительных данных используйте Cookies с флагом \\`HttpOnly\\`.\r\n\r\n      **Пример шифрования:**\r\n      \\`\\`\\`javascript\r\n      const encrypt = (data) => btoa(data); // Простое шифрование Base64\r\n      const decrypt = (data) => atob(data);\r\n\r\n      const sensitiveData = \"secretToken\";\r\n      localStorage.setItem('token', encrypt(sensitiveData));\r\n\r\n      const storedToken = decrypt(localStorage.getItem('token'));\r\n      console.log(storedToken); // \"secretToken\"\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100733,\r\n      question: \"Как очистить данные в LocalStorage и SessionStorage?\",\r\n      answer: `\r\n      **Очистка данных:**\r\n      - **LocalStorage:** \r\n        \\`\\`\\`javascript\r\n        localStorage.clear(); // Очищает все данные\r\n        localStorage.removeItem('key'); // Удаляет конкретный ключ\r\n        \\`\\`\\`\r\n      - **SessionStorage:** \r\n        \\`\\`\\`javascript\r\n        sessionStorage.clear(); // Очищает все данные\r\n        sessionStorage.removeItem('key'); // Удаляет конкретный ключ\r\n        \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testJSX = {\r\n  id: 101225,\r\n  title: \"JSX\",\r\n  questions: [\r\n    {\r\n      id: 101226,\r\n      question: \"Что такое JSX?\",\r\n      answer: `\r\n      **JSX (JavaScript XML):**\r\n      - Это синтаксическое расширение JavaScript, которое позволяет писать HTML-подобный код для создания элементов React.\r\n      - JSX преобразуется в вызовы \\`React.createElement\\` при компиляции.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const element = <h1>Привет, мир!</h1>;\r\n      \\`\\`\\`\r\n\r\n      **После компиляции:**\r\n      \\`\\`\\`javascript\r\n      const element = React.createElement('h1', null, 'Привет, мир!');\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101227,\r\n      question: \"Зачем нужен JSX?\",\r\n      answer: `\r\n      **Цели использования JSX:**\r\n      1. **Удобство написания:**\r\n         - JSX делает код более читаемым и похожим на HTML.\r\n      2. **Интеграция логики и разметки:**\r\n         - Позволяет совмещать JavaScript и HTML в одном файле.\r\n      3. **Создание деревьев элементов:**\r\n         - Упрощает создание сложных структур UI.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const name = 'Алиса';\r\n      const element = <h1>Привет, {name}!</h1>;\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101228,\r\n      question: \"Как вставить JavaScript в JSX?\",\r\n      answer: `\r\n      **Вставка JavaScript:**\r\n      - Используйте фигурные скобки \\`{ }\\` для вставки JavaScript-выражений.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const user = { name: 'Алиса', age: 25 };\r\n\r\n      function App() {\r\n        return (\r\n          <div>\r\n            <p>Имя: {user.name}</p>\r\n            <p>Возраст: {user.age}</p>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101229,\r\n      question: \"Как использовать условия в JSX?\",\r\n      answer: `\r\n      **Условия в JSX:**\r\n      - Используйте тернарный оператор или логические выражения внутри фигурных скобок.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function Greeting({ isLoggedIn }) {\r\n        return (\r\n          <div>\r\n            {isLoggedIn ? <p>Добро пожаловать!</p> : <p>Пожалуйста, войдите.</p>}\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101230,\r\n      question: \"Как передать атрибуты в JSX?\",\r\n      answer: `\r\n      **Передача атрибутов:**\r\n      - Атрибуты записываются как в HTML, но используют camelCase для названий (например, \\`className\\` вместо \\`class\\`).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const element = (\r\n        <div className=\"container\" style={{ color: 'red' }}>\r\n          Текст\r\n        </div>\r\n      );\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101231,\r\n      question: \"Как работают дочерние элементы в JSX?\",\r\n      answer: `\r\n      **Дочерние элементы:**\r\n      - Дочерние элементы помещаются между открывающим и закрывающим тегами.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const element = (\r\n        <div>\r\n          <h1>Заголовок</h1>\r\n          <p>Текст</p>\r\n        </div>\r\n      );\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101232,\r\n      question: \"Можно ли использовать массивы в JSX?\",\r\n      answer: `\r\n      **Массивы в JSX:**\r\n      - Да, массивы можно рендерить напрямую. Каждый элемент массива должен иметь уникальный \\`key\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const items = ['Яблоко', 'Банан', 'Вишня'];\r\n\r\n      function App() {\r\n        return (\r\n          <ul>\r\n            {items.map((item, index) => (\r\n              <li key={index}>{item}</li>\r\n            ))}\r\n          </ul>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101233,\r\n      question: \"Что такое key в JSX и зачем он нужен?\",\r\n      answer: `\r\n      **Key:**\r\n      - Атрибут \\`key\\` помогает React идентифицировать, какие элементы изменились, были добавлены или удалены.\r\n      - Должен быть уникальным среди соседних элементов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const items = ['Яблоко', 'Банан', 'Вишня'];\r\n\r\n      function App() {\r\n        return (\r\n          <ul>\r\n            {items.map((item) => (\r\n              <li key={item}>{item}</li>\r\n            ))}\r\n          </ul>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101234,\r\n      question: \"Какие ограничения у JSX?\",\r\n      answer: `\r\n      **Ограничения:**\r\n      1. **Единый корневой элемент:**\r\n         - JSX должен иметь один корневой элемент (например, \\`<div>\\` или \\`<React.Fragment>\\`).\r\n      2. **Закрытие тегов:**\r\n         - Все теги должны быть закрытыми (например, \\`<img />\\`).\r\n      3. **Именование атрибутов:**\r\n         - Используйте camelCase для атрибутов (например, \\`className\\`, \\`onClick\\`).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Неверно:\r\n      const element = (\r\n        <div>\r\n          <h1>Заголовок</h1>\r\n          <input type=\"text\">\r\n        </div>\r\n      );\r\n\r\n      // Верно:\r\n      const element = (\r\n        <div>\r\n          <h1>Заголовок</h1>\r\n          <input type=\"text\" />\r\n        </div>\r\n      );\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101235,\r\n      question: \"Как использовать комментарии в JSX?\",\r\n      answer: `\r\n      **Комментарии в JSX:**\r\n      - Комментарии пишутся внутри фигурных скобок \\`{/* ... */}\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const element = (\r\n        <div>\r\n          {/* Это комментарий */}\r\n          <h1>Заголовок</h1>\r\n        </div>\r\n      );\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101236,\r\n      question: \"Как работает React.Fragment?\",\r\n      answer: `\r\n      **React.Fragment:**\r\n      - Позволяет группировать дочерние элементы без добавления лишнего DOM-узла.\r\n      - Может быть записан как \\`<></>\\` (сокращенная форма).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function App() {\r\n        return (\r\n          <>\r\n            <h1>Заголовок</h1>\r\n            <p>Текст</p>\r\n          </>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testSemantic = {\r\n  id: 100900,\r\n  title: \"Semantic (Семантика)\",\r\n  questions: [\r\n    {\r\n      id: 100901,\r\n      question: \"Что такое семантика в программировании?\",\r\n      answer: `\r\n      **Семантика** — это область, изучающая смысл и поведение кода.\r\n      - Определяет, как интерпретируются различные конструкции языка.\r\n      - Включает правила работы с типами данных, операторами, выражениями и функциями.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      let a = 5;\r\n      let b = '10';\r\n      console.log(a + b); // '510' (строковая конкатенация)\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100902,\r\n      question: \"Как работает неявное преобразование типов в JavaScript?\",\r\n      answer: `\r\n      **Неявное преобразование типов:**\r\n      - Происходит автоматически при выполнении операций с разными типами данных.\r\n      - Примеры:\r\n        - \\`+': Если один из операндов строка, второй преобразуется в строку.\r\n        - \\`-'/\\`*\\`/\\`/: Преобразуют операнды в числа.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      console.log(5 + '5'); // '55'\r\n      console.log(5 - '3'); // 2\r\n      console.log('10' * 2); // 20\r\n      console.log('abc' * 2); // NaN\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100903,\r\n      question: \"Что такое оператор === и чем он отличается от ==?\",\r\n      answer: `\r\n      **Операторы сравнения:**\r\n      - \\`===\\`: Проверяет значения и их типы (строгое сравнение).\r\n      - \\`==\\`: Проверяет только значения, выполняя неявное преобразование типов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      console.log(5 == '5');  // true (неявное преобразование)\r\n      console.log(5 === '5'); // false (разные типы)\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100904,\r\n      question: \"Что такое ложные значения (falsy values)?\",\r\n      answer: `\r\n      **Ложные значения:**\r\n      - Значения, которые становятся \\`false\\` при приведении к булевому типу.\r\n      - Примеры: \\`false\\`, \\`0\\`, \\`''\\` (пустая строка), \\`null\\`, \\`undefined\\`, \\`NaN\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      if (0) {\r\n        console.log('Это никогда не выполнится');\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100905,\r\n      question: \"Что такое замыкания (closures) с точки зрения семантики?\",\r\n      answer: `\r\n      **Замыкания:**\r\n      - Функция сохраняет доступ к переменным из своей внешней области видимости, даже после завершения работы родительской функции.\r\n      - Это семантический механизм, который позволяет создавать \"захваченные\" состояния.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function createCounter() {\r\n        let count = 0;\r\n        return function () {\r\n          count++;\r\n          return count;\r\n        };\r\n      }\r\n\r\n      const counter = createCounter();\r\n      console.log(counter()); // 1\r\n      console.log(counter()); // 2\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100906,\r\n      question: \"Что такое this и как определяется его значение?\",\r\n      answer: `\r\n      **this:**\r\n      - Ключевое слово, которое указывает на текущий контекст выполнения.\r\n      - Его значение зависит от способа вызова функции:\r\n        - В методе объекта: ссылается на объект.\r\n        - В глобальной области: \\`window\\` (в браузере) или \\`global\\` (в Node.js).\r\n        - В стрелочной функции: берется из внешнего лексического окружения.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const obj = {\r\n        value: 42,\r\n        getValue: function () {\r\n          return this.value;\r\n        },\r\n      };\r\n\r\n      console.log(obj.getValue()); // 42\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100907,\r\n      question: \"Что такое деструктуризация с точки зрения семантики?\",\r\n      answer: `\r\n      **Деструктуризация:**\r\n      - Механизм извлечения значений из массивов или объектов и присваивания их переменным.\r\n      - Упрощает работу со сложными структурами данных.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const person = { name: 'Alice', age: 30 };\r\n      const { name, age } = person;\r\n\r\n      console.log(name); // Alice\r\n      console.log(age);  // 30\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100908,\r\n      question: \"Что такое семантика оператора spread (...)?\",\r\n      answer: `\r\n      **Spread оператор:**\r\n      - Используется для расширения массивов или объектов.\r\n      - Позволяет создавать копии или объединять данные.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const arr1 = [1, 2];\r\n      const arr2 = [...arr1, 3, 4]; // [1, 2, 3, 4]\r\n\r\n      const obj1 = { a: 1 };\r\n      const obj2 = { ...obj1, b: 2 }; // { a: 1, b: 2 }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100909,\r\n      question: \"Что такое семантика async/await?\",\r\n      answer: `\r\n      **Async/await:**\r\n      - Синтаксический сахар для работы с промисами.\r\n      - \\`async\\`: Функция всегда возвращает промис.\r\n      - \\`await\\`: Приостанавливает выполнение функции до разрешения промиса.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      async function fetchData() {\r\n        const response = await fetch('https://api.example.com/data'); \r\n        const data = await response.json();\r\n        return data;\r\n      }\r\n\r\n      fetchData().then((data) => console.log(data));\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100910,\r\n      question: \"Что такое семантика оператора ?? (nullish coalescing)?\",\r\n      answer: `\r\n      **Nullish coalescing operator (\\`??\\`):**\r\n      - Возвращает правый операнд, если левый равен \\`null\\` или \\`undefined\\`.\r\n      - Отличие от \\`||\\`: Не реагирует на другие \"ложные\" значения (\\`0\\`, \\`''\\`, \\`false\\`).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const value = null ?? 'default';\r\n      console.log(value); // 'default'\r\n\r\n      const value2 = 0 ?? 'default';\r\n      console.log(value2); // 0\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testSemanticCriticalRenderingPath = {\r\n  id: 101650,\r\n  title: \"Semantic, Critical Rendering path, block/inline elements\",\r\n  questions: [\r\n    {\r\n      id: 101651,\r\n      question: \"Объясните, какова базовая структура HTML-документа и какие основные теги в нее входят?\",\r\n      answer: `\r\nОбязательные:\r\n<!DOCTYPE html> — объявление типа документа (HTML5).\r\n<html> — корневой элемент.\r\n<head> — служебная информация (метаданные, стили, скрипты).\r\n<body> — видимое содержимое страницы.\r\nВ <head>:\r\n<meta charset=\"UTF-8\"> — кодировка.\r\n<title> — заголовок вкладки браузера.\r\n<meta name=\"viewport\"> — адаптивность для мобильных устройств.\r\n      `,\r\n    },\r\n    {\r\n      id: 101652,\r\n      question: \"Какие основные различия между блочными и строчными элементами в HTML?\",\r\n      answer: `\r\nБлочные элементы (block):\r\nНачинаются с новой строки (как абзац в тексте).\r\nЗанимают всю доступную ширину родителя, даже если контент узкий.\r\nПолностью поддерживают CSS-бокс-модель (width, height, margin, padding, border).\r\nМогут содержать другие блочные и строчные элементы (например, <div> внутри <section>).\r\n\r\nСтрочные элементы (inline):\r\nРасполагаются в строку (как слова в тексте).\r\nШирина и высота зависят от контента, игнорируют width и height.\r\nВертикальные margin и padding не влияют на поток документа (не \"раздвигают\" соседние элементы).\r\nОбычно содержат только текст или другие строчные элементы (например, <span> внутри <a>).\r\n      `,\r\n    },\r\n    {\r\n      id: 101653,\r\n      question: \"Что такое критический путь рендеринга и как его можно оптимизировать?\",\r\n      answer: `\r\nЭто последовательность шагов, которые браузер выполняет для преобразования HTML, CSS и JavaScript в пиксели на экране. Оптимизация CRP ускоряет отображение контента, улучшая воспринимаемую производительность.\r\n\r\nЭтапы критического пути:\r\nЗагрузка HTML → Построение DOM (Document Object Model).\r\nЗагрузка CSS → Построение CSSOM (CSS Object Model).\r\nОбъединение DOM и CSSOM → Формирование Render Tree (только видимые элементы).\r\nРасчёт макета (Layout) → Определение размеров и позиций элементов.\r\nОтрисовка (Paint) → Преобразование в пиксели.\r\nКомпозиция (Composite) → Слои и анимации (если есть).\r\n\r\n\r\nКак оптимизировать CRP?\r\n1.Минимизация блокирующих ресурсов \r\n1)CSS: Используйте <link rel=\"stylesheet\" media=\"print\"> для неключевых стилей.\r\nРазделяйте CSS на критический (в <head>) и асинхронный (загружаемый через preload).\r\nМинифицируйте CSS (cssnano, purgecss).\r\n2)JavaScript: Делайте скрипты асинхронными (async/defer)\r\nПереносите скрипты в конец <body> (если не нужны для рендеринга).\r\n\r\n\r\n2.Ускорение построения DOM/CSSOM\r\nОптимизация HTML:\r\nУдаляйте лишние теги, комментарии.\r\nИспользуйте прогрессивный рендеринг (например, ленивую загрузку).\r\nInline критического CSS\r\nВстраивайте стили, необходимые для первого экрана, прямо в <head>\r\n\r\n\r\n3.Оптимизация Layout и Paint\r\nИзбегайте \"layout thrashing\" — частых пересчётов макета из-за JS.\r\nИспользуйте transform и opacity для анимаций (не затрагивают Layout/Paint).\r\n\r\n\r\n4.Приоритезация контента\r\nЛенивая загрузка изображений\r\nПредзагрузка ключевых ресурсов\r\n\r\n\r\n5.Server-Side Optimizations\r\nСжатие (Gzip/Brotli) для HTML/CSS/JS.\r\nHTTP/2 для параллельной загрузки.\r\nSSR (Server-Side Rendering) для быстрого первого рендера.\r\n\r\n\r\nКоротко: Оптимизация CRP сокращает время до первого рендера, улучшая UX и SEO. Ключевые методы — минификация, асинхронная загрузка, приоритезация контента и избегание лишних перерасчётов.\r\n      `,\r\n    }\r\n  ],\r\n};","export const testClasses = {\r\n  id: 101625,\r\n  title: \"Classes\",\r\n  questions: [\r\n    {\r\n      id: 101626,\r\n      question:\r\n        \"Как создать класс в JavaScript и какие ключевые слова используются для этого?\",\r\n      answer: `\r\n      **Создание класса:**\r\n      - Ключевое слово \\`class\\` используется для объявления класса.\r\n      - \\`constructor()\\` — специальный метод для инициализации объекта.\r\n      - \\`this\\` — ссылка на текущий экземпляр класса.\r\n      - \\`new\\` — оператор для создания нового экземпляра класса.\r\n      - \\`extends\\` — используется для наследования.\r\n      - \\`static\\` — определяет статические методы/поля (принадлежат классу, а не объекту).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Animal {\r\n        constructor(name) {\r\n          this.name = name;\r\n        }\r\n        speak() {\r\n          console.log(\\`\\${this.name} makes a noise.\\`);\r\n        }\r\n      }\r\n\r\n      const dog = new Animal('Rex');\r\n      dog.speak(); // Rex makes a noise.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101627,\r\n      question:\r\n        \"Как реализовать наследование в JavaScript, используя классы, и как работает конструктор в дочернем классе?\",\r\n      answer: `\r\n      **Наследование:**\r\n      - Ключевое слово \\`extends\\` указывает, от какого класса наследоваться.\r\n      - \\`super()\\` вызывает конструктор родительского класса (обязателен в конструкторе дочернего класса).\r\n      - \\`super.method()\\` — обращение к методу родителя.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Dog extends Animal {\r\n        constructor(name, breed) {\r\n          super(name); // Вызов конструктора родителя\r\n          this.breed = breed;\r\n        }\r\n        speak() {\r\n          console.log(\\`\\${this.name} barks.\\`);\r\n        }\r\n      }\r\n\r\n      const dog = new Dog('Buddy', 'Golden Retriever');\r\n      dog.speak(); // Buddy barks.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101628,\r\n      question:\r\n        \"Что такое полиморфизм в контексте классов в JavaScript и как его можно достичь?\",\r\n      answer: `\r\n      **Полиморфизм:**\r\n      - Это возможность объектов разных классов использовать методы с одинаковым именем, но разной реализацией.\r\n      - В JavaScript он достигается через:\r\n        1. **Наследование и переопределение методов:**\r\n           \\`\\`\\`javascript\r\n           class Cat extends Animal {\r\n             speak() {\r\n               console.log(\\`\\${this.name} meows.\\`);\r\n             }\r\n           }\r\n\r\n           const cat = new Cat('Whiskers');\r\n           cat.speak(); // Whiskers meows.\r\n           \\`\\`\\`\r\n        2. **Утиную типизацию:** Проверка наличия метода у объекта.\r\n      `,\r\n    },\r\n    {\r\n      id: 101629,\r\n      question: \"Что такое класс в JavaScript?\",\r\n      answer: `\r\n      **Класс** — это шаблон для создания объектов, определяющий их свойства и методы. \r\n      Классы в JavaScript являются синтаксическим сахаром над прототипным наследованием.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Car {\r\n        constructor(brand) {\r\n          this.brand = brand;\r\n        }\r\n        drive() {\r\n          console.log(\\`\\${this.brand} is driving.\\`);\r\n        }\r\n      }\r\n\r\n      const myCar = new Car('Toyota');\r\n      myCar.drive(); // Toyota is driving.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101630,\r\n      question: \"Что такое конструктор класса?\",\r\n      answer: `\r\n      **Конструктор** — это специальный метод, который вызывается при создании нового экземпляра класса. \r\n      Он используется для инициализации свойств объекта.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Person {\r\n        constructor(name, age) {\r\n          this.name = name;\r\n          this.age = age;\r\n        }\r\n      }\r\n\r\n      const person = new Person('Alice', 30);\r\n      console.log(person.name); // Alice\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101631,\r\n      question: \"Как создается класс?\",\r\n      answer: `\r\n      **Создание класса:**\r\n      - Используется ключевое слово \\`class\\`.\r\n      - Внутри класса могут быть методы и свойства.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Rectangle {\r\n        constructor(width, height) {\r\n          this.width = width;\r\n          this.height = height;\r\n        }\r\n        area() {\r\n          return this.width * this.height;\r\n        }\r\n      }\r\n\r\n      const rect = new Rectangle(5, 10);\r\n      console.log(rect.area()); // 50\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101632,\r\n      question: \"Что такое наследование классов?\",\r\n      answer: `\r\n      **Наследование** позволяет создавать новые классы на основе существующих, наследуя их свойства и методы. \r\n      Это помогает повторно использовать код и организовывать его логически.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Vehicle {\r\n        move() {\r\n          console.log('Moving...');\r\n        }\r\n      }\r\n\r\n      class Car extends Vehicle {\r\n        drive() {\r\n          console.log('Driving...');\r\n        }\r\n      }\r\n\r\n      const car = new Car();\r\n      car.move(); // Moving...\r\n      car.drive(); // Driving...\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101633,\r\n      question: \"Что такое super() и когда он используется?\",\r\n      answer: `\r\n      **super():**\r\n      - Используется в дочерних классах для вызова конструктора родительского класса.\r\n      - Также может использоваться для доступа к методам и свойствам родителя.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Parent {\r\n        constructor(name) {\r\n          this.name = name;\r\n        }\r\n        greet() {\r\n          console.log(\\`Hello, \\${this.name}!\\`);\r\n        }\r\n      }\r\n\r\n      class Child extends Parent {\r\n        constructor(name, age) {\r\n          super(name); // Вызов конструктора родителя\r\n          this.age = age;\r\n        }\r\n        info() {\r\n          super.greet(); // Использование метода родителя\r\n          console.log(\\`I am \\${this.age} years old.\\`);\r\n        }\r\n      }\r\n\r\n      const child = new Child('Alice', 10);\r\n      child.info(); // Hello, Alice! I am 10 years old.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101634,\r\n      question: \"Как создать экземпляр класса?\",\r\n      answer: `\r\n      **Создание экземпляра:**\r\n      - Используется оператор \\`new\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class User {\r\n        constructor(name) {\r\n          this.name = name;\r\n        }\r\n      }\r\n\r\n      const user = new User('John');\r\n      console.log(user.name); // John\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101635,\r\n      question: \"Что такое статические методы и свойства?\",\r\n      answer: `\r\n      **Статические методы и свойства:**\r\n      - Принадлежат самому классу, а не его экземплярам.\r\n      - Объявляются с помощью ключевого слова \\`static\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class MathUtils {\r\n        static add(a, b) {\r\n          return a + b;\r\n        }\r\n      }\r\n\r\n      console.log(MathUtils.add(2, 3)); // 5\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101636,\r\n      question: \"В чем разница между классами и прототипным наследованием?\",\r\n      answer: `\r\n      **Разница:**\r\n      - Классы в JavaScript — это синтаксический сахар над прототипным наследованием.\r\n      - Прототипное наследование работает напрямую с прототипами объектов, тогда как классы предоставляют более удобный синтаксис.\r\n\r\n      **Пример прототипного наследования:**\r\n      \\`\\`\\`javascript\r\n      function Animal(name) {\r\n        this.name = name;\r\n      }\r\n      Animal.prototype.speak = function () {\r\n        console.log(\\`\\${this.name} makes a noise.\\`);\r\n      };\r\n\r\n      const dog = new Animal('Rex');\r\n      dog.speak(); // Rex makes a noise.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101637,\r\n      question: \"Что такое методы доступа (геттеры и сеттеры)?\",\r\n      answer: `\r\n      **Геттеры и сеттеры:**\r\n      - Геттеры (\\`get\\`) позволяют контролировать доступ к свойствам при чтении.\r\n      - Сеттеры (\\`set\\`) позволяют контролировать доступ к свойствам при записи.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Rectangle {\r\n        constructor(width, height) {\r\n          this._width = width;\r\n          this._height = height;\r\n        }\r\n        get area() {\r\n          return this._width * this._height;\r\n        }\r\n        set width(value) {\r\n          if (value > 0) {\r\n            this._width = value;\r\n          }\r\n        }\r\n      }\r\n\r\n      const rect = new Rectangle(5, 10);\r\n      console.log(rect.area); // 50\r\n      rect.width = 8;\r\n      console.log(rect.area); // 80\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101638,\r\n      question: \"Как работают приватные свойства и методы?\",\r\n      answer: `\r\n      **Приватные свойства и методы:**\r\n      - Начинаются с \\`#\\` и доступны только внутри класса.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class BankAccount {\r\n        #balance = 0;\r\n\r\n        deposit(amount) {\r\n          this.#balance += amount;\r\n        }\r\n\r\n        withdraw(amount) {\r\n          if (amount <= this.#balance) {\r\n            this.#balance -= amount;\r\n          }\r\n        }\r\n\r\n        getBalance() {\r\n          return this.#balance;\r\n        }\r\n      }\r\n\r\n      const account = new BankAccount();\r\n      account.deposit(100);\r\n      console.log(account.getBalance()); // 100\r\n      account.withdraw(50);\r\n      console.log(account.getBalance()); // 50\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101639,\r\n      question: \"Какие есть способы работы с классами в JavaScript?\",\r\n      answer: `\r\n      **Основные способы:**\r\n      1. Создание классов с помощью \\`class\\`.\r\n      2. Реализация наследования через \\`extends\\`.\r\n      3. Использование геттеров и сеттеров для контроля доступа к свойствам.\r\n      4. Определение приватных свойств и методов с помощью \\`#\\`.\r\n      5. Использование статических методов и свойств.\r\n      `,\r\n    },\r\n    {\r\n      id: 101640,\r\n      question: \"Как реализовать миксины в JavaScript?\",\r\n      answer: `\r\n      **Миксины:**\r\n      - Это функции, которые добавляют методы или свойства в класс.\r\n      - Позволяют реализовать множественное наследование.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const Serializable = (BaseClass) => class extends BaseClass {\r\n        serialize() {\r\n          return JSON.stringify(this);\r\n        }\r\n      };\r\n\r\n      class User {\r\n        constructor(name, age) {\r\n          this.name = name;\r\n          this.age = age;\r\n        }\r\n      }\r\n\r\n      const SerializableUser = Serializable(User);\r\n      const user = new SerializableUser('Alice', 30);\r\n      console.log(user.serialize()); // {\"name\":\"Alice\",\"age\":30}\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testEvents = {\r\n  id: 101350,\r\n  title: \"Events\",\r\n  questions: [\r\n    {\r\n      id: 101351,\r\n      question: \"Что такое DOM событие?\",\r\n      answer: `\r\n      **DOM-событие:**\r\n      - Это сигнал от браузера, сообщающий о том, что произошло какое-то событие на веб-странице.\r\n      - Примеры: клик мышью, ввод текста, загрузка страницы, наведение курсора и т.д.\r\n      `,\r\n    },\r\n    {\r\n      id: 101352,\r\n      question: \"Как отлавливать DOM-события в JavaScript?\",\r\n      answer: `\r\n      **Отлавливание событий:**\r\n      1. **Использование \\`addEventListener\\`:**\r\n         \\`\\`\\`javascript\r\n         element.addEventListener(event, callback, [useCapture]);\r\n         \\`\\`\\`\r\n         - \\`event\\`: Тип события (например, \\`\"click\"\\`, \\`\"keydown\"\\`, \\`\"load\"\\`).\r\n         - \\`callback\\`: Функция, которая выполняется при возникновении события.\r\n         - \\`[useCapture]\\`: Логическое значение (\\`true\\` или \\`false\\`), указывающее, нужно ли отлавливать событие на этапе захвата.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const button = document.querySelector('button');\r\n      button.addEventListener('click', () => {\r\n        console.log('Button clicked!');\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101353,\r\n      question:\r\n        \"Как можно предотвратить стандартное поведение события в JavaScript?\",\r\n      answer: `\r\n      **Предотвращение стандартного поведения:**\r\n      - Используйте метод \\`e.preventDefault()\\` объекта события.\r\n      - Этот метод останавливает выполнение стандартного действия, связанного с событием.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const link = document.querySelector('a');\r\n      link.addEventListener('click', (e) => {\r\n        e.preventDefault(); // Предотвращает переход по ссылке\r\n        console.log('Link click prevented');\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101354,\r\n      question:\r\n        \"Объясните, что такое всплытие и перехват событий. Как вы можете использовать делегирование событий, чтобы оптимизировать обработку событий на веб-странице?\",\r\n      answer: `\r\n      **Всплытие событий (Event Bubbling):**\r\n      - Событие сначала обрабатывается на целевом элементе, а затем \"всплывает\" вверх по иерархии DOM, вызывая обработчики на родительских элементах.\r\n\r\n      **Перехват событий (Event Capturing):**\r\n      - Событие сначала обрабатывается на самом верхнем уровне (родительском элементе), а затем \"спускается\" вниз к целевому элементу.\r\n\r\n      **Делегирование событий:**\r\n      - Установите один обработчик события на родительский элемент, который будет обрабатывать события для всех его дочерних элементов.\r\n      - **Оптимизация производительности:** Уменьшается количество обработчиков и затраты на память.\r\n      - **Динамическое добавление элементов:** Обработчик работает с новыми элементами без необходимости пересоздания.\r\n\r\n      **Пример делегирования:**\r\n      \\`\\`\\`javascript\r\n      document.body.addEventListener('click', (e) => {\r\n        if (e.target.tagName === 'BUTTON') {\r\n          console.log('Button clicked via delegation');\r\n        }\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101355,\r\n      question: \"e.preventDefault() и e.stopPropagation(), для чего нужны?\",\r\n      answer: `\r\n      **e.preventDefault():**\r\n      - Отменяет стандартное поведение браузера, связанное с событием.\r\n      - Например, предотвращает переход по ссылке при клике.\r\n\r\n      **e.stopPropagation():**\r\n      - Останавливает всплытие события, предотвращая его передачу родительским элементам.\r\n      - Это означает, что обработчики событий на родительских элементах не будут вызваны.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const link = document.querySelector('a');\r\n      link.addEventListener('click', (e) => {\r\n        e.preventDefault(); // Предотвращает переход по ссылке\r\n        e.stopPropagation(); // Останавливает всплытие\r\n        console.log('Link click handled');\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101356,\r\n      question: \"Когда использовать e.preventDefault()?\",\r\n      answer: `\r\n      **Когда использовать:**\r\n      - Когда нужно предотвратить стандартное поведение элемента, но разрешить дальнейшую обработку события другими обработчиками или на других уровнях DOM.\r\n      - Например, предотвратить отправку формы или переход по ссылке.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const form = document.querySelector('form');\r\n      form.addEventListener('submit', (e) => {\r\n        e.preventDefault(); // Предотвращает отправку формы\r\n        console.log('Form submission prevented');\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101357,\r\n      question: \"Когда использовать e.stopPropagation()?\",\r\n      answer: `\r\n      **Когда использовать:**\r\n      - Когда нужно, чтобы событие обрабатывалось только на текущем элементе и не распространялось на родительские элементы.\r\n      - Например, чтобы избежать срабатывания обработчиков на родительских элементах.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const button = document.querySelector('button');\r\n      button.addEventListener('click', (e) => {\r\n        e.stopPropagation(); // Останавливает всплытие\r\n        console.log('Button click stopped propagation');\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101358,\r\n      question:\r\n        \"Можно ли использовать вместе e.preventDefault() и e.stopPropagation()?\",\r\n      answer: `\r\n      **Да, можно использовать вместе:**\r\n      - \\`e.preventDefault()\\` предотвращает стандартное поведение.\r\n      - \\`e.stopPropagation()\\` останавливает всплытие события.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const link = document.querySelector('a');\r\n      link.addEventListener('click', (e) => {\r\n        e.preventDefault(); // Предотвращает переход по ссылке\r\n        e.stopPropagation(); // Останавливает всплытие\r\n        console.log('Link click fully controlled');\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testPureFunction = {\r\n  id: 101550,\r\n  title: \"PureFunction (чистая функция)\",\r\n  questions: [\r\n    {\r\n      id: 101551,\r\n      question: \"Что такое чистая функция?\",\r\n      answer: `\r\n      **Чистая функция (pure function):**\r\n      - Это функция, которая для одинаковых входных данных всегда возвращает один и тот же результат.\r\n      - Не имеет побочных эффектов (не изменяет глобальные переменные, не модифицирует переданные аргументы).\r\n\r\n      **Пример чистой функции:**\r\n      \\`\\`\\`javascript\r\n      function add(a, b) {\r\n        return a + b;\r\n      }\r\n\r\n      console.log(add(2, 3)); // 5\r\n      console.log(add(2, 3)); // 5 (всегда одинаковый результат)\r\n      \\`\\`\\`\r\n\r\n      **Пример нечистой функции:**\r\n      \\`\\`\\`javascript\r\n      let counter = 0;\r\n\r\n      function increment() {\r\n        counter++;\r\n        return counter;\r\n      }\r\n\r\n      console.log(increment()); // 1\r\n      console.log(increment()); // 2 (результат зависит от внешнего состояния)\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101552,\r\n      question: \"Что такое PureComponent?\",\r\n      answer: `\r\n      **React.PureComponent:**\r\n      - Это базовый класс для компонентов React, который автоматически реализует метод \\`shouldComponentUpdate\\` с использованием поверхностного сравнения пропсов и состояния.\r\n      - Если пропсы или состояние не изменились, компонент не будет перерисовываться.\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`javascript\r\n      class MyComponent extends React.PureComponent {\r\n        render() {\r\n          return <div>{this.props.value}</div>;\r\n        }\r\n      }\r\n\r\n      // Перерисовка произойдет только при изменении \\`value\\`.\r\n      \\`\\`\\`\r\n\r\n      **Важно:**\r\n      - PureComponent выполняет только поверхностное сравнение, поэтому он не подходит для сложных структур данных (например, вложенных объектов).\r\n      `,\r\n    },\r\n    {\r\n      id: 101553,\r\n      question: \"Чем отличается PureComponent от обычной функции?\",\r\n      answer: `\r\n      **Различия:**\r\n      1. **PureComponent:**\r\n         - Это классовый компонент React.\r\n         - Автоматически реализует поверхностное сравнение пропсов и состояния.\r\n         - Предотвращает ненужные перерисовки.\r\n\r\n      2. **Обычная функция:**\r\n         - Просто исполняемый блок кода.\r\n         - Может быть как чистой, так и нечистой.\r\n         - Не имеет встроенной логики сравнения пропсов или состояния.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // PureComponent\r\n      class Counter extends React.PureComponent {\r\n        render() {\r\n          return <div>{this.props.count}</div>;\r\n        }\r\n      }\r\n\r\n      // Обычная функция\r\n      function multiply(a, b) {\r\n        return a * b;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101554,\r\n      question: \"Чем отличается чистая функция от нечистой функции?\",\r\n      answer: `\r\n      **Различия:**\r\n      1. **Чистая функция:**\r\n         - Всегда возвращает одинаковый результат для одних и тех же входных данных.\r\n         - Не имеет побочных эффектов (не изменяет внешние переменные, не взаимодействует с внешними ресурсами).\r\n\r\n      2. **Нечистая функция:**\r\n         - Может возвращать разные результаты для одних и тех же входных данных (например, зависит от времени или случайных чисел).\r\n         - Может иметь побочные эффекты (изменение глобальных переменных, взаимодействие с API, запись в файлы).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Чистая функция\r\n      function square(x) {\r\n        return x * x;\r\n      }\r\n\r\n      // Нечистая функция\r\n      let total = 0;\r\n      function addToTotal(amount) {\r\n        total += amount;\r\n        return total;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101555,\r\n      question: \"Основные признаки чистой функции\",\r\n      answer: `\r\n      **Признаки чистой функции:**\r\n      1. **Детерминированность:**\r\n         - Для одинаковых входных данных всегда возвращает одинаковый результат.\r\n      2. **Отсутствие побочных эффектов:**\r\n         - Не изменяет глобальные переменные, не взаимодействует с внешними ресурсами (API, файлы, базы данных).\r\n      3. **Зависимость только от входных данных:**\r\n         - Результат определяется только входными аргументами.\r\n      4. **Упрощение тестирования:**\r\n         - Легко тестировать, так как результат предсказуем.\r\n      5. **Модульность и переиспользование:**\r\n         - Легко использовать повторно в разных частях программы.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Чистая функция\r\n      function calculateArea(width, height) {\r\n        return width * height;\r\n      }\r\n\r\n      console.log(calculateArea(5, 10)); // 50\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101556,\r\n      question: \"В каких случаях использовать PureComponent?\",\r\n      answer: `\r\n      **Когда использовать:**\r\n      1. **Компоненты с простыми пропсами и состоянием:**\r\n         - Например, отображение текста или чисел.\r\n      2. **Оптимизация производительности:**\r\n         - Когда нужно избежать ненужных перерисовок.\r\n      3. **Автоматическое сравнение:**\r\n         - Когда поверхностное сравнение достаточно для обработки изменений.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class DisplayValue extends React.PureComponent {\r\n        render() {\r\n          return <p>{this.props.value}</p>;\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101557,\r\n      question: \"В каких случаях не использовать PureComponent?\",\r\n      answer: `\r\n      **Когда не использовать:**\r\n      1. **Сложные вложенные структуры данных:**\r\n         - Поверхностное сравнение не работает с вложенными объектами или массивами.\r\n      2. **Глубокое сравнение:**\r\n         - Если требуется проверка на глубокое равенство.\r\n      3. **Изменяемое состояние:**\r\n         - Если компонент изменяет свои пропсы или состояние в методах жизненного цикла.\r\n\r\n      **Пример проблемы:**\r\n      \\`\\`\\`javascript\r\n      class ProblematicComponent extends React.PureComponent {\r\n        state = { data: { value: 0 } };\r\n\r\n        updateData = () => {\r\n          this.state.data.value++;\r\n          this.setState({ data: this.state.data });\r\n        };\r\n\r\n        render() {\r\n          return <div>{this.state.data.value}</div>;\r\n        }\r\n      }\r\n\r\n      // PureComponent не заметит изменения, так как ссылка на \\`data\\` не меняется.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101558,\r\n      question: \"Как проверить, является ли функция чистой?\",\r\n      answer: `\r\n      **Проверка чистоты функции:**\r\n      1. **Детерминированность:**\r\n         - Убедитесь, что функция всегда возвращает одинаковый результат для одних и тех же входных данных.\r\n      2. **Отсутствие побочных эффектов:**\r\n         - Проверьте, что функция не изменяет внешние переменные, не вызывает API или другие побочные эффекты.\r\n\r\n      **Пример проверки:**\r\n      \\`\\`\\`javascript\r\n      function isFunctionPure(fn, inputs, expectedOutput) {\r\n        const output = fn(...inputs);\r\n        return output === expectedOutput;\r\n      }\r\n\r\n      const add = (a, b) => a + b;\r\n      console.log(isFunctionPure(add, [2, 3], 5)); // true\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101559,\r\n      question: \"Как сделать функцию чистой?\",\r\n      answer: `\r\n      **Создание чистой функции:**\r\n      1. **Убрать побочные эффекты:**\r\n         - Убедитесь, что функция не изменяет внешние переменные или переданные аргументы.\r\n      2. **Использовать только входные данные:**\r\n         - Функция должна зависеть только от своих параметров.\r\n      3. **Возвращать новый объект вместо изменения существующего:**\r\n         - Используйте иммутабельность.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Нечистая функция\r\n      function addItem(array, item) {\r\n        array.push(item); // Изменяет исходный массив\r\n        return array;\r\n      }\r\n\r\n      // Чистая функция\r\n      function addItemPure(array, item) {\r\n        return [...array, item]; // Создает новый массив\r\n      }\r\n\r\n      const arr = [1, 2, 3];\r\n      console.log(addItemPure(arr, 4)); // [1, 2, 3, 4]\r\n      console.log(arr); // [1, 2, 3] (не изменился)\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testReactRouter = {\r\n  id: 102250,\r\n  title: \"React Router (Роутинг)\",\r\n  questions: [\r\n    {\r\n      id: 102251,\r\n      question: \"Что такое React Router?\",\r\n      answer: `\r\n**React Router:**\r\n- Это библиотека для управления маршрутизацией в приложениях на React.\r\n- Позволяет создавать одностраничные приложения (SPA), где содержимое динамически изменяется в зависимости от URL, без перезагрузки страницы.\r\n\r\n**Основные компоненты:**\r\n1. **BrowserRouter:** Обертка для всего приложения, которая позволяет использовать HTML5 History API для синхронизации UI с URL.\r\n2. **Routes:** Группирует все маршруты и выбирает первый подходящий маршрут для рендеринга.\r\n3. **Route:** Определяет, какой компонент должен отображаться для конкретного пути (path).\r\n4. **Link:** Заменяет тег \\`<a>\\` для навигации между страницами без перезагрузки.\r\n5. **Navigate:** Программная навигация между маршрутами.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <nav>\r\n        <Link to=\"/\">Home</Link> | \r\n        <Link to=\"/about\">About</Link>\r\n      </nav>\r\n      <Routes>\r\n        <Route path=\"/\" element={<Home />} />\r\n        <Route path=\"/about\" element={<About />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n  return <h1>Home Page</h1>;\r\n}\r\n\r\nfunction About() {\r\n  return <h1>About Page</h1>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102252,\r\n      question: \"Как настроить маршрутизацию в React Router?\",\r\n      answer: `\r\n**Настройка маршрутизации:**\r\n1. Установите \\`react-router-dom\\`:\r\n   \\`\\`\\`bash\r\n   npm install react-router-dom\r\n   \\`\\`\\`\r\n\r\n2. Импортируйте необходимые компоненты:\r\n   \\`\\`\\`javascript\r\n   import { BrowserRouter, Routes, Route } from 'react-router-dom';\r\n   \\`\\`\\`\r\n\r\n3. Определите маршруты:\r\n   - \\`<BrowserRouter>\\`: Обертывает всё приложение.\r\n   - \\`<Routes>\\`: Содержит список всех маршрутов.\r\n   - \\`<Route>\\`: Определяет путь (path) и соответствующий компонент (element).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/\" element={<HomePage />} />\r\n        <Route path=\"/profile\" element={<ProfilePage />} />\r\n        <Route path=\"*\" element={<NotFoundPage />} /> {/* 404 маршрут */}\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102253,\r\n      question: \"Как использовать параметры маршрута в React Router?\",\r\n      answer: `\r\n**Параметры маршрута:**\r\n- Позволяют передавать динамические значения через URL.\r\n\r\n**Синтаксис:**\r\n- Используйте \\`:\\` для определения параметра в пути.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction Profile() {\r\n  const { userId } = useParams(); // Получаем параметр из URL\r\n  return <h1>User ID: {userId}</h1>;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/profile/:userId\" element={<Profile />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102254,\r\n      question: \"Как реализовать программную навигацию в React Router?\",\r\n      answer: `\r\n**Программная навигация:**\r\n- Используйте хук \\`useNavigate\\` или компонент \\`Navigate\\`.\r\n\r\n**Пример с \\`useNavigate\\`:**\r\n\\`\\`\\`javascript\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction LoginButton() {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = () => {\r\n    navigate('/dashboard'); // Переход на /dashboard\r\n  };\r\n\r\n  return <button onClick={handleLogin}>Login</button>;\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример с \\`Navigate\\`:**\r\n\\`\\`\\`javascript\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nfunction ProtectedRoute({ isLoggedIn }) {\r\n  if (!isLoggedIn) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n  return <h1>Protected Content</h1>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102255,\r\n      question: \"Как обрабатывать 404 ошибку в React Router?\",\r\n      answer: `\r\n**Обработка 404 ошибки:**\r\n- Используйте маршрут с wildcard (\\`*\\`) для отображения страницы \"Not Found\".\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/\" element={<HomePage />} />\r\n        <Route path=\"/about\" element={<AboutPage />} />\r\n        <Route path=\"*\" element={<NotFoundPage />} /> {/* 404 маршрут */}\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nfunction NotFoundPage() {\r\n  return <h1>404 - Page Not Found</h1>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102256,\r\n      question: \"Что такое Nested Routes (вложенные маршруты)?\",\r\n      answer: `\r\n**Nested Routes (вложенные маршруты):**\r\n- Позволяют определять дочерние маршруты внутри родительского маршрута.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/dashboard\" element={<Dashboard />}>\r\n          <Route path=\"profile\" element={<Profile />} />\r\n          <Route path=\"settings\" element={<Settings />} />\r\n        </Route>\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nfunction Dashboard() {\r\n  return (\r\n    <div>\r\n      <h1>Dashboard</h1>\r\n      <Outlet /> {/* Рендерит дочерний маршрут */}\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102257,\r\n      question: \"Как использовать хук useLocation?\",\r\n      answer: `\r\n**Хук \\`useLocation\\`:**\r\n- Возвращает текущий объект location, который содержит информацию о текущем URL.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction CurrentLocation() {\r\n  const location = useLocation();\r\n  return <p>Current Path: {location.pathname}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102258,\r\n      question: \"Как защитить маршруты (Protected Routes)?\",\r\n      answer: `\r\n**Защита маршрутов:**\r\n- Используйте условную логику для проверки прав доступа.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction ProtectedRoute({ children, isLoggedIn }) {\r\n  if (!isLoggedIn) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n  return children;\r\n}\r\n\r\nfunction App() {\r\n  const isLoggedIn = false; // Пример состояния аутентификации\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route\r\n          path=\"/dashboard\"\r\n          element={\r\n            <ProtectedRoute isLoggedIn={isLoggedIn}>\r\n              <Dashboard />\r\n            </ProtectedRoute>\r\n          }\r\n        />\r\n        <Route path=\"/login\" element={<LoginPage />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102259,\r\n      question: \"Как использовать Query Parameters в React Router?\",\r\n      answer: `\r\n**Query Parameters:**\r\n- Используйте хук \\`useSearchParams\\` для работы с параметрами запроса.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nfunction SearchPage() {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const query = searchParams.get('q'); // Получаем параметр \"q\"\r\n\r\n  const handleSearch = (newQuery) => {\r\n    setSearchParams({ q: newQuery }); // Обновляем параметр \"q\"\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={query || ''}\r\n        onChange={(e) => handleSearch(e.target.value)}\r\n      />\r\n      <p>Search Query: {query}</p>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testReactRouterAPI = {\r\n  id: 102275,\r\n  title: \"React Router API\",\r\n  questions: [\r\n    {\r\n      id: 102276,\r\n      question: \"Что такое React Router API?\",\r\n      answer: `\r\n**React Router API:**\r\n- Это набор инструментов для управления маршрутизацией в приложениях на React.\r\n- Позволяет создавать одностраничные приложения (SPA), где содержимое динамически изменяется в зависимости от URL без перезагрузки страницы.\r\n\r\n**Основные компоненты и хуки:**\r\n1. **BrowserRouter:** Обертка для всего приложения, использующая HTML5 History API для синхронизации UI с URL.\r\n2. **Routes:** Группирует все маршруты и выбирает первый подходящий маршрут для рендеринга.\r\n3. **Route:** Определяет, какой компонент должен отображаться для конкретного пути (path).\r\n4. **Link:** Заменяет тег \\`<a>\\` для навигации между страницами без перезагрузки.\r\n5. **Navigate:** Программная навигация между маршрутами.\r\n6. **useNavigate:** Хук для программной навигации.\r\n7. **useParams:** Хук для получения параметров маршрута.\r\n8. **useLocation:** Хук для получения текущего местоположения (URL).\r\n9. **Outlet:** Компонент для рендеринга дочерних маршрутов внутри родительского маршрута.\r\n10. **useSearchParams:** Хук для работы с параметрами запроса (query parameters).\r\n\r\n**Пример базового использования:**\r\n\\`\\`\\`javascript\r\nimport { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <nav>\r\n        <Link to=\"/\">Home</Link> | \r\n        <Link to=\"/about\">About</Link>\r\n      </nav>\r\n      <Routes>\r\n        <Route path=\"/\" element={<Home />} />\r\n        <Route path=\"/about\" element={<About />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n  return <h1>Home Page</h1>;\r\n}\r\n\r\nfunction About() {\r\n  return <h1>About Page</h1>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102277,\r\n      question: \"Как работает BrowserRouter?\",\r\n      answer: `\r\n**BrowserRouter:**\r\n- Использует HTML5 History API для синхронизации UI с URL.\r\n- Позволяет изменять URL без перезагрузки страницы.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      {/* Вложенные маршруты и компоненты */}\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102278,\r\n      question: \"Что такое хук useNavigate?\",\r\n      answer: `\r\n**Хук \\`useNavigate\\`:**\r\n- Предоставляет функцию для программной навигации между маршрутами.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction LoginButton() {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = () => {\r\n    navigate('/dashboard'); // Переход на /dashboard\r\n  };\r\n\r\n  return <button onClick={handleLogin}>Login</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102279,\r\n      question: \"Как использовать хук useParams?\",\r\n      answer: `\r\n**Хук \\`useParams\\`:**\r\n- Предоставляет доступ к параметрам маршрута, определенным в \\`Route\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction Profile() {\r\n  const { userId } = useParams(); // Получаем параметр из URL\r\n  return <h1>User ID: {userId}</h1>;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/profile/:userId\" element={<Profile />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102280,\r\n      question: \"Как использовать хук useLocation?\",\r\n      answer: `\r\n**Хук \\`useLocation\\`:**\r\n- Возвращает текущий объект location, который содержит информацию о текущем URL.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction CurrentLocation() {\r\n  const location = useLocation();\r\n  return <p>Current Path: {location.pathname}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102281,\r\n      question: \"Что такое Outlet и как его использовать?\",\r\n      answer: `\r\n**Outlet:**\r\n- Компонент, который рендерит дочерние маршруты внутри родительского маршрута.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { Outlet } from 'react-router-dom';\r\n\r\nfunction Dashboard() {\r\n  return (\r\n    <div>\r\n      <h1>Dashboard</h1>\r\n      <Outlet /> {/* Рендерит дочерний маршрут */}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/dashboard\" element={<Dashboard />}>\r\n          <Route path=\"profile\" element={<Profile />} />\r\n          <Route path=\"settings\" element={<Settings />} />\r\n        </Route>\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102282,\r\n      question: \"Как защитить маршруты с помощью Navigate?\",\r\n      answer: `\r\n**Защита маршрутов с помощью \\`Navigate\\`:**\r\n- Используйте компонент \\`Navigate\\` для перенаправления пользователей на другие страницы.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nfunction ProtectedRoute({ isLoggedIn }) {\r\n  if (!isLoggedIn) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n  return <h1>Protected Content</h1>;\r\n}\r\n\r\nfunction App() {\r\n  const isLoggedIn = false; // Пример состояния аутентификации\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route\r\n          path=\"/dashboard\"\r\n          element={\r\n            <ProtectedRoute isLoggedIn={isLoggedIn}>\r\n              <Dashboard />\r\n            </ProtectedRoute>\r\n          }\r\n        />\r\n        <Route path=\"/login\" element={<LoginPage />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102283,\r\n      question: \"Как использовать Query Parameters?\",\r\n      answer: `\r\n**Query Parameters:**\r\n- Используйте хук \\`useSearchParams\\` для работы с параметрами запроса.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nfunction SearchPage() {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const query = searchParams.get('q'); // Получаем параметр \"q\"\r\n\r\n  const handleSearch = (newQuery) => {\r\n    setSearchParams({ q: newQuery }); // Обновляем параметр \"q\"\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={query || ''}\r\n        onChange={(e) => handleSearch(e.target.value)}\r\n      />\r\n      <p>Search Query: {query}</p>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102284,\r\n      question: \"Как обработать 404 ошибку?\",\r\n      answer: `\r\n**Обработка 404 ошибки:**\r\n- Используйте маршрут с wildcard (\\`*\\`) для отображения страницы \"Not Found\".\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/\" element={<HomePage />} />\r\n        <Route path=\"/about\" element={<AboutPage />} />\r\n        <Route path=\"*\" element={<NotFoundPage />} /> {/* 404 маршрут */}\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nfunction NotFoundPage() {\r\n  return <h1>404 - Page Not Found</h1>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102285,\r\n      question: \"Как работают вложенные маршруты?\",\r\n      answer: `\r\n**Вложенные маршруты:**\r\n- Позволяют определять дочерние маршруты внутри родительского маршрута.\r\n- Используйте \\`Outlet\\` для рендеринга дочерних маршрутов.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/dashboard\" element={<Dashboard />}>\r\n          <Route path=\"profile\" element={<Profile />} />\r\n          <Route path=\"settings\" element={<Settings />} />\r\n        </Route>\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nfunction Dashboard() {\r\n  return (\r\n    <div>\r\n      <h1>Dashboard</h1>\r\n      <Outlet /> {/* Рендерит дочерний маршрут */}\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testRedux = {\r\n  id: 102425,\r\n  title: \"Управление состоянием приложения\",\r\n  questions: [\r\n    {\r\n      id: 102426,\r\n      question: \"Что такое управление состоянием в React?\",\r\n      answer: `\r\n**Управление состоянием в React:**\r\n- Это процесс хранения, изменения и синхронизации данных в приложении.\r\n- Состояние определяет, как компоненты отображаются и взаимодействуют между собой.\r\n\r\n**Основные подходы:**\r\n1. **Локальное состояние (useState, useReducer):**\r\n   - Управление состоянием внутри одного компонента.\r\n2. **Глобальное состояние:**\r\n   - Использование контекста (Context API) или сторонних библиотек (Redux, MobX).\r\n3. **Серверное состояние:**\r\n   - Управление данными, полученными с сервера (например, через \\`fetch\\` или \\`axios\\`).\r\n\r\n**Пример локального состояния:**\r\n\\`\\`\\`javascript\r\nimport React, { useState } from 'react';\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102427,\r\n      question: \"Как использовать Context API для управления состоянием?\",\r\n      answer: `\r\n**Context API:**\r\n- Встроенный механизм React для передачи данных через дерево компонентов без необходимости прокидывать props на каждом уровне.\r\n\r\n**Пример использования:**\r\n\\`\\`\\`javascript\r\nimport React, { createContext, useContext, useState } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nfunction ThemeProvider({ children }) {\r\n  const [theme, setTheme] = useState('light');\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nfunction ChildComponent() {\r\n  const { theme, setTheme } = useContext(ThemeContext);\r\n  return (\r\n    <div>\r\n      <p>Current theme: {theme}</p>\r\n      <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\r\n        Toggle Theme\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider>\r\n      <ChildComponent />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102428,\r\n      question: \"Зачем нужен Redux для управления состоянием?\",\r\n      answer: `\r\n**Redux:**\r\n- Библиотека для управления глобальным состоянием в React-приложениях.\r\n- Предоставляет единое хранилище (store) для всего приложения.\r\n\r\n**Преимущества Redux:**\r\n1. **Централизованное хранилище:**\r\n   - Все данные хранятся в одном месте.\r\n2. **Предсказуемость:**\r\n   - Изменение состояния происходит через чистые функции (reducers).\r\n3. **Отладка:**\r\n   - Инструменты разработчика (Redux DevTools) упрощают отслеживание изменений состояния.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { createStore } from 'redux';\r\nimport { Provider, useSelector, useDispatch } from 'react-redux';\r\n\r\n// Reducer\r\nfunction counterReducer(state = { count: 0 }, action) {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    case 'decrement':\r\n      return { count: state.count - 1 };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Store\r\nconst store = createStore(counterReducer);\r\n\r\nfunction Counter() {\r\n  const count = useSelector((state) => state.count);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\r\n      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Counter />\r\n    </Provider>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102429,\r\n      question: \"Какие альтернативы Redux существуют?\",\r\n      answer: `\r\n**Альтернативы Redux:**\r\n1. **MobX:**\r\n   - Реактивное управление состоянием.\r\n   - Проще в освоении, чем Redux.\r\n2. **Recoil:**\r\n   - Легковесная библиотека для управления состоянием.\r\n   - Использует атомы (atoms) для хранения данных.\r\n3. **Zustand:**\r\n   - Минималистичная библиотека с простым API.\r\n4. **Jotai:**\r\n   - Еще одна легковесная библиотека, похожая на Recoil.\r\n5. **Context API + useReducer:**\r\n   - Встроенные инструменты React для управления состоянием.\r\n\r\n**Пример Zustand:**\r\n\\`\\`\\`javascript\r\nimport create from 'zustand';\r\n\r\nconst useStore = create((set) => ({\r\n  count: 0,\r\n  increment: () => set((state) => ({ count: state.count + 1 })),\r\n  decrement: () => set((state) => ({ count: state.count - 1 })),\r\n}));\r\n\r\nfunction Counter() {\r\n  const { count, increment, decrement } = useStore();\r\n  return (\r\n    <div>\r\n      <p>{count}</p>\r\n      <button onClick={increment}>Increment</button>\r\n      <button onClick={decrement}>Decrement</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102430,\r\n      question: \"Как организовать состояние в больших приложениях?\",\r\n      answer: `\r\n**Организация состояния в больших приложениях:**\r\n1. **Разделение состояния:**\r\n   - Разделяйте состояние на локальное и глобальное.\r\n   - Локальное состояние — для отдельных компонентов.\r\n   - Глобальное состояние — для данных, которые используются в нескольких местах.\r\n2. **Модульность:**\r\n   - Организуйте состояние по модулям (features).\r\n   - Например, для туду-листа создайте отдельный файл состояния \\`todoSlice.js\\`.\r\n3. **Инструменты:**\r\n   - Используйте Redux Toolkit или другие библиотеки для упрощения работы с состоянием.\r\n4. **Иммутабельность:**\r\n   - Всегда обновляйте состояние иммутабельно (не изменяйте его напрямую).\r\n\r\n**Пример структуры:**\r\n\\`\\`\\`plaintext\r\nsrc/\r\n  features/\r\n    todos/\r\n      todoSlice.js\r\n    auth/\r\n      authSlice.js\r\n  store.js\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const test3ReduxMainPrinciples = {\r\n  id: 103400,\r\n  title: \"Основные принципы Redux\",\r\n  questions: [\r\n    {\r\n      id: 103401,\r\n      question: \"Какие основные принципы Redux?\",\r\n      answer: `\r\n**Основные принципы Redux:**\r\n1. **Единое хранилище состояния (Single Source of Truth):**\r\n   - Все состояние приложения хранится в одном объекте (store).\r\n   - Это упрощает отладку и управление состоянием.\r\n\r\n2. **Состояние только для чтения (State is Read-Only):**\r\n   - Единственный способ изменить состояние — это отправить действие (action).\r\n   - Действия — это простые объекты, которые описывают, что произошло.\r\n\r\n3. **Изменения состояния происходят через чистые функции (Reducers):**\r\n   - Редюсеры — это функции, которые принимают текущее состояние и действие, и возвращают новое состояние.\r\n   - Редюсеры должны быть чистыми (не вызывать побочных эффектов).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// Action\r\nconst increment = { type: 'INCREMENT' };\r\n\r\n// Reducer\r\nfunction counterReducer(state = { count: 0 }, action) {\r\n  switch (action.type) {\r\n    case 'INCREMENT':\r\n      return { count: state.count + 1 };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Store\r\nconst store = Redux.createStore(counterReducer);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103402,\r\n      question: \"Что такое действие (Action) в Redux?\",\r\n      answer: `\r\n**Действие (Action):**\r\n- Это объект, который описывает, что произошло в приложении.\r\n- Действие должно иметь свойство \\`type\\`, которое является строкой.\r\n- Может содержать дополнительные данные (payload).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst addTodo = (text) => ({\r\n  type: 'ADD_TODO',\r\n  payload: text,\r\n});\r\n\\`\\`\\`\r\n\r\n**Отправка действия:**\r\n\\`\\`\\`javascript\r\nstore.dispatch(addTodo('Learn Redux'));\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103403,\r\n      question: \"Что такое редюсер (Reducer) в Redux?\",\r\n      answer: `\r\n**Редюсер (Reducer):**\r\n- Это чистая функция, которая определяет, как изменяется состояние приложения в ответ на действия.\r\n- Принимает текущее состояние и действие, возвращает новое состояние.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction todosReducer(state = [], action) {\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      return [...state, action.payload];\r\n    case 'REMOVE_TODO':\r\n      return state.filter((todo, index) => index !== action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103404,\r\n      question: \"Что такое хранилище (Store) в Redux?\",\r\n      answer: `\r\n**Хранилище (Store):**\r\n- Это объект, который содержит состояние приложения.\r\n- Предоставляет методы для доступа к состоянию, отправки действий и подписки на изменения.\r\n\r\n**Методы Store:**\r\n1. **getState():**\r\n   - Возвращает текущее состояние.\r\n2. **dispatch(action):**\r\n   - Отправляет действие для изменения состояния.\r\n3. **subscribe(listener):**\r\n   - Подписывает функцию на изменения состояния.\r\n\r\n**Пример создания Store:**\r\n\\`\\`\\`javascript\r\nimport { createStore } from 'redux';\r\n\r\nconst initialState = { count: 0 };\r\n\r\nfunction counterReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'INCREMENT':\r\n      return { count: state.count + 1 };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst store = createStore(counterReducer);\r\n\r\nconsole.log(store.getState()); // { count: 0 }\r\nstore.dispatch({ type: 'INCREMENT' });\r\nconsole.log(store.getState()); // { count: 1 }\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103405,\r\n      question: \"Как работает поток данных в Redux?\",\r\n      answer: `\r\n**Поток данных в Redux:**\r\n1. **Действие (Action):**\r\n   - Пользователь взаимодействует с UI, что приводит к отправке действия.\r\n2. **Редюсер (Reducer):**\r\n   - Редюсер обрабатывает действие и возвращает новое состояние.\r\n3. **Хранилище (Store):**\r\n   - Хранилище обновляет состояние и уведомляет подписчиков.\r\n4. **UI:**\r\n   - Компоненты React перерисовываются с новым состоянием.\r\n\r\n**Пример потока данных:**\r\n\\`\\`\\`javascript\r\n// 1. Отправка действия\r\nstore.dispatch({ type: 'INCREMENT' });\r\n\r\n// 2. Обработка редюсером\r\nfunction counterReducer(state = { count: 0 }, action) {\r\n  switch (action.type) {\r\n    case 'INCREMENT':\r\n      return { count: state.count + 1 };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// 3. Обновление состояния\r\nconsole.log(store.getState()); // { count: 1 }\r\n\r\n// 4. Перерисовка UI\r\nfunction Counter() {\r\n  const count = useSelector((state) => state.count);\r\n  return <p>Count: {count}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103406,\r\n      question: \"Что такое Middleware в Redux?\",\r\n      answer: `\r\n**Middleware:**\r\n- Это функции, которые выполняются между отправкой действия и его обработкой редюсером.\r\n- Middleware используется для выполнения асинхронных операций (например, API-запросов).\r\n\r\n**Пример Middleware:**\r\n\\`\\`\\`javascript\r\nconst loggerMiddleware = (store) => (next) => (action) => {\r\n  console.log('Dispatching:', action);\r\n  const result = next(action);\r\n  console.log('Next state:', store.getState());\r\n  return result;\r\n};\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(loggerMiddleware)\r\n);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103407,\r\n      question: \"Как организовать структуру Redux в большом приложении?\",\r\n      answer: `\r\n**Структура Redux:**\r\n1. **Организация по фичам:**\r\n   - Разделяйте логику по фичам (features), например, \\`auth\\`, \\`todos\\`.\r\n2. **Слайсы (slices):**\r\n   - Используйте \\`createSlice\\` из Redux Toolkit для разделения логики.\r\n3. **Корневой редюсер:**\r\n   - Объединяйте все редюсеры с помощью \\`combineReducers\\`.\r\n\r\n**Пример структуры:**\r\n\\`\\`\\`plaintext\r\nsrc/\r\n  features/\r\n    auth/\r\n      authSlice.js\r\n    todos/\r\n      todosSlice.js\r\n  store.js\r\n\\`\\`\\`\r\n\r\n**store.js:**\r\n\\`\\`\\`javascript\r\nimport { configureStore, combineReducers } from '@reduxjs/toolkit';\r\nimport authReducer from './features/auth/authSlice';\r\nimport todosReducer from './features/todos/todosSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n  auth: authReducer,\r\n  todos: todosReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport default store;\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103408,\r\n      question: \"Что такое Redux Toolkit и зачем он нужен?\",\r\n      answer: `\r\n**Redux Toolkit:**\r\n- Это официальная библиотека для упрощения работы с Redux.\r\n- Устраняет необходимость писать много шаблонного кода.\r\n\r\n**Основные функции:**\r\n1. **createSlice:**\r\n   - Создает редюсер и действия автоматически.\r\n2. **configureStore:**\r\n   - Упрощает настройку хранилища с middleware и инструментами разработчика.\r\n3. **createAsyncThunk:**\r\n   - Упрощает работу с асинхронными действиями.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\r\n\r\nconst counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: { count: 0 },\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.count += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.count -= 1;\r\n    },\r\n  },\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    counter: counterSlice.reducer,\r\n  },\r\n});\r\n\r\nexport const { increment, decrement } = counterSlice.actions;\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testSelectorsRedux = {\r\n  id: 100875,\r\n  title: \"Selectors (селекторы)\",\r\n  questions: [\r\n    {\r\n      id: 100876,\r\n      question: \"Что такое селекторы в Redux?\",\r\n      answer: `\r\n**Селекторы в Redux:**\r\n- Это функции, которые извлекают и преобразуют данные из состояния Redux.\r\n- Позволяют инкапсулировать логику доступа к данным, делая код более читаемым и переиспользуемым.\r\n\r\n**Преимущества:**\r\n1. **Переиспользование:** Один селектор можно использовать в разных компонентах.\r\n2. **Оптимизация:** Селекторы могут кэшировать результаты с помощью библиотек (например, \\`reselect\\`).\r\n3. **Абстракция:** Скрывают сложную логику доступа к данным.\r\n\r\n**Пример простого селектора:**\r\n\\`\\`\\`javascript\r\nconst selectUser = (state) => state.user;\r\n\r\n// Использование\r\nconst user = selectUser(state);\r\nconsole.log(user); // { name: \"Alice\", age: 25 }\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100877,\r\n      question: \"Зачем нужны селекторы?\",\r\n      answer: `\r\n**Зачем нужны селекторы:**\r\n1. **Упрощение доступа к данным:**\r\n   - Селекторы скрывают сложную структуру состояния.\r\n2. **Повторное использование:**\r\n   - Один селектор может использоваться в нескольких компонентах.\r\n3. **Оптимизация производительности:**\r\n   - Библиотеки, такие как \\`reselect\\`, позволяют создавать мемоизированные селекторы, которые пересчитываются только при изменении данных.\r\n4. **Тестирование:**\r\n   - Легче тестировать извлечение данных, чем напрямую работать с состоянием.\r\n\r\n**Пример использования:**\r\n\\`\\`\\`javascript\r\nconst selectTodos = (state) => state.todos;\r\nconst todos = selectTodos(state);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100878,\r\n      question: \"Как создать мемоизированный селектор с помощью reselect?\",\r\n      answer: `\r\n**Мемоизированные селекторы:**\r\n- Библиотека \\`reselect\\` позволяет создавать селекторы, которые кэшируют результаты до тех пор, пока входные данные не изменятся.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { createSelector } from 'reselect';\r\n\r\n// Входной селектор\r\nconst selectItems = (state) => state.items;\r\n\r\n// Мемоизированный селектор\r\nconst selectTotalPrice = createSelector(\r\n  [selectItems], // Входные селекторы\r\n  (items) => items.reduce((total, item) => total + item.price, 0)\r\n);\r\n\r\n// Использование\r\nconst totalPrice = selectTotalPrice(state);\r\nconsole.log(totalPrice); // 150 (например)\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100879,\r\n      question: \"Что такое Reselect и зачем он нужен?\",\r\n      answer: `\r\n**Reselect:**\r\n- Это библиотека для создания мемоизированных селекторов.\r\n- Позволяет оптимизировать производительность, избегая ненужных перерасчетов.\r\n\r\n**Основные особенности:**\r\n1. **Мемоизация:** Пересчитывает данные только при изменении входных данных.\r\n2. **Композиция:** Можно комбинировать несколько селекторов для получения сложных данных.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { createSelector } from 'reselect';\r\n\r\nconst selectItems = (state) => state.items;\r\nconst selectDiscount = (state) => state.discount;\r\n\r\nconst selectTotalWithDiscount = createSelector(\r\n  [selectItems, selectDiscount],\r\n  (items, discount) => items.reduce((total, item) => total + item.price, 0) * (1 - discount)\r\n);\r\n\r\n// Использование\r\nconst totalWithDiscount = selectTotalWithDiscount(state);\r\nconsole.log(totalWithDiscount); // 135 (например)\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100880,\r\n      question: \"Какие проблемы решают селекторы?\",\r\n      answer: `\r\n**Проблемы, решаемые селекторами:**\r\n1. **Сложная структура состояния:**\r\n   - Селекторы упрощают доступ к данным, скрывая детали реализации.\r\n2. **Дублирование логики:**\r\n   - Устраняют необходимость повторять одинаковый код в разных местах.\r\n3. **Оптимизация производительности:**\r\n   - Мемоизация предотвращает лишние перерасчеты.\r\n4. **Тестируемость:**\r\n   - Легко тестировать логику извлечения данных.\r\n\r\n**Пример проблемы:**\r\n\\`\\`\\`javascript\r\n// Без селектора\r\nconst totalPrice = state.items.reduce((total, item) => total + item.price, 0);\r\n\r\n// С селектором\r\nconst selectTotalPrice = (state) => state.items.reduce((total, item) => total + item.price, 0);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100881,\r\n      question: \"Как использовать селекторы в React-Redux?\",\r\n      answer: `\r\n**Использование селекторов в React-Redux:**\r\n- Селекторы часто используются вместе с \\`useSelector\\` для доступа к данным из состояния Redux.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useSelector } from 'react-redux';\r\nimport { selectTotalPrice } from './selectors';\r\n\r\nfunction TotalPrice() {\r\n  const totalPrice = useSelector(selectTotalPrice);\r\n\r\n  return <div>Total Price: {totalPrice}</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100882,\r\n      question: \"Как организовать селекторы в проекте?\",\r\n      answer: `\r\n**Организация селекторов:**\r\n1. **Отдельный файл:**\r\n   - Создайте файл \\`selectors.js\\` и разместите все селекторы там.\r\n2. **Группировка по фичам:**\r\n   - Разделяйте селекторы по модулям или фичам (например, \\`todos/selectors.js\\`).\r\n3. **Нейминг:**\r\n   - Используйте префикс \\`select\\` для обозначения селекторов (например, \\`selectItems\\`, \\`selectTotalPrice\\`).\r\n\r\n**Пример структуры:**\r\n\\`\\`\\`plaintext\r\nsrc/\r\n  features/\r\n    todos/\r\n      selectors.js\r\n    cart/\r\n      selectors.js\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100883,\r\n      question: \"Как обрабатываются изменения данных в селекторах?\",\r\n      answer: `\r\n**Обработка изменений:**\r\n- Селекторы реагируют на изменения состояния автоматически.\r\n- Если используется мемоизация (например, \\`reselect\\`), селектор пересчитывается только при изменении входных данных.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst selectItems = (state) => state.items;\r\n\r\nconst selectTotalPrice = createSelector(\r\n  [selectItems],\r\n  (items) => items.reduce((total, item) => total + item.price, 0)\r\n);\r\n\r\n// При изменении items селектор пересчитается\r\ndispatch(addItem({ price: 50 }));\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100884,\r\n      question: \"Какие есть альтернативы Reselect?\",\r\n      answer: `\r\n**Альтернативы Reselect:**\r\n1. **Redux Toolkit:**\r\n   - Встроенные селекторы с поддержкой мемоизации через \\`createSelector\\`.\r\n2. **Custom Solutions:**\r\n   - Можно написать собственные функции мемоизации.\r\n3. **Библиотеки:**\r\n   - \\`re-reselect\\`: Расширение \\`reselect\\` с поддержкой кэширования по ключам.\r\n   - \\`selectorator\\`: Упрощенный API для создания селекторов.\r\n\r\n**Пример (Redux Toolkit):**\r\n\\`\\`\\`javascript\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst selectItems = (state) => state.items;\r\nconst selectTotalPrice = createSelector(\r\n  [selectItems],\r\n  (items) => items.reduce((total, item) => total + item.price, 0)\r\n);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testReducersRedux = {\r\n  id: 102450,\r\n  title: \"Reducers в Redux\",\r\n  questions: [\r\n    {\r\n      id: 102451,\r\n      question: \"Что такое Reducer в Redux?\",\r\n      answer: `\r\n**Reducer в Redux:**\r\n- Это чистая функция, которая принимает текущее состояние и действие (action) и возвращает новое состояние.\r\n- Reducer определяет, как изменяется состояние приложения в ответ на действия.\r\n\r\n**Основные принципы:**\r\n1. **Чистота:** Reducer должен быть чистой функцией (не должен изменять входные данные или вызывать побочные эффекты).\r\n2. **Иммутабельность:** Вместо изменения состояния создается новое состояние.\r\n3. **Однонаправленный поток данных:** Действия передаются через reducer, который обновляет состояние.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst initialState = { count: 0 };\r\n\r\nfunction counterReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { ...state, count: state.count + 1 };\r\n    case 'decrement':\r\n      return { ...state, count: state.count - 1 };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102452,\r\n      question: \"Как работают комбинированные редьюсеры (combineReducers)?\",\r\n      answer: `\r\n**combineReducers:**\r\n- Функция из библиотеки Redux, которая объединяет несколько редьюсеров в один корневой редьюсер.\r\n- Позволяет разделять логику управления состоянием по разным частям приложения.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { combineReducers } from 'redux';\r\n\r\nconst counterReducer = (state = { count: 0 }, action) => {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { ...state, count: state.count + 1 };\r\n    case 'decrement':\r\n      return { ...state, count: state.count - 1 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst userReducer = (state = { name: 'Guest' }, action) => {\r\n  switch (action.type) {\r\n    case 'setName':\r\n      return { ...state, name: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  counter: counterReducer,\r\n  user: userReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n\\`\\`\\`\r\n\r\n**Структура состояния:**\r\n\\`\\`\\`javascript\r\n{\r\n  counter: { count: 0 },\r\n  user: { name: 'Guest' }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102453,\r\n      question:\r\n        \"Как добавить асинхронные операции в Redux с помощью middleware?\",\r\n      answer: `\r\n**Middleware для асинхронных операций:**\r\n- Middleware (например, \\`redux-thunk\\` или \\`redux-saga\\`) позволяет обрабатывать асинхронные действия в Redux.\r\n- \\`redux-thunk\\` — это простой middleware, который позволяет возвращать функции вместо объектов.\r\n\r\n**Пример с \\`redux-thunk\\`:**\r\n\\`\\`\\`javascript\r\n// Action creator\r\nconst fetchData = () => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: 'FETCH_START' });\r\n    try {\r\n      const response = await fetch('https://api.example.com/data ');\r\n      const data = await response.json();\r\n      dispatch({ type: 'FETCH_SUCCESS', payload: data });\r\n    } catch (error) {\r\n      dispatch({ type: 'FETCH_ERROR', error });\r\n    }\r\n  };\r\n};\r\n\r\n// Reducer\r\nconst initialState = { loading: false, data: null, error: null };\r\n\r\nfunction dataReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'FETCH_START':\r\n      return { ...state, loading: true };\r\n    case 'FETCH_SUCCESS':\r\n      return { ...state, loading: false, data: action.payload };\r\n    case 'FETCH_ERROR':\r\n      return { ...state, loading: false, error: action.error };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Настройка store\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(dataReducer, applyMiddleware(thunk));\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102454,\r\n      question:\r\n        \"Как использовать Redux Toolkit для упрощения работы с редьюсерами?\",\r\n      answer: `\r\n**Redux Toolkit:**\r\n- Библиотека, которая упрощает работу с Redux, предоставляя утилиты для создания редьюсеров, действий и состояния.\r\n- Основные функции:\r\n  - \\`createSlice\\`: Создает редьюсер и действия автоматически.\r\n  - \\`configureStore\\`: Упрощает настройку store с middleware.\r\n\r\n**Пример с \\`createSlice\\`:**\r\n\\`\\`\\`javascript\r\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\r\n\r\nconst counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: { count: 0 },\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.count += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.count -= 1;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement } = counterSlice.actions;\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    counter: counterSlice.reducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n\\`\\`\\`\r\n\r\n**Использование в компоненте:**\r\n\\`\\`\\`javascript\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { increment, decrement } from './store';\r\n\r\nfunction Counter() {\r\n  const count = useSelector((state) => state.counter.count);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => dispatch(increment())}>Increment</button>\r\n      <button onClick={() => dispatch(decrement())}>Decrement</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102455,\r\n      question: \"Как организовать структуру редьюсеров в больших приложениях?\",\r\n      answer: `\r\n**Организация структуры редьюсеров:**\r\n1. **Модульность:**\r\n   - Разделяйте редьюсеры по фичам (features) или доменам (domains).\r\n   - Например, \\`authReducer\\`, \\`todosReducer\\`, \\`userReducer\\`.\r\n2. **Слайсы (slices):**\r\n   - Используйте \\`createSlice\\` из Redux Toolkit для создания слайсов.\r\n3. **Корневой редьюсер:**\r\n   - Объединяйте все редьюсеры с помощью \\`combineReducers\\`.\r\n\r\n**Пример структуры:**\r\n\\`\\`\\`plaintext\r\nsrc/\r\n  features/\r\n    auth/\r\n      authSlice.js\r\n    todos/\r\n      todosSlice.js\r\n    user/\r\n      userSlice.js\r\n  store.js\r\n\\`\\`\\`\r\n\r\n**store.js:**\r\n\\`\\`\\`javascript\r\nimport { configureStore, combineReducers } from '@reduxjs/toolkit';\r\nimport authReducer from './features/auth/authSlice';\r\nimport todosReducer from './features/todos/todosSlice';\r\nimport userReducer from './features/user/userSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n  auth: authReducer,\r\n  todos: todosReducer,\r\n  user: userReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport default store;\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testUseEffect = {\r\n  id: 102375,\r\n  title: \"хук useEffect\",\r\n  questions: [\r\n    {\r\n      id: 102376,\r\n      question: \"Что такое хук useEffect?\",\r\n      answer: `\r\n**Хук \\`useEffect\\`:**\r\n- Это хук React, который позволяет выполнять побочные эффекты в функциональных компонентах.\r\n- Заменяет методы жизненного цикла классовых компонентов (\\`componentDidMount\\`, \\`componentDidUpdate\\`, \\`componentWillUnmount\\`).\r\n\r\n**Основные случаи использования:**\r\n1. Выполнение кода при монтировании и обновлении компонента.\r\n2. Подписка на события (например, WebSocket).\r\n3. API-запросы.\r\n4. Очистка ресурсов (например, отмена подписок или таймеров).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction Timer() {\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSeconds((prev) => prev + 1);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval); // Очистка при размонтировании\r\n  }, []); // Пустой массив зависимостей = выполнение только при монтировании\r\n\r\n  return <p>Seconds: {seconds}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102377,\r\n      question: \"Как работает массив зависимостей в useEffect?\",\r\n      answer: `\r\n**Массив зависимостей:**\r\n- Второй аргумент \\`useEffect\\` — это массив зависимостей, который определяет, когда эффект должен выполняться.\r\n\r\n**Варианты:**\r\n1. **Пустой массив (\\`[]\\`):**\r\n   - Эффект выполняется только при монтировании и размонтировании компонента.\r\n2. **Зависимости (например, \\`[count]\\`):**\r\n   - Эффект выполняется при изменении указанных зависимостей.\r\n3. **Отсутствие массива:**\r\n   - Эффект выполняется при каждом рендере компонента.\r\n\r\n**Пример с зависимостями:**\r\n\\`\\`\\`javascript\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    console.log(\\`Count updated: $\\{count}\\`);\r\n  }, [count]); // Эффект срабатывает только при изменении count\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102378,\r\n      question: \"Как использовать useEffect для API-запросов?\",\r\n      answer: `\r\n**API-запросы с помощью \\`useEffect\\`:**\r\n- Используйте \\`useEffect\\` для выполнения запросов к серверу при монтировании компонента или изменении зависимостей.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction FetchData() {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch('https://api.example.com/data ')\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        setData(result);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error);\r\n        setLoading(false);\r\n      });\r\n  }, []); // Запрос выполняется только один раз при монтировании\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  return <div>{JSON.stringify(data)}</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102379,\r\n      question: \"Как выполнить очистку ресурсов в useEffect?\",\r\n      answer: `\r\n**Очистка ресурсов:**\r\n- Если эффект создает ресурсы (например, подписки, таймеры), их нужно очистить, чтобы избежать утечек памяти.\r\n- Для этого возвращайте функцию очистки из \\`useEffect\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction Timer() {\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSeconds((prev) => prev + 1);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval); // Очистка таймера\r\n  }, []);\r\n\r\n  return <p>Seconds: {seconds}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102380,\r\n      question: \"Как избежать бесконечного цикла в useEffect?\",\r\n      answer: `\r\n**Бесконечный цикл:**\r\n- Бесконечный цикл возникает, если эффект обновляет состояние, которое является зависимостью эффекта.\r\n\r\n**Решения:**\r\n1. **Добавьте зависимости:**\r\n   - Убедитесь, что все зависимости указаны в массиве.\r\n2. **Используйте пустой массив зависимостей:**\r\n   - Если эффект не зависит от состояния или пропсов, используйте \\`[]\\`.\r\n3. **Избегайте изменения состояния внутри эффекта:**\r\n   - Если необходимо обновить состояние, используйте условные проверки.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction InfiniteLoopExample() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (count < 5) {\r\n      setCount((prev) => prev + 1); // Безопасное обновление\r\n    }\r\n  }, [count]); // Безопасная зависимость\r\n\r\n  return <p>Count: {count}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testUseContext = {\r\n  id: 102475,\r\n  title: \"useContext (контекст)\",\r\n  questions: [\r\n    {\r\n      id: 102476,\r\n      question: \"Что такое useContext?\",\r\n      answer: `\r\n**useContext:**\r\n- Это хук React, который позволяет получать доступ к данным контекста.\r\n- Упрощает использование Context API, избавляя от необходимости оборачивать компоненты в \\`Context.Consumer\\`.\r\n\r\n**Пример использования:**\r\n\\`\\`\\`javascript\r\nimport React, { createContext, useContext } from 'react';\r\n\r\n// Создаем контекст\r\nconst ThemeContext = createContext();\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeContext.Provider value=\"dark\">\r\n      <ChildComponent />\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nfunction ChildComponent() {\r\n  // Используем useContext для получения значения контекста\r\n  const theme = useContext(ThemeContext);\r\n  return <p>Current theme: {theme}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102477,\r\n      question: \"Как создать и использовать контекст в React?\",\r\n      answer: `\r\n**Создание и использование контекста:**\r\n1. **Создание контекста:**\r\n   - Используйте \\`createContext\\` для создания нового контекста.\r\n2. **Предоставление значения:**\r\n   - Оберните дочерние компоненты в \\`Provider\\`, чтобы передать значение контекста.\r\n3. **Получение значения:**\r\n   - Используйте \\`useContext\\` или \\`Context.Consumer\\` для доступа к значению.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { createContext, useContext } from 'react';\r\n\r\n// 1. Создаем контекст\r\nconst UserContext = createContext();\r\n\r\nfunction App() {\r\n  const user = { name: 'Alice', age: 25 };\r\n\r\n  return (\r\n    // 2. Предоставляем значение через Provider\r\n    <UserContext.Provider value={user}>\r\n      <Profile />\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Profile() {\r\n  // 3. Получаем значение через useContext\r\n  const user = useContext(UserContext);\r\n  return (\r\n    <div>\r\n      <p>Name: {user.name}</p>\r\n      <p>Age: {user.age}</p>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102478,\r\n      question: \"Зачем нужен Context API и когда его использовать?\",\r\n      answer: `\r\n**Context API:**\r\n- Позволяет передавать данные через дерево компонентов без необходимости прокидывать props на каждом уровне.\r\n- Полезен для глобальных данных, таких как тема, пользовательская информация или языковые настройки.\r\n\r\n**Когда использовать:**\r\n1. **Глобальное состояние:**\r\n   - Когда данные нужны в нескольких несвязанных компонентах.\r\n2. **Избегание prop drilling:**\r\n   - Когда приходится передавать данные через несколько уровней компонентов.\r\n3. **Темы и настройки:**\r\n   - Для управления темой, языком или другими глобальными настройками.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { createContext, useContext, useState } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nfunction App() {\r\n  const [theme, setTheme] = useState('light');\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme }}>\r\n      <Toolbar />\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Toolbar() {\r\n  return <ThemedButton />;\r\n}\r\n\r\nfunction ThemedButton() {\r\n  const { theme, setTheme } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <button\r\n      onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}\r\n      style={{ background: theme === 'light' ? '#fff' : '#333', color: theme === 'light' ? '#000' : '#fff' }}\r\n    >\r\n      Toggle Theme\r\n    </button>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102479,\r\n      question: \"Как обновить значение контекста?\",\r\n      answer: `\r\n**Обновление значения контекста:**\r\n- Значение контекста можно обновить через состояние (например, \\`useState\\`) или другие механизмы.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { createContext, useContext, useState } from 'react';\r\n\r\nconst CounterContext = createContext();\r\n\r\nfunction App() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <CounterContext.Provider value={{ count, setCount }}>\r\n      <CounterDisplay />\r\n      <CounterButton />\r\n    </CounterContext.Provider>\r\n  );\r\n}\r\n\r\nfunction CounterDisplay() {\r\n  const { count } = useContext(CounterContext);\r\n  return <p>Count: {count}</p>;\r\n}\r\n\r\nfunction CounterButton() {\r\n  const { setCount } = useContext(CounterContext);\r\n  return <button onClick={() => setCount((prev) => prev + 1)}>Increment</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102480,\r\n      question: \"Как организовать несколько контекстов в приложении?\",\r\n      answer: `\r\n**Организация нескольких контекстов:**\r\n- Можно создавать несколько контекстов для разных типов данных.\r\n- Каждый контекст управляет своим состоянием независимо.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { createContext, useContext, useState } from 'react';\r\n\r\n// Создаем два контекста\r\nconst ThemeContext = createContext();\r\nconst UserContext = createContext();\r\n\r\nfunction App() {\r\n  const [theme, setTheme] = useState('light');\r\n  const [user, setUser] = useState({ name: 'Alice', age: 25 });\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme }}>\r\n      <UserContext.Provider value={{ user, setUser }}>\r\n        <Main />\r\n      </UserContext.Provider>\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Main() {\r\n  return (\r\n    <div>\r\n      <ThemeToggler />\r\n      <UserProfile />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ThemeToggler() {\r\n  const { theme, setTheme } = useContext(ThemeContext);\r\n  return (\r\n    <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\r\n      Toggle Theme\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction UserProfile() {\r\n  const { user } = useContext(UserContext);\r\n  return (\r\n    <div>\r\n      <p>Name: {user.name}</p>\r\n      <p>Age: {user.age}</p>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102481,\r\n      question: \"Какие есть альтернативы Context API?\",\r\n      answer: `\r\n**Альтернативы Context API:**\r\n1. **Redux:**\r\n   - Библиотека для управления глобальным состоянием.\r\n   - Подходит для сложных приложений с большим количеством состояний.\r\n2. **MobX:**\r\n   - Реактивное управление состоянием.\r\n   - Проще в освоении, чем Redux.\r\n3. **Zustand:**\r\n   - Минималистичная библиотека для управления состоянием.\r\n4. **Jotai:**\r\n   - Легковесная библиотека, похожая на Recoil.\r\n5. **Props Drilling:**\r\n   - Передача данных через props (подходит для небольших приложений).\r\n\r\n**Вывод:**\r\n- Context API подходит для простых случаев.\r\n- Для сложных приложений лучше использовать специализированные библиотеки.\r\n`,\r\n    },\r\n    {\r\n      id: 102482,\r\n      question:\r\n        \"Как оптимизировать производительность при использовании Context API?\",\r\n      answer: `\r\n**Оптимизация производительности:**\r\n1. **Разделение контекстов:**\r\n   - Создавайте отдельные контексты для разных типов данных.\r\n2. **Мемоизация значений:**\r\n   - Используйте \\`React.memo\\` или \\`useMemo\\` для предотвращения лишних перерисовок.\r\n3. **Избегайте частых обновлений:**\r\n   - Ограничьте количество обновлений контекста, особенно в часто изменяемых данных.\r\n\r\n**Пример мемоизации:**\r\n\\`\\`\\`javascript\r\nimport React, { createContext, useContext, useState, useMemo } from 'react';\r\n\r\nconst CountContext = createContext();\r\n\r\nfunction App() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  // Мемоизация значения контекста\r\n  const value = useMemo(() => ({ count, setCount }), [count]);\r\n\r\n  return (\r\n    <CountContext.Provider value={value}>\r\n      <CounterDisplay />\r\n      <CounterButton />\r\n    </CountContext.Provider>\r\n  );\r\n}\r\n\r\nfunction CounterDisplay() {\r\n  const { count } = useContext(CountContext);\r\n  return <p>Count: {count}</p>;\r\n}\r\n\r\nfunction CounterButton() {\r\n  const { setCount } = useContext(CountContext);\r\n  return <button onClick={() => setCount((prev) => prev + 1)}>Increment</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testCustomHooks = {\r\n  id: 102525,\r\n  title: \"Custom hooks (пользовательские хуки)\",\r\n  questions: [\r\n    {\r\n      id: 102526,\r\n      question: \"Что такое пользовательский хук?\",\r\n      answer: `\r\n**Пользовательский хук:**\r\n- Это функция, которая начинается с префикса \\`use\\` и может использовать встроенные хуки React (например, \\`useState\\`, \\`useEffect\\`).\r\n- Позволяет вынести повторяющуюся логику в отдельную функцию для переиспользования в разных компонентах.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction useFetch(url) {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        setData(result);\r\n        setLoading(false);\r\n      });\r\n  }, [url]);\r\n\r\n  return [data, loading];\r\n}\r\n\r\nfunction FetchData() {\r\n  const [data, loading] = useFetch('https://api.example.com/data ');\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  return <div>{JSON.stringify(data)}</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102527,\r\n      question: \"Зачем нужны пользовательские хуки?\",\r\n      answer: `\r\n**Зачем нужны пользовательские хуки:**\r\n1. **Реализация переиспользуемой логики:**\r\n   - Вынос повторяющейся логики (например, API-запросы, обработка состояния) в отдельные функции.\r\n2. **Упрощение компонентов:**\r\n   - Уменьшение сложности компонентов за счет делегирования логики в хуки.\r\n3. **Соблюдение принципа DRY:**\r\n   - Избегание дублирования кода.\r\n4. **Лучшая читаемость:**\r\n   - Компоненты становятся более понятными благодаря разделению логики.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction useCounter(initialValue = 0) {\r\n  const [count, setCount] = useState(initialValue);\r\n\r\n  const increment = () => setCount(count + 1);\r\n  const decrement = () => setCount(count - 1);\r\n\r\n  return { count, increment, decrement };\r\n}\r\n\r\nfunction Counter() {\r\n  const { count, increment, decrement } = useCounter();\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={increment}>Increment</button>\r\n      <button onClick={decrement}>Decrement</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102528,\r\n      question: \"Как создать пользовательский хук?\",\r\n      answer: `\r\n**Создание пользовательского хука:**\r\n1. Название должно начинаться с \\`use\\`.\r\n2. Можно использовать встроенные хуки внутри пользовательского хука.\r\n3. Возвращать данные или функции, которые могут быть использованы в компонентах.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction useWindowSize() {\r\n  const [size, setSize] = useState([window.innerWidth, window.innerHeight]);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setSize([window.innerWidth, window.innerHeight]);\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return size;\r\n}\r\n\r\nfunction WindowSizeDisplay() {\r\n  const [width, height] = useWindowSize();\r\n\r\n  return (\r\n    <div>\r\n      <p>Width: {width}</p>\r\n      <p>Height: {height}</p>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102529,\r\n      question: \"Можно ли передавать параметры в пользовательские хуки?\",\r\n      answer: `\r\n**Да, можно:**\r\n- Пользовательские хуки могут принимать параметры для настройки их поведения.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction useTimeout(callback, delay) {\r\n  useEffect(() => {\r\n    const timer = setTimeout(callback, delay);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [callback, delay]);\r\n}\r\n\r\nfunction TimerComponent() {\r\n  useTimeout(() => {\r\n    console.log('Timeout triggered!');\r\n  }, 3000);\r\n\r\n  return <p>Check the console after 3 seconds.</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102530,\r\n      question: \"Как тестировать пользовательские хуки?\",\r\n      answer: `\r\n**Тестирование пользовательских хуков:**\r\n1. **Использование библиотеки \\`@testing-library/react-hooks\\`:**\r\n   - Предоставляет утилиты для тестирования хуков.\r\n2. **Создание тестового компонента:**\r\n   - Оберните хук в тестовый компонент для проверки его работы.\r\n\r\n**Пример теста:**\r\n\\`\\`\\`javascript\r\nimport { renderHook, act } from '@testing-library/react-hooks';\r\nimport { useCounter } from './useCounter';\r\n\r\ntest('increments counter', () => {\r\n  const { result } = renderHook(() => useCounter());\r\n\r\n  act(() => {\r\n    result.current.increment();\r\n  });\r\n\r\n  expect(result.current.count).toBe(1);\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102531,\r\n      question: \"Как организовать структуру пользовательских хуков в проекте?\",\r\n      answer: `\r\n**Организация пользовательских хуков:**\r\n1. **Отдельная папка:**\r\n   - Создайте папку \\`hooks\\` в корне проекта.\r\n2. **Группировка по назначению:**\r\n   - Разделяйте хуки по функционалу (например, \\`useFetch.js\\`, \\`useForm.js\\`).\r\n3. **Нейминг:**\r\n   - Используйте префикс \\`use\\` для всех пользовательских хуков (например, \\`useAuth\\`, \\`useTheme\\`).\r\n\r\n**Пример структуры:**\r\n\\`\\`\\`plaintext\r\nsrc/\r\n  hooks/\r\n    useFetch.js\r\n    useCounter.js\r\n    useWindowSize.js\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102532,\r\n      question: \"Какие популярные пользовательские хуки существуют?\",\r\n      answer: `\r\n**Популярные пользовательские хуки:**\r\n1. **useFetch:**\r\n   - Для выполнения API-запросов.\r\n2. **useForm:**\r\n   - Для управления формами.\r\n3. **useLocalStorage:**\r\n   - Для работы с localStorage.\r\n4. **usePrevious:**\r\n   - Для получения предыдущего значения состояния.\r\n5. **useDarkMode:**\r\n   - Для управления темной темой.\r\n\r\n**Пример \\`useLocalStorage\\`:**\r\n\\`\\`\\`javascript\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction useLocalStorage(key, initialValue) {\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(storedValue));\r\n  }, [key, storedValue]);\r\n\r\n  return [storedValue, setStoredValue];\r\n}\r\n\r\nfunction App() {\r\n  const [name, setName] = useLocalStorage('username', 'Guest');\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={name}\r\n        onChange={(e) => setName(e.target.value)}\r\n      />\r\n      <p>Hello, {name}!</p>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102533,\r\n      question:\r\n        \"Как использовать пользовательские хуки в классовых компонентах?\",\r\n      answer: `\r\n**Использование пользовательских хуков в классовых компонентах:**\r\n- Непосредственно использовать хуки в классовых компонентах нельзя.\r\n- Решение:\r\n  1. **Вынести логику в функциональный компонент:**\r\n     - Оберните хук в функциональный компонент и используйте его как дочерний элемент.\r\n  2. **Использовать HOC (Higher-Order Component):**\r\n     - Передайте логику через HOC.\r\n\r\n**Пример HOC:**\r\n\\`\\`\\`javascript\r\nfunction withWindowSize(Component) {\r\n  return function WrappedComponent(props) {\r\n    const [width, height] = useWindowSize();\r\n    return <Component {...props} width={width} height={height} />;\r\n  };\r\n}\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Width: {this.props.width}</p>\r\n        <p>Height: {this.props.height}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withWindowSize(App);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testWorkingWithFormsReact = {\r\n  id: 102650,\r\n  title: \"Working with Forms in React\",\r\n  questions: [\r\n    {\r\n      id: 102651,\r\n      question: \"Как работать с формами в React?\",\r\n      answer: `\r\n**Работа с формами в React:**\r\n- В React формы управляются через состояние компонента.\r\n- Для управления вводом данных используются контролируемые компоненты (controlled components).\r\n\r\n**Пример контролируемой формы:**\r\n\\`\\`\\`javascript\r\nimport React, { useState } from 'react';\r\n\r\nfunction Form() {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log('Отправленное значение:', value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={value} onChange={handleChange} />\r\n      <button type=\"submit\">Отправить</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102652,\r\n      question: \"Что такое контролируемые компоненты (Controlled Components)?\",\r\n      answer: `\r\n**Контролируемые компоненты:**\r\n- Это элементы формы, значения которых управляются через состояние React.\r\n- Каждое изменение в поле ввода обновляет состояние.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction ControlledInput() {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return <input type=\"text\" value={value} onChange={handleChange} />;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102653,\r\n      question:\r\n        \"Что такое неконтролируемые компоненты (Uncontrolled Components)?\",\r\n      answer: `\r\n**Неконтролируемые компоненты:**\r\n- Это элементы формы, значения которых управляются DOM, а не React.\r\n- Для доступа к значению используется \\`ref\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useRef } from 'react';\r\n\r\nfunction UncontrolledInput() {\r\n  const inputRef = useRef(null);\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Значение:', inputRef.current.value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" ref={inputRef} />\r\n      <button type=\"submit\">Отправить</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102654,\r\n      question: \"Как обрабатывать события ввода в React?\",\r\n      answer: `\r\n**Обработка событий ввода:**\r\n- Используйте обработчики событий, такие как \\`onChange\\`, для отслеживания изменений в полях ввода.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction InputExample() {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"text\" value={value} onChange={handleChange} />\r\n      <p>Текущее значение: {value}</p>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102655,\r\n      question: \"Как валидировать данные формы в React?\",\r\n      answer: `\r\n**Валидация данных:**\r\n- Выполняйте проверку данных перед отправкой формы.\r\n- Используйте состояние для отображения ошибок.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction FormValidation() {\r\n  const [value, setValue] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (value.trim() === '') {\r\n      setError('Поле не может быть пустым');\r\n    } else {\r\n      setError('');\r\n      console.log('Отправленное значение:', value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={value} onChange={handleChange} />\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n      <button type=\"submit\">Отправить</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102656,\r\n      question: \"Как работать с множественными полями ввода?\",\r\n      answer: `\r\n**Работа с несколькими полями:**\r\n- Используйте объект состояния для хранения значений всех полей.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction MultiFieldForm() {\r\n  const [formData, setFormData] = useState({ name: '', email: '' });\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log('Отправленные данные:', formData);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={formData.name}\r\n        onChange={handleChange}\r\n        placeholder=\"Имя\"\r\n      />\r\n      <input\r\n        type=\"email\"\r\n        name=\"email\"\r\n        value={formData.email}\r\n        onChange={handleChange}\r\n        placeholder=\"Email\"\r\n      />\r\n      <button type=\"submit\">Отправить</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102657,\r\n      question: \"Как очистить форму после отправки?\",\r\n      answer: `\r\n**Очистка формы:**\r\n- Сбросьте состояние формы после отправки.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction ClearForm() {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log('Отправленное значение:', value);\r\n    setValue(''); // Очистка формы\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={value} onChange={handleChange} />\r\n      <button type=\"submit\">Отправить</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102658,\r\n      question: \"Как использовать библиотеку Formik для работы с формами?\",\r\n      answer: `\r\n**Formik:**\r\n- Популярная библиотека для управления формами в React.\r\n- Упрощает управление состоянием, валидацию и отправку данных.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useFormik } from 'formik';\r\n\r\nfunction FormikExample() {\r\n  const formik = useFormik({\r\n    initialValues: { name: '', email: '' },\r\n    onSubmit: (values) => {\r\n      console.log('Отправленные данные:', values);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={formik.values.name}\r\n        onChange={formik.handleChange}\r\n        placeholder=\"Имя\"\r\n      />\r\n      <input\r\n        type=\"email\"\r\n        name=\"email\"\r\n        value={formik.values.email}\r\n        onChange={formik.handleChange}\r\n        placeholder=\"Email\"\r\n      />\r\n      <button type=\"submit\">Отправить</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102659,\r\n      question: \"Как добавить маску ввода для полей формы?\",\r\n      answer: `\r\n**Маска ввода:**\r\n- Используйте сторонние библиотеки, такие как \\`react-input-mask\\`, для добавления маски.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useState } from 'react';\r\nimport InputMask from 'react-input-mask';\r\n\r\nfunction MaskedInput() {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <InputMask mask=\"+7 (999) 999-99-99\" value={value} onChange={handleChange}>\r\n      {(inputProps) => <input {...inputProps} placeholder=\"Телефон\" />}\r\n    </InputMask>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102660,\r\n      question: \"Как отправить данные формы на сервер?\",\r\n      answer: `\r\n**Отправка данных:**\r\n- Используйте \\`fetch\\` или \\`axios\\` для отправки данных на сервер.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction SubmitForm() {\r\n  const [formData, setFormData] = useState({ name: '', email: '' });\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const response = await fetch('https://api.example.com/submit ', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      const result = await response.json();\r\n      console.log('Ответ сервера:', result);\r\n    } catch (error) {\r\n      console.error('Ошибка при отправке:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={formData.name}\r\n        onChange={handleChange}\r\n        placeholder=\"Имя\"\r\n      />\r\n      <input\r\n        type=\"email\"\r\n        name=\"email\"\r\n        value={formData.email}\r\n        onChange={handleChange}\r\n        placeholder=\"Email\"\r\n      />\r\n      <button type=\"submit\">Отправить</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testState = {\r\n  id: 102700,\r\n  title: \"State Management (управление состоянием)\",\r\n  questions: [\r\n    {\r\n      id: 102701,\r\n      question: \"Что такое состояние (state) в React?\",\r\n      answer: `\r\n**Состояние (State):**\r\n- Это объект, который хранит данные компонента и может изменяться во время работы приложения.\r\n- Изменение состояния вызывает перерисовку компонента.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useState } from 'react';\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102702,\r\n      question: \"Как инициализировать состояние в функциональном компоненте?\",\r\n      answer: `\r\n**Инициализация состояния:**\r\n- Используйте хук \\`useState\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useState } from 'react';\r\n\r\nfunction Example() {\r\n  const [value, setValue] = useState('initial value');\r\n\r\n  return (\r\n    <div>\r\n      <p>{value}</p>\r\n      <button onClick={() => setValue('new value')}>Change Value</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102703,\r\n      question: \"Как обновить состояние в React?\",\r\n      answer: `\r\n**Обновление состояния:**\r\n- Используйте функцию обновления, возвращаемую \\`useState\\`.\r\n- Для сложных состояний используйте функциональное обновление.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  const increment = () => {\r\n    setCount((prevCount) => prevCount + 1); // Функциональное обновление\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={increment}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102704,\r\n      question: \"Что такое локальное состояние?\",\r\n      answer: `\r\n**Локальное состояние:**\r\n- Это состояние, которое принадлежит конкретному компоненту.\r\n- Не передается другим компонентам напрямую.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction LocalStateExample() {\r\n  const [text, setText] = useState('');\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={text}\r\n      onChange={(e) => setText(e.target.value)}\r\n      placeholder=\"Введите текст\"\r\n    />\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102705,\r\n      question: \"Как поднять состояние (lift state up)?\",\r\n      answer: `\r\n**Поднятие состояния:**\r\n- Перемещение состояния из дочернего компонента в родительский для совместного использования.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Parent() {\r\n  const [value, setValue] = useState('');\r\n\r\n  return (\r\n    <>\r\n      <ChildInput value={value} onChange={setValue} />\r\n      <DisplayValue value={value} />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction ChildInput({ value, onChange }) {\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={(e) => onChange(e.target.value)}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DisplayValue({ value }) {\r\n  return <p>Значение: {value}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102706,\r\n      question: \"Что такое глобальное состояние?\",\r\n      answer: `\r\n**Глобальное состояние:**\r\n- Это состояние, доступное для нескольких компонентов.\r\n- Управляется через контекст (\\`Context API\\`) или сторонние библиотеки (например, Redux).\r\n\r\n**Пример с Context API:**\r\n\\`\\`\\`javascript\r\nimport React, { createContext, useContext, useState } from 'react';\r\n\r\nconst StateContext = createContext();\r\n\r\nfunction App() {\r\n  const [globalState, setGlobalState] = useState('initial value');\r\n\r\n  return (\r\n    <StateContext.Provider value={{ globalState, setGlobalState }}>\r\n      <ChildComponent />\r\n    </StateContext.Provider>\r\n  );\r\n}\r\n\r\nfunction ChildComponent() {\r\n  const { globalState, setGlobalState } = useContext(StateContext);\r\n\r\n  return (\r\n    <div>\r\n      <p>{globalState}</p>\r\n      <button onClick={() => setGlobalState('updated value')}>\r\n        Update Global State\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102707,\r\n      question: \"Как использовать хук useReducer для управления состоянием?\",\r\n      answer: `\r\n**Хук \\`useReducer\\`:**\r\n- Альтернатива \\`useState\\` для сложного состояния.\r\n- Принимает редюсер и начальное состояние, возвращает текущее состояние и функцию dispatch.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    case 'decrement':\r\n      return { count: state.count - 1 };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nfunction Counter() {\r\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {state.count}</p>\r\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\r\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102708,\r\n      question: \"В чем разница между состоянием и пропсами?\",\r\n      answer: `\r\n**Разница между состоянием и пропсами:**\r\n1. **Состояние (State):**\r\n   - Управляется внутри компонента.\r\n   - Может изменяться.\r\n2. **Пропсы (Props):**\r\n   - Передаются извне.\r\n   - Только для чтения (неизменяемы внутри компонента).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Parent() {\r\n  const [value, setValue] = useState('Hello');\r\n\r\n  return <Child message={value} />;\r\n}\r\n\r\nfunction Child({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102709,\r\n      question:\r\n        \"Как оптимизировать производительность при работе с состоянием?\",\r\n      answer: `\r\n**Оптимизация состояния:**\r\n1. **Мемоизация значений:**\r\n   - Используйте \\`useMemo\\` для кэширования вычислений.\r\n2. **Мемоизация функций:**\r\n   - Используйте \\`useCallback\\` для предотвращения лишних перерисовок.\r\n3. **Разделение состояний:**\r\n   - Разделяйте состояние на независимые части.\r\n\r\n**Пример с \\`useMemo\\`:**\r\n\\`\\`\\`javascript\r\nfunction ExpensiveComponent({ data }) {\r\n  const processedData = useMemo(() => {\r\n    console.log('Recalculating...');\r\n    return data.map(item => item * 2);\r\n  }, [data]);\r\n\r\n  return <div>{processedData.join(', ')}</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102710,\r\n      question: \"Как управлять асинхронным состоянием?\",\r\n      answer: `\r\n**Управление асинхронным состоянием:**\r\n- Используйте \\`useEffect\\` для выполнения побочных эффектов.\r\n- Обновляйте состояние после завершения асинхронной операции.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction FetchData() {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch('https://api.example.com/data ')\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        setData(result);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  return <div>{JSON.stringify(data)}</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102711,\r\n      question: \"Какие есть альтернативы для управления глобальным состоянием?\",\r\n      answer: `\r\n**Альтернативы для управления глобальным состоянием:**\r\n1. **Redux:**\r\n   - Библиотека для централизованного управления состоянием.\r\n2. **MobX:**\r\n   - Реактивное управление состоянием.\r\n3. **Zustand:**\r\n   - Минималистичная библиотека для управления состоянием.\r\n4. **Recoil:**\r\n   - Легковесная библиотека для управления состоянием.\r\n5. **Context API:**\r\n   - Встроенное решение React для глобального состояния.\r\n\r\n**Пример с Zustand:**\r\n\\`\\`\\`javascript\r\nimport create from 'zustand';\r\n\r\nconst useStore = create((set) => ({\r\n  count: 0,\r\n  increment: () => set((state) => ({ count: state.count + 1 })),\r\n}));\r\n\r\nfunction Counter() {\r\n  const { count, increment } = useStore();\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={increment}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testRefs = {\r\n  id: 102725,\r\n  title: \"Refs (ссылки)\",\r\n  questions: [\r\n    {\r\n      id: 102726,\r\n      question: \"Что такое Refs в React?\",\r\n      answer: `\r\n**Refs (ссылки):**\r\n- Это способ получить доступ к DOM-элементам или экземплярам компонентов.\r\n- Используются для управления фокусом, текстовым выбором, медиа-проигрывателями и интеграции с библиотеками сторонних разработчиков.\r\n\r\n**Пример создания Ref:**\r\n\\`\\`\\`javascript\r\nimport React, { useRef } from 'react';\r\n\r\nfunction TextInput() {\r\n  const inputRef = useRef(null);\r\n\r\n  const handleFocus = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input ref={inputRef} type=\"text\" />\r\n      <button onClick={handleFocus}>Установить фокус</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102727,\r\n      question: \"Как создать Ref в функциональном компоненте?\",\r\n      answer: `\r\n**Создание Ref:**\r\n- Используйте хук \\`useRef\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useRef } from 'react';\r\n\r\nfunction Example() {\r\n  const ref = useRef(null);\r\n\r\n  const handleClick = () => {\r\n    console.log(ref.current); // Доступ к DOM-элементу\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div ref={ref}>Этот элемент доступен через ref</div>\r\n      <button onClick={handleClick}>Проверить ref</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102728,\r\n      question: \"Как использовать Ref в классовых компонентах?\",\r\n      answer: `\r\n**Использование Ref:**\r\n- В классовых компонентах используйте \\`React.createRef()\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass TextInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.inputRef = React.createRef();\r\n  }\r\n\r\n  handleFocus = () => {\r\n    this.inputRef.current.focus();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input ref={this.inputRef} type=\"text\" />\r\n        <button onClick={this.handleFocus}>Установить фокус</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102729,\r\n      question: \"Какие основные случаи использования Ref?\",\r\n      answer: `\r\n**Основные случаи использования:**\r\n1. **Управление фокусом:**\r\n   - Установка фокуса на поле ввода.\r\n2. **Текстовый выбор:**\r\n   - Выделение текста в поле ввода.\r\n3. **Интеграция с DOM:**\r\n   - Прямой доступ к DOM-элементам.\r\n4. **Анимации:**\r\n   - Управление анимациями через DOM.\r\n5. **Интеграция с библиотеками:**\r\n   - Интеграция с внешними библиотеками, например, графическими.\r\n\r\n**Пример управления фокусом:**\r\n\\`\\`\\`javascript\r\nfunction FocusInput() {\r\n  const inputRef = useRef(null);\r\n\r\n  const handleFocus = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input ref={inputRef} type=\"text\" />\r\n      <button onClick={handleFocus}>Установить фокус</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102730,\r\n      question: \"Что такое callback-refs и как они работают?\",\r\n      answer: `\r\n**Callback-refs:**\r\n- Это функция, которая вызывается с DOM-элементом или экземпляром компонента.\r\n- Позволяет управлять рефами более гибко.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction CallbackRefExample() {\r\n  let inputElement = null;\r\n\r\n  const setRef = (element) => {\r\n    inputElement = element;\r\n  };\r\n\r\n  const handleFocus = () => {\r\n    if (inputElement) {\r\n      inputElement.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input ref={setRef} type=\"text\" />\r\n      <button onClick={handleFocus}>Установить фокус</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102731,\r\n      question: \"Как передать Ref в дочерний компонент?\",\r\n      answer: `\r\n**Передача Ref:**\r\n- Используйте \\`React.forwardRef\\`, чтобы передать Ref в дочерний компонент.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst ChildComponent = React.forwardRef((props, ref) => {\r\n  return <input ref={ref} type=\"text\" />;\r\n});\r\n\r\nfunction ParentComponent() {\r\n  const inputRef = useRef(null);\r\n\r\n  const handleFocus = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ChildComponent ref={inputRef} />\r\n      <button onClick={handleFocus}>Установить фокус</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102732,\r\n      question: \"Можно ли использовать Ref для хранения изменяемых значений?\",\r\n      answer: `\r\n**Да, можно:**\r\n- \\`useRef\\` можно использовать для хранения изменяемых значений, которые не вызывают перерисовку компонента.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Counter() {\r\n  const countRef = useRef(0);\r\n\r\n  const increment = () => {\r\n    countRef.current += 1;\r\n    console.log('Current count:', countRef.current);\r\n  };\r\n\r\n  return <button onClick={increment}>Increment</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102733,\r\n      question: \"В чем разница между State и Ref?\",\r\n      answer: `\r\n**Разница между State и Ref:**\r\n1. **State:**\r\n   - Триггерит перерисовку компонента при изменении.\r\n   - Используется для управляемых данных.\r\n2. **Ref:**\r\n   - Не вызывает перерисовку компонента.\r\n   - Используется для прямого доступа к DOM или хранения изменяемых значений.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Example() {\r\n  const [state, setState] = useState(0);\r\n  const ref = useRef(0);\r\n\r\n  const updateState = () => {\r\n    setState((prev) => prev + 1); // Перерисовывает компонент\r\n  };\r\n\r\n  const updateRef = () => {\r\n    ref.current += 1; // Не вызывает перерисовку\r\n    console.log('Ref value:', ref.current);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>State: {state}</p>\r\n      <button onClick={updateState}>Update State</button>\r\n      <button onClick={updateRef}>Update Ref</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102734,\r\n      question: \"Как использовать Ref с хуками?\",\r\n      answer: `\r\n**Использование Ref с хуками:**\r\n- Хук \\`useRef\\` предоставляет доступ к Ref в функциональных компонентах.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Timer() {\r\n  const intervalRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    intervalRef.current = setInterval(() => {\r\n      console.log('Timer tick');\r\n    }, 1000);\r\n\r\n    return () => clearInterval(intervalRef.current);\r\n  }, []);\r\n\r\n  return <p>Check the console for timer ticks.</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102735,\r\n      question: \"Как очистить Ref?\",\r\n      answer: `\r\n**Очистка Ref:**\r\n- Просто установите \\`current\\` свойство Ref в \\`null\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction ClearRef() {\r\n  const ref = useRef(null);\r\n\r\n  const clear = () => {\r\n    ref.current = null;\r\n    console.log('Ref cleared:', ref.current);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={clear}>Clear Ref</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testPatternsReact = {\r\n  id: 102825,\r\n  title: \"Design Patterns in React (шаблоны проектирования в React)\",\r\n  questions: [\r\n    {\r\n      id: 102826,\r\n      question: \"Что такое шаблоны проектирования (Design Patterns) в React?\",\r\n      answer: `\r\n**Шаблоны проектирования:**\r\n- Это проверенные решения типичных задач, которые помогают писать структурированный и переиспользуемый код.\r\n- В React шаблоны проектирования помогают организовать логику компонентов, управлять состоянием и улучшать производительность.\r\n\r\n**Примеры популярных шаблонов:**\r\n1. **Компонентный подход:**\r\n   - Разделение UI на независимые компоненты.\r\n2. **Container/Presentational Pattern:**\r\n   - Разделение логики и представления.\r\n3. **Compound Components:**\r\n   - Группа компонентов, работающих вместе как единое целое.\r\n4. **Render Props:**\r\n   - Передача функции для рендеринга дочерних элементов.\r\n\r\n**Пример Container/Presentational Pattern:**\r\n\\`\\`\\`javascript\r\n// Container Component\r\nfunction UserContainer() {\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchUser().then((data) => setUser(data));\r\n  }, []);\r\n\r\n  return <UserProfile user={user} />;\r\n}\r\n\r\n// Presentational Component\r\nfunction UserProfile({ user }) {\r\n  if (!user) return <p>Loading...</p>;\r\n  return <div>{user.name}</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102827,\r\n      question: \"Что такое Container/Presentational Pattern?\",\r\n      answer: `\r\n**Container/Presentational Pattern:**\r\n- Разделяет логику и представление.\r\n- **Container:** Отвечает за управление данными и состоянием.\r\n- **Presentational:** Отвечает за отображение данных.\r\n\r\n**Преимущества:**\r\n- Упрощает тестирование.\r\n- Повышает переиспользуемость компонентов.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// Container Component\r\nfunction DataFetcher() {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchData().then((result) => setData(result));\r\n  }, []);\r\n\r\n  return <DataList data={data} />;\r\n}\r\n\r\n// Presentational Component\r\nfunction DataList({ data }) {\r\n  return (\r\n    <ul>\r\n      {data.map((item) => (\r\n        <li key={item.id}>{item.name}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102828,\r\n      question: \"Что такое Render Props Pattern?\",\r\n      answer: `\r\n**Render Props Pattern:**\r\n- Позволяет передавать функцию как пропс для рендеринга дочерних элементов.\r\n- Полезен для обмена логикой между компонентами.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction MouseTracker({ render }) {\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = (event) => {\r\n      setPosition({ x: event.clientX, y: event.clientY });\r\n    };\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n    return () => window.removeEventListener('mousemove', handleMouseMove);\r\n  }, []);\r\n\r\n  return render(position);\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <MouseTracker\r\n      render={(position) => (\r\n        <div>\r\n          Mouse position: {position.x}, {position.y}\r\n        </div>\r\n      )}\r\n    />\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102829,\r\n      question: \"Что такое Compound Components Pattern?\",\r\n      answer: `\r\n**Compound Components Pattern:**\r\n- Группа компонентов, работающих вместе как единое целое.\r\n- Дочерние компоненты имеют доступ к состоянию родительского компонента через контекст или props.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst Tabs = ({ children }) => {\r\n  const [activeTab, setActiveTab] = useState(0);\r\n\r\n  return React.Children.map(children, (child, index) =>\r\n    React.cloneElement(child, {\r\n      isActive: index === activeTab,\r\n      onClick: () => setActiveTab(index),\r\n    })\r\n  );\r\n};\r\n\r\nconst TabButton = ({ isActive, onClick, children }) => (\r\n  <button onClick={onClick} style={{ fontWeight: isActive ? 'bold' : 'normal' }}>\r\n    {children}\r\n  </button>\r\n);\r\n\r\nconst TabContent = ({ isActive, children }) =>\r\n  isActive ? <div>{children}</div> : null;\r\n\r\nfunction App() {\r\n  return (\r\n    <Tabs>\r\n      <TabButton>Tab 1</TabButton>\r\n      <TabButton>Tab 2</TabButton>\r\n      <TabContent>Content for Tab 1</TabContent>\r\n      <TabContent>Content for Tab 2</TabContent>\r\n    </Tabs>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102830,\r\n      question: \"Что такое Higher-Order Components (HOC)?\",\r\n      answer: `\r\n**Higher-Order Components (HOC):**\r\n- Это функция, которая принимает компонент и возвращает новый компонент с дополнительными свойствами.\r\n- Используется для повторного использования логики.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction withLoading(Component) {\r\n  return function EnhancedComponent({ isLoading, ...props }) {\r\n    if (isLoading) return <p>Loading...</p>;\r\n    return <Component {...props} />;\r\n  };\r\n}\r\n\r\nfunction DataList({ data }) {\r\n  return (\r\n    <ul>\r\n      {data.map((item) => (\r\n        <li key={item.id}>{item.name}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nconst DataListWithLoading = withLoading(DataList);\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchData().then((result) => {\r\n      setData(result);\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  return <DataListWithLoading data={data} isLoading={loading} />;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102831,\r\n      question: \"Что такое Custom Hooks Pattern?\",\r\n      answer: `\r\n**Custom Hooks Pattern:**\r\n- Это пользовательские хуки, которые позволяют выносить логику в отдельные функции.\r\n- Упрощают переиспользование логики между компонентами.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction useFetch(url) {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        setData(result);\r\n        setLoading(false);\r\n      });\r\n  }, [url]);\r\n\r\n  return { data, loading };\r\n}\r\n\r\nfunction App() {\r\n  const { data, loading } = useFetch('https://api.example.com/data ');\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  return (\r\n    <ul>\r\n      {data.map((item) => (\r\n        <li key={item.id}>{item.name}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102832,\r\n      question: \"Что такое Context API Pattern?\",\r\n      answer: `\r\n**Context API Pattern:**\r\n- Позволяет передавать данные глубоко в дерево компонентов без использования props.\r\n- Используется для управления глобальным состоянием.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst ThemeContext = React.createContext();\r\n\r\nfunction ThemeProvider({ children }) {\r\n  const [theme, setTheme] = useState('light');\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nfunction ThemedButton() {\r\n  const { theme, setTheme } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\r\n      Toggle Theme ({theme})\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider>\r\n      <ThemedButton />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102833,\r\n      question: \"Что такое State Reducer Pattern?\",\r\n      answer: `\r\n**State Reducer Pattern:**\r\n- Позволяет делегировать управление состоянием родительскому компоненту.\r\n- Используется для создания гибких компонентов.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction useCounter({ initialState = 0, reducer = defaultReducer } = {}) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const increment = () => dispatch({ type: 'increment' });\r\n  const decrement = () => dispatch({ type: 'decrement' });\r\n\r\n  return { state, increment, decrement };\r\n}\r\n\r\nfunction defaultReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return state + 1;\r\n    case 'decrement':\r\n      return state - 1;\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const { state, increment, decrement } = useCounter();\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {state}</p>\r\n      <button onClick={increment}>Increment</button>\r\n      <button onClick={decrement}>Decrement</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102834,\r\n      question: \"Какие есть альтернативы Redux для управления состоянием?\",\r\n      answer: `\r\n**Альтернативы Redux:**\r\n1. **Context API:**\r\n   - Встроенное решение React для глобального состояния.\r\n2. **Recoil:**\r\n   - Легковесная библиотека для управления состоянием.\r\n3. **MobX:**\r\n   - Реактивное управление состоянием.\r\n4. **Zustand:**\r\n   - Минималистичная библиотека для управления состоянием.\r\n5. **Jotai:**\r\n   - Атомарное управление состоянием.\r\n\r\n**Пример Zustand:**\r\n\\`\\`\\`javascript\r\nimport create from 'zustand';\r\n\r\nconst useStore = create((set) => ({\r\n  count: 0,\r\n  increment: () => set((state) => ({ count: state.count + 1 })),\r\n}));\r\n\r\nfunction Counter() {\r\n  const { count, increment } = useStore();\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={increment}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102835,\r\n      question: \"Что такое Controlled и Uncontrolled Components?\",\r\n      answer: `\r\n**Controlled Components:**\r\n- Компоненты, управляемые через состояние React.\r\n- Значения полей ввода синхронизируются с состоянием.\r\n\r\n**Uncontrolled Components:**\r\n- Компоненты, управляемые DOM.\r\n- Значения полей ввода извлекаются через \\`ref\\`.\r\n\r\n**Пример Controlled Component:**\r\n\\`\\`\\`javascript\r\nfunction ControlledInput() {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return <input type=\"text\" value={value} onChange={handleChange} />;\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример Uncontrolled Component:**\r\n\\`\\`\\`javascript\r\nfunction UncontrolledInput() {\r\n  const inputRef = useRef(null);\r\n\r\n  const handleSubmit = () => {\r\n    console.log(inputRef.current.value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" ref={inputRef} />\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testFunctionalComponents = {\r\n  id: 102875,\r\n  title: \"Functional Components (функциональные компоненты)\",\r\n  questions: [\r\n    {\r\n      id: 102876,\r\n      question: \"Что такое функциональные компоненты в React?\",\r\n      answer: `\r\n**Функциональные компоненты:**\r\n- Это простые JavaScript-функции, которые принимают пропсы и возвращают JSX.\r\n- Они легковесны и проще в написании по сравнению с классовыми компонентами.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Greeting({ name }) {\r\n  return <p>Hello, {name}!</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102877,\r\n      question: \"Как использовать состояние в функциональных компонентах?\",\r\n      answer: `\r\n**Использование состояния:**\r\n- Используйте хук \\`useState\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useState } from 'react';\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102878,\r\n      question: \"Как выполнять побочные эффекты в функциональных компонентах?\",\r\n      answer: `\r\n**Побочные эффекты:**\r\n- Используйте хук \\`useEffect\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useEffect, useState } from 'react';\r\n\r\nfunction FetchData() {\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch('https://api.example.com/data ')\r\n      .then((response) => response.json())\r\n      .then((result) => setData(result));\r\n  }, []);\r\n\r\n  return <div>{data ? JSON.stringify(data) : 'Loading...'}</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102879,\r\n      question: \"Чем функциональные компоненты отличаются от классовых?\",\r\n      answer: `\r\n**Отличия:**\r\n1. **Синтаксис:**\r\n   - Функциональные компоненты — это функции.\r\n   - Классовые компоненты — это классы, наследуемые от \\`React.Component\\`.\r\n2. **Состояние:**\r\n   - В функциональных компонентах используется хук \\`useState\\`.\r\n   - В классовых компонентах используется \\`this.state\\`.\r\n3. **Жизненный цикл:**\r\n   - В функциональных компонентах используются хуки, такие как \\`useEffect\\`.\r\n   - В классовых компонентах используются методы жизненного цикла (\\`componentDidMount\\`, \\`componentDidUpdate\\` и т.д.).\r\n4. **Производительность:**\r\n   - Функциональные компоненты легче для оптимизации и понимания.\r\n\r\n**Пример функционального компонента:**\r\n\\`\\`\\`javascript\r\nfunction Example() {\r\n  const [value, setValue] = useState('');\r\n\r\n  useEffect(() => {\r\n    console.log('Component mounted or updated');\r\n  }, [value]);\r\n\r\n  return <input value={value} onChange={(e) => setValue(e.target.value)} />;\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример классового компонента:**\r\n\\`\\`\\`javascript\r\nclass Example extends React.Component {\r\n  state = { value: '' };\r\n\r\n  componentDidMount() {\r\n    console.log('Component mounted');\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log('Component updated');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        value={this.state.value}\r\n        onChange={(e) => this.setState({ value: e.target.value })}\r\n      />\r\n    );\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102880,\r\n      question: \"Как передать пропсы в функциональный компонент?\",\r\n      answer: `\r\n**Передача пропсов:**\r\n- Пропсы передаются как аргумент функции.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Greeting({ name }) {\r\n  return <p>Hello, {name}!</p>;\r\n}\r\n\r\nfunction App() {\r\n  return <Greeting name=\"Alice\" />;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102881,\r\n      question: \"Как использовать контекст в функциональных компонентах?\",\r\n      answer: `\r\n**Использование контекста:**\r\n- Используйте хук \\`useContext\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { createContext, useContext } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nfunction ThemeProvider({ children }) {\r\n  return <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>;\r\n}\r\n\r\nfunction ThemedButton() {\r\n  const theme = useContext(ThemeContext);\r\n  return <button style={{ background: theme }}>Themed Button</button>;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider>\r\n      <ThemedButton />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102882,\r\n      question:\r\n        \"Как создать пользовательский хук для функционального компонента?\",\r\n      answer: `\r\n**Создание пользовательского хука:**\r\n- Пользовательские хуки — это функции, начинающиеся с префикса \\`use\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction useFetch(url) {\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((result) => setData(result));\r\n  }, [url]);\r\n\r\n  return data;\r\n}\r\n\r\nfunction App() {\r\n  const data = useFetch('https://api.example.com/data ');\r\n\r\n  return <div>{data ? JSON.stringify(data) : 'Loading...'}</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102883,\r\n      question: \"Как оптимизировать функциональные компоненты?\",\r\n      answer: `\r\n**Оптимизация:**\r\n1. **Мемоизация значений:**\r\n   - Используйте \\`useMemo\\` для кэширования вычислений.\r\n2. **Мемоизация функций:**\r\n   - Используйте \\`useCallback\\` для предотвращения лишних перерисовок.\r\n3. **Разделение компонентов:**\r\n   - Разделяйте логику на маленькие переиспользуемые компоненты.\r\n\r\n**Пример мемоизации:**\r\n\\`\\`\\`javascript\r\nimport { useMemo, useCallback } from 'react';\r\n\r\nfunction ExpensiveComponent({ data }) {\r\n  const processedData = useMemo(() => {\r\n    return data.map(item => item * 2);\r\n  }, [data]);\r\n\r\n  const handleClick = useCallback(() => {\r\n    console.log('Clicked');\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {processedData.join(', ')}\r\n      <button onClick={handleClick}>Click me</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102884,\r\n      question: \"Как работать с рефами в функциональных компонентах?\",\r\n      answer: `\r\n**Работа с рефами:**\r\n- Используйте хук \\`useRef\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useRef } from 'react';\r\n\r\nfunction TextInput() {\r\n  const inputRef = useRef(null);\r\n\r\n  const handleFocus = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input ref={inputRef} type=\"text\" />\r\n      <button onClick={handleFocus}>Focus Input</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102885,\r\n      question: \"Как обрабатывать события в функциональных компонентах?\",\r\n      answer: `\r\n**Обработка событий:**\r\n- Передайте функцию в качестве обработчика события.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction ClickHandler() {\r\n  const handleClick = () => {\r\n    console.log('Button clicked');\r\n  };\r\n\r\n  return <button onClick={handleClick}>Click me</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102886,\r\n      question: \"Какие преимущества у функциональных компонентов?\",\r\n      answer: `\r\n**Преимущества:**\r\n1. **Легкость использования:**\r\n   - Проще писать и читать.\r\n2. **Хуки:**\r\n   - Упрощают управление состоянием и побочными эффектами.\r\n3. **Производительность:**\r\n   - Легче оптимизировать с помощью мемоизации.\r\n4. **Переиспользование логики:**\r\n   - Пользовательские хуки позволяют выносить логику в отдельные функции.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testLifecycleMethods = {\r\n  id: 102850,\r\n  title: \"Lifecycle Methods (методы жизненного цикла)\",\r\n  questions: [\r\n    {\r\n      id: 102851,\r\n      question: \"Что такое методы жизненного цикла в React?\",\r\n      answer: `\r\n**Методы жизненного цикла:**\r\n- Это специальные методы, которые вызываются на определенных этапах существования компонента.\r\n- Используются для управления состоянием, побочными эффектами и обновлениями.\r\n\r\n**Основные этапы жизненного цикла:**\r\n1. **Монтирование (Mounting):**\r\n   - Компонент создается и добавляется в DOM.\r\n2. **Обновление (Updating):**\r\n   - Компонент обновляется при изменении состояния или пропсов.\r\n3. **Размонтирование (Unmounting):**\r\n   - Компонент удаляется из DOM.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass Example extends React.Component {\r\n  componentDidMount() {\r\n    console.log('Компонент смонтирован');\r\n  }\r\n\r\n  render() {\r\n    return <p>Пример жизненного цикла</p>;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102852,\r\n      question: \"Какие методы относятся к этапу монтирования?\",\r\n      answer: `\r\n**Методы монтирования:**\r\n1. **constructor():**\r\n   - Вызывается при создании компонента.\r\n   - Используется для инициализации состояния.\r\n2. **static getDerivedStateFromProps():**\r\n   - Обновляет состояние на основе пропсов.\r\n3. **render():**\r\n   - Определяет, что отрендерить.\r\n4. **componentDidMount():**\r\n   - Вызывается после монтирования компонента.\r\n   - Используется для API-запросов и подписок.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { data: null };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://api.example.com/data ')\r\n      .then((response) => response.json())\r\n      .then((data) => this.setState({ data }));\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.state.data ? JSON.stringify(this.state.data) : 'Loading...'}</div>;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102853,\r\n      question: \"Какие методы относятся к этапу обновления?\",\r\n      answer: `\r\n**Методы обновления:**\r\n1. **static getDerivedStateFromProps():**\r\n   - Обновляет состояние на основе новых пропсов.\r\n2. **shouldComponentUpdate():**\r\n   - Определяет, нужно ли перерисовывать компонент.\r\n3. **render():**\r\n   - Определяет, что отрендерить.\r\n4. **getSnapshotBeforeUpdate():**\r\n   - Сохраняет информацию перед обновлением DOM.\r\n5. **componentDidUpdate():**\r\n   - Вызывается после обновления компонента.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass Counter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { count: 0 };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return nextState.count % 2 === 0; // Перерисовка только при четном значении\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log('Предыдущее состояние:', prevState.count);\r\n  }\r\n\r\n  render() {\r\n    return <p>Count: {this.state.count}</p>;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102854,\r\n      question: \"Какие методы относятся к этапу размонтирования?\",\r\n      answer: `\r\n**Методы размонтирования:**\r\n1. **componentWillUnmount():**\r\n   - Вызывается перед удалением компонента из DOM.\r\n   - Используется для очистки (например, отмены подписок).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass Timer extends React.Component {\r\n  intervalId = null;\r\n\r\n  componentDidMount() {\r\n    this.intervalId = setInterval(() => console.log('Tick'), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalId); // Очистка таймера\r\n  }\r\n\r\n  render() {\r\n    return <p>Таймер запущен</p>;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102855,\r\n      question: \"Как заменить методы жизненного цикла с помощью хуков?\",\r\n      answer: `\r\n**Замена методов жизненного цикла:**\r\n1. **componentDidMount → useEffect с пустым массивом зависимостей:**\r\n   - Запускается один раз после монтирования.\r\n2. **componentDidUpdate → useEffect с зависимостями:**\r\n   - Запускается при изменении указанных зависимостей.\r\n3. **componentWillUnmount → функция очистки в useEffect:**\r\n   - Выполняется перед размонтированием.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useEffect, useState } from 'react';\r\n\r\nfunction Timer() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => setCount((prev) => prev + 1), 1000);\r\n\r\n    return () => clearInterval(intervalId); // Очистка\r\n  }, []);\r\n\r\n  return <p>Count: {count}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102856,\r\n      question: \"Что такое shouldComponentUpdate и зачем он нужен?\",\r\n      answer: `\r\n**shouldComponentUpdate:**\r\n- Метод, который определяет, нужно ли перерисовывать компонент.\r\n- Возвращает \\`true\\` (перерисовать) или \\`false\\` (не перерисовывать).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass OptimizedComponent extends React.Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return nextProps.value !== this.props.value; // Перерисовка только при изменении props\r\n  }\r\n\r\n  render() {\r\n    return <p>Value: {this.props.value}</p>;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102857,\r\n      question: \"Что такое getSnapshotBeforeUpdate и как он работает?\",\r\n      answer: `\r\n**getSnapshotBeforeUpdate:**\r\n- Вызывается перед обновлением DOM.\r\n- Возвращает значение (snapshot), которое передается в \\`componentDidUpdate\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass ScrollingList extends React.Component {\r\n  listRef = React.createRef();\r\n\r\n  getSnapshotBeforeUpdate(prevProps, prevState) {\r\n    if (prevProps.items.length < this.props.items.length) {\r\n      return this.listRef.current.scrollHeight; // Сохраняем высоту\r\n    }\r\n    return null;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (snapshot !== null) {\r\n      this.listRef.current.scrollTop += this.listRef.current.scrollHeight - snapshot;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div ref={this.listRef} style={{ overflow: 'auto', height: '100px' }}>\r\n        {this.props.items.map((item, index) => (\r\n          <div key={index}>{item}</div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102858,\r\n      question: \"Как использовать componentDidCatch для обработки ошибок?\",\r\n      answer: `\r\n**componentDidCatch:**\r\n- Метод для обработки ошибок в дочерних компонентах.\r\n- Позволяет отображать резервный UI.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass ErrorBoundary extends React.Component {\r\n  state = { hasError: false };\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n    console.error('Ошибка:', error, info);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <p>Что-то пошло не так.</p>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <ErrorBoundary>\r\n      <BrokenComponent />\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102859,\r\n      question:\r\n        \"Что такое PureComponent и как он связан с shouldComponentUpdate?\",\r\n      answer: `\r\n**PureComponent:**\r\n- Класс, который автоматически реализует поверхностное сравнение пропсов и состояния.\r\n- Аналогично \\`shouldComponentUpdate\\`, но без необходимости ручного кода.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass MyComponent extends React.PureComponent {\r\n  render() {\r\n    return <p>{this.props.value}</p>;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102860,\r\n      question:\r\n        \"Какие есть альтернативы shouldComponentUpdate в функциональных компонентах?\",\r\n      answer: `\r\n**Альтернативы:**\r\n1. **React.memo:**\r\n   - Поверхностно сравнивает пропсы функционального компонента.\r\n2. **useMemo:**\r\n   - Кэширует значения для оптимизации.\r\n\r\n**Пример React.memo:**\r\n\\`\\`\\`javascript\r\nconst MyComponent = React.memo(function MyComponent({ value }) {\r\n  return <p>{value}</p>;\r\n});\r\n\\`\\`\\`\r\n\r\n**Пример useMemo:**\r\n\\`\\`\\`javascript\r\nfunction ExpensiveComponent({ data }) {\r\n  const processedData = useMemo(() => {\r\n    return data.map(item => item * 2);\r\n  }, [data]);\r\n\r\n  return <div>{processedData.join(', ')}</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testClassComponents = {\r\n  id: 102950,\r\n  title: \"Class Components (классовые компоненты)\",\r\n  questions: [\r\n    {\r\n      id: 102951,\r\n      question: \"Что такое классовые компоненты в React?\",\r\n      answer: `\r\n**Классовые компоненты:**\r\n- Это компоненты, созданные с использованием ES6-классов.\r\n- Они наследуются от \\`React.Component\\` и содержат метод \\`render()\\`, который возвращает JSX.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass Greeting extends React.Component {\r\n  render() {\r\n    return <p>Hello, {this.props.name}!</p>;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102952,\r\n      question: \"Как использовать состояние в классовых компонентах?\",\r\n      answer: `\r\n**Использование состояния:**\r\n- Состояние хранится в свойстве \\`state\\`.\r\n- Для обновления состояния используется метод \\`this.setState()\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass Counter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { count: 0 };\r\n  }\r\n\r\n  increment = () => {\r\n    this.setState((prevState) => ({ count: prevState.count + 1 }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Count: {this.state.count}</p>\r\n        <button onClick={this.increment}>Increment</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102953,\r\n      question: \"Как передать пропсы в классовый компонент?\",\r\n      answer: `\r\n**Передача пропсов:**\r\n- Пропсы передаются как аргумент конструктора и доступны через \\`this.props\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass Greeting extends React.Component {\r\n  render() {\r\n    return <p>Hello, {this.props.name}!</p>;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return <Greeting name=\"Alice\" />;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102954,\r\n      question:\r\n        \"Какие методы жизненного цикла существуют в классовых компонентах?\",\r\n      answer: `\r\n**Методы жизненного цикла:**\r\n1. **Монтирование:**\r\n   - \\`constructor()\\`: Инициализация состояния.\r\n   - \\`componentDidMount()\\`: Вызывается после монтирования компонента.\r\n2. **Обновление:**\r\n   - \\`shouldComponentUpdate()\\`: Определяет, нужно ли перерисовывать компонент.\r\n   - \\`componentDidUpdate()\\`: Вызывается после обновления компонента.\r\n3. **Размонтирование:**\r\n   - \\`componentWillUnmount()\\`: Вызывается перед удалением компонента из DOM.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { seconds: 0 };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      this.setState((prevState) => ({ seconds: prevState.seconds + 1 }));\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    return <p>Seconds: {this.state.seconds}</p>;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102955,\r\n      question: \"Что такое shouldComponentUpdate и зачем он нужен?\",\r\n      answer: `\r\n**shouldComponentUpdate:**\r\n- Метод, который определяет, нужно ли перерисовывать компонент.\r\n- Возвращает \\`true\\` (перерисовать) или \\`false\\` (не перерисовывать).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass OptimizedComponent extends React.Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return nextProps.value !== this.props.value; // Перерисовка только при изменении props\r\n  }\r\n\r\n  render() {\r\n    return <p>Value: {this.props.value}</p>;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102956,\r\n      question: \"Как работают ошибки в классовых компонентах?\",\r\n      answer: `\r\n**Обработка ошибок:**\r\n- Метод \\`componentDidCatch\\` позволяет обрабатывать ошибки в дочерних компонентах.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass ErrorBoundary extends React.Component {\r\n  state = { hasError: false };\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n    console.error('Ошибка:', error, info);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <p>Что-то пошло не так.</p>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <ErrorBoundary>\r\n      <BrokenComponent />\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102957,\r\n      question: \"Чем классовые компоненты отличаются от функциональных?\",\r\n      answer: `\r\n**Отличия:**\r\n1. **Синтаксис:**\r\n   - Классовые компоненты — это классы.\r\n   - Функциональные компоненты — это функции.\r\n2. **Состояние:**\r\n   - В классовых компонентах используется \\`this.state\\`.\r\n   - В функциональных компонентах используется хук \\`useState\\`.\r\n3. **Жизненный цикл:**\r\n   - В классовых компонентах используются методы жизненного цикла (\\`componentDidMount\\`, \\`componentDidUpdate\\` и т.д.).\r\n   - В функциональных компонентах используются хуки (\\`useEffect\\`).\r\n4. **Производительность:**\r\n   - Функциональные компоненты легче для оптимизации.\r\n\r\n**Пример классового компонента:**\r\n\\`\\`\\`javascript\r\nclass Example extends React.Component {\r\n  state = { value: '' };\r\n\r\n  componentDidMount() {\r\n    console.log('Component mounted');\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log('Component updated');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        value={this.state.value}\r\n        onChange={(e) => this.setState({ value: e.target.value })}\r\n      />\r\n    );\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример функционального компонента:**\r\n\\`\\`\\`javascript\r\nfunction Example() {\r\n  const [value, setValue] = useState('');\r\n\r\n  useEffect(() => {\r\n    console.log('Component mounted or updated');\r\n  }, [value]);\r\n\r\n  return <input value={value} onChange={(e) => setValue(e.target.value)} />;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102958,\r\n      question: \"Как использовать контекст в классовых компонентах?\",\r\n      answer: `\r\n**Использование контекста:**\r\n- Используйте метод \\`contextType\\` или \\`<Context.Consumer>\\`.\r\n\r\n**Пример с contextType:**\r\n\\`\\`\\`javascript\r\nconst ThemeContext = React.createContext();\r\n\r\nclass ThemedButton extends React.Component {\r\n  static contextType = ThemeContext;\r\n\r\n  render() {\r\n    return <button style={{ background: this.context }}>Themed Button</button>;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeContext.Provider value=\"dark\">\r\n      <ThemedButton />\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример с Consumer:**\r\n\\`\\`\\`javascript\r\nconst ThemeContext = React.createContext();\r\n\r\nclass ThemedButton extends React.Component {\r\n  render() {\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {(theme) => <button style={{ background: theme }}>Themed Button</button>}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeContext.Provider value=\"dark\">\r\n      <ThemedButton />\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102959,\r\n      question: \"Какие есть недостатки у классовых компонентов?\",\r\n      answer: `\r\n**Недостатки:**\r\n1. **Сложность кода:**\r\n   - Больше шаблонного кода по сравнению с функциональными компонентами.\r\n2. **Оптимизация:**\r\n   - Сложнее оптимизировать производительность.\r\n3. **Хуки:**\r\n   - Хуки недоступны в классовых компонентах.\r\n\r\n**Пример сложного кода:**\r\n\\`\\`\\`javascript\r\nclass Counter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { count: 0 };\r\n    this.increment = this.increment.bind(this);\r\n  }\r\n\r\n  increment() {\r\n    this.setState((prevState) => ({ count: prevState.count + 1 }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Count: {this.state.count}</p>\r\n        <button onClick={this.increment}>Increment</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102960,\r\n      question: \"Почему функциональные компоненты стали более популярными?\",\r\n      answer: `\r\n**Причины популярности функциональных компонентов:**\r\n1. **Хуки:**\r\n   - Упрощают управление состоянием и побочными эффектами.\r\n2. **Производительность:**\r\n   - Легче оптимизировать с помощью мемоизации.\r\n3. **Читаемость:**\r\n   - Меньше шаблонного кода, проще читать и поддерживать.\r\n4. **Переиспользование логики:**\r\n   - Пользовательские хуки позволяют выносить логику в отдельные функции.\r\n\r\n**Пример функционального компонента:**\r\n\\`\\`\\`javascript\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testUseMemoUseCallback = {\r\n  id: 103000,\r\n  title: \"useMemo and useCallback (оптимизация производительности)\",\r\n  questions: [\r\n    {\r\n      id: 103001,\r\n      question: \"Что такое хук useMemo и как он работает?\",\r\n      answer: `\r\n**Хук \\`useMemo\\`:**\r\n- \\`useMemo\\` используется для мемоизации значений, чтобы избежать их повторных вычислений.\r\n- Он принимает функцию и массив зависимостей, и возвращает закэшированное значение.\r\n\r\n**Синтаксис:**\r\n\\`\\`\\`javascript\r\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\r\n\\`\\`\\`\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useMemo, useState } from 'react';\r\n\r\nfunction ExpensiveComponent({ a, b }) {\r\n  const result = useMemo(() => {\r\n    console.log('Computing result...');\r\n    return a * b;\r\n  }, [a, b]);\r\n\r\n  return <p>Result: {result}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103002,\r\n      question: \"Зачем нужен хук useMemo?\",\r\n      answer: `\r\n**Зачем нужен \\`useMemo\\`:**\r\n1. **Оптимизация производительности:**\r\n   - Предотвращает повторные вычисления при каждом рендере.\r\n2. **Избегание лишних перерасчетов:**\r\n   - Полезен для сложных вычислений или тяжелых операций.\r\n\r\n**Пример проблемы без \\`useMemo\\`:**\r\n\\`\\`\\`javascript\r\nfunction ExpensiveComponent({ a, b }) {\r\n  const result = a * b; // Вычисляется при каждом рендере\r\n  return <p>Result: {result}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103003,\r\n      question: \"Что такое хук useCallback и как он работает?\",\r\n      answer: `\r\n**Хук \\`useCallback\\`:**\r\n- \\`useCallback\\` используется для мемоизации функций, чтобы избежать их повторного создания.\r\n- Он принимает функцию и массив зависимостей, и возвращает мемоизированную версию функции.\r\n\r\n**Синтаксис:**\r\n\\`\\`\\`javascript\r\nconst memoizedCallback = useCallback(() => doSomething(a, b), [a, b]);\r\n\\`\\`\\`\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useCallback, useState } from 'react';\r\n\r\nfunction ParentComponent() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  const handleClick = useCallback(() => {\r\n    console.log('Button clicked');\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <ChildComponent onClick={handleClick} />\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ChildComponent({ onClick }) {\r\n  console.log('ChildComponent rendered');\r\n  return <button onClick={onClick}>Click me</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103004,\r\n      question: \"Зачем нужен хук useCallback?\",\r\n      answer: `\r\n**Зачем нужен \\`useCallback\\`:**\r\n1. **Оптимизация дочерних компонентов:**\r\n   - Предотвращает лишние перерисовки дочерних компонентов, если передаваемая функция не изменилась.\r\n2. **Устранение ненужных изменений ссылок:**\r\n   - Полезен для функций, которые передаются в качестве пропсов.\r\n\r\n**Пример проблемы без \\`useCallback\\`:**\r\n\\`\\`\\`javascript\r\nfunction ParentComponent() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  const handleClick = () => {\r\n    console.log('Button clicked');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ChildComponent onClick={handleClick} />\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n// При каждом обновлении \\`count\\`, \\`handleClick\\` создается заново, вызывая перерисовку \\`ChildComponent\\`.\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103005,\r\n      question: \"В чем разница между useMemo и useCallback?\",\r\n      answer: `\r\n**Разница между \\`useMemo\\` и \\`useCallback\\`:**\r\n1. **Тип возвращаемого значения:**\r\n   - \\`useMemo\\` возвращает мемоизированное значение.\r\n   - \\`useCallback\\` возвращает мемоизированную функцию.\r\n2. **Использование:**\r\n   - \\`useMemo\\` используется для кэширования результатов вычислений.\r\n   - \\`useCallback\\` используется для кэширования функций.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst memoizedValue = useMemo(() => computeValue(a, b), [a, b]);\r\nconst memoizedFunction = useCallback(() => doSomething(a, b), [a, b]);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103006,\r\n      question: \"Какие есть альтернативы useMemo и useCallback?\",\r\n      answer: `\r\n**Альтернативы:**\r\n1. **React.memo:**\r\n   - Для мемоизации компонентов.\r\n2. **Библиотеки:**\r\n   - Например, \\`reselect\\` для сложных селекторов в Redux.\r\n3. **Ручная оптимизация:**\r\n   - Использование флагов или состояний для контроля обновлений.\r\n\r\n**Пример \\`React.memo\\`:**\r\n\\`\\`\\`javascript\r\nconst MemoizedComponent = React.memo(function MyComponent({ prop }) {\r\n  console.log('Rendered');\r\n  return <p>{prop}</p>;\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103007,\r\n      question: \"Когда использовать useMemo и useCallback?\",\r\n      answer: `\r\n**Когда использовать:**\r\n1. **useMemo:**\r\n   - Когда нужно кэшировать результаты тяжелых вычислений.\r\n   - Например, фильтрация массивов или сложные математические операции.\r\n2. **useCallback:**\r\n   - Когда нужно передать функцию в дочерний компонент, чтобы избежать лишних перерисовок.\r\n\r\n**Правило:**\r\n- Используйте их только тогда, когда это действительно необходимо, так как они добавляют сложность.\r\n`,\r\n    },\r\n    {\r\n      id: 103008,\r\n      question: \"Как тестировать компоненты с useMemo и useCallback?\",\r\n      answer: `\r\n**Тестирование:**\r\n- Убедитесь, что мемоизация работает корректно.\r\n- Проверьте, что компоненты не перерисовываются лишний раз.\r\n\r\n**Пример теста:**\r\n\\`\\`\\`javascript\r\nimport { render, screen } from '@testing-library/react';\r\nimport { useState, useMemo } from 'react';\r\n\r\nfunction ComponentToTest() {\r\n  const [count, setCount] = useState(0);\r\n  const value = useMemo(() => count * 2, [count]);\r\n\r\n  return (\r\n    <div>\r\n      <p>Value: {value}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\r\ntest('renders memoized value', () => {\r\n  render(<ComponentToTest />);\r\n  expect(screen.getByText('Value: 0')).toBeInTheDocument();\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103009,\r\n      question: \"Какие ограничения у useMemo и useCallback?\",\r\n      answer: `\r\n**Ограничения:**\r\n1. **Сложность кода:**\r\n   - Добавляет дополнительный уровень абстракции.\r\n2. **Неправильное использование:**\r\n   - Может привести к избыточной оптимизации, если используется без необходимости.\r\n3. **Не решает все проблемы производительности:**\r\n   - Не заменяет правильную архитектуру приложения.\r\n\r\n**Пример ошибки:**\r\n\\`\\`\\`javascript\r\n// Избыточная оптимизация\r\nconst value = useMemo(() => x + y, [x, y]); // Нет смысла, если операция простая.\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103010,\r\n      question: \"Как комбинировать useMemo и useCallback?\",\r\n      answer: `\r\n**Комбинирование:**\r\n- \\`useMemo\\` можно использовать для кэширования значений, а \\`useCallback\\` — для кэширования функций.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction ParentComponent() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  const memoizedValue = useMemo(() => count * 2, [count]);\r\n  const memoizedCallback = useCallback(() => {\r\n    console.log('Callback executed');\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <ChildComponent value={memoizedValue} onClick={memoizedCallback} />\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ChildComponent({ value, onClick }) {\r\n  console.log('ChildComponent rendered');\r\n  return (\r\n    <div>\r\n      <p>Value: {value}</p>\r\n      <button onClick={onClick}>Click me</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testLazyImports = {\r\n  id: 103150,\r\n  title: \"Lazy Imports (ленивые импорты)\",\r\n  questions: [\r\n    {\r\n      id: 103151,\r\n      question: \"Что такое lazy imports (ленивые импорты)?\",\r\n      answer: `\r\n**Ленивые импорты:**\r\n- Это техника динамического импорта модулей, которая позволяет загружать код только тогда, когда он действительно нужен.\r\n- Используется для оптимизации производительности и уменьшения размера начального бандла.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// Статический импорт\r\nimport Module from './Module';\r\n\r\n// Ленивый импорт\r\nconst Module = await import('./Module');\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103152,\r\n      question: \"Как использовать динамический импорт в JavaScript?\",\r\n      answer: `\r\n**Динамический импорт:**\r\n- Используйте \\`import()\\` как функцию, которая возвращает Promise.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\ndocument.getElementById('btn').addEventListener('click', async () => {\r\n  const module = await import('./Module');\r\n  module.default();\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103153,\r\n      question: \"Как работает React.lazy и Suspense?\",\r\n      answer: `\r\n**React.lazy и Suspense:**\r\n- \\`React.lazy\\` используется для ленивой загрузки компонентов.\r\n- \\`Suspense\\` показывает запасной контент (например, спиннер), пока компонент загружается.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <LazyComponent />\r\n    </React.Suspense>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103154,\r\n      question: \"Зачем нужны ленивые импорты?\",\r\n      answer: `\r\n**Зачем нужны:**\r\n1. **Оптимизация производительности:**\r\n   - Уменьшают время начальной загрузки приложения.\r\n2. **Code Splitting:**\r\n   - Разделяют код на части, которые загружаются по требованию.\r\n3. **Улучшение UX:**\r\n   - Пользователи быстрее видят основной контент.\r\n\r\n**Пример проблемы:**\r\n\\`\\`\\`javascript\r\n// Без ленивых импортов:\r\nimport HeavyComponent from './HeavyComponent';\r\n// HeavyComponent загружается всегда, даже если не используется.\r\n\\`\\`\\`\r\n\r\n**Решение:**\r\n\\`\\`\\`javascript\r\n// С ленивыми импортами:\r\nconst HeavyComponent = React.lazy(() => import('./HeavyComponent'));\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103155,\r\n      question: \"Как тестировать компоненты с React.lazy?\",\r\n      answer: `\r\n**Тестирование:**\r\n- Используйте \\`@testing-library/react\\` и \\`jest.mock\\` для мокирования ленивых компонентов.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { render, screen } from '@testing-library/react';\r\nimport React, { Suspense } from 'react';\r\n\r\njest.mock('./LazyComponent', () => ({\r\n  __esModule: true,\r\n  default: () => <div>Mocked Lazy Component</div>,\r\n}));\r\n\r\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\r\n\r\nfunction App() {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <LazyComponent />\r\n    </Suspense>\r\n  );\r\n}\r\n\r\ntest('renders mocked lazy component', () => {\r\n  render(<App />);\r\n  expect(screen.getByText('Mocked Lazy Component')).toBeInTheDocument();\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103156,\r\n      question: \"Какие есть ограничения у React.lazy?\",\r\n      answer: `\r\n**Ограничения:**\r\n1. **Поддержка только дефолтных экспортов:**\r\n   - \\`React.lazy\\` работает только с модулями, использующими \\`export default\\`.\r\n2. **Не поддерживает SSR без дополнительной настройки:**\r\n   - Требуется интеграция с серверным рендерингом (например, Next.js).\r\n3. **Нельзя использовать вне Suspense:**\r\n   - \\`React.lazy\\` должен быть обернут в \\`Suspense\\`.\r\n\r\n**Пример проблемы:**\r\n\\`\\`\\`javascript\r\n// Ошибка:\r\nconst NamedExportComponent = React.lazy(() => import('./NamedExportComponent'));\r\n\r\n// Решение:\r\nconst DefaultExportComponent = React.lazy(() => import('./DefaultExportComponent'));\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103157,\r\n      question: \"Как реализовать ленивую загрузку в Next.js?\",\r\n      answer: `\r\n**Ленивая загрузка в Next.js:**\r\n- Используйте динамический импорт с \\`next/dynamic\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport dynamic from 'next/dynamic';\r\n\r\nconst LazyComponent = dynamic(() => import('../components/LazyComponent'), {\r\n  loading: () => <p>Loading...</p>,\r\n});\r\n\r\nfunction Page() {\r\n  return (\r\n    <div>\r\n      <h1>Lazy Loading Example</h1>\r\n      <LazyComponent />\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103158,\r\n      question: \"Как комбинировать ленивые импорты и маршрутизацию?\",\r\n      answer: `\r\n**Ленивые импорты с маршрутизацией:**\r\n- Используйте \\`React.lazy\\` для загрузки компонентов маршрутов.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport React, { Suspense } from 'react';\r\n\r\nconst Home = React.lazy(() => import('./Home'));\r\nconst About = React.lazy(() => import('./About'));\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Home />} />\r\n          <Route path=\"/about\" element={<About />} />\r\n        </Routes>\r\n      </Suspense>\r\n    </Router>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103159,\r\n      question: \"Какие есть альтернативы React.lazy?\",\r\n      answer: `\r\n**Альтернативы:**\r\n1. **Loadable Components:**\r\n   - Библиотека для ленивой загрузки компонентов с дополнительными возможностями.\r\n2. **Next.js Dynamic Imports:**\r\n   - Встроенная поддержка ленивой загрузки в Next.js.\r\n3. **Manual Code Splitting:**\r\n   - Использование Webpack или Vite для разделения кода.\r\n\r\n**Пример Loadable Components:**\r\n\\`\\`\\`javascript\r\nimport loadable from '@loadable/component';\r\n\r\nconst LazyComponent = loadable(() => import('./LazyComponent'), {\r\n  fallback: <div>Loading...</div>,\r\n});\r\n\r\nfunction App() {\r\n  return <LazyComponent />;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103160,\r\n      question: \"Как измерить производительность ленивой загрузки?\",\r\n      answer: `\r\n**Измерение производительности:**\r\n1. **Webpack Bundle Analyzer:**\r\n   - Анализирует размер бандлов.\r\n2. **Performance API:**\r\n   - Измеряет время загрузки модулей.\r\n3. **React Profiler:**\r\n   - Анализирует рендеринг компонентов.\r\n\r\n**Пример Performance API:**\r\n\\`\\`\\`javascript\r\nconst start = performance.now();\r\nawait import('./Module');\r\nconst end = performance.now();\r\nconsole.log(\\`Module loaded in $\\{end - start}ms\\`);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testBasicReactOptimization = {\r\n  id: 103225,\r\n  title: \"Basic React Optimization (базовая оптимизация в React)\",\r\n  questions: [\r\n    {\r\n      id: 103226,\r\n      question: \"Что такое оптимизация в React?\",\r\n      answer: `\r\n**Оптимизация в React:**\r\n- Это процесс улучшения производительности приложения за счет уменьшения ненужных перерисовок, оптимизации состояния и минимизации лишних вычислений.\r\n- Основная цель — сделать приложение быстрее и отзывчивее.\r\n\r\n**Основные подходы:**\r\n1. Использование мемоизации (\\`useMemo\\`, \\`React.memo\\`).\r\n2. Управление состоянием с помощью хуков.\r\n3. Ленивая загрузка компонентов (\\`React.lazy\\` и \\`Suspense\\`).\r\n4. Разделение кода (Code Splitting).\r\n5. Избегание лишних ререндеров.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst MemoizedComponent = React.memo(MyComponent);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103227,\r\n      question: \"Как использовать React.memo для оптимизации?\",\r\n      answer: `\r\n**React.memo:**\r\n- Это HOC (High-Order Component), который предотвращает лишние перерисовки функциональных компонентов, если их пропсы не изменились.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst MyComponent = React.memo(function MyComponent({ prop }) {\r\n  console.log('Rendered');\r\n  return <p>{prop}</p>;\r\n});\r\n\r\nfunction ParentComponent() {\r\n  const [count, setCount] = React.useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <MyComponent prop=\"Static Prop\" />\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103228,\r\n      question: \"Что такое useMemo и как он помогает оптимизировать?\",\r\n      answer: `\r\n**useMemo:**\r\n- Это хук, который мемоизирует значения, чтобы избежать повторных вычислений при каждом рендере.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useMemo } from 'react';\r\n\r\nfunction ExpensiveComponent({ a, b }) {\r\n  const result = useMemo(() => {\r\n    console.log('Computing result...');\r\n    return a * b;\r\n  }, [a, b]);\r\n\r\n  return <p>Result: {result}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103229,\r\n      question: \"Что такое useCallback и зачем он нужен?\",\r\n      answer: `\r\n**useCallback:**\r\n- Это хук, который мемоизирует функции, чтобы избежать их повторного создания при каждом рендере.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useCallback } from 'react';\r\n\r\nfunction ParentComponent() {\r\n  const handleClick = useCallback(() => {\r\n    console.log('Button clicked');\r\n  }, []);\r\n\r\n  return <ChildComponent onClick={handleClick} />;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103230,\r\n      question: \"Как избежать лишних ререндеров в React?\",\r\n      answer: `\r\n**Способы избежать лишних ререндеров:**\r\n1. **React.memo:** Предотвращает перерисовку компонента, если пропсы не изменились.\r\n2. **useMemo/useCallback:** Мемоизация значений и функций.\r\n3. **shouldComponentUpdate:** В классовых компонентах можно контролировать обновления.\r\n4. **PureComponent:** Автоматическая проверка изменений в классовых компонентах.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst MemoizedComponent = React.memo(MyComponent);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103231,\r\n      question: \"Как работает shouldComponentUpdate?\",\r\n      answer: `\r\n**shouldComponentUpdate:**\r\n- Метод классового компонента, который определяет, нужно ли перерисовывать компонент.\r\n- Возвращает \\`true\\` (перерисовать) или \\`false\\` (не перерисовывать).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass OptimizedComponent extends React.Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return nextProps.value !== this.props.value;\r\n  }\r\n\r\n  render() {\r\n    return <p>Value: {this.props.value}</p>;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103232,\r\n      question: \"Что такое PureComponent и чем он отличается от Component?\",\r\n      answer: `\r\n**PureComponent:**\r\n- Классовый компонент, который автоматически реализует поверхностное сравнение пропсов и состояния.\r\n- Предотвращает лишние перерисовки.\r\n\r\n**Разница между PureComponent и Component:**\r\n- \\`PureComponent\\` автоматически проверяет изменения в пропсах и состоянии.\r\n- \\`Component\\` всегда перерисовывается, если вызван \\`setState\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass PureComp extends React.PureComponent {\r\n  render() {\r\n    return <p>PureComponent</p>;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103233,\r\n      question: \"Как использовать ленивую загрузку в React?\",\r\n      answer: `\r\n**Ленивая загрузка:**\r\n- Техника загрузки компонентов только тогда, когда они нужны.\r\n- Реализуется через \\`React.lazy\\` и \\`Suspense\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <LazyComponent />\r\n    </React.Suspense>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103234,\r\n      question: \"Что такое Code Splitting и как его использовать?\",\r\n      answer: `\r\n**Code Splitting:**\r\n- Это техника разделения кода на части для уменьшения размера начального бандла.\r\n- Реализуется через динамический импорт или инструменты сборки (например, Webpack).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst Module = await import('./Module');\r\n\r\n// Webpack Code Splitting:\r\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103235,\r\n      question: \"Какие есть стратегии базовой оптимизации в React?\",\r\n      answer: `\r\n**Стратегии:**\r\n1. **Мемоизация:** \\`useMemo\\`, \\`React.memo\\`, \\`useCallback\\`.\r\n2. **Ленивая загрузка:** \\`React.lazy\\` и \\`Suspense\\`.\r\n3. **Разделение кода:** Code Splitting.\r\n4. **Управление состоянием:** Избегайте лишних обновлений.\r\n5. **Оптимизация DOM:** Используйте Virtual DOM эффективно.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst MemoizedComponent = React.memo(MyComponent);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testUseLayoutEffect = {\r\n  id: 103300,\r\n  title: \"useLayoutEffect (синхронный эффект)\",\r\n  questions: [\r\n    {\r\n      id: 103301,\r\n      question: \"Что такое хук useLayoutEffect?\",\r\n      answer: `\r\n**useLayoutEffect:**\r\n- Это хук, аналогичный \\`useEffect\\`, но он срабатывает **синхронно** после всех DOM-мутаций, но до того, как браузер перерисует экран.\r\n- Используется для выполнения измерений или манипуляций с DOM, которые должны быть завершены до того, как пользователь увидит изменения.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useLayoutEffect, useRef } from 'react';\r\n\r\nfunction MeasureExample() {\r\n  const ref = useRef();\r\n\r\n  useLayoutEffect(() => {\r\n    const dimensions = ref.current.getBoundingClientRect();\r\n    console.log(dimensions);\r\n  }, []);\r\n\r\n  return <div ref={ref}>Measure me!</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103302,\r\n      question: \"В чем разница между useEffect и useLayoutEffect?\",\r\n      answer: `\r\n**Разница между useEffect и useLayoutEffect:**\r\n1. **Синхронность:**\r\n   - \\`useEffect\\`: Асинхронный, выполняется после рендеринга и перерисовки экрана.\r\n   - \\`useLayoutEffect\\`: Синхронный, выполняется перед перерисовкой экрана.\r\n2. **Использование:**\r\n   - \\`useEffect\\`: Подходит для побочных эффектов, таких как запросы к API, подписки и таймеры.\r\n   - \\`useLayoutEffect\\`: Используется для измерений DOM или синхронных манипуляций с DOM.\r\n3. **Производительность:**\r\n   - \\`useEffect\\` менее затратен, так как не блокирует перерисовку.\r\n   - \\`useLayoutEffect\\` может замедлить интерфейс, если используется неправильно.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// useLayoutEffect:\r\nuseLayoutEffect(() => {\r\n  // Измерение элемента\r\n}, []);\r\n\r\n// useEffect:\r\nuseEffect(() => {\r\n  // Запрос данных\r\n}, []);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103303,\r\n      question: \"Когда использовать useLayoutEffect?\",\r\n      answer: `\r\n**Когда использовать:**\r\n1. **Измерения DOM:**\r\n   - Например, получение размеров или позиции элемента.\r\n2. **Синхронные изменения DOM:**\r\n   - Когда нужно внести изменения до того, как пользователь увидит результат.\r\n3. **Анимации:**\r\n   - Для создания анимаций, зависящих от текущего состояния DOM.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction ResizeObserverComponent() {\r\n  const ref = useRef();\r\n\r\n  useLayoutEffect(() => {\r\n    const element = ref.current;\r\n    const width = element.offsetWidth;\r\n    console.log('Width:', width);\r\n  }, []);\r\n\r\n  return <div ref={ref}>Resize me!</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103304,\r\n      question: \"Какие есть ограничения у useLayoutEffect?\",\r\n      answer: `\r\n**Ограничения:**\r\n1. **Блокировка рендера:**\r\n   - \\`useLayoutEffect\\` блокирует браузер, пока его код не выполнится.\r\n2. **Влияние на производительность:**\r\n   - Может замедлить интерфейс, если используется для тяжелых операций.\r\n3. **Не подходит для асинхронных задач:**\r\n   - Например, запросы к API лучше выполнять в \\`useEffect\\`.\r\n\r\n**Пример проблемы:**\r\n\\`\\`\\`javascript\r\nuseLayoutEffect(() => {\r\n  // Тяжелая операция, которая блокирует рендеринг\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103305,\r\n      question: \"Как тестировать компоненты с useLayoutEffect?\",\r\n      answer: `\r\n**Тестирование:**\r\n- Используйте \\`@testing-library/react\\` для тестирования компонентов с \\`useLayoutEffect\\`.\r\n- Убедитесь, что DOM-изменения происходят корректно.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { render, screen } from '@testing-library/react';\r\nimport { useLayoutEffect, useRef } from 'react';\r\n\r\nfunction ComponentWithLayoutEffect() {\r\n  const ref = useRef();\r\n\r\n  useLayoutEffect(() => {\r\n    ref.current.style.backgroundColor = 'red';\r\n  }, []);\r\n\r\n  return <div ref={ref}>Test</div>;\r\n}\r\n\r\ntest('applies styles synchronously', () => {\r\n  render(<ComponentWithLayoutEffect />);\r\n  const element = screen.getByText('Test');\r\n  expect(element).toHaveStyle('background-color: red');\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103306,\r\n      question: \"Как работает useLayoutEffect с SSR (Server-Side Rendering)?\",\r\n      answer: `\r\n**useLayoutEffect и SSR:**\r\n- \\`useLayoutEffect\\` не работает на стороне сервера, так как там нет DOM.\r\n- При использовании в SSR может вызвать ошибку.\r\n\r\n**Решение:**\r\n- Проверьте, запущено ли приложение на клиенте, перед использованием \\`useLayoutEffect\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useLayoutEffect, useState, useEffect } from 'react';\r\n\r\nfunction Component() {\r\n  const [isClient, setIsClient] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsClient(true);\r\n  }, []);\r\n\r\n  useLayoutEffect(() => {\r\n    if (isClient) {\r\n      console.log('Running on client');\r\n    }\r\n  }, [isClient]);\r\n\r\n  return <div>Check console</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103307,\r\n      question: \"Как заменить useLayoutEffect на useEffect?\",\r\n      answer: `\r\n**Замена useLayoutEffect на useEffect:**\r\n- Если задача не требует синхронных изменений DOM, используйте \\`useEffect\\`.\r\n- Перенесите логику из \\`useLayoutEffect\\` в \\`useEffect\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// До:\r\nuseLayoutEffect(() => {\r\n  console.log('DOM updated');\r\n}, []);\r\n\r\n// После:\r\nuseEffect(() => {\r\n  console.log('DOM updated');\r\n}, []);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103308,\r\n      question: \"Как использовать useLayoutEffect для создания анимаций?\",\r\n      answer: `\r\n**Создание анимаций:**\r\n- \\`useLayoutEffect\\` можно использовать для анимаций, зависящих от текущего состояния DOM.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction AnimatedComponent() {\r\n  const ref = useRef();\r\n\r\n  useLayoutEffect(() => {\r\n    const element = ref.current;\r\n    const height = element.offsetHeight;\r\n\r\n    element.style.transition = 'height 0.5s';\r\n    element.style.height = \\`\\${height * 2}px\\`;\r\n  }, []);\r\n\r\n  return <div ref={ref} style={{ height: '100px', background: 'lightblue' }} />;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103309,\r\n      question: \"Какие есть альтернативы useLayoutEffect?\",\r\n      answer: `\r\n**Альтернативы:**\r\n1. **useEffect:**\r\n   - Для большинства случаев достаточно \\`useEffect\\`.\r\n2. **Ref Callbacks:**\r\n   - Используйте колбэки для работы с DOM.\r\n3. **requestAnimationFrame:**\r\n   - Для анимаций и измерений.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction RefCallbackExample() {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    const element = ref.current;\r\n    const width = element.offsetWidth;\r\n    console.log('Width:', width);\r\n  }, []);\r\n\r\n  return <div ref={ref}>Measure me!</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103310,\r\n      question: \"Как предотвратить блокировку рендера в useLayoutEffect?\",\r\n      answer: `\r\n**Предотвращение блокировки:**\r\n1. **Оптимизация кода:**\r\n   - Выполняйте только необходимые операции.\r\n2. **Перенос логики:**\r\n   - Перенесите тяжелые вычисления в Web Workers или асинхронные функции.\r\n3. **Использование useEffect:**\r\n   - Если синхронность не требуется, используйте \\`useEffect\\`.\r\n\r\n**Пример оптимизации:**\r\n\\`\\`\\`javascript\r\nuseLayoutEffect(() => {\r\n  requestAnimationFrame(() => {\r\n    // Выполнение тяжелой операции\r\n  });\r\n}, []);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testUseReducer = {\r\n  id: 103275,\r\n  title: \"useReducer (управление состоянием)\",\r\n  questions: [\r\n    {\r\n      id: 103276,\r\n      question: \"Что такое хук useReducer?\",\r\n      answer: `\r\n**useReducer:**\r\n- Это хук для управления сложным состоянием в React.\r\n- Альтернатива \\`useState\\`, особенно полезная для работы с состоянием, которое зависит от предыдущего значения или требует множества связанных действий.\r\n\r\n**Синтаксис:**\r\n\\`\\`\\`javascript\r\nconst [state, dispatch] = useReducer(reducer, initialState);\r\n\\`\\`\\`\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    case 'decrement':\r\n      return { count: state.count - 1 };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nfunction Counter() {\r\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {state.count}</p>\r\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\r\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103277,\r\n      question: \"В чем разница между useState и useReducer?\",\r\n      answer: `\r\n**Разница между useState и useReducer:**\r\n1. **Сложность состояния:**\r\n   - \\`useState\\`: Подходит для простого состояния (например, число или строка).\r\n   - \\`useReducer\\`: Подходит для сложного состояния (например, объекты или массивы).\r\n2. **Логика обновления:**\r\n   - \\`useState\\`: Логика обновления находится внутри компонента.\r\n   - \\`useReducer\\`: Логика обновления вынесена в редьюсер.\r\n3. **Множественные действия:**\r\n   - \\`useState\\`: Требует нескольких вызовов \\`setState\\`.\r\n   - \\`useReducer\\`: Удобен для множества связанных действий.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// useState:\r\nconst [count, setCount] = useState(0);\r\n\r\n// useReducer:\r\nconst [state, dispatch] = useReducer(reducer, { count: 0 });\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103278,\r\n      question: \"Как работает функция редьюсера в useReducer?\",\r\n      answer: `\r\n**Функция редьюсера:**\r\n- Принимает текущее состояние и действие (\\`action\\`) в качестве аргументов.\r\n- Возвращает новое состояние на основе действия.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'add':\r\n      return { ...state, items: [...state.items, action.payload] };\r\n    case 'remove':\r\n      return { ...state, items: state.items.filter(item => item.id !== action.payload) };\r\n    default:\r\n      throw new Error('Unknown action');\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103279,\r\n      question: \"Как передавать начальное состояние в useReducer?\",\r\n      answer: `\r\n**Передача начального состояния:**\r\n1. **Прямая передача:**\r\n   - Начальное состояние передается вторым аргументом в \\`useReducer\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst initialState = { count: 0 };\r\nconst [state, dispatch] = useReducer(reducer, initialState);\r\n\\`\\`\\`\r\n\r\n2. **Инициализатор:**\r\n   - Функция для вычисления начального состояния.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction init(initialCount) {\r\n  return { count: initialCount };\r\n}\r\n\r\nconst [state, dispatch] = useReducer(reducer, initialCount, init);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103280,\r\n      question: \"Как использовать useReducer для глобального состояния?\",\r\n      answer: `\r\n**Глобальное состояние:**\r\n- \\`useReducer\\` можно комбинировать с \\`Context API\\` для управления глобальным состоянием.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst CountContext = React.createContext();\r\n\r\nfunction CountProvider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\r\n  return (\r\n    <CountContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </CountContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Counter() {\r\n  const { state, dispatch } = useContext(CountContext);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {state.count}</p>\r\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103281,\r\n      question: \"Как тестировать компоненты с useReducer?\",\r\n      answer: `\r\n**Тестирование:**\r\n- Используйте \\`@testing-library/react\\` для тестирования компонентов с \\`useReducer\\`.\r\n- Проверьте, как состояние изменяется при диспетчеризации действий.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { render, screen } from '@testing-library/react';\r\n\r\nfunction reducer(state, action) {\r\n  return action.type === 'increment' ? { count: state.count + 1 } : state;\r\n}\r\n\r\nfunction Counter() {\r\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {state.count}</p>\r\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\r\n    </div>\r\n  );\r\n}\r\n\r\ntest('increments count', () => {\r\n  render(<Counter />);\r\n  const button = screen.getByText('+');\r\n  fireEvent.click(button);\r\n  expect(screen.getByText('Count: 1')).toBeInTheDocument();\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103282,\r\n      question: \"Какие есть преимущества использования useReducer?\",\r\n      answer: `\r\n**Преимущества:**\r\n1. **Централизованная логика:**\r\n   - Логика обновления состояния вынесена в редьюсер.\r\n2. **Удобство для сложного состояния:**\r\n   - Подходит для объектов или массивов.\r\n3. **Предсказуемость:**\r\n   - Состояние обновляется только через действия (\\`actions\\`).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'add':\r\n      return { ...state, items: [...state.items, action.payload] };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103283,\r\n      question: \"Какие есть ограничения у useReducer?\",\r\n      answer: `\r\n**Ограничения:**\r\n1. **Сложность:**\r\n   - Для простых состояний может быть избыточен.\r\n2. **Обучение:**\r\n   - Требует понимания концепции редьюсеров.\r\n3. **Производительность:**\r\n   - Может быть менее эффективен для очень больших состояний.\r\n\r\n**Пример проблемы:**\r\n\\`\\`\\`javascript\r\n// Избыточно для простого счетчика:\r\nconst [state, dispatch] = useReducer(reducer, { count: 0 });\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103284,\r\n      question: \"Как комбинировать useReducer и useContext?\",\r\n      answer: `\r\n**Комбинирование:**\r\n- \\`useReducer\\` управляет состоянием.\r\n- \\`useContext\\` предоставляет доступ к состоянию и диспетчеризации.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst StateContext = React.createContext();\r\n\r\nfunction StateProvider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <StateContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Component() {\r\n  const { state, dispatch } = useContext(StateContext);\r\n  return <p>{state.value}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103285,\r\n      question: \"Как использовать useReducer для форм?\",\r\n      answer: `\r\n**Управление формами:**\r\n- \\`useReducer\\` можно использовать для управления состоянием формы.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction formReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'update':\r\n      return { ...state, [action.field]: action.value };\r\n    case 'reset':\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction Form() {\r\n  const [state, dispatch] = useReducer(formReducer, { name: '', email: '' });\r\n\r\n  return (\r\n    <form>\r\n      <input\r\n        value={state.name}\r\n        onChange={(e) => dispatch({ type: 'update', field: 'name', value: e.target.value })}\r\n      />\r\n      <input\r\n        value={state.email}\r\n        onChange={(e) => dispatch({ type: 'update', field: 'email', value: e.target.value })}\r\n      />\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testUseState = {\r\n  id: 103250,\r\n  title: \"useState (управление состоянием)\",\r\n  questions: [\r\n    {\r\n      id: 103251,\r\n      question: \"Что такое хук useState?\",\r\n      answer: `\r\n**useState:**\r\n- Это хук, который позволяет добавлять состояние в функциональные компоненты.\r\n- Возвращает текущее значение состояния и функцию для его обновления.\r\n\r\n**Синтаксис:**\r\n\\`\\`\\`javascript\r\nconst [state, setState] = useState(initialValue);\r\n\\`\\`\\`\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103252,\r\n      question: \"Как работает функция обновления состояния в useState?\",\r\n      answer: `\r\n**Функция обновления состояния:**\r\n- Функция, возвращаемая \\`useState\\`, используется для обновления состояния.\r\n- При вызове она перерисовывает компонент с новым значением состояния.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  const increment = () => {\r\n    setCount(count + 1); // Обновляет состояние\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={increment}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103253,\r\n      question: \"Как передать начальное значение в useState?\",\r\n      answer: `\r\n**Передача начального значения:**\r\n1. **Прямая передача:**\r\n   - Начальное значение передается напрямую как аргумент в \\`useState\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst [count, setCount] = useState(0);\r\n\\`\\`\\`\r\n\r\n2. **Вычисляемое начальное значение:**\r\n   - Можно передать функцию, которая вычислит начальное значение.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst [count, setCount] = useState(() => {\r\n  console.log('Initial value calculated');\r\n  return 42;\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103254,\r\n      question: \"Как использовать useState для объектов?\",\r\n      answer: `\r\n**Использование с объектами:**\r\n- \\`useState\\` может хранить объекты, но при обновлении нужно передавать новый объект.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Form() {\r\n  const [form, setForm] = useState({ name: '', email: '' });\r\n\r\n  const updateName = (e) => {\r\n    setForm({ ...form, name: e.target.value });\r\n  };\r\n\r\n  const updateEmail = (e) => {\r\n    setForm({ ...form, email: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <input value={form.name} onChange={updateName} placeholder=\"Name\" />\r\n      <input value={form.email} onChange={updateEmail} placeholder=\"Email\" />\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103255,\r\n      question: \"Как обновить состояние на основе предыдущего значения?\",\r\n      answer: `\r\n**Обновление на основе предыдущего значения:**\r\n- Передайте функцию в \\`setState\\`, которая получает предыдущее значение и возвращает новое.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  const increment = () => {\r\n    setCount(prevCount => prevCount + 1); // Использует предыдущее значение\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={increment}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103256,\r\n      question: \"Как тестировать компоненты с useState?\",\r\n      answer: `\r\n**Тестирование:**\r\n- Используйте \\`@testing-library/react\\` для тестирования компонентов с \\`useState\\`.\r\n- Проверьте, как состояние изменяется при взаимодействии.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { render, screen, fireEvent } from '@testing-library/react';\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\r\ntest('increments count', () => {\r\n  render(<Counter />);\r\n  const button = screen.getByText('Increment');\r\n  fireEvent.click(button);\r\n  expect(screen.getByText('Count: 1')).toBeInTheDocument();\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103257,\r\n      question: \"Какие есть ограничения у useState?\",\r\n      answer: `\r\n**Ограничения:**\r\n1. **Простота:**\r\n   - Подходит для простых состояний (например, числа или строки).\r\n2. **Нет встроенной логики:**\r\n   - Для сложной логики лучше использовать \\`useReducer\\`.\r\n3. **Множественные состояния:**\r\n   - Может стать громоздким при большом количестве состояний.\r\n\r\n**Пример проблемы:**\r\n\\`\\`\\`javascript\r\n// Сложное состояние:\r\nconst [state, setState] = useState({ count: 0, name: '', email: '' });\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103258,\r\n      question: \"Как использовать useState для массивов?\",\r\n      answer: `\r\n**Использование с массивами:**\r\n- \\`useState\\` может хранить массивы, но при обновлении нужно создавать новый массив.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction List() {\r\n  const [items, setItems] = useState([]);\r\n\r\n  const addItem = () => {\r\n    setItems([...items, items.length + 1]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={addItem}>Add Item</button>\r\n      <ul>\r\n        {items.map((item) => (\r\n          <li key={item}>{item}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103259,\r\n      question: \"Как избежать лишних перерисовок при использовании useState?\",\r\n      answer: `\r\n**Избежание лишних перерисовок:**\r\n1. **Мемоизация:**\r\n   - Используйте \\`React.memo\\` для предотвращения ненужных ререндеров.\r\n2. **Условное обновление:**\r\n   - Обновляйте состояние только при необходимости.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Input({ value, onChange }) {\r\n  console.log('Rendered');\r\n  return <input value={value} onChange={onChange} />;\r\n}\r\n\r\nconst MemoizedInput = React.memo(Input);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103260,\r\n      question: \"Как комбинировать useState и useEffect?\",\r\n      answer: `\r\n**Комбинирование:**\r\n- \\`useEffect\\` можно использовать для выполнения побочных эффектов при изменении состояния.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    document.title = \\`Count: \\${count}\\`;\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testMiddlewares = {\r\n  id: 103325,\r\n  title: \"Middlewares (промежуточное ПО)\",\r\n  questions: [\r\n    {\r\n      id: 103326,\r\n      question: \"Что такое middleware?\",\r\n      answer: `\r\n**Middleware:**\r\n- Это функция, которая выполняется между получением запроса и отправкой ответа в приложении.\r\n- Middleware может выполнять такие задачи, как проверка данных, логирование, обработка ошибок и т.д.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction loggerMiddleware(req, res, next) {\r\n  console.log(\\`Request URL: \\${req.url}\\`);\r\n  next(); // Передача управления следующему middleware\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103327,\r\n      question: \"Как работает middleware в Express.js?\",\r\n      answer: `\r\n**Middleware в Express.js:**\r\n- Middleware — это функция с тремя параметрами: \\`req\\`, \\`res\\` и \\`next\\`.\r\n- \\`req\\`: Объект запроса.\r\n- \\`res\\`: Объект ответа.\r\n- \\`next\\`: Функция, которая передает управление следующему middleware.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst express = require('express');\r\nconst app = express();\r\n\r\napp.use((req, res, next) => {\r\n  console.log('Middleware executed');\r\n  next();\r\n});\r\n\r\napp.get('/', (req, res) => {\r\n  res.send('Hello World!');\r\n});\r\n\r\napp.listen(3000);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103328,\r\n      question: \"Какие бывают типы middleware?\",\r\n      answer: `\r\n**Типы middleware:**\r\n1. **Application-level middleware:**\r\n   - Регистрируется на уровне приложения с помощью \\`app.use()\\` или \\`app.METHOD()\\`.\r\n\r\n2. **Router-level middleware:**\r\n   - Работает аналогично application-level, но регистрируется на уровне маршрутизатора.\r\n\r\n3. **Error-handling middleware:**\r\n   - Принимает четыре параметра: \\`err\\`, \\`req\\`, \\`res\\`, \\`next\\`.\r\n\r\n4. **Built-in middleware:**\r\n   - Встроенные middleware, такие как \\`express.static\\`, \\`express.json\\`.\r\n\r\n5. **Third-party middleware:**\r\n   - Используются сторонние библиотеки, например, \\`morgan\\`, \\`helmet\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// Error-handling middleware\r\napp.use((err, req, res, next) => {\r\n  console.error(err.stack);\r\n  res.status(500).send('Something broke!');\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103329,\r\n      question: \"Как создать собственный middleware?\",\r\n      answer: `\r\n**Создание middleware:**\r\n- Middleware — это функция с параметрами \\`req\\`, \\`res\\` и \\`next\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction authMiddleware(req, res, next) {\r\n  const authToken = req.headers.authorization;\r\n  if (authToken === 'secret-token') {\r\n    next(); // Продолжить выполнение\r\n  } else {\r\n    res.status(401).send('Unauthorized');\r\n  }\r\n}\r\n\r\napp.use(authMiddleware);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103330,\r\n      question: \"Как использовать middleware для обработки ошибок?\",\r\n      answer: `\r\n**Middleware для обработки ошибок:**\r\n- Принимает четыре параметра: \\`err\\`, \\`req\\`, \\`res\\`, \\`next\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\napp.use((err, req, res, next) => {\r\n  console.error(err.message);\r\n  res.status(500).json({ error: 'Internal Server Error' });\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103331,\r\n      question: \"Как добавить middleware только для определенного маршрута?\",\r\n      answer: `\r\n**Middleware для конкретного маршрута:**\r\n- Middleware можно добавить непосредственно в маршрут.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction validateUser(req, res, next) {\r\n  if (req.query.user === 'admin') {\r\n    next();\r\n  } else {\r\n    res.status(403).send('Access Denied');\r\n  }\r\n}\r\n\r\napp.get('/admin', validateUser, (req, res) => {\r\n  res.send('Welcome, Admin!');\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103332,\r\n      question: \"Что делает метод app.use()?\",\r\n      answer: `\r\n**app.use():**\r\n- Регистрирует middleware для всех HTTP-методов и всех маршрутов.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\napp.use((req, res, next) => {\r\n  console.log('Global middleware');\r\n  next();\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103333,\r\n      question: \"Как использовать встроенные middleware в Express?\",\r\n      answer: `\r\n**Встроенные middleware:**\r\n- \\`express.json()\\`: Парсит JSON в теле запроса.\r\n- \\`express.urlencoded()\\`: Парсит данные из формы.\r\n- \\`express.static()\\`: Обслуживает статические файлы.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(express.static('public'));\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103334,\r\n      question: \"Как тестировать middleware?\",\r\n      answer: `\r\n**Тестирование middleware:**\r\n- Используйте библиотеки, такие как \\`supertest\\` или \\`jest\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst request = require('supertest');\r\nconst express = require('express');\r\n\r\nconst app = express();\r\n\r\napp.use((req, res, next) => {\r\n  req.test = 'middleware works';\r\n  next();\r\n});\r\n\r\napp.get('/', (req, res) => {\r\n  res.send(req.test);\r\n});\r\n\r\ntest('middleware test', async () => {\r\n  const response = await request(app).get('/');\r\n  expect(response.text).toBe('middleware works');\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103335,\r\n      question: \"Как использовать сторонние middleware?\",\r\n      answer: `\r\n**Сторонние middleware:**\r\n- Установите библиотеку через npm и зарегистрируйте её.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst morgan = require('morgan');\r\n\r\napp.use(morgan('dev')); // Логирование запросов\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testHOCconnect = {\r\n  id: 103350,\r\n  title: \"Higher-Order Components and connect (HOC и connect)\",\r\n  questions: [\r\n    {\r\n      id: 103351,\r\n      question: \"Что такое Higher-Order Component (HOC)?\",\r\n      answer: `\r\n**Higher-Order Component (HOC):**\r\n- Это паттерн в React, который позволяет повторно использовать логику компонентов.\r\n- HOC — это функция, которая принимает компонент и возвращает новый компонент с дополнительными свойствами или поведением.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction withLogging(Component) {\r\n  return function (props) {\r\n    console.log('Component rendered:', Component.name);\r\n    return <Component {...props} />;\r\n  };\r\n}\r\n\r\nconst Button = (props) => <button>{props.label}</button>;\r\nconst LoggedButton = withLogging(Button);\r\n\r\n// Использование:\r\n<LoggedButton label=\"Click me\" />;\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103352,\r\n      question: \"Как работает функция connect в React-Redux?\",\r\n      answer: `\r\n**Функция connect:**\r\n- \\`connect\\` используется для подключения компонентов React к Redux store.\r\n- Она создает новый компонент, который подписывается на изменения состояния Redux и передает данные в виде пропсов.\r\n\r\n**Синтаксис:**\r\n\\`\\`\\`javascript\r\nconnect(mapStateToProps, mapDispatchToProps)(Component);\r\n\\`\\`\\`\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => ({\r\n  counter: state.counter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  increment: () => dispatch({ type: 'INCREMENT' }),\r\n});\r\n\r\nconst Counter = ({ counter, increment }) => (\r\n  <div>\r\n    <p>Count: {counter}</p>\r\n    <button onClick={increment}>Increment</button>\r\n  </div>\r\n);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103353,\r\n      question: \"Что делает mapStateToProps?\",\r\n      answer: `\r\n**mapStateToProps:**\r\n- Функция, которая извлекает данные из Redux store и передает их в компонент в виде пропсов.\r\n- Вызывается каждый раз, когда состояние Redux изменяется.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n  isLoading: state.isLoading,\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103354,\r\n      question: \"Что делает mapDispatchToProps?\",\r\n      answer: `\r\n**mapDispatchToProps:**\r\n- Функция, которая предоставляет доступ к действиям (actions) Redux через пропсы компонента.\r\n- Позволяет отправлять действия в Redux store.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  login: (credentials) => dispatch(loginAction(credentials)),\r\n  logout: () => dispatch(logoutAction()),\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103355,\r\n      question: \"Какие аргументы принимает функция connect?\",\r\n      answer: `\r\n**Аргументы connect:**\r\n1. **mapStateToProps:** Преобразует состояние Redux в пропсы.\r\n2. **mapDispatchToProps:** Преобразует диспетчеризацию действий в пропсы.\r\n3. **mergeProps (опционально):** Объединяет пропсы из \\`mapStateToProps\\`, \\`mapDispatchToProps\\` и собственные пропсы компонента.\r\n4. **options (опционально):** Дополнительные настройки (например, \\`pure\\` для оптимизации).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconnect(mapStateToProps, mapDispatchToProps, mergeProps, options);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103356,\r\n      question: \"Зачем нужны HOC в React?\",\r\n      answer: `\r\n**Назначение HOC:**\r\n1. **Повторное использование логики:**\r\n   - Позволяет вынести общую логику в отдельную функцию.\r\n2. **Расширение функциональности:**\r\n   - Добавляет новые свойства или поведение к компоненту.\r\n3. **Интеграция с библиотеками:**\r\n   - Например, \\`connect\\` для работы с Redux.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction withAuth(Component) {\r\n  return function (props) {\r\n    const isAuthenticated = checkAuth();\r\n    if (!isAuthenticated) return <Redirect to=\"/login\" />;\r\n    return <Component {...props} />;\r\n  };\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103357,\r\n      question: \"Как тестировать компоненты, обернутые в HOC?\",\r\n      answer: `\r\n**Тестирование HOC:**\r\n- Тестируйте исходный компонент и результат после применения HOC.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { render } from '@testing-library/react';\r\nimport { withLogging } from './withLogging';\r\nimport Button from './Button';\r\n\r\ntest('renders logged button', () => {\r\n  const LoggedButton = withLogging(Button);\r\n  const { getByText } = render(<LoggedButton label=\"Click me\" />);\r\n  expect(getByText('Click me')).toBeInTheDocument();\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103358,\r\n      question: \"Какие есть альтернативы HOC?\",\r\n      answer: `\r\n**Альтернативы:**\r\n1. **Render Props:**\r\n   - Передача функции в качестве пропса для рендеринга.\r\n2. **React Hooks:**\r\n   - Использование хуков, таких как \\`useSelector\\` и \\`useDispatch\\`, вместо \\`connect\\`.\r\n3. **Context API:**\r\n   - Прямое использование контекста для управления состоянием.\r\n\r\n**Пример с Hooks:**\r\n\\`\\`\\`javascript\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nfunction Counter() {\r\n  const counter = useSelector((state) => state.counter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {counter}</p>\r\n      <button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103359,\r\n      question: \"Как работает оптимизация в connect (pure)?\",\r\n      answer: `\r\n**Оптимизация:**\r\n- По умолчанию \\`connect\\` создает \"чистый\" компонент (\\`pure: true\\`).\r\n- Компонент перерисовывается только при изменении пропсов или состояния.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconnect(mapStateToProps, mapDispatchToProps, null, { pure: false });\r\n// Отключает оптимизацию\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103360,\r\n      question: \"Как передать дополнительные пропсы в компонент через connect?\",\r\n      answer: `\r\n**Передача пропсов:**\r\n- Все собственные пропсы автоматически передаются в обернутый компонент.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst Button = ({ label, onClick }) => (\r\n  <button onClick={onClick}>{label}</button>\r\n);\r\n\r\nconst ConnectedButton = connect(null, mapDispatchToProps)(Button);\r\n\r\n// Использование:\r\n<ConnectedButton label=\"Click me\" />;\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testActions = {\r\n  id: 103375,\r\n  title: \"Redux Actions (действия)\",\r\n  questions: [\r\n    {\r\n      id: 103376,\r\n      question: \"Что такое action в Redux?\",\r\n      answer: `\r\n**Action:**\r\n- Это объект, который описывает событие или действие, которое должно произойти в приложении.\r\n- Action передает данные из приложения в Redux store.\r\n\r\n**Свойства:**\r\n- \\`type\\`: Обязательное свойство, строка, которая определяет тип действия.\r\n- \\`payload\\` (опционально): Дополнительные данные, связанные с действием.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst incrementAction = {\r\n  type: 'INCREMENT',\r\n};\r\n\r\nconst addTodoAction = {\r\n  type: 'ADD_TODO',\r\n  payload: { id: 1, text: 'Learn Redux' },\r\n};\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103377,\r\n      question: \"Как создать action в Redux?\",\r\n      answer: `\r\n**Создание action:**\r\n- Action — это простой объект с обязательным свойством \\`type\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst loginAction = {\r\n  type: 'LOGIN',\r\n  payload: { username: 'user', password: 'pass' },\r\n};\r\n\\`\\`\\`\r\n\r\n**Action Creator:**\r\n- Функция, которая возвращает action. Упрощает создание actions.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction addTodo(text) {\r\n  return {\r\n    type: 'ADD_TODO',\r\n    payload: { text },\r\n  };\r\n}\r\n\r\nconst action = addTodo('Buy milk');\r\nconsole.log(action);\r\n// { type: 'ADD_TODO', payload: { text: 'Buy milk' } }\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103378,\r\n      question: \"Что такое action creator и зачем он нужен?\",\r\n      answer: `\r\n**Action Creator:**\r\n- Это функция, которая возвращает объект action.\r\n- Упрощает создание actions и делает код более читаемым.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction increment() {\r\n  return { type: 'INCREMENT' };\r\n}\r\n\r\nfunction addTodo(text) {\r\n  return {\r\n    type: 'ADD_TODO',\r\n    payload: { text },\r\n  };\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103379,\r\n      question: \"Как отправить action в Redux store?\",\r\n      answer: `\r\n**Отправка action:**\r\n- Используйте метод \\`dispatch\\` из Redux store.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { createStore } from 'redux';\r\n\r\nconst reducer = (state = { count: 0 }, action) => {\r\n  switch (action.type) {\r\n    case 'INCREMENT':\r\n      return { count: state.count + 1 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst store = createStore(reducer);\r\n\r\nstore.dispatch({ type: 'INCREMENT' });\r\nconsole.log(store.getState()); // { count: 1 }\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103380,\r\n      question: \"Как использовать payload в action?\",\r\n      answer: `\r\n**Payload:**\r\n- Содержит дополнительные данные для действия.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction addTodo(text) {\r\n  return {\r\n    type: 'ADD_TODO',\r\n    payload: { text },\r\n  };\r\n}\r\n\r\nconst todoAction = addTodo('Learn Redux');\r\nconsole.log(todoAction);\r\n// { type: 'ADD_TODO', payload: { text: 'Learn Redux' } }\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103381,\r\n      question: \"Как тестировать action creators?\",\r\n      answer: `\r\n**Тестирование:**\r\n- Проверьте, что action creator возвращает правильный объект.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { addTodo } from './actions';\r\n\r\ntest('addTodo action creator', () => {\r\n  const action = addTodo('Buy milk');\r\n  expect(action).toEqual({\r\n    type: 'ADD_TODO',\r\n    payload: { text: 'Buy milk' },\r\n  });\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103382,\r\n      question: \"Какие есть соглашения по именованию типов action?\",\r\n      answer: `\r\n**Соглашения:**\r\n1. **Константы:**\r\n   - Используйте константы для типов action, чтобы избежать опечаток.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst ADD_TODO = 'ADD_TODO';\r\nconst REMOVE_TODO = 'REMOVE_TODO';\r\n\r\nfunction addTodo(text) {\r\n  return {\r\n    type: ADD_TODO,\r\n    payload: { text },\r\n  };\r\n}\r\n\\`\\`\\`\r\n\r\n2. **Формат:**\r\n   - Используйте UPPER_SNAKE_CASE для типов action.\r\n   - Например: \\`INCREMENT\\`, \\`ADD_TODO\\`.\r\n`,\r\n    },\r\n    {\r\n      id: 103383,\r\n      question: \"Как обрабатывать асинхронные действия в Redux?\",\r\n      answer: `\r\n**Асинхронные действия:**\r\n- Для обработки асинхронных действий используйте middleware, например, \\`redux-thunk\\`.\r\n\r\n**Пример с redux-thunk:**\r\n\\`\\`\\`javascript\r\nfunction fetchUser(id) {\r\n  return async (dispatch) => {\r\n    dispatch({ type: 'FETCH_USER_REQUEST' });\r\n    try {\r\n      const response = await fetch(\\`/api/users/\\${id}\\`);\r\n      const user = await response.json();\r\n      dispatch({ type: 'FETCH_USER_SUCCESS', payload: user });\r\n    } catch (error) {\r\n      dispatch({ type: 'FETCH_USER_FAILURE', error });\r\n    }\r\n  };\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103384,\r\n      question: \"Что такое flux standard action (FSA)?\",\r\n      answer: `\r\n**Flux Standard Action (FSA):**\r\n- Это стандарт для создания actions, который упрощает их использование.\r\n- Action должен содержать:\r\n  - \\`type\\`: Тип действия.\r\n  - \\`payload\\` (опционально): Данные действия.\r\n  - \\`error\\` (опционально): Флаг ошибки.\r\n  - \\`meta\\` (опционально): Дополнительная информация.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst successAction = {\r\n  type: 'FETCH_SUCCESS',\r\n  payload: { data: 'example' },\r\n};\r\n\r\nconst errorAction = {\r\n  type: 'FETCH_ERROR',\r\n  payload: new Error('Something went wrong'),\r\n  error: true,\r\n};\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103385,\r\n      question: \"Как организовать actions в больших приложениях?\",\r\n      answer: `\r\n**Организация:**\r\n1. **Модульность:**\r\n   - Разделите actions по доменам (например, \\`userActions.js\\`, \\`todoActions.js\\`).\r\n\r\n2. **Использование констант:**\r\n   - Вынесите типы action в отдельный файл.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// actionTypes.js\r\nexport const ADD_TODO = 'ADD_TODO';\r\nexport const REMOVE_TODO = 'REMOVE_TODO';\r\n\r\n// actions.js\r\nimport { ADD_TODO, REMOVE_TODO } from './actionTypes';\r\n\r\nexport function addTodo(text) {\r\n  return {\r\n    type: ADD_TODO,\r\n    payload: { text },\r\n  };\r\n}\r\n\r\nexport function removeTodo(id) {\r\n  return {\r\n    type: REMOVE_TODO,\r\n    payload: { id },\r\n  };\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testDesignPatterns = {\r\n  id: 101900,\r\n  title: \"Тест по паттернам проектирования\",\r\n  questions: [\r\n    {\r\n      id: 101901,\r\n      question: \"Что такое паттерны проектирования?\",\r\n      answer: `\r\n      **Паттерны проектирования:**\r\n      - Это проверенные решения типовых задач, возникающих при разработке программного обеспечения.\r\n      - Они помогают улучшить структуру кода, сделать его более читаемым, поддерживаемым и масштабируемым.\r\n\r\n      **Основные категории:**\r\n      1. **Порождающие (Creational):** Отвечают за создание объектов.\r\n      2. **Структурные (Structural):** Определяют способы построения связей между объектами.\r\n      3. **Поведенческие (Behavioral):** Описывают взаимодействие между объектами.\r\n\r\n      **Примеры:**\r\n      - Singleton (порождающий).\r\n      - Adapter (структурный).\r\n      - Observer (поведенческий).\r\n      `,\r\n    },\r\n    {\r\n      id: 101902,\r\n      question: \"Что такое Singleton и как он используется?\",\r\n      answer: `\r\n      **Singleton:**\r\n      - Это порождающий паттерн, который гарантирует, что у класса есть только один экземпляр, и предоставляет глобальную точку доступа к нему.\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`javascript\r\n      class Singleton {\r\n        constructor() {\r\n          if (!Singleton.instance) {\r\n            Singleton.instance = this;\r\n          }\r\n          return Singleton.instance;\r\n        }\r\n\r\n        log() {\r\n          console.log('This is a singleton instance');\r\n        }\r\n      }\r\n\r\n      const instance1 = new Singleton();\r\n      const instance2 = new Singleton();\r\n\r\n      console.log(instance1 === instance2); // true\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101903,\r\n      question: \"Что такое Factory Method и как он работает?\",\r\n      answer: `\r\n      **Factory Method:**\r\n      - Это порождающий паттерн, который определяет общий интерфейс для создания объектов в суперклассе, позволяя подклассам изменять тип создаваемых объектов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Creator {\r\n        createProduct() {\r\n          throw new Error('You must implement the createProduct method');\r\n        }\r\n      }\r\n\r\n      class ConcreteCreatorA extends Creator {\r\n        createProduct() {\r\n          return new ProductA();\r\n        }\r\n      }\r\n\r\n      class ConcreteCreatorB extends Creator {\r\n        createProduct() {\r\n          return new ProductB();\r\n        }\r\n      }\r\n\r\n      class ProductA {\r\n        use() {\r\n          console.log('Using Product A');\r\n        }\r\n      }\r\n\r\n      class ProductB {\r\n        use() {\r\n          console.log('Using Product B');\r\n        }\r\n      }\r\n\r\n      const creatorA = new ConcreteCreatorA();\r\n      const productA = creatorA.createProduct();\r\n      productA.use(); // Using Product A\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101904,\r\n      question: \"Что такое Observer и как он применяется?\",\r\n      answer: `\r\n      **Observer:**\r\n      - Это поведенческий паттерн, который позволяет объектам подписываться на события друг друга и получать уведомления о происходящих изменениях.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Subject {\r\n        constructor() {\r\n          this.observers = [];\r\n        }\r\n\r\n        subscribe(observer) {\r\n          this.observers.push(observer);\r\n        }\r\n\r\n        unsubscribe(observer) {\r\n          this.observers = this.observers.filter(obs => obs !== observer);\r\n        }\r\n\r\n        notify(data) {\r\n          this.observers.forEach(observer => observer.update(data));\r\n        }\r\n      }\r\n\r\n      class Observer {\r\n        update(data) {\r\n          console.log(\\`Received data: \\${data}\\`);\r\n        }\r\n      }\r\n\r\n      const subject = new Subject();\r\n      const observer1 = new Observer();\r\n      const observer2 = new Observer();\r\n\r\n      subject.subscribe(observer1);\r\n      subject.subscribe(observer2);\r\n\r\n      subject.notify('Hello Observers!');\r\n      // Received data: Hello Observers!\r\n      // Received data: Hello Observers!\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101905,\r\n      question: \"Что такое Adapter и зачем он нужен?\",\r\n      answer: `\r\n      **Adapter:**\r\n      - Это структурный паттерн, который позволяет объектам с несовместимыми интерфейсами работать вместе.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class OldSystem {\r\n        request() {\r\n          return 'Old request';\r\n        }\r\n      }\r\n\r\n      class NewSystem {\r\n        specificRequest() {\r\n          return 'New specific request';\r\n        }\r\n      }\r\n\r\n      class Adapter {\r\n        constructor(newSystem) {\r\n          this.newSystem = newSystem;\r\n        }\r\n\r\n        request() {\r\n          return \\`Adapter: \\${this.newSystem.specificRequest()}\\`;\r\n        }\r\n      }\r\n\r\n      const oldSystem = new OldSystem();\r\n      const newSystem = new NewSystem();\r\n      const adapter = new Adapter(newSystem);\r\n\r\n      console.log(oldSystem.request()); // Old request\r\n      console.log(adapter.request()); // Adapter: New specific request\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101906,\r\n      question: \"Что такое Decorator и как он используется?\",\r\n      answer: `\r\n      **Decorator:**\r\n      - Это структурный паттерн, который позволяет динамически добавлять объектам новые свойства или поведение, не меняя их код.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Component {\r\n        operation() {\r\n          return 'Base operation';\r\n        }\r\n      }\r\n\r\n      class Decorator {\r\n        constructor(component) {\r\n          this.component = component;\r\n        }\r\n\r\n        operation() {\r\n          return \\`Decorated (\\${this.component.operation()})\\`;\r\n        }\r\n      }\r\n\r\n      const baseComponent = new Component();\r\n      const decoratedComponent = new Decorator(baseComponent);\r\n\r\n      console.log(baseComponent.operation()); // Base operation\r\n      console.log(decoratedComponent.operation()); // Decorated (Base operation)\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101907,\r\n      question: \"Что такое Command и как он работает?\",\r\n      answer: `\r\n      **Command:**\r\n      - Это поведенческий паттерн, который превращает запросы в объекты, позволяя передавать их как аргументы, ставить в очередь или сохранять.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Receiver {\r\n        execute() {\r\n          console.log('Receiver executing command');\r\n        }\r\n      }\r\n\r\n      class Command {\r\n        constructor(receiver) {\r\n          this.receiver = receiver;\r\n        }\r\n\r\n        execute() {\r\n          this.receiver.execute();\r\n        }\r\n      }\r\n\r\n      class Invoker {\r\n        setCommand(command) {\r\n          this.command = command;\r\n        }\r\n\r\n        executeCommand() {\r\n          this.command.execute();\r\n        }\r\n      }\r\n\r\n      const receiver = new Receiver();\r\n      const command = new Command(receiver);\r\n      const invoker = new Invoker();\r\n\r\n      invoker.setCommand(command);\r\n      invoker.executeCommand(); // Receiver executing command\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101908,\r\n      question: \"Что такое Strategy и как он применяется?\",\r\n      answer: `\r\n      **Strategy:**\r\n      - Это поведенческий паттерн, который позволяет выбирать алгоритм во время выполнения программы.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      class Context {\r\n        constructor(strategy) {\r\n          this.strategy = strategy;\r\n        }\r\n\r\n        setStrategy(strategy) {\r\n          this.strategy = strategy;\r\n        }\r\n\r\n        executeStrategy() {\r\n          return this.strategy.execute();\r\n        }\r\n      }\r\n\r\n      class StrategyA {\r\n        execute() {\r\n          return 'Executing Strategy A';\r\n        }\r\n      }\r\n\r\n      class StrategyB {\r\n        execute() {\r\n          return 'Executing Strategy B';\r\n        }\r\n      }\r\n\r\n      const context = new Context(new StrategyA());\r\n      console.log(context.executeStrategy()); // Executing Strategy A\r\n\r\n      context.setStrategy(new StrategyB());\r\n      console.log(context.executeStrategy()); // Executing Strategy B\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testDataStructure = {\r\n  id: 100300,\r\n  title: \"Data Structure (Структуры Данных)\",\r\n  questions: [\r\n    {\r\n      id: 100301,\r\n      question: \"Что такое структуры данных?\",\r\n      answer: `\r\n      **Структуры данных** — это способы организации и хранения данных, которые позволяют эффективно управлять ими.\r\n      - Они определяют, как данные связаны между собой и как к ним можно получить доступ.\r\n      - В JavaScript часто используются массивы, объекты, множества (Set), словари (Map) и другие структуры.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Массив:\r\n      const array = [1, 2, 3];\r\n\r\n      // Объект:\r\n      const object = { key: 'value' };\r\n\r\n      // Множество:\r\n      const set = new Set([1, 2, 3]);\r\n\r\n      // Словарь:\r\n      const map = new Map();\r\n      map.set('key', 'value');\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100302,\r\n      question: \"Какие основные структуры данных существуют в JavaScript?\",\r\n      answer: `\r\n      **Основные структуры данных в JavaScript:**\r\n      1. **Массивы (\\`Array\\`):**\r\n         - Упорядоченные коллекции элементов.\r\n         - Поддерживают динамическое изменение размера.\r\n\r\n      2. **Объекты (\\`Object\\`):**\r\n         - Коллекции пар ключ-значение.\r\n         - Используются для хранения данных с произвольной структурой.\r\n\r\n      3. **Множества (\\`Set\\`):**\r\n         - Коллекции уникальных значений.\r\n         - Порядок элементов сохраняется.\r\n\r\n      4. **Словари (\\`Map\\`):**\r\n         - Коллекции пар ключ-значение, где ключ может быть любого типа.\r\n\r\n      5. **Стек (LIFO):**\r\n         - Реализуется через массив с методами \\`push()\\` и \\`pop()\\`.\r\n\r\n      6. **Очередь (FIFO):**\r\n         - Реализуется через массив с методами \\`push()\\` и \\`shift()\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      // Стек:\r\n      const stack = [];\r\n      stack.push(1); // [1]\r\n      stack.push(2); // [1, 2]\r\n      stack.pop();   // [1]\r\n\r\n      // Очередь:\r\n      const queue = [];\r\n      queue.push(1); // [1]\r\n      queue.push(2); // [1, 2]\r\n      queue.shift(); // [2]\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100303,\r\n      question: \"Что такое массив и как он работает?\",\r\n      answer: `\r\n      **Массив (\\`Array\\`):**\r\n      - Упорядоченная коллекция элементов.\r\n      - Элементы могут быть любого типа (числа, строки, объекты и т.д.).\r\n      - Индексация начинается с 0.\r\n\r\n      **Методы массивов:**\r\n      - \\`push()\\`: Добавляет элемент в конец.\r\n      - \\`pop()\\`: Удаляет последний элемент.\r\n      - \\`shift()\\`: Удаляет первый элемент.\r\n      - \\`unshift()\\`: Добавляет элемент в начало.\r\n      - \\`slice()\\`, \\`splice()\\`: Работа с частями массива.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const array = [1, 2, 3];\r\n      array.push(4); // [1, 2, 3, 4]\r\n      array.pop();   // [1, 2, 3]\r\n      console.log(array[0]); // 1\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100304,\r\n      question: \"Что такое объект и как он работает?\",\r\n      answer: `\r\n      **Объект (\\`Object\\`):**\r\n      - Коллекция пар ключ-значение.\r\n      - Ключи обычно строковые (или символы), значения могут быть любого типа.\r\n\r\n      **Методы объектов:**\r\n      - \\`Object.keys()\\`: Возвращает массив ключей.\r\n      - \\`Object.values()\\`: Возвращает массив значений.\r\n      - \\`Object.entries()\\`: Возвращает массив пар ключ-значение.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const obj = { name: 'Alice', age: 30 };\r\n      console.log(obj.name); // Alice\r\n\r\n      console.log(Object.keys(obj)); // ['name', 'age']\r\n      console.log(Object.values(obj)); // ['Alice', 30]\r\n      console.log(Object.entries(obj)); // [['name', 'Alice'], ['age', 30]]\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100305,\r\n      question: \"Что такое множество (`Set`) и зачем оно нужно?\",\r\n      answer: `\r\n      **Множество (\\`Set\\`):**\r\n      - Коллекция уникальных значений.\r\n      - Порядок элементов сохраняется.\r\n      - Полезно для удаления дубликатов из массива.\r\n\r\n      **Методы множества:**\r\n      - \\`add()\\`: Добавляет значение.\r\n      - \\`delete()\\`: Удаляет значение.\r\n      - \\`has()\\`: Проверяет наличие значения.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const set = new Set([1, 2, 3, 3]);\r\n      console.log(set); // Set {1, 2, 3}\r\n\r\n      set.add(4);\r\n      console.log(set.has(2)); // true\r\n      set.delete(2);\r\n      console.log(set); // Set {1, 3, 4}\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100306,\r\n      question: \"Что такое словарь (`Map`) и чем он отличается от объекта?\",\r\n      answer: `\r\n      **Словарь (\\`Map\\`):**\r\n      - Коллекция пар ключ-значение.\r\n      - Ключи могут быть любого типа (включая объекты, функции и примитивы).\r\n\r\n      **Отличия от объекта:**\r\n      - В объектах ключи всегда строковые или символьные.\r\n      - В \\`Map\\` ключи могут быть любого типа.\r\n      - \\`Map\\` сохраняет порядок добавления элементов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const map = new Map();\r\n      map.set('name', 'Alice');\r\n      map.set(42, 'The answer');\r\n      map.set({}, 'Empty object');\r\n\r\n      console.log(map.get('name')); // Alice\r\n      console.log(map.get(42));     // The answer\r\n      console.log(map.size);        // 3\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100307,\r\n      question: \"Что такое стек (LIFO) и как его реализовать?\",\r\n      answer: `\r\n      **Стек (LIFO — Last In, First Out):**\r\n      - Структура данных, где последний добавленный элемент извлекается первым.\r\n      - Реализуется через массив с методами \\`push()\\` и \\`pop()\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const stack = [];\r\n      stack.push('first'); // ['first']\r\n      stack.push('second'); // ['first', 'second']\r\n      stack.push('third');  // ['first', 'second', 'third']\r\n\r\n      console.log(stack.pop()); // 'third'\r\n      console.log(stack.pop()); // 'second'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100308,\r\n      question: \"Что такое очередь (FIFO) и как её реализовать?\",\r\n      answer: `\r\n      **Очередь (FIFO — First In, First Out):**\r\n      - Структура данных, где первый добавленный элемент извлекается первым.\r\n      - Реализуется через массив с методами \\`push()\\` и \\`shift()\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const queue = [];\r\n      queue.push('first');  // ['first']\r\n      queue.push('second'); // ['first', 'second']\r\n      queue.push('third');  // ['first', 'second', 'third']\r\n\r\n      console.log(queue.shift()); // 'first'\r\n      console.log(queue.shift()); // 'second'\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100309,\r\n      question: \"Что такое связный список и как его реализовать?\",\r\n      answer: `\r\n      **Связный список:**\r\n      - Структура данных, состоящая из узлов, где каждый узел содержит значение и ссылку на следующий узел.\r\n      - Преимущество: Легкость добавления/удаления элементов.\r\n\r\n      **Пример реализации:**\r\n      \\`\\`\\`javascript\r\n      class Node {\r\n        constructor(value) {\r\n          this.value = value;\r\n          this.next = null;\r\n        }\r\n      }\r\n\r\n      class LinkedList {\r\n        constructor() {\r\n          this.head = null;\r\n        }\r\n\r\n        add(value) {\r\n          const newNode = new Node(value);\r\n          if (!this.head) {\r\n            this.head = newNode;\r\n          } else {\r\n            let current = this.head;\r\n            while (current.next) {\r\n              current = current.next;\r\n            }\r\n            current.next = newNode;\r\n          }\r\n        }\r\n\r\n        print() {\r\n          let current = this.head;\r\n          while (current) {\r\n            console.log(current.value);\r\n            current = current.next;\r\n          }\r\n        }\r\n      }\r\n\r\n      const list = new LinkedList();\r\n      list.add(1);\r\n      list.add(2);\r\n      list.add(3);\r\n      list.print(); // 1, 2, 3\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100310,\r\n      question: \"Что такое дерево и как его использовать?\",\r\n      answer: `\r\n      **Дерево:**\r\n      - Иерархическая структура данных, состоящая из узлов.\r\n      - Каждый узел имеет значение и ссылки на дочерние узлы.\r\n      - Примеры использования: DOM, файловые системы, алгоритмы поиска.\r\n\r\n      **Пример реализации:**\r\n      \\`\\`\\`javascript\r\n      class TreeNode {\r\n        constructor(value) {\r\n          this.value = value;\r\n          this.children = [];\r\n        }\r\n\r\n        addChild(value) {\r\n          const childNode = new TreeNode(value);\r\n          this.children.push(childNode);\r\n          return childNode;\r\n        }\r\n\r\n        print(level = 0) {\r\n          console.log(' '.repeat(level * 2) + this.value);\r\n          this.children.forEach((child) => child.print(level + 1));\r\n        }\r\n      }\r\n\r\n      const root = new TreeNode('Root');\r\n      const child1 = root.addChild('Child 1');\r\n      const child2 = root.addChild('Child 2');\r\n      child1.addChild('Grandchild 1');\r\n      child2.addChild('Grandchild 2');\r\n\r\n      root.print();\r\n      /*\r\n      Root\r\n        Child 1\r\n          Grandchild 1\r\n        Child 2\r\n          Grandchild 2\r\n      */\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testDataBase = {\r\n  id: 100325,\r\n  title: \"Data Base (База Данных)\",\r\n  questions: [\r\n    {\r\n      id: 100326,\r\n      question: \"Что такое база данных?\",\r\n      answer: `\r\n      **База данных (Database):**\r\n      - Организованная коллекция данных, которая хранится и управляется системой управления базами данных (СУБД).\r\n      - Используется для эффективного хранения, поиска и обновления данных.\r\n\r\n      **Пример использования:**\r\n      - Хранение информации о пользователях, продуктах или заказах в интернет-магазине.\r\n      `,\r\n    },\r\n    {\r\n      id: 100327,\r\n      question: \"Какие типы баз данных существуют?\",\r\n      answer: `\r\n      **Типы баз данных:**\r\n      1. **Реляционные базы данных (RDBMS):**\r\n         - Данные хранятся в виде таблиц (строки и столбцы).\r\n         - Примеры: MySQL, PostgreSQL, SQLite, Oracle Database.\r\n      \r\n      2. **Нереляционные базы данных (NoSQL):**\r\n         - Данные хранятся в виде документов, графов или ключ-значений.\r\n         - Примеры: MongoDB (документо-ориентированная), Redis (ключ-значение), Neo4j (графовая).\r\n\r\n      3. **Гибридные базы данных:**\r\n         - Сочетают возможности реляционных и нереляционных баз данных.\r\n      `,\r\n    },\r\n    {\r\n      id: 100328,\r\n      question: \"Что такое SQL?\",\r\n      answer: `\r\n      **SQL (Structured Query Language):**\r\n      - Язык программирования, используемый для работы с реляционными базами данных.\r\n      - Позволяет выполнять операции CRUD (Create, Read, Update, Delete):\r\n        - \\`SELECT\\`: Чтение данных.\r\n        - \\`INSERT\\`: Добавление новых данных.\r\n        - \\`UPDATE\\`: Обновление существующих данных.\r\n        - \\`DELETE\\`: Удаление данных.\r\n\r\n      **Пример запроса:**\r\n      \\`\\`\\`sql\r\n      SELECT name, age FROM users WHERE age > 18;\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100329,\r\n      question: \"Что такое NoSQL и чем он отличается от SQL?\",\r\n      answer: `\r\n      **NoSQL:**\r\n      - Не требует строгой схемы данных (schema-less).\r\n      - Подходит для больших объемов неструктурированных данных.\r\n      - Примеры: MongoDB, Redis, Cassandra.\r\n\r\n      **Различия между SQL и NoSQL:**\r\n      | Критерий          | SQL                         | NoSQL                       |\r\n      |-------------------|----------------------------|-----------------------------|\r\n      | Структура данных  | Таблицы                    | Документы, ключ-значение, графы |\r\n      | Масштабируемость  | Вертикальная               | Горизонтальная              |\r\n      | Гибкость          | Строгая схема данных       | Без схемы                   |\r\n      | Примеры           | MySQL, PostgreSQL          | MongoDB, Redis              |\r\n      `,\r\n    },\r\n    {\r\n      id: 100330,\r\n      question: \"Что такое индексы в базах данных?\",\r\n      answer: `\r\n      **Индексы:**\r\n      - Специальные структуры данных, которые ускоряют поиск и выборку данных.\r\n      - Аналог книги: содержание помогает быстро найти нужную страницу.\r\n\r\n      **Пример создания индекса:**\r\n      \\`\\`\\`sql\r\n      CREATE INDEX idx_name ON users(name);\r\n      \\`\\`\\`\r\n\r\n      **Преимущества:**\r\n      - Ускоряет выполнение запросов.\r\n      - Уменьшает время сканирования таблицы.\r\n\r\n      **Недостатки:**\r\n      - Замедляет операции вставки/обновления данных.\r\n      - Увеличивает использование дискового пространства.\r\n      `,\r\n    },\r\n    {\r\n      id: 100331,\r\n      question: \"Что такое транзакции в базах данных?\",\r\n      answer: `\r\n      **Транзакции:**\r\n      - Группа операций, которые должны быть выполнены как единое целое.\r\n      - Обеспечивают ACID-свойства:\r\n        - **A**tomicity (атомарность): Все или ничего.\r\n        - **C**onsistency (согласованность): Данные остаются валидными.\r\n        - **I**solation (изолированность): Независимость транзакций.\r\n        - **D**urability (долговечность): Результат сохраняется даже при сбоях.\r\n\r\n      **Пример транзакции:**\r\n      \\`\\`\\`sql\r\n      BEGIN TRANSACTION;\r\n      UPDATE accounts SET balance = balance - 100 WHERE user_id = 1;\r\n      UPDATE accounts SET balance = balance + 100 WHERE user_id = 2;\r\n      COMMIT;\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100332,\r\n      question: \"Что такое нормализация базы данных?\",\r\n      answer: `\r\n      **Нормализация:**\r\n      - Процесс организации данных для минимизации избыточности и зависимостей.\r\n      - Разделение данных на связанные таблицы.\r\n\r\n      **Пример нормализации:**\r\n      - Первая нормальная форма (1NF): Устранение повторяющихся групп.\r\n      - Вторая нормальная форма (2NF): Устранение частичной зависимости.\r\n      - Третья нормальная форма (3NF): Устранение транзитивной зависимости.\r\n\r\n      **Преимущества:**\r\n      - Снижение дублирования данных.\r\n      - Упрощение обновления данных.\r\n\r\n      **Недостатки:**\r\n      - Может замедлить сложные запросы.\r\n      `,\r\n    },\r\n    {\r\n      id: 100333,\r\n      question: \"Что такое денормализация и зачем она нужна?\",\r\n      answer: `\r\n      **Денормализация:**\r\n      - Процесс добавления избыточности в базу данных для повышения производительности чтения.\r\n      - Часто используется в аналитических системах.\r\n\r\n      **Пример:**\r\n      - Вместо нескольких JOIN-операций данные дублируются в одной таблице.\r\n\r\n      **Преимущества:**\r\n      - Ускорение запросов за счет уменьшения JOIN-операций.\r\n\r\n      **Недостатки:**\r\n      - Увеличение объема данных.\r\n      - Возможность возникновения аномалий при обновлении.\r\n      `,\r\n    },\r\n    {\r\n      id: 100334,\r\n      question: \"Что такое первичный ключ и внешний ключ?\",\r\n      answer: `\r\n      **Первичный ключ (Primary Key):**\r\n      - Уникальный идентификатор строки в таблице.\r\n      - Не может содержать дубликаты или NULL-значения.\r\n\r\n      **Внешний ключ (Foreign Key):**\r\n      - Ссылается на первичный ключ другой таблицы.\r\n      - Обеспечивает связь между таблицами.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`sql\r\n      CREATE TABLE users (\r\n        id INT PRIMARY KEY,\r\n        name VARCHAR(50)\r\n      );\r\n\r\n      CREATE TABLE orders (\r\n        order_id INT PRIMARY KEY,\r\n        user_id INT,\r\n        FOREIGN KEY (user_id) REFERENCES users(id)\r\n      );\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100335,\r\n      question: \"Что такое ORM?\",\r\n      answer: `\r\n      **ORM (Object-Relational Mapping):**\r\n      - Технология, позволяющая работать с базами данных через объекты, а не SQL-запросы.\r\n      - Преобразует объекты в записи базы данных и наоборот.\r\n\r\n      **Примеры ORM:**\r\n      - Sequelize (JavaScript/Node.js).\r\n      - Hibernate (Java).\r\n      - SQLAlchemy (Python).\r\n\r\n      **Преимущества:**\r\n      - Упрощение работы с базой данных.\r\n      - Абстракция от SQL.\r\n\r\n      **Недостатки:**\r\n      - Может быть менее производительным для сложных запросов.\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testStyleIsolation = {\r\n  id: 100475,\r\n  title: \"Изоляция Стилей\",\r\n  questions: [\r\n    {\r\n      id: 100476,\r\n      question: \"Что такое изоляция стилей?\",\r\n      answer: `\r\n      **Изоляция стилей** — это практика, направленная на предотвращение конфликтов между CSS-правилами разных компонентов или модулей.\r\n      - Помогает избежать пересечения имен классов.\r\n      - Обеспечивает независимость стилей компонентов.\r\n\r\n      **Пример проблемы:**\r\n      \\`\\`\\`css\r\n      /* Глобальные стили */\r\n      .button {\r\n        background-color: blue;\r\n      }\r\n\r\n      /* Стили компонента */\r\n      .button {\r\n        background-color: red;\r\n      }\r\n      \\`\\`\\`\r\n      В результате кнопка может отображаться не так, как ожидалось.\r\n      `,\r\n    },\r\n    {\r\n      id: 100477,\r\n      question: \"Какие методы изоляции стилей существуют?\",\r\n      answer: `\r\n      **Методы изоляции стилей:**\r\n      1. **CSS Modules:**\r\n         - Каждый класс получает уникальное имя (хэш), чтобы избежать конфликтов.\r\n         - Пример:\r\n           \\`\\`\\`javascript\r\n           import styles from './Button.module.css';\r\n\r\n           function Button() {\r\n             return <button className={styles.button}>Click me</button>;\r\n           }\r\n           \\`\\`\\`\r\n\r\n      2. **BEM (Block Element Modifier):**\r\n         - Использует соглашение об именовании для уникальности классов.\r\n         - Пример:\r\n           \\`\\`\\`html\r\n           <div class=\"card\">\r\n             <div class=\"card__title\">Title</div>\r\n             <div class=\"card__content\">Content</div>\r\n           </div>\r\n           \\`\\`\\`\r\n\r\n      3. **Scoped CSS (Vue.js):**\r\n         - Стили применяются только к конкретному компоненту.\r\n         - Пример:\r\n           \\`\\`\\`vue\r\n           <style scoped>\r\n           .button {\r\n             background-color: green;\r\n           }\r\n           </style>\r\n           \\`\\`\\`\r\n\r\n      4. **Shadow DOM:**\r\n         - Создает изолированное дерево DOM, где стили не влияют на внешний мир.\r\n         - Пример:\r\n           \\`\\`\\`javascript\r\n           const shadow = element.attachShadow({ mode: 'open' });\r\n           shadow.innerHTML = \\`<style>.button { color: red; }</style>\\`;\r\n           \\`\\`\\`\r\n\r\n      5. **Utility-first CSS (Tailwind CSS):**\r\n         - Использует атомарные классы, которые сложно переопределить.\r\n         - Пример:\r\n           \\`\\`\\`html\r\n           <button class=\"bg-blue-500 text-white px-4 py-2 rounded\">Click me</button>\r\n           \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100478,\r\n      question: \"Что такое CSS Modules и как они работают?\",\r\n      answer: `\r\n      **CSS Modules:**\r\n      - Это подход, при котором каждый CSS-класс автоматически преобразуется в уникальный идентификатор.\r\n      - Обеспечивает локальную область видимости стилей.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`css\r\n      /* Button.module.css */\r\n      .button {\r\n        background-color: blue;\r\n      }\r\n      \\`\\`\\`\r\n\r\n      \\`\\`\\`javascript\r\n      import styles from './Button.module.css';\r\n\r\n      function Button() {\r\n        return <button className={styles.button}>Click me</button>;\r\n      }\r\n      \\`\\`\\`\r\n\r\n      **Результат в HTML:**\r\n      \\`\\`\\`html\r\n      <button class=\"Button_button__1a2b3\">Click me</button>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100479,\r\n      question: \"Что такое Shadow DOM и как он помогает в изоляции стилей?\",\r\n      answer: `\r\n      **Shadow DOM:**\r\n      - Это технология, позволяющая создавать изолированные DOM-деревья внутри элемента.\r\n      - Стили внутри Shadow DOM не влияют на внешний документ и наоборот.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const div = document.createElement('div');\r\n      const shadow = div.attachShadow({ mode: 'open' });\r\n\r\n      shadow.innerHTML = \\`\r\n        <style>\r\n          button {\r\n            background-color: red;\r\n          }\r\n        </style>\r\n        <button>Click me</button>\r\n      \\`;\r\n\r\n      document.body.appendChild(div);\r\n      \\`\\`\\`\r\n\r\n      **Особенности:**\r\n      - Полная изоляция стилей.\r\n      - Подходит для создания веб-компонентов.\r\n      `,\r\n    },\r\n    {\r\n      id: 100480,\r\n      question: \"Как работает BEM и почему это помогает в изоляции стилей?\",\r\n      answer: `\r\n      **BEM (Block Element Modifier):**\r\n      - Методология именования классов, которая минимизирует вероятность конфликтов.\r\n      - Использует строгую структуру: \\`block__element--modifier\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <div class=\"card\">\r\n        <div class=\"card__title card__title--large\">Title</div>\r\n        <div class=\"card__content\">Content</div>\r\n      </div>\r\n      \\`\\`\\`\r\n\r\n      **Преимущества:**\r\n      - Уникальные имена классов.\r\n      - Легко читаемый и организованный код.\r\n      - Минимальная вероятность пересечения с глобальными стилями.\r\n      `,\r\n    },\r\n    {\r\n      id: 100481,\r\n      question: \"Что такое Scoped CSS и где оно используется?\",\r\n      answer: `\r\n      **Scoped CSS:**\r\n      - Это механизм, который ограничивает область действия стилей конкретным компонентом.\r\n      - Используется в фреймворках, таких как Vue.js.\r\n\r\n      **Пример (Vue.js):**\r\n      \\`\\`\\`vue\r\n      <template>\r\n        <button class=\"button\">Click me</button>\r\n      </template>\r\n\r\n      <style scoped>\r\n      .button {\r\n        background-color: green;\r\n      }\r\n      </style>\r\n      \\`\\`\\`\r\n\r\n      **Особенности:**\r\n      - Стили применяются только к текущему компоненту.\r\n      - Предотвращает утечку стилей в другие части приложения.\r\n      `,\r\n    },\r\n    {\r\n      id: 100482,\r\n      question: \"Как Tailwind CSS помогает в изоляции стилей?\",\r\n      answer: `\r\n      **Tailwind CSS:**\r\n      - Utility-first CSS-фреймворк, который использует атомарные классы.\r\n      - Классы применяются напрямую к элементам, что исключает необходимость глобальных стилей.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <button class=\"bg-blue-500 text-white px-4 py-2 rounded\">Click me</button>\r\n      \\`\\`\\`\r\n\r\n      **Преимущества:**\r\n      - Нет необходимости в глобальных CSS-файлах.\r\n      - Минимальная вероятность конфликтов.\r\n      - Быстрая разработка благодаря готовым классам.\r\n      `,\r\n    },\r\n    {\r\n      id: 100483,\r\n      question: \"Какие проблемы решает изоляция стилей?\",\r\n      answer: `\r\n      **Проблемы, решаемые изоляцией стилей:**\r\n      1. **Конфликты имен классов:**\r\n         - Разные компоненты могут использовать одинаковые имена классов.\r\n      2. **Переопределение стилей:**\r\n         - Глобальные стили могут случайно переопределять локальные.\r\n      3. **Поддержка кода:**\r\n         - Изоляция упрощает понимание и изменение стилей.\r\n      4. **Масштабируемость:**\r\n         - Легче добавлять новые компоненты без риска сломать существующие.\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testPrototype = {\r\n  id: 100950,\r\n  title: \"Прототипы и прото\",\r\n  questions: [\r\n    {\r\n      id: 100951,\r\n      question: \"Что такое прототип в JavaScript?\",\r\n      answer: `\r\n**Прототип:**\r\n- Прототип — это механизм, который позволяет объектам наследовать свойства и методы от других объектов.\r\n- Каждый объект в JavaScript имеет внутреннее свойство \\`[[Prototype]]\\`, которое ссылается на его прототип.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst animal = {\r\n  sound: 'Some sound',\r\n  makeSound() {\r\n    console.log(this.sound);\r\n  },\r\n};\r\n\r\nconst dog = Object.create(animal);\r\ndog.sound = 'Woof';\r\ndog.makeSound(); // 'Woof'\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100952,\r\n      question: \"Как работает цепочка прототипов (prototype chain)?\",\r\n      answer: `\r\n**Цепочка прототипов:**\r\n- Когда вы обращаетесь к свойству объекта, JavaScript сначала ищет его в самом объекте.\r\n- Если свойство не найдено, поиск продолжается в прототипе объекта, затем в прототипе прототипа и так далее, пока не достигнет \\`null\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst parent = { value: 42 };\r\nconst child = Object.create(parent);\r\n\r\nconsole.log(child.value); // 42 (наследуется от parent)\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100953,\r\n      question: \"Как создать объект с определенным прототипом?\",\r\n      answer: `\r\n**Создание объекта с прототипом:**\r\n1. **Object.create():**\r\n   - Создает новый объект с указанным прототипом.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst proto = { greet: () => console.log('Hello') };\r\nconst obj = Object.create(proto);\r\nobj.greet(); // 'Hello'\r\n\\`\\`\\`\r\n\r\n2. **Конструкторы:**\r\n   - Используйте функции-конструкторы и свойство \\`prototype\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Person(name) {\r\n  this.name = name;\r\n}\r\n\r\nPerson.prototype.greet = function () {\r\n  console.log(\\`Hello, \\${this.name}\\`);\r\n};\r\n\r\nconst person = new Person('Alice');\r\nperson.greet(); // 'Hello, Alice'\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100954,\r\n      question: \"Что такое __proto__ и как оно связано с prototype?\",\r\n      answer: `\r\n**\\`__proto__\\`:**\r\n- Это устаревшее свойство, которое предоставляет доступ к прототипу объекта.\r\n- Оно эквивалентно \\`Object.getPrototypeOf(obj)\\`.\r\n\r\n**Связь с \\`prototype\\`:**\r\n- \\`prototype\\` используется для функций-конструкторов.\r\n- \\`__proto__\\` используется для экземпляров объектов.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Animal() {}\r\nAnimal.prototype.sound = 'Roar';\r\n\r\nconst lion = new Animal();\r\nconsole.log(lion.__proto__ === Animal.prototype); // true\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100955,\r\n      question: \"Как проверить, является ли один объект прототипом другого?\",\r\n      answer: `\r\n**Проверка прототипа:**\r\n- Используйте метод \\`isPrototypeOf()\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst proto = { value: 42 };\r\nconst obj = Object.create(proto);\r\n\r\nconsole.log(proto.isPrototypeOf(obj)); // true\r\n\\`\\`\\`\r\n\r\nАльтернатива:\r\n- \\`Object.getPrototypeOf(obj) === proto\\`.\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testMethodologyBem = {\r\n  id: 100925,\r\n  title: \"Методология BEM\",\r\n  questions: [\r\n    {\r\n      id: 100926,\r\n      question: \"Что такое методология BEM?\",\r\n      answer: `\r\n      **Методология BEM (Block, Element, Modifier):**\r\n      - Это подход к написанию CSS-классов и структурированию HTML-кода, который помогает создавать масштабируемые и поддерживаемые интерфейсы.\r\n      - Основана на трех ключевых понятиях:\r\n        1. **Блок (Block):** Независимый компонент, который можно переиспользовать.\r\n        2. **Элемент (Element):** Часть блока, которая не имеет смысла вне этого блока.\r\n        3. **Модификатор (Modifier):** Флаг или состояние, которое изменяет внешний вид или поведение блока/элемента.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <div class=\"card\">\r\n        <div class=\"card__title\">Заголовок</div>\r\n        <div class=\"card__content card__content--highlighted\">Контент</div>\r\n      </div>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100927,\r\n      question: \"Какие преимущества у методологии BEM?\",\r\n      answer: `\r\n      **Преимущества BEM:**\r\n      1. **Масштабируемость:** Легко добавлять новые компоненты без конфликтов.\r\n      2. **Читаемость:** Классы описывают структуру и назначение элементов.\r\n      3. **Переиспользование:** Блоки можно использовать в разных частях проекта.\r\n      4. **Поддержка:** Упрощается работа с кодом для новых разработчиков.\r\n      5. **Изоляция:** Классы уникальны, что минимизирует конфликты стилей.\r\n\r\n      **Пример:**\r\n      - Использование одного блока \\`button\\` в разных местах интерфейса.\r\n      `,\r\n    },\r\n    {\r\n      id: 100928,\r\n      question: \"Как правильно называть классы в BEM?\",\r\n      answer: `\r\n      **Правила именования классов в BEM:**\r\n      1. **Блок:** Название блока пишется в нижнем регистре.\r\n         - Пример: \\`header\\`, \\`button\\`.\r\n      2. **Элемент:** Название элемента отделяется от блока двойным подчеркиванием (\\`__\\`).\r\n         - Пример: \\`card__title\\`, \\`menu__item\\`.\r\n      3. **Модификатор:** Модификатор отделяется от блока или элемента двойным дефисом (\\`--\\`).\r\n         - Пример: \\`button--disabled\\`, \\`card__content--highlighted\\`.\r\n\r\n      **Важно:**\r\n      - Классы должны быть осмысленными и описывать функционал, а не внешний вид.\r\n      `,\r\n    },\r\n    {\r\n      id: 100929,\r\n      question: \"Что такое блок в BEM?\",\r\n      answer: `\r\n      **Блок:**\r\n      - Это независимый компонент, который можно переиспользовать.\r\n      - Блок не зависит от других блоков и может существовать автономно.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <div class=\"button\">Кнопка</div>\r\n      \\`\\`\\`\r\n      - \\`button\\` — это блок.\r\n      `,\r\n    },\r\n    {\r\n      id: 100930,\r\n      question: \"Что такое элемент в BEM?\",\r\n      answer: `\r\n      **Элемент:**\r\n      - Это часть блока, которая не имеет смысла вне этого блока.\r\n      - Элемент всегда связан с конкретным блоком.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <div class=\"card\">\r\n        <div class=\"card__title\">Заголовок</div>\r\n        <div class=\"card__content\">Контент</div>\r\n      </div>\r\n      \\`\\`\\`\r\n      - \\`card__title\\` и \\`card__content\\` — это элементы блока \\`card\\`.\r\n      `,\r\n    },\r\n    {\r\n      id: 100931,\r\n      question: \"Что такое модификатор в BEM?\",\r\n      answer: `\r\n      **Модификатор:**\r\n      - Это флаг или состояние, которое изменяет внешний вид или поведение блока/элемента.\r\n      - Модификатор может быть булевым (например, \\`--active\\`) или иметь значение (например, \\`--size-large\\`).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <div class=\"button button--disabled\">Отключенная кнопка</div>\r\n      \\`\\`\\`\r\n      - \\`button--disabled\\` — это модификатор, указывающий на состояние блока \\`button\\`.\r\n      `,\r\n    },\r\n    {\r\n      id: 100932,\r\n      question: \"Как избежать конфликтов стилей при использовании BEM?\",\r\n      answer: `\r\n      **Способы избежать конфликтов:**\r\n      1. **Уникальные классы:** Каждому блоку и элементу присваивается уникальный класс.\r\n      2. **Отсутствие вложенности:** В CSS используется плоская структура без глубокой вложенности.\r\n      3. **Избегание глобальных стилей:** Все стили определяются через классы BEM.\r\n\r\n      **Пример:**\r\n      - Вместо:\r\n      \\`\\`\\`css\r\n      .card .title { color: red; }\r\n      \\`\\`\\`\r\n      - Используйте:\r\n      \\`\\`\\`css\r\n      .card__title { color: red; }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100933,\r\n      question: \"Как организовать файловую структуру в BEM?\",\r\n      answer: `\r\n      **Файловая структура BEM:**\r\n      1. **Flat structure (плоская):**\r\n         - Все файлы хранятся в одной директории.\r\n         - Пример: \\`blocks/button.css\\`, \\`blocks/card.css\\`.\r\n      2. **Nested structure (вложенная):**\r\n         - Файлы организованы по уровням вложенности.\r\n         - Пример:\r\n           \\`\\`\\`\r\n           blocks/\r\n             button/\r\n               button.css\r\n               button.js\r\n             card/\r\n               card.css\r\n               card.js\r\n           \\`\\`\\`\r\n\r\n      **Выбор структуры:**\r\n      - Плоская структура проще, но вложенная лучше масштабируется.\r\n      `,\r\n    },\r\n    {\r\n      id: 100934,\r\n      question: \"Как интегрировать BEM с CSS-препроцессорами?\",\r\n      answer: `\r\n      **Интеграция BEM с препроцессорами:**\r\n      - Препроцессоры (например, Sass) позволяют упростить работу с BEM за счет вложенных правил.\r\n\r\n      **Пример с Sass:**\r\n      \\`\\`\\`scss\r\n      .card {\r\n        &__title {\r\n          color: blue;\r\n        }\r\n        &__content {\r\n          padding: 10px;\r\n          &--highlighted {\r\n            background-color: yellow;\r\n          }\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n      - Преобразуется в:\r\n      \\`\\`\\`css\r\n      .card__title { color: blue; }\r\n      .card__content { padding: 10px; }\r\n      .card__content--highlighted { background-color: yellow; }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100935,\r\n      question: \"Какие инструменты поддерживают BEM?\",\r\n      answer: `\r\n      **Инструменты для работы с BEM:**\r\n      1. **BEM Tools:** Утилиты для автоматизации создания и управления BEM-компонентами.\r\n      2. **PostCSS:** Плагины для работы с BEM-классами.\r\n      3. **Sass/Less/Stylus:** Препроцессоры, которые упрощают написание BEM-стилей.\r\n      4. **React/Vue/Angular:** Компоненты можно организовывать по принципам BEM.\r\n\r\n      **Пример:**\r\n      - В React компонент \\`Button\\` может использовать BEM-классы:\r\n      \\`\\`\\`jsx\r\n      import './Button.css';\r\n\r\n      function Button() {\r\n        return <button className=\"button button--primary\">Click me</button>;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testAppSpeedEstimation = {\r\n  id: 101825,\r\n  title: \"Тест по оценке скорости приложения\",\r\n  questions: [\r\n    {\r\n      id: 101826,\r\n      question: \"Что такое производительность приложения?\",\r\n      answer: `\r\n      **Производительность приложения:**\r\n      - Это мера того, насколько быстро и эффективно приложение выполняет свои задачи.\r\n      - Включает такие аспекты, как время загрузки, время отклика, плавность анимаций и использование ресурсов (CPU, RAM).\r\n\r\n      **Ключевые метрики:**\r\n      1. **Время загрузки:** Время, необходимое для полной загрузки приложения.\r\n      2. **Время отклика:** Время, за которое приложение реагирует на действия пользователя.\r\n      3. **FPS (Frames Per Second):** Частота кадров для анимаций и интерфейса.\r\n      4. **Использование памяти:** Объем оперативной памяти, потребляемый приложением.\r\n\r\n      **Пример:**\r\n      - Приложение с временем загрузки менее 2 секунд считается быстрым.\r\n      `,\r\n    },\r\n    {\r\n      id: 101827,\r\n      question:\r\n        \"Какие инструменты используются для оценки скорости веб-приложений?\",\r\n      answer: `\r\n      **Инструменты для оценки скорости:**\r\n      1. **Google Lighthouse:**\r\n         - Инструмент для анализа производительности, доступности и SEO.\r\n      2. **WebPageTest:**\r\n         - Позволяет тестировать скорость загрузки страницы с различных устройств и местоположений.\r\n      3. **Chrome DevTools:**\r\n         - Встроенный инструмент браузера для анализа производительности и использования ресурсов.\r\n      4. **GTmetrix:**\r\n         - Анализирует скорость загрузки и предлагает рекомендации по оптимизации.\r\n      5. **Pingdom:**\r\n         - Измеряет время загрузки и предоставляет детальный отчет.\r\n\r\n      **Пример:**\r\n      - Используйте Google Lighthouse в Chrome DevTools для генерации отчета о производительности.\r\n      `,\r\n    },\r\n    {\r\n      id: 101828,\r\n      question: \"Как оптимизировать скорость загрузки приложения?\",\r\n      answer: `\r\n      **Методы оптимизации:**\r\n      1. **Минификация кода:**\r\n         - Уменьшите размер JavaScript, CSS и HTML файлов.\r\n      2. **Сжатие изображений:**\r\n         - Используйте современные форматы (например, WebP) и сжимайте изображения.\r\n      3. **Использование CDN:**\r\n         - Размещайте статические ресурсы на серверах, близких к пользователям.\r\n      4. **Кэширование:**\r\n         - Используйте браузерное кэширование для повторяющихся запросов.\r\n      5. **Ленивая загрузка (Lazy Loading):**\r\n         - Загружайте только те ресурсы, которые видны пользователю.\r\n      6. **Оптимизация базы данных:**\r\n         - Индексируйте таблицы и минимизируйте количество запросов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <img src=\"image.jpg\" loading=\"lazy\" alt=\"Пример ленивой загрузки\">\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101829,\r\n      question:\r\n        \"Что такое Core Web Vitals и как они влияют на производительность?\",\r\n      answer: `\r\n      **Core Web Vitals:**\r\n      - Это набор метрик, разработанных Google для оценки пользовательского опыта:\r\n        1. **LCP (Largest Contentful Paint):**\r\n           - Время загрузки самого большого элемента на странице.\r\n        2. **FID (First Input Delay):**\r\n           - Время между действием пользователя и реакцией приложения.\r\n        3. **CLS (Cumulative Layout Shift):**\r\n           - Стабильность макета (изменение положения элементов).\r\n\r\n      **Влияние:**\r\n      - Высокие показатели Core Web Vitals улучшают SEO и пользовательский опыт.\r\n\r\n      **Пример:**\r\n      - LCP менее 2.5 секунд считается хорошим показателем.\r\n      `,\r\n    },\r\n    {\r\n      id: 101830,\r\n      question: \"Как уменьшить время отклика сервера (TTFB)?\",\r\n      answer: `\r\n      **Методы уменьшения TTFB (Time to First Byte):**\r\n      1. **Оптимизация серверного кода:**\r\n         - Убедитесь, что сервер обрабатывает запросы максимально быстро.\r\n      2. **Использование кэширования:**\r\n         - Кэшируйте ответы сервера для часто запрашиваемых данных.\r\n      3. **Использование HTTP/2 или HTTP/3:**\r\n         - Ускорьте передачу данных благодаря мультиплексированию.\r\n      4. **Размещение сервера ближе к пользователям:**\r\n         - Используйте CDN для уменьшения задержек.\r\n\r\n      **Пример:**\r\n      - Переход с HTTP/1.1 на HTTP/2 может значительно снизить TTFB.\r\n      `,\r\n    },\r\n    {\r\n      id: 101831,\r\n      question: \"Как влияет JavaScript на производительность приложения?\",\r\n      answer: `\r\n      **Влияние JavaScript:**\r\n      1. **Блокировка рендеринга:**\r\n         - Большой объем JavaScript может замедлить отрисовку страницы.\r\n      2. **Парсинг и выполнение:**\r\n         - Браузер тратит время на парсинг и выполнение JavaScript.\r\n      3. **Перегрузка памяти:**\r\n         - Неправильно написанный код может привести к утечкам памяти.\r\n\r\n      **Оптимизация:**\r\n      - Минифицируйте JavaScript.\r\n      - Используйте \\`defer\\` или \\`async\\` для загрузки скриптов.\r\n      - Разделяйте код на модули.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <script src=\"app.js\" defer></script>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101832,\r\n      question:\r\n        \"Что такое Lazy Loading и как он помогает улучшить производительность?\",\r\n      answer: `\r\n      **Lazy Loading:**\r\n      - Это техника, при которой ресурсы загружаются только тогда, когда они становятся необходимыми (например, когда пользователь прокручивает страницу).\r\n\r\n      **Преимущества:**\r\n      - Уменьшает начальную нагрузку на сеть.\r\n      - Ускоряет первоначальную загрузку страницы.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <img src=\"image.jpg\" loading=\"lazy\" alt=\"Ленивая загрузка изображения\">\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101833,\r\n      question:\r\n        \"Какие методы можно использовать для уменьшения времени отрисовки интерфейса?\",\r\n      answer: `\r\n      **Методы уменьшения времени отрисовки:**\r\n      1. **Виртуализация списка:**\r\n         - Рендерите только видимые элементы списка.\r\n      2. **CSS-оптимизация:**\r\n         - Избегайте сложных селекторов и свойств, таких как \\`box-shadow\\`.\r\n      3. **Асинхронная загрузка:**\r\n         - Загружайте ненужные ресурсы после загрузки основного контента.\r\n      4. **Использование GPU:**\r\n         - Переносите анимации на GPU с помощью свойства \\`transform\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`css\r\n      .element {\r\n        will-change: transform;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101834,\r\n      question:\r\n        \"Что такое Tree Shaking и как он помогает улучшить производительность?\",\r\n      answer: `\r\n      **Tree Shaking:**\r\n      - Это процесс удаления неиспользуемого кода (dead code) во время сборки приложения.\r\n\r\n      **Преимущества:**\r\n      - Уменьшает размер финального пакета.\r\n      - Ускоряет загрузку и выполнение приложения.\r\n\r\n      **Пример:**\r\n      - Используйте инструменты, такие как Webpack или Rollup, для автоматического удаления неиспользуемого кода.\r\n      `,\r\n    },\r\n    {\r\n      id: 101835,\r\n      question:\r\n        \"Какие стратегии кэширования можно использовать для улучшения производительности?\",\r\n      answer: `\r\n      **Стратегии кэширования:**\r\n      1. **Браузерное кэширование:**\r\n         - Настройте заголовки \\`Cache-Control\\` и \\`Expires\\`.\r\n      2. **Service Workers:**\r\n         - Используйте для управления кэшированием и офлайн-доступом.\r\n      3. **CDN-кэширование:**\r\n         - Размещайте статические ресурсы на CDN.\r\n      4. **Server-Side Caching:**\r\n         - Кэшируйте результаты запросов на стороне сервера.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`\r\n      Cache-Control: max-age=3600\r\n      \\`\\`\\`\r\n      - Ресурс будет храниться в кэше 1 час.\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testRouteRef = {\r\n  id: 101725,\r\n  title: \"forwardRef (Перенаправление Ref)\",\r\n  questions: [\r\n    {\r\n      id: 101726,\r\n      question: \"Что такое ForwardRef?\",\r\n      answer: `\r\n      **ForwardRef** — это функция в React, которая позволяет перенаправить \\`ref\\` от родительского компонента к дочернему DOM-узлу или компоненту.\r\n      - Это полезно, когда вы хотите предоставить родительскому компоненту доступ к DOM-элементу или экземпляру дочернего компонента.\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`javascript\r\n      import React, { forwardRef } from 'react';\r\n\r\n      const ChildComponent = forwardRef((props, ref) => {\r\n        return <input type=\"text\" ref={ref} />;\r\n      });\r\n\r\n      function ParentComponent() {\r\n        const inputRef = React.useRef();\r\n\r\n        const focusInput = () => {\r\n          inputRef.current.focus();\r\n        };\r\n\r\n        return (\r\n          <div>\r\n            <ChildComponent ref={inputRef} />\r\n            <button onClick={focusInput}>Фокус на поле ввода</button>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101727,\r\n      question: \"Как перенаправить ref?\",\r\n      answer: `\r\n      **Перенаправление ref:**\r\n      - Используйте \\`React.forwardRef\\`, чтобы передать \\`ref\\` из родительского компонента в дочерний.\r\n      - \\`forwardRef\\` принимает функцию с двумя аргументами: \\`props\\` и \\`ref\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      import React, { forwardRef } from 'react';\r\n\r\n      const Button = forwardRef((props, ref) => {\r\n        return <button ref={ref} {...props} />;\r\n      });\r\n\r\n      function App() {\r\n        const buttonRef = React.useRef();\r\n\r\n        const handleClick = () => {\r\n          buttonRef.current.style.backgroundColor = 'lightblue';\r\n        };\r\n\r\n        return (\r\n          <div>\r\n            <Button ref={buttonRef}>Нажми меня</Button>\r\n            <button onClick={handleClick}>Изменить цвет кнопки</button>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101728,\r\n      question: \"Что возвращает ForwardRef?\",\r\n      answer: `\r\n      **Возвращаемое значение:**\r\n      - \\`forwardRef\\` возвращает React-компонент, который можно использовать в JSX.\r\n      - Этот компонент может принимать \\`ref\\` как пропс, что отличает его от обычных функциональных компонентов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const Input = React.forwardRef((props, ref) => {\r\n        return <input ref={ref} {...props} />;\r\n      });\r\n\r\n      // Использование:\r\n      function Form() {\r\n        const inputRef = React.useRef();\r\n\r\n        return (\r\n          <div>\r\n            <Input ref={inputRef} placeholder=\"Введите текст\" />\r\n            <button onClick={() => inputRef.current.focus()}>\r\n              Фокус на поле ввода\r\n            </button>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101729,\r\n      question: \"Особенности ForwardRef?\",\r\n      answer: `\r\n      **Особенности:**\r\n      1. **Строгий режим:**\r\n         - В строгом режиме (\\`<React.StrictMode>\\`) React вызывает функцию рендеринга дважды для обнаружения побочных эффектов.\r\n         - Это поведение только для разработки и не влияет на производство.\r\n\r\n      2. **Прозрачность:**\r\n         - \\`forwardRef\\` делает \\`ref\\` прозрачным для родительского компонента.\r\n         - Родительский компонент может напрямую взаимодействовать с DOM-элементом или экземпляром дочернего компонента.\r\n\r\n      3. **Использование с HOC:**\r\n         - При использовании с HOC (Higher-Order Components) \\`forwardRef\\` помогает передавать \\`ref\\` через обертку.\r\n\r\n      **Пример с HOC:**\r\n      \\`\\`\\`javascript\r\n      function withLogging(Component) {\r\n        return React.forwardRef((props, ref) => {\r\n          console.log('Рендеринг компонента');\r\n          return <Component {...props} ref={ref} />;\r\n        });\r\n      }\r\n\r\n      const EnhancedButton = withLogging(Button);\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101730,\r\n      question: \"Зачем нужен forwardRef?\",\r\n      answer: `\r\n      **Цели использования:**\r\n      1. **Доступ к DOM-узлам:**\r\n         - Позволяет родительскому компоненту получить доступ к DOM-элементу дочернего компонента (например, для фокусировки или измерения размеров).\r\n\r\n      2. **Работа с сторонними библиотеками:**\r\n         - Упрощает интеграцию с библиотеками, которые требуют доступа к DOM.\r\n\r\n      3. **Создание переиспользуемых компонентов:**\r\n         - Делает компоненты более гибкими, позволяя родителям управлять их внутренними элементами.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      const TextInput = React.forwardRef((props, ref) => {\r\n        return <input type=\"text\" ref={ref} {...props} />;\r\n      });\r\n\r\n      function App() {\r\n        const inputRef = React.useRef();\r\n\r\n        const handleFocus = () => {\r\n          inputRef.current.focus();\r\n        };\r\n\r\n        return (\r\n          <div>\r\n            <TextInput ref={inputRef} placeholder=\"Введите текст\" />\r\n            <button onClick={handleFocus}>Фокус на поле ввода</button>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101731,\r\n      question: \"Можно ли использовать forwardRef с классовыми компонентами?\",\r\n      answer: `\r\n      **Ответ:**\r\n      - Нет, \\`forwardRef\\` работает только с функциональными компонентами.\r\n      - Для классовых компонентов используйте \\`React.createRef\\` или \\`callback-refs\\`.\r\n\r\n      **Пример с классовым компонентом:**\r\n      \\`\\`\\`javascript\r\n      class ClassComponent extends React.Component {\r\n        render() {\r\n          return <input type=\"text\" ref={this.props.innerRef} />;\r\n        }\r\n      }\r\n\r\n      const ForwardedClassComponent = React.forwardRef((props, ref) => {\r\n        return <ClassComponent innerRef={ref} />;\r\n      });\r\n\r\n      function App() {\r\n        const inputRef = React.useRef();\r\n\r\n        const handleFocus = () => {\r\n          inputRef.current.focus();\r\n        };\r\n\r\n        return (\r\n          <div>\r\n            <ForwardedClassComponent ref={inputRef} />\r\n            <button onClick={handleFocus}>Фокус на поле ввода</button>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testUseTSJS = {\r\n  id: 101075,\r\n  title: \"Используем TypeScript\",\r\n  questions: [\r\n    {\r\n      id: 101076,\r\n      question: \"Что такое TypeScript и зачем он нужен?\",\r\n      answer: `\r\n      **TypeScript:**\r\n      - Это строго типизированный язык программирования, который является надмножеством JavaScript.\r\n      - TypeScript добавляет статическую типизацию, что помогает обнаруживать ошибки на этапе разработки, а не во время выполнения.\r\n\r\n      **Преимущества TypeScript:**\r\n      1. **Статическая типизация:** Позволяет явно указывать типы данных, что улучшает читаемость и поддержку кода.\r\n      2. **Поддержка современных стандартов:** TypeScript поддерживает ES6+, включая классы, интерфейсы и декораторы.\r\n      3. **Инструменты разработки:** Лучшая автодополнение и проверка ошибок в редакторах кода (например, VS Code).\r\n      4. **Компиляция в JavaScript:** TypeScript компилируется в чистый JavaScript, совместимый с любыми браузерами.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      function greet(name: string): string {\r\n        return \\`Hello, \\${name}!\\`;\r\n      }\r\n\r\n      console.log(greet(\"Alice\")); // Hello, Alice!\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101077,\r\n      question: \"Как объявить переменные в TypeScript?\",\r\n      answer: `\r\n      **Объявление переменных в TypeScript:**\r\n      - В TypeScript можно использовать ключевые слова \\`let\\`, \\`const\\` и \\`var\\`, как в JavaScript, но с добавлением типов.\r\n\r\n      **Примеры:**\r\n      \\`\\`\\`typescript\r\n      let age: number = 25;\r\n      const name: string = \"Alice\";\r\n      let isActive: boolean = true;\r\n\r\n      // Массивы\r\n      let numbers: number[] = [1, 2, 3];\r\n      let strings: Array<string> = [\"a\", \"b\", \"c\"];\r\n\r\n      // Объединение типов\r\n      let value: string | number = \"text\";\r\n      value = 42;\r\n\r\n      // Any (любой тип)\r\n      let unknownValue: any = \"string\";\r\n      unknownValue = 123;\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101078,\r\n      question: \"Что такое интерфейсы в TypeScript?\",\r\n      answer: `\r\n      **Интерфейсы:**\r\n      - Интерфейсы позволяют определять структуру объектов, функций или классов.\r\n      - Они используются для проверки типов и обеспечивают согласованность данных.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      interface User {\r\n        id: number;\r\n        name: string;\r\n        email?: string; // Необязательное свойство\r\n      }\r\n\r\n      const user: User = {\r\n        id: 1,\r\n        name: \"Alice\",\r\n      };\r\n\r\n      function printUser(user: User): void {\r\n        console.log(\\`ID: \\${user.id}, Name: \\${user.name}\\`);\r\n      }\r\n\r\n      printUser(user);\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101079,\r\n      question: \"Как работают классы в TypeScript?\",\r\n      answer: `\r\n      **Классы:**\r\n      - Классы в TypeScript поддерживают модификаторы доступа (\\`public\\`, \\`private\\`, \\`protected\\`) и прочие возможности ООП.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      class Animal {\r\n        private name: string;\r\n\r\n        constructor(name: string) {\r\n          this.name = name;\r\n        }\r\n\r\n        public speak(): void {\r\n          console.log(\\`\\${this.name} makes a noise.\\`);\r\n        }\r\n      }\r\n\r\n      class Dog extends Animal {\r\n        public speak(): void {\r\n          console.log(\\`\\${this.name} barks.\\`);\r\n        }\r\n      }\r\n\r\n      const dog = new Dog(\"Rex\");\r\n      dog.speak(); // Rex barks.\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101080,\r\n      question: \"Что такое Generics в TypeScript?\",\r\n      answer: `\r\n      **Generics:**\r\n      - Generics позволяют создавать функции, классы или интерфейсы, которые работают с различными типами данных без потери контроля над типами.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      function identity<T>(arg: T): T {\r\n        return arg;\r\n      }\r\n\r\n      const result1 = identity<string>(\"Hello\");\r\n      const result2 = identity<number>(42);\r\n\r\n      console.log(result1); // Hello\r\n      console.log(result2); // 42\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101081,\r\n      question: \"Как использовать Enums в TypeScript?\",\r\n      answer: `\r\n      **Enums:**\r\n      - Enums позволяют определять набор именованных констант.\r\n      - Они могут быть числовыми или строковыми.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      enum Color {\r\n        Red = \"RED\",\r\n        Green = \"GREEN\",\r\n        Blue = \"BLUE\",\r\n      }\r\n\r\n      const selectedColor: Color = Color.Green;\r\n      console.log(selectedColor); // GREEN\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101082,\r\n      question: \"Что такое Union Types в TypeScript?\",\r\n      answer: `\r\n      **Union Types:**\r\n      - Union Types позволяют переменной иметь несколько типов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      function combine(a: number | string, b: number | string): number | string {\r\n        if (typeof a === \"number\" && typeof b === \"number\") {\r\n          return a + b;\r\n        } else {\r\n          return a.toString() + b.toString();\r\n        }\r\n      }\r\n\r\n      console.log(combine(10, 20)); // 30\r\n      console.log(combine(\"Hello, \", \"World!\")); // Hello, World!\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101083,\r\n      question: \"Что такое Type Aliases в TypeScript?\",\r\n      answer: `\r\n      **Type Aliases:**\r\n      - Type Aliases позволяют создавать псевдонимы для типов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`typescript\r\n      type ID = number | string;\r\n\r\n      function printID(id: ID): void {\r\n        console.log(\\`ID: \\${id}\\`);\r\n      }\r\n\r\n      printID(123); // ID: 123\r\n      printID(\"abc\"); // ID: abc\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101084,\r\n      question: \"Что такое Utility Types в TypeScript?\",\r\n      answer: `\r\n      **Utility Types:**\r\n      - Utility Types предоставляют встроенные инструменты для преобразования типов.\r\n\r\n      **Примеры:**\r\n      \\`\\`\\`typescript\r\n      // Partial<T>: Делает все свойства объекта необязательными\r\n      interface Todo {\r\n        title: string;\r\n        description: string;\r\n      }\r\n\r\n      const updateTodo = (todo: Todo, fieldsToUpdate: Partial<Todo>): Todo => {\r\n        return { ...todo, ...fieldsToUpdate };\r\n      };\r\n\r\n      const todo: Todo = { title: \"Learn TypeScript\", description: \"Read the docs\" };\r\n      const updatedTodo = updateTodo(todo, { description: \"Practice coding\" });\r\n\r\n      console.log(updatedTodo);\r\n      // { title: \"Learn TypeScript\", description: \"Practice coding\" }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101085,\r\n      question: \"Как настроить компиляцию TypeScript?\",\r\n      answer: `\r\n      **Настройка компиляции:**\r\n      - Для настройки используется файл \\`tsconfig.json\\`.\r\n      - В этом файле можно указать параметры компиляции, такие как целевая версия JavaScript, включение файлов и другие опции.\r\n\r\n      **Пример \\`tsconfig.json\\`:**\r\n      \\`\\`\\`json\r\n      {\r\n        \"compilerOptions\": {\r\n          \"target\": \"ES6\",\r\n          \"module\": \"commonjs\",\r\n          \"strict\": true,\r\n          \"outDir\": \"./dist\"\r\n        },\r\n        \"include\": [\"src/**/*\"]\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testCSS = {\r\n  id: 101175,\r\n  title: \"CSS\",\r\n  questions: [\r\n    {\r\n      id: 101176,\r\n      question: \"Что такое CSS?\",\r\n      answer: `\r\n      **CSS (Cascading Style Sheets):**\r\n      - Это язык стилей, который используется для описания внешнего вида HTML-документа.\r\n      - CSS определяет, как элементы будут отображаться на экране, бумаге или других устройствах.\r\n\r\n      **Основные функции:**\r\n      1. Оформление текста (шрифты, цвета, размеры).\r\n      2. Расположение элементов на странице (позиционирование, сетки).\r\n      3. Анимации и переходы.\r\n      4. Адаптивный дизайн (медиа-запросы).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`css\r\n      body {\r\n        font-family: Arial, sans-serif;\r\n        background-color: #f0f0f0;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101177,\r\n      question: \"Что означает слово 'каскад' в CSS?\",\r\n      answer: `\r\n      **Каскад:**\r\n      - Это механизм, который определяет, какие стили применяются к элементу, если есть конфликты между правилами.\r\n      - Приоритет определяется по следующим факторам:\r\n        1. Важность (\\`!important\\`).\r\n        2. Специфичность селекторов.\r\n        3. Порядок объявления (последнее правило имеет приоритет).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`css\r\n      p {\r\n        color: blue; /* Применится */\r\n      }\r\n      p {\r\n        color: red; /* Перезапишет предыдущее правило */\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101178,\r\n      question: \"Какая разница между margin и padding?\",\r\n      answer: `\r\n      **Разница:**\r\n      - **Margin:** Внешний отступ, который создает пространство между элементами.\r\n      - **Padding:** Внутренний отступ, который создает пространство внутри элемента между его содержимым и границей.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`css\r\n      .box {\r\n        margin: 20px; /* Отступ снаружи */\r\n        padding: 10px; /* Отступ внутри */\r\n        border: 1px solid black;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101179,\r\n      question: \"Свойство display - основное значение и как оно работает?\",\r\n      answer: `\r\n      **Свойство display:**\r\n      - Определяет, как элемент будет отображаться в документе.\r\n      - Основные значения:\r\n        1. \\`block\\`: Элемент занимает всю доступную ширину.\r\n        2. \\`inline\\`: Элемент занимает только необходимую ширину.\r\n        3. \\`inline-block\\`: Комбинация inline и block.\r\n        4. \\`flex\\`: Создает гибкий контейнер для расположения элементов.\r\n        5. \\`grid\\`: Создает сетку для расположения элементов.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`css\r\n      .container {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101180,\r\n      question: \"Как отцентрировать блок по горизонтали и по вертикали?\",\r\n      answer: `\r\n      **Методы центрирования:**\r\n      1. **Flexbox:**\r\n         - Используйте \\`display: flex\\` с \\`justify-content\\` и \\`align-items\\`.\r\n      2. **Grid:**\r\n         - Используйте \\`display: grid\\` с \\`place-items: center\\`.\r\n      3. **Position + Transform:**\r\n         - Используйте абсолютное позиционирование и трансформацию.\r\n\r\n      **Пример Flexbox:**\r\n      \\`\\`\\`css\r\n      .container {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        height: 100vh;\r\n      }\r\n      \\`\\`\\`\r\n\r\n      **Пример Position + Transform:**\r\n      \\`\\`\\`css\r\n      .centered {\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101181,\r\n      question: \"Что такое inline-стили, и какой они имеют приоритет?\",\r\n      answer: `\r\n      **Inline-стили:**\r\n      - Это стили, которые напрямую добавляются в HTML-элемент через атрибут \\`style\\`.\r\n      - Inline-стили имеют высокий приоритет, но ниже, чем \\`!important\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <div style=\"color: red;\">Текст</div>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101182,\r\n      question: \"Что такое наследование в CSS?\",\r\n      answer: `\r\n      **Наследование:**\r\n      - Некоторые свойства CSS автоматически передаются дочерним элементам.\r\n      - Например, \\`font-family\\`, \\`color\\` и \\`text-align\\` наследуются.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`css\r\n      body {\r\n        color: blue;\r\n      }\r\n      /* Все дочерние элементы будут иметь синий цвет текста */\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101183,\r\n      question: \"Какими способами можно скрыть элемент?\",\r\n      answer: `\r\n      **Способы скрытия элемента:**\r\n      1. \\`display: none;\\`: Удаляет элемент из потока документа.\r\n      2. \\`visibility: hidden;\\`: Скрывает элемент, но он остается в потоке.\r\n      3. \\`opacity: 0;\\`: Делает элемент невидимым, но он остается интерактивным.\r\n      4. \\`position: absolute; left: -9999px;\\`: Перемещает элемент за пределы экрана.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`css\r\n      .hidden {\r\n        display: none;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101184,\r\n      question: \"Что необходимо указать в CSS для срабатывания медиа-запросов?\",\r\n      answer: `\r\n      **Медиа-запросы:**\r\n      - Это правила, которые применяются в зависимости от характеристик устройства (например, ширины экрана).\r\n      - Для создания медиа-запроса используйте \\`@media\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`css\r\n      @media (max-width: 768px) {\r\n        body {\r\n          background-color: lightblue;\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101185,\r\n      question: \"Что такое псевдоклассы и псевдоэлементы в CSS?\",\r\n      answer: `\r\n      **Псевдоклассы:**\r\n      - Определяют состояние элемента (например, \\`hover\\`, \\`focus\\`).\r\n      - Пример: \\`a:hover { color: red; }\\`.\r\n\r\n      **Псевдоэлементы:**\r\n      - Позволяют стилизовать определенные части элемента (например, \\`::before\\`, \\`::after\\`).\r\n      - Пример:\r\n      \\`\\`\\`css\r\n      p::first-line {\r\n        font-weight: bold;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testSelectorsCSS = {\r\n  id: 101275,\r\n  title: \"Selectors types, Selector weight, styles that are inherited\",\r\n  questions: [\r\n    {\r\n      id: 101276,\r\n      question: \"Что такое селекторы в CSS и для чего они используются?\",\r\n      answer: `\r\n**Селекторы в CSS:**\r\n- Это шаблоны, которые определяют, к каким элементам HTML применяются стили.\r\n- Используются для выбора элементов на основе их тегов, классов, идентификаторов, атрибутов или состояний.\r\n\r\n**Примеры:**\r\n\\`\\`\\`css\r\n/* Выбор по тегу */\r\np { color: red; }\r\n\r\n/* Выбор по классу */\r\n.button { background-color: blue; }\r\n\r\n/* Выбор по ID */\r\n#header { font-size: 24px; }\r\n\\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101277,\r\n      question:\r\n        \"Объясните, как работает вес селекторов в CSS и как он влияет на применение стилей.\",\r\n      answer: `\r\n**Вес селекторов (Specificity):**\r\n- Это правило, которое определяет, какой стиль будет применён, если к одному элементу подходят несколько CSS-правил.\r\n- Чем выше вес, тем приоритетнее стиль.\r\n\r\n**Порядок вычисления веса:**\r\n1. \\`!important\\`: Наивысший приоритет.\r\n2. Inline-стили: Вес = 1000.\r\n3. ID-селекторы: Вес = 100.\r\n4. Классы, атрибуты, псевдоклассы: Вес = 10.\r\n5. Теги и псевдоэлементы: Вес = 1.\r\n6. Универсальный селектор (\\`*\\`) и унаследованные стили: Вес = 0.\r\n\r\n**Пример:**\r\n\\`\\`\\`css\r\n/* Селектор с весом 1 (тег) */\r\ndiv { color: red; }\r\n\r\n/* Селектор с весом 10 (класс) */\r\n.highlight { color: blue; }\r\n\r\n/* Селектор с весом 100 (ID) */\r\n#unique { color: green; }\r\n\\`\\`\\`\r\n\r\nЕсли правила конфликтуют, применяется правило с наибольшим весом.\r\n      `,\r\n    },\r\n    {\r\n      id: 101278,\r\n      question:\r\n        \"Как наследование CSS стилей работает в контексте специфичности и весов селекторов? Приведите примеры.\",\r\n      answer: `\r\n**Наследование:**\r\n- Некоторые CSS-свойства (например, \\`color\\`, \\`font-family\\`) автоматически наследуются дочерними элементами.\r\n- Унаследованные стили имеют низкий вес (0) и перекрываются явными правилами.\r\n\r\n**Пример:**\r\n\\`\\`\\`css\r\nbody {\r\n  color: blue;\r\n}\r\n\r\n* {\r\n  color: black;\r\n}\r\n\r\n<div>\r\n  <p>Text</p> <!-- Цвет текста: black -->\r\n</div>\r\n\\`\\`\\`\r\n- \\`body { color: blue; }\\` наследуется, но перекрывается универсальным селектором \\`*\\`.\r\n      `,\r\n    },\r\n    {\r\n      id: 101279,\r\n      question: \"Какие селекторы знаешь?\",\r\n      answer: `\r\n**Основные типы селекторов:**\r\n1. **Теговые селекторы:** Выбирают элементы по имени тега.\r\n   \\`\\`\\`css\r\n   div { color: red; }\r\n   \\`\\`\\`\r\n2. **Классовые селекторы:** Выбирают элементы по атрибуту \\`class\\`.\r\n   \\`\\`\\`css\r\n   .button { background-color: blue; }\r\n   \\`\\`\\`\r\n3. **ID-селекторы:** Выбирают элементы по атрибуту \\`id\\`.\r\n   \\`\\`\\`css\r\n   #header { font-size: 24px; }\r\n   \\`\\`\\`\r\n4. **Атрибутные селекторы:** Выбирают элементы по значению атрибута.\r\n   \\`\\`\\`css\r\n   input[type=\"text\"] { border: 1px solid black; }\r\n   \\`\\`\\`\r\n5. **Псевдоклассы:** Выбирают элементы в определённых состояниях.\r\n   \\`\\`\\`css\r\n   a:hover { color: red; }\r\n   \\`\\`\\`\r\n6. **Псевдоэлементы:** Выбирают части элемента.\r\n   \\`\\`\\`css\r\n   p::first-line { font-weight: bold; }\r\n   \\`\\`\\`\r\n7. **Универсальный селектор (\\`*\\`):** Выбирает все элементы.\r\n   \\`\\`\\`css\r\n   * { margin: 0; padding: 0; }\r\n   \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101280,\r\n      question: \"Что такое псевдоклассы?\",\r\n      answer: `\r\n**Псевдоклассы:**\r\n- Это ключевые слова, добавляемые к селекторам, чтобы указать состояние элемента.\r\n\r\n**Примеры:**\r\n\\`\\`\\`css\r\n/* Элемент при наведении */\r\na:hover { color: red; }\r\n\r\n/* Первый дочерний элемент */\r\nli:first-child { font-weight: bold; }\r\n\r\n/* Элемент при фокусе */\r\ninput:focus { border-color: blue; }\r\n\\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101281,\r\n      question: \"Что ты знаешь про специфичность селекторов?\",\r\n      answer: `\r\n**Специфичность селекторов:**\r\n- Определяет, какой стиль будет применён, если к одному элементу подходят несколько правил.\r\n- Вычисляется по следующей формуле:\r\n  1. \\`!important\\`: Наивысший приоритет.\r\n  2. Inline-стили: Вес = 1000.\r\n  3. ID-селекторы: Вес = 100.\r\n  4. Классы, атрибуты, псевдоклассы: Вес = 10.\r\n  5. Теги и псевдоэлементы: Вес = 1.\r\n  6. Универсальный селектор (\\`*\\`) и унаследованные стили: Вес = 0.\r\n\r\n**Пример:**\r\n\\`\\`\\`css\r\n/* Селектор с весом 11 (1 класс + 1 тег) */\r\n.button p { color: green; }\r\n\r\n/* Селектор с весом 100 (1 ID) */\r\n#unique { color: red; }\r\n\\`\\`\\`\r\n- Если оба правила применяются к одному элементу, стиль с ID-селектором будет использован, так как его вес выше.\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testEnum = {\r\n  id: 102025,\r\n  title: \"Enum\",\r\n  questions: [\r\n    {\r\n      id: 102026,\r\n      question: \"Что такое enum?\",\r\n      answer: `\r\n**Enum (перечисление):**\r\n- Это специальный тип данных в TypeScript, который позволяет определить набор именованных констант.\r\n- Enum помогает сделать код более читаемым и поддерживаемым, предоставляя четкие имена для фиксированного набора значений.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nenum Colors {\r\n  Red = \"RED\",\r\n  Green = \"GREEN\",\r\n  Blue = \"BLUE\",\r\n}\r\n\r\nconsole.log(Colors.Red); // \"RED\"\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102027,\r\n      question: \"Какие бывают типы enum?\",\r\n      answer: `\r\n**Типы enum:**\r\n1. **Числовые enum (numeric enums):**\r\n   - Значения автоматически присваиваются числами, начиная с 0.\r\n   \\`\\`\\`typescript\r\n   enum Directions {\r\n     Up, // 0\r\n     Down, // 1\r\n     Left, // 2\r\n     Right, // 3\r\n   }\r\n   console.log(Directions.Up); // 0\r\n   \\`\\`\\`\r\n\r\n2. **Строковые enum (string enums):**\r\n   - Значения явно задаются строками.\r\n   \\`\\`\\`typescript\r\n   enum Status {\r\n     Active = \"ACTIVE\",\r\n     Inactive = \"INACTIVE\",\r\n     Pending = \"PENDING\",\r\n   }\r\n   console.log(Status.Active); // \"ACTIVE\"\r\n   \\`\\`\\`\r\n\r\n3. **Смешанные enum (heterogeneous enums):**\r\n   - Может содержать как числовые, так и строковые значения.\r\n   \\`\\`\\`typescript\r\n   enum Mixed {\r\n     No = 0,\r\n     Yes = \"YES\",\r\n   }\r\n   console.log(Mixed.No); // 0\r\n   console.log(Mixed.Yes); // \"YES\"\r\n   \\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102028,\r\n      question: \"Зачем использовать enum?\",\r\n      answer: `\r\n**Преимущества enum:**\r\n1. **Читаемость:** Именованные константы делают код более понятным.\r\n2. **Безопасность типов:** TypeScript проверяет, что используются только допустимые значения.\r\n3. **Удобство поддержки:** Изменение значений в одном месте (в enum) автоматически отразится во всем коде.\r\n\r\n**Пример использования:**\r\n\\`\\`\\`typescript\r\nenum Roles {\r\n  Admin = \"ADMIN\",\r\n  Editor = \"EDITOR\",\r\n  Viewer = \"VIEWER\",\r\n}\r\n\r\nfunction checkAccess(role: Roles): void {\r\n  if (role === Roles.Admin) {\r\n    console.log(\"Full access granted\");\r\n  } else {\r\n    console.log(\"Limited access\");\r\n  }\r\n}\r\n\r\ncheckAccess(Roles.Admin); // \"Full access granted\"\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102029,\r\n      question: \"Как получить значение из enum по ключу?\",\r\n      answer: `\r\n**Получение значения по ключу:**\r\n- Можно получить значение enum, используя ключ.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nenum Colors {\r\n  Red = \"RED\",\r\n  Green = \"GREEN\",\r\n  Blue = \"BLUE\",\r\n}\r\n\r\nconsole.log(Colors[\"Red\"]); // \"RED\"\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102030,\r\n      question: \"Как получить ключ из enum по значению?\",\r\n      answer: `\r\n**Получение ключа по значению:**\r\n- Можно получить ключ enum, используя значение.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nenum Colors {\r\n  Red = \"RED\",\r\n  Green = \"GREEN\",\r\n  Blue = \"BLUE\",\r\n}\r\n\r\nconst key = Object.keys(Colors).find((k) => Colors[k as keyof typeof Colors] === \"RED\");\r\nconsole.log(key); // \"Red\"\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102031,\r\n      question: \"Как работает обратное отображение в числовых enum?\",\r\n      answer: `\r\n**Обратное отображение:**\r\n- В числовых enum можно получить ключ по значению благодаря автоматическому обратному отображению.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nenum Directions {\r\n  Up = 1,\r\n  Down,\r\n  Left,\r\n  Right,\r\n}\r\n\r\nconsole.log(Directions[1]); // \"Up\"\r\nconsole.log(Directions[2]); // \"Down\"\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102032,\r\n      question: \"Можно ли использовать функции внутри enum?\",\r\n      answer: `\r\n**Нет, нельзя:**\r\n- Enum не поддерживают использование функций или вычисляемых значений напрямую.\r\n- Однако можно использовать выражения, которые вычисляются на этапе компиляции.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nenum Calculation {\r\n  A = 10,\r\n  B = A * 2, // Допустимо\r\n}\r\nconsole.log(Calculation.B); // 20\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102033,\r\n      question: \"Как преобразовать enum в массив?\",\r\n      answer: `\r\n**Преобразование enum в массив:**\r\n- Для строковых enum можно использовать \\`Object.keys()\\` или \\`Object.values()\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nenum Colors {\r\n  Red = \"RED\",\r\n  Green = \"GREEN\",\r\n  Blue = \"BLUE\",\r\n}\r\n\r\nconst keys = Object.keys(Colors);\r\nconst values = Object.values(Colors);\r\n\r\nconsole.log(keys); // [\"Red\", \"Green\", \"Blue\"]\r\nconsole.log(values); // [\"RED\", \"GREEN\", \"BLUE\"]\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102034,\r\n      question: \"Как использовать enum в switch-case?\",\r\n      answer: `\r\n**Использование enum в switch-case:**\r\n- Enum удобно использовать в конструкции \\`switch-case\\`, чтобы обрабатывать различные варианты.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nenum Actions {\r\n  Start = \"START\",\r\n  Stop = \"STOP\",\r\n  Pause = \"PAUSE\",\r\n}\r\n\r\nfunction handleAction(action: Actions): void {\r\n  switch (action) {\r\n    case Actions.Start:\r\n      console.log(\"Action: Start\");\r\n      break;\r\n    case Actions.Stop:\r\n      console.log(\"Action: Stop\");\r\n      break;\r\n    case Actions.Pause:\r\n      console.log(\"Action: Pause\");\r\n      break;\r\n    default:\r\n      console.log(\"Unknown action\");\r\n  }\r\n}\r\n\r\nhandleAction(Actions.Start); // \"Action: Start\"\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102035,\r\n      question: \"Какой альтернативой может быть enum?\",\r\n      answer: `\r\n**Альтернативы enum:**\r\n1. **Объекты:**\r\n   - Можно использовать обычные объекты для хранения констант.\r\n   \\`\\`\\`typescript\r\n   const Colors = {\r\n     Red: \"RED\",\r\n     Green: \"GREEN\",\r\n     Blue: \"BLUE\",\r\n   } as const;\r\n\r\n   console.log(Colors.Red); // \"RED\"\r\n   \\`\\`\\`\r\n\r\n2. **Union Types:**\r\n   - Можно использовать объединение литеральных типов.\r\n   \\`\\`\\`typescript\r\n   type Colors = \"RED\" | \"GREEN\" | \"BLUE\";\r\n\r\n   function setColor(color: Colors): void {\r\n     console.log(color);\r\n   }\r\n\r\n   setColor(\"RED\"); // \"RED\"\r\n   \\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testGitFlow = {\r\n  id: 101050,\r\n  title: \"Git Flow\",\r\n  questions: [\r\n    {\r\n      id: 101051,\r\n      question: \"Что такое Git Flow и зачем он нужен?\",\r\n      answer: `\r\n      **Git Flow:**\r\n      - Это соглашение (workflow) для управления ветками в Git, которое помогает организовать процесс разработки программного обеспечения.\r\n      - Основная цель — упростить совместную работу над проектом, четко разделяя этапы разработки.\r\n\r\n      **Основные ветки:**\r\n      1. **main/master:** Ветка с готовым к выпуску кодом.\r\n      2. **develop:** Основная ветка для текущей разработки.\r\n      3. **feature:** Ветки для новых функций.\r\n      4. **release:** Подготовка к выпуску новой версии.\r\n      5. **hotfix:** Исправление критических ошибок в production.\r\n\r\n      **Преимущества:**\r\n      - Четкое разделение задач между командами.\r\n      - Упрощение выпуска новых версий.\r\n      - Минимизация конфликтов при совместной работе.\r\n      `,\r\n    },\r\n    {\r\n      id: 101052,\r\n      question: \"Как работают ветки в Git Flow?\",\r\n      answer: `\r\n      **Работа с ветками:**\r\n      1. **main/master:**\r\n         - Содержит только стабильный код, готовый к выпуску.\r\n         - Обновляется только через слияние веток \\`release\\` или \\`hotfix\\`.\r\n\r\n      2. **develop:**\r\n         - Основная ветка для текущей разработки.\r\n         - Все новые функции из \\`feature\\` веток сливаются сюда.\r\n\r\n      3. **feature:**\r\n         - Создаются для разработки новых функций.\r\n         - Название ветки обычно начинается с \\`feature/\\`.\r\n         - После завершения работы сливаются в \\`develop\\`.\r\n\r\n      4. **release:**\r\n         - Создается для подготовки нового релиза.\r\n         - В этой ветке исправляются мелкие баги и обновляется документация.\r\n         - После завершения работы сливаются в \\`main\\` и \\`develop\\`.\r\n\r\n      5. **hotfix:**\r\n         - Создается для быстрого исправления критических ошибок в production.\r\n         - После завершения работы сливаются в \\`main\\` и \\`develop\\`.\r\n\r\n      **Пример создания ветки feature:**\r\n      \\`\\`\\`bash\r\n      git checkout develop\r\n      git checkout -b feature/new-feature\r\n      # Разработка...\r\n      git checkout develop\r\n      git merge feature/new-feature\r\n      git branch -d feature/new-feature\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101053,\r\n      question: \"Как создать новую ветку feature в Git Flow?\",\r\n      answer: `\r\n      **Создание ветки feature:**\r\n      1. Переключитесь на ветку \\`develop\\`:\r\n         \\`\\`\\`bash\r\n         git checkout develop\r\n         \\`\\`\\`\r\n      2. Создайте новую ветку для функции:\r\n         \\`\\`\\`bash\r\n         git checkout -b feature/new-feature\r\n         \\`\\`\\`\r\n      3. После завершения разработки слейте её обратно в \\`develop\\`:\r\n         \\`\\`\\`bash\r\n         git checkout develop\r\n         git merge feature/new-feature\r\n         git branch -d feature/new-feature\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101054,\r\n      question: \"Как подготовить релиз с использованием Git Flow?\",\r\n      answer: `\r\n      **Подготовка релиза:**\r\n      1. Создайте ветку \\`release\\` из \\`develop\\`:\r\n         \\`\\`\\`bash\r\n         git checkout develop\r\n         git checkout -b release/1.0.0\r\n         \\`\\`\\`\r\n      2. Исправьте мелкие баги и обновите документацию.\r\n      3. После завершения подготовки слейте ветку \\`release\\` в \\`main\\` и \\`develop\\`:\r\n         \\`\\`\\`bash\r\n         git checkout main\r\n         git merge release/1.0.0\r\n         git tag -a v1.0.0 -m \"Release version 1.0.0\"\r\n\r\n         git checkout develop\r\n         git merge release/1.0.0\r\n         git branch -d release/1.0.0\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101055,\r\n      question: \"Как исправить критическую ошибку с помощью hotfix в Git Flow?\",\r\n      answer: `\r\n      **Исправление hotfix:**\r\n      1. Создайте ветку \\`hotfix\\` из \\`main\\`:\r\n         \\`\\`\\`bash\r\n         git checkout main\r\n         git checkout -b hotfix/1.0.1\r\n         \\`\\`\\`\r\n      2. Исправьте ошибку и протестируйте изменения.\r\n      3. После завершения исправлений слейте ветку \\`hotfix\\` в \\`main\\` и \\`develop\\`:\r\n         \\`\\`\\`bash\r\n         git checkout main\r\n         git merge hotfix/1.0.1\r\n         git tag -a v1.0.1 -m \"Hotfix version 1.0.1\"\r\n\r\n         git checkout develop\r\n         git merge hotfix/1.0.1\r\n         git branch -d hotfix/1.0.1\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101056,\r\n      question: \"Какие преимущества у Git Flow?\",\r\n      answer: `\r\n      **Преимущества Git Flow:**\r\n      1. **Четкая структура:** Каждая ветка имеет четкое назначение.\r\n      2. **Удобство выпуска релизов:** Подготовка релизов происходит в отдельной ветке.\r\n      3. **Быстрые исправления:** Hotfix-ветки позволяют быстро устранять критические ошибки.\r\n      4. **Минимизация конфликтов:** Разделение задач снижает вероятность конфликтов при слиянии.\r\n      5. **Поддержка долгосрочных проектов:** Хорошо подходит для крупных проектов с регулярными релизами.\r\n      `,\r\n    },\r\n    {\r\n      id: 101057,\r\n      question: \"Какие недостатки у Git Flow?\",\r\n      answer: `\r\n      **Недостатки Git Flow:**\r\n      1. **Сложность для маленьких проектов:** Может быть избыточным для небольших команд или простых проектов.\r\n      2. **Много веток:** Большое количество веток может усложнить управление.\r\n      3. **Дополнительные шаги:** Требует больше операций слияния и переключения между ветками.\r\n      4. **Не подходит для CI/CD:** Модель плохо сочетается с непрерывной интеграцией и доставкой.\r\n      `,\r\n    },\r\n    {\r\n      id: 101058,\r\n      question: \"В чем разница между Git Flow и GitHub Flow?\",\r\n      answer: `\r\n      **Разница между Git Flow и GitHub Flow:**\r\n      1. **Git Flow:**\r\n         - Ориентирован на проекты с регулярными релизами.\r\n         - Использует несколько типов веток (\\`feature\\`, \\`release\\`, \\`hotfix\\`).\r\n\r\n      2. **GitHub Flow:**\r\n         - Простая модель для непрерывной доставки.\r\n         - Основана на ветках \\`main\\` и \\`feature\\`.\r\n         - Каждая ветка должна быть готова к выпуску после проверки.\r\n\r\n      **Выбор модели:**\r\n      - Git Flow подходит для крупных проектов с плановыми релизами.\r\n      - GitHub Flow лучше для небольших проектов и команд, работающих в режиме CI/CD.\r\n      `,\r\n    },\r\n    {\r\n      id: 101059,\r\n      question: \"Как создать тег для релиза в Git Flow?\",\r\n      answer: `\r\n      **Создание тега для релиза:**\r\n      1. Переключитесь на ветку \\`main\\`:\r\n         \\`\\`\\`bash\r\n         git checkout main\r\n         \\`\\`\\`\r\n      2. Создайте аннотированный тег:\r\n         \\`\\`\\`bash\r\n         git tag -a v1.0.0 -m \"Release version 1.0.0\"\r\n         \\`\\`\\`\r\n      3. Отправьте тег в удаленный репозиторий:\r\n         \\`\\`\\`bash\r\n         git push origin v1.0.0\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101060,\r\n      question: \"Как откатить изменения в Git Flow?\",\r\n      answer: `\r\n      **Откат изменений:**\r\n      1. **Откат коммита:**\r\n         - Если нужно отменить последний коммит:\r\n         \\`\\`\\`bash\r\n         git reset --hard HEAD~1\r\n         \\`\\`\\`\r\n      2. **Откат слияния:**\r\n         - Если нужно отменить слияние:\r\n         \\`\\`\\`bash\r\n         git revert -m 1 <commit-hash>\r\n         \\`\\`\\`\r\n      3. **Откат релиза:**\r\n         - Если релиз содержит ошибки, можно создать hotfix или откатить тег:\r\n         \\`\\`\\`bash\r\n         git tag -d v1.0.0\r\n         git push origin :refs/tags/v1.0.0\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testTypeGuards = {\r\n  id: 102050,\r\n  title: \"Type Guards\",\r\n  questions: [\r\n    {\r\n      id: 102051,\r\n      question: \"Что такое type guards?\",\r\n      answer: `\r\n**Type Guards (Защитники типов):**\r\n- Это техника в TypeScript, которая позволяет сузить тип переменной внутри условного блока.\r\n- Type Guards помогают TypeScript определить, какой именно тип данных используется в конкретный момент.\r\n\r\n**Основные типы Type Guards:**\r\n1. **typeof:** Проверяет примитивные типы (например, \\`string\\`, \\`number\\`, \\`boolean\\`).\r\n   \\`\\`\\`typescript\r\n   function printId(id: string | number): void {\r\n     if (typeof id === \"string\") {\r\n       console.log(\\`ID as string: \\${id.toUpperCase()}\\`);\r\n     } else {\r\n       console.log(\\`ID as number: \\${id.toFixed(2)}\\`);\r\n     }\r\n   }\r\n   \\`\\`\\`\r\n\r\n2. **instanceof:** Проверяет, принадлежит ли объект к определенному классу.\r\n   \\`\\`\\`typescript\r\n   class Car {\r\n     drive() {\r\n       console.log(\"Driving a car\");\r\n     }\r\n   }\r\n\r\n   class Bike {\r\n     ride() {\r\n       console.log(\"Riding a bike\");\r\n     }\r\n   }\r\n\r\n   function move(vehicle: Car | Bike): void {\r\n     if (vehicle instanceof Car) {\r\n       vehicle.drive();\r\n     } else {\r\n       vehicle.ride();\r\n     }\r\n   }\r\n   \\`\\`\\`\r\n\r\n3. **in:** Проверяет наличие свойства в объекте.\r\n   \\`\\`\\`typescript\r\n   interface Bird {\r\n     fly: () => void;\r\n   }\r\n\r\n   interface Fish {\r\n     swim: () => void;\r\n   }\r\n\r\n   function move(animal: Bird | Fish): void {\r\n     if (\"fly\" in animal) {\r\n       animal.fly();\r\n     } else {\r\n       animal.swim();\r\n     }\r\n   }\r\n   \\`\\`\\`\r\n\r\n4. **Пользовательские Type Guards:** Функции, которые возвращают \\`arg is Type\\`.\r\n   \\`\\`\\`typescript\r\n   function isString(value: any): value is string {\r\n     return typeof value === \"string\";\r\n   }\r\n\r\n   function processInput(input: string | number): void {\r\n     if (isString(input)) {\r\n       console.log(\\`Input is a string: \\${input.toUpperCase()}\\`);\r\n     } else {\r\n       console.log(\\`Input is a number: \\${input.toFixed(2)}\\`);\r\n     }\r\n   }\r\n   \\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102052,\r\n      question: \"Как работает оператор typeof в TypeScript?\",\r\n      answer: `\r\n**Оператор typeof:**\r\n- Используется для проверки примитивных типов данных.\r\n- Возвращает строку с типом значения.\r\n\r\n**Поддерживаемые типы:**\r\n- \\`\"string\"\\`\r\n- \\`\"number\"\\`\r\n- \\`\"boolean\"\\`\r\n- \\`\"undefined\"\\`\r\n- \\`\"object\"\\`\r\n- \\`\"function\"\\`\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nfunction printType(value: string | number): void {\r\n  if (typeof value === \"string\") {\r\n    console.log(\\`Значение является строкой: \\${value.toUpperCase()}\\`);\r\n  } else {\r\n    console.log(\\`Значение является числом: \\${value.toFixed(2)}\\`);\r\n  }\r\n}\r\n\r\nprintType(\"Hello\"); // Значение является строкой: HELLO\r\nprintType(42); // Значение является числом: 42.00\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102053,\r\n      question: \"Как работает оператор instanceof в TypeScript?\",\r\n      answer: `\r\n**Оператор instanceof:**\r\n- Проверяет, принадлежит ли объект к определенному классу или конструктору.\r\n- Используется для сложных типов данных.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nclass Animal {\r\n  name: string;\r\n  constructor(name: string) {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nclass Dog extends Animal {\r\n  bark() {\r\n    console.log(\"Woof!\");\r\n  }\r\n}\r\n\r\nclass Cat extends Animal {\r\n  meow() {\r\n    console.log(\"Meow!\");\r\n  }\r\n}\r\n\r\nfunction makeSound(animal: Animal): void {\r\n  if (animal instanceof Dog) {\r\n    animal.bark();\r\n  } else if (animal instanceof Cat) {\r\n    animal.meow();\r\n  } else {\r\n    console.log(\"Unknown animal\");\r\n  }\r\n}\r\n\r\nconst dog = new Dog(\"Rex\");\r\nconst cat = new Cat(\"Milo\");\r\n\r\nmakeSound(dog); // Woof!\r\nmakeSound(cat); // Meow!\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102054,\r\n      question: \"Как использовать оператор in для проверки типа?\",\r\n      answer: `\r\n**Оператор in:**\r\n- Проверяет, существует ли свойство в объекте.\r\n- Полезен для различения объектов с разными интерфейсами.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\ninterface Bird {\r\n  fly: () => void;\r\n}\r\n\r\ninterface Fish {\r\n  swim: () => void;\r\n}\r\n\r\nfunction move(animal: Bird | Fish): void {\r\n  if (\"fly\" in animal) {\r\n    animal.fly();\r\n  } else {\r\n    animal.swim();\r\n  }\r\n}\r\n\r\nconst bird: Bird = { fly: () => console.log(\"Flying!\") };\r\nconst fish: Fish = { swim: () => console.log(\"Swimming!\") };\r\n\r\nmove(bird); // Flying!\r\nmove(fish); // Swimming!\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102055,\r\n      question: \"Что такое пользовательские Type Guards?\",\r\n      answer: `\r\n**Пользовательские Type Guards:**\r\n- Это функции, которые возвращают булево значение и используют сигнатуру \\`arg is Type\\`.\r\n- TypeScript использует эти функции для сужения типов.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\ninterface Circle {\r\n  kind: \"circle\";\r\n  radius: number;\r\n}\r\n\r\ninterface Square {\r\n  kind: \"square\";\r\n  side: number;\r\n}\r\n\r\nfunction isCircle(shape: Circle | Square): shape is Circle {\r\n  return (shape as Circle).radius !== undefined;\r\n}\r\n\r\nfunction calculateArea(shape: Circle | Square): number {\r\n  if (isCircle(shape)) {\r\n    return Math.PI * shape.radius ** 2;\r\n  } else {\r\n    return shape.side ** 2;\r\n  }\r\n}\r\n\r\nconst circle: Circle = { kind: \"circle\", radius: 5 };\r\nconst square: Square = { kind: \"square\", side: 4 };\r\n\r\nconsole.log(calculateArea(circle)); // 78.54\r\nconsole.log(calculateArea(square)); // 16\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testE2E = {\r\n  id: 102075,\r\n  title: \"E2E тесты\",\r\n  questions: [\r\n    {\r\n      id: 102076,\r\n      question: \"Что такое E2E тесты?\",\r\n      answer: `\r\n**E2E (End-to-End) тесты:**\r\n- Это тестирование всего приложения целиком, симулируя действия реального пользователя.\r\n- Проверяется работа системы от начала до конца, включая взаимодействие между компонентами, API и базами данных.\r\n\r\n**Основные характеристики:**\r\n1. **Полное покрытие:** Проверяется вся система, а не только отдельные модули.\r\n2. **Имитация действий пользователя:** Тесты воспроизводят клики, ввод данных, навигацию и другие пользовательские действия.\r\n3. **Автоматизация:** Используются инструменты для автоматизации тестов, чтобы ускорить выполнение и минимизировать ошибки.\r\n\r\n**Пример (Cypress):**\r\n\\`\\`\\`javascript\r\ndescribe('Login Flow', () => {\r\n  it('logs in successfully', () => {\r\n    cy.visit('/login');\r\n    cy.get('input[name=\"username\"]').type('user');\r\n    cy.get('input[name=\"password\"]').type('password');\r\n    cy.get('button[type=\"submit\"]').click();\r\n    cy.url().should('include', '/dashboard');\r\n  });\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102077,\r\n      question: \"Какие инструменты используются для написания E2E тестов?\",\r\n      answer: `\r\n**Популярные инструменты для E2E тестирования:**\r\n1. **Cypress:**\r\n   - Современный фреймворк для тестирования веб-приложений.\r\n   - Простой в настройке и использовании.\r\n2. **Selenium:**\r\n   - Универсальный инструмент для автоматизации браузеров.\r\n   - Поддерживает множество языков программирования.\r\n3. **Playwright:**\r\n   - Инструмент для автоматизации тестирования веб-приложений.\r\n   - Поддерживает работу с несколькими браузерами (Chrome, Firefox, WebKit).\r\n4. **Puppeteer:**\r\n   - Библиотека для управления браузером Chrome через JavaScript.\r\n   - Хорошо подходит для скриншотного тестирования и генерации PDF.\r\n5. **TestCafe:**\r\n   - Фреймворк для автоматизации тестирования веб-приложений.\r\n   - Не требует дополнительных драйверов для работы с браузерами.\r\n\r\n**Пример (Playwright):**\r\n\\`\\`\\`javascript\r\nconst { test, expect } = require('@playwright/test');\r\n\r\ntest('Login test', async ({ page }) => {\r\n  await page.goto('https://example.com/login ');\r\n  await page.fill('input[name=\"username\"]', 'user');\r\n  await page.fill('input[name=\"password\"]', 'password');\r\n  await page.click('button[type=\"submit\"]');\r\n  await expect(page).toHaveURL('https://example.com/dashboard ');\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102078,\r\n      question: \"Зачем нужны E2E тесты?\",\r\n      answer: `\r\n**Цели E2E тестирования:**\r\n1. **Обеспечение качества:**\r\n   - Проверка работоспособности приложения в реальных условиях.\r\n2. **Раннее обнаружение ошибок:**\r\n   - Выявление проблем, которые могут возникнуть при взаимодействии различных компонентов.\r\n3. **Снижение рисков:**\r\n   - Минимизация вероятности критических ошибок после релиза.\r\n4. **Упрощение регрессионного тестирования:**\r\n   - Автоматизация позволяет быстро проверять функциональность после изменений в коде.\r\n\r\n**Пример использования:**\r\n- Проверка логина пользователя, перехода по ссылкам, отправки форм и других ключевых сценариев.\r\n`,\r\n    },\r\n    {\r\n      id: 102079,\r\n      question: \"Какие этапы включает процесс E2E тестирования?\",\r\n      answer: `\r\n**Этапы E2E тестирования:**\r\n1. **Подготовка тестового окружения:**\r\n   - Настройка среды (браузеры, базы данных, API).\r\n2. **Определение тестовых сценариев:**\r\n   - Описание ключевых пользовательских сценариев (например, регистрация, покупка товара).\r\n3. **Написание тестов:**\r\n   - Создание скриптов для автоматизации сценариев.\r\n4. **Выполнение тестов:**\r\n   - Запуск тестов в автоматическом режиме.\r\n5. **Анализ результатов:**\r\n   - Проверка отчетов и исправление выявленных ошибок.\r\n6. **Поддержка тестов:**\r\n   - Обновление тестов при изменении функциональности.\r\n\r\n**Пример:**\r\n- Тестирование формы регистрации:\r\n  1. Открыть страницу регистрации.\r\n  2. Ввести данные пользователя.\r\n  3. Проверить успешное перенаправление на главную страницу.\r\n`,\r\n    },\r\n    {\r\n      id: 102080,\r\n      question: \"Какие отличия между E2E тестами и unit-тестами?\",\r\n      answer: `\r\n**Отличия между E2E тестами и unit-тестами:**\r\n| **Критерий**          | **Unit-тесты**                          | **E2E тесты**                          |\r\n|-----------------------|-----------------------------------------|----------------------------------------|\r\n| **Цель**              | Проверка отдельных функций или модулей | Проверка работы системы целиком         |\r\n| **Уровень тестирования** | Низкий (модули, функции)               | Высокий (весь приложение)              |\r\n| **Скорость выполнения** | Быстро                                 | Медленно                              |\r\n| **Сложность настройки** | Просто                                  | Сложно                                |\r\n| **Зависимости**        | Нет зависимостей                        | Зависят от браузера, API, базы данных  |\r\n| **Пример**             | \\`assert(add(2, 3) === 5)\\`             | \\`cy.visit('/login').type('user')\\`     |\r\n\r\n**Вывод:**\r\n- Unit-тесты подходят для проверки изолированных частей кода.\r\n- E2E тесты обеспечивают проверку приложения в реальных условиях.\r\n`,\r\n    },\r\n    {\r\n      id: 102081,\r\n      question: \"Как организовать структуру E2E тестов?\",\r\n      answer: `\r\n**Структура E2E тестов:**\r\n1. **Организация файлов:**\r\n   - Разделите тесты по функциональным блокам (например, \\`auth.spec.js\\`, \\`checkout.spec.js\\`).\r\n2. **Использование Page Object Model (POM):**\r\n   - Создайте классы для описания элементов и действий на каждой странице.\r\n   - Это упрощает поддержку и повторное использование кода.\r\n\r\n**Пример (Page Object Model):**\r\n\\`\\`\\`javascript\r\n// LoginPage.js\r\nclass LoginPage {\r\n  constructor(page) {\r\n    this.page = page;\r\n    this.usernameInput = 'input[name=\"username\"]';\r\n    this.passwordInput = 'input[name=\"password\"]';\r\n    this.submitButton = 'button[type=\"submit\"]';\r\n  }\r\n\r\n  async login(username, password) {\r\n    await this.page.fill(this.usernameInput, username);\r\n    await this.page.fill(this.passwordInput, password);\r\n    await this.page.click(this.submitButton);\r\n  }\r\n}\r\n\r\nmodule.exports = LoginPage;\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`javascript\r\n// auth.spec.js\r\nconst { test, expect } = require('@playwright/test');\r\nconst LoginPage = require('./LoginPage');\r\n\r\ntest('Login test', async ({ page }) => {\r\n  const loginPage = new LoginPage(page);\r\n  await page.goto('https://example.com/login ');\r\n  await loginPage.login('user', 'password');\r\n  await expect(page).toHaveURL('https://example.com/dashboard ');\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102082,\r\n      question: \"Какие проблемы могут возникнуть при написании E2E тестов?\",\r\n      answer: `\r\n**Проблемы при написании E2E тестов:**\r\n1. **Скорость выполнения:**\r\n   - E2E тесты медленнее, чем unit-тесты, из-за взаимодействия с браузерами и серверами.\r\n2. **Неустойчивость тестов (flakiness):**\r\n   - Тесты могут падать из-за сетевых задержек, изменений в UI или других факторов.\r\n3. **Сложность отладки:**\r\n   - Поиск причины ошибки может быть затруднен из-за большого количества взаимодействий.\r\n4. **Зависимость от окружения:**\r\n   - Тесты могут работать некорректно в разных браузерах или средах.\r\n5. **Поддержка тестов:**\r\n   - При изменении интерфейса тесты нужно обновлять.\r\n\r\n**Решения:**\r\n- Используйте таймауты и ожидания (\\`waitFor\\`) для стабильности.\r\n- Применяйте Page Object Model для удобства поддержки.\r\n- Регулярно обновляйте тесты и тестовое окружение.\r\n`,\r\n    },\r\n    {\r\n      id: 102083,\r\n      question: \"Как работает параллельное выполнение E2E тестов?\",\r\n      answer: `\r\n**Параллельное выполнение E2E тестов:**\r\n- Запуск нескольких тестов одновременно для ускорения выполнения.\r\n\r\n**Преимущества:**\r\n1. **Скорость:** Уменьшение общего времени выполнения тестов.\r\n2. **Эффективность:** Использование ресурсов нескольких машин или контейнеров.\r\n\r\n**Пример (Playwright):**\r\n\\`\\`\\`bash\r\nnpx playwright test --workers=4\r\n\\`\\`\\`\r\n\r\n**Важно:**\r\n- Убедитесь, что тесты не зависят друг от друга (например, через общее состояние).\r\n- Используйте изолированные тестовые среды для каждого потока.\r\n`,\r\n    },\r\n    {\r\n      id: 102084,\r\n      question: \"Как использовать моки в E2E тестах?\",\r\n      answer: `\r\n**Моки в E2E тестах:**\r\n- Используются для имитации внешних зависимостей (API, базы данных).\r\n\r\n**Пример (Cypress):**\r\n\\`\\`\\`javascript\r\ncy.intercept('GET', '/api/users', { fixture: 'users.json' }).as('getUsers');\r\ncy.visit('/users');\r\ncy.wait('@getUsers');\r\n\\`\\`\\`\r\n\r\n**Преимущества:**\r\n1. **Изолированность:** Тесты не зависят от реальных данных.\r\n2. **Стабильность:** Исключение влияния внешних сервисов на результаты тестов.\r\n\r\n**Важно:**\r\n- Используйте моки только там, где это необходимо (например, для сложных сценариев).\r\n`,\r\n    },\r\n  ],\r\n};","export const testSemanticVersioning = {\r\n  id: 100675,\r\n  title: \"Семантическое версионирование\",\r\n  questions: [\r\n    {\r\n      id: 100676,\r\n      question:\r\n        \"Что такое семантическое версионирование (Semantic Versioning)?\",\r\n      answer: `\r\n**Семантическое версионирование (SemVer):**\r\n- Это стандарт управления версиями ПО, который помогает разработчикам четко обозначать изменения в программном обеспечении.\r\n- Версии имеют формат \\`MAJOR.MINOR.PATCH\\`:\r\n  - **MAJOR:** Основная версия. Увеличивается при внесении обратно несовместимых изменений.\r\n  - **MINOR:** Второстепенная версия. Увеличивается при добавлении новой функциональности, совместимой с предыдущими версиями.\r\n  - **PATCH:** Исправления. Увеличивается при выпуске исправлений ошибок, которые не влияют на API.\r\n\r\n**Пример:**\r\n\\`\\`\\`\r\n1.0.0 -> 1.1.0 (добавлена новая функциональность)\r\n1.1.0 -> 1.1.1 (исправлен баг)\r\n1.1.1 -> 2.0.0 (внесены обратно несовместимые изменения)\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100677,\r\n      question: \"Какие правила увеличения номеров версий в SemVer?\",\r\n      answer: `\r\n**Правила увеличения версий:**\r\n1. **MAJOR:**\r\n   - Увеличивается при внесении обратно несовместимых изменений.\r\n   - Пример: \\`1.0.0 -> 2.0.0\\`.\r\n\r\n2. **MINOR:**\r\n   - Увеличивается при добавлении новой функциональности, которая совместима с предыдущими версиями.\r\n   - Пример: \\`1.0.0 -> 1.1.0\\`.\r\n\r\n3. **PATCH:**\r\n   - Увеличивается при выпуске исправлений ошибок, которые не затрагивают API.\r\n   - Пример: \\`1.0.0 -> 1.0.1\\`.\r\n\r\n**Дополнительно:**\r\n- Можно добавлять префиксы (например, \\`alpha\\`, \\`beta\\`, \\`rc\\`) для обозначения стадий разработки.\r\n- Пример: \\`1.0.0-alpha.1\\`.\r\n`,\r\n    },\r\n    {\r\n      id: 100678,\r\n      question: \"Зачем нужно семантическое версионирование?\",\r\n      answer: `\r\n**Цели семантического версионирования:**\r\n1. **Четкость обновлений:**\r\n   - Разработчики и пользователи понимают, какие изменения внесены в новую версию.\r\n\r\n2. **Совместимость:**\r\n   - MINOR и PATCH гарантируют, что новые версии совместимы с предыдущими.\r\n\r\n3. **Управление зависимостями:**\r\n   - Инструменты, такие как npm или yarn, используют SemVer для управления зависимостями.\r\n\r\n4. **Прогнозируемость:**\r\n   - Пользователи могут ожидать поведение новой версии на основе её номера.\r\n\r\n**Пример использования:**\r\n- Если вы используете библиотеку \\`^1.2.3\\`, это означает, что допустимы обновления до \\`1.x.x\\`, но не до \\`2.0.0\\`.\r\n`,\r\n    },\r\n    {\r\n      id: 100679,\r\n      question: \"Как указать диапазон версий в package.json?\",\r\n      answer: `\r\n**Диапазоны версий в package.json:**\r\n1. **Точная версия:**\r\n   - \\`\"package-name\": \"1.2.3\"\\` — используется только версия \\`1.2.3\\`.\r\n\r\n2. **Caret (\\`^\\`):**\r\n   - \\`\"package-name\": \"^1.2.3\"\\` — разрешены обновления до \\`1.x.x\\`, но не до \\`2.0.0\\`.\r\n\r\n3. **Tilde (\\`~\\`):**\r\n   - \\`\"package-name\": \"~1.2.3\"\\` — разрешены обновления только до \\`1.2.x\\`.\r\n\r\n4. **Диапазон версий:**\r\n   - \\`\"package-name\": \">=1.2.3 <2.0.0\"\\` — разрешены версии от \\`1.2.3\\` до \\`2.0.0\\`.\r\n\r\n5. **Latest:**\r\n   - \\`\"package-name\": \"*\"\\` — разрешены любые версии.\r\n\r\n**Пример:**\r\n\\`\\`\\`json\r\n{\r\n  \"dependencies\": {\r\n    \"lodash\": \"^4.17.21\"\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100680,\r\n      question:\r\n        \"Какие есть дополнительные метки в семантическом версионировании?\",\r\n      answer: `\r\n**Дополнительные метки:**\r\n1. **Pre-release (предварительные релизы):**\r\n   - Добавляются после основного номера через дефис.\r\n   - Примеры: \\`1.0.0-alpha\\`, \\`1.0.0-beta.1\\`, \\`1.0.0-rc.2\\`.\r\n\r\n2. **Build metadata (метаданные сборки):**\r\n   - Добавляются после основного номера через \\`+\\`.\r\n   - Пример: \\`1.0.0+001\\`, \\`1.0.0-alpha+exp.sha.5114f85\\`.\r\n\r\n**Использование меток:**\r\n- \\`alpha\\`: Ранняя версия, не готовая к использованию.\r\n- \\`beta\\`: Тестовая версия с ограниченной функциональностью.\r\n- \\`rc\\` (Release Candidate): Почти финальная версия, готовая к выпуску.\r\n`,\r\n    },\r\n    {\r\n      id: 100681,\r\n      question: \"Как работает сравнение версий в SemVer?\",\r\n      answer: `\r\n**Сравнение версий:**\r\n- Версии сравниваются по каждому компоненту (MAJOR, MINOR, PATCH) слева направо.\r\n- Большая версия имеет более высокий приоритет.\r\n\r\n**Примеры:**\r\n1. \\`1.2.3 < 1.2.4\\` (PATCH больше).\r\n2. \\`1.2.3 < 1.3.0\\` (MINOR больше).\r\n3. \\`1.2.3 < 2.0.0\\` (MAJOR больше).\r\n4. \\`1.0.0-alpha < 1.0.0-beta\\` (метка \\`alpha\\` ниже \\`beta\\`).\r\n\r\n**Инструменты для сравнения:**\r\n- \\`semver\\` (Node.js пакет):\r\n  \\`\\`\\`bash\r\n  npx semver -r \">=1.2.3 <2.0.0\" 1.5.0\r\n  \\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100682,\r\n      question: \"Какие инструменты поддерживают SemVer?\",\r\n      answer: `\r\n**Инструменты, поддерживающие SemVer:**\r\n1. **npm/yarn/pnpm:**\r\n   - Управление зависимостями на основе SemVer.\r\n\r\n2. **Git tags:**\r\n   - Маркировка релизов с использованием SemVer.\r\n\r\n3. **CI/CD pipelines:**\r\n   - Автоматическое создание релизов с правильной версией.\r\n\r\n4. **Пакетные менеджеры:**\r\n   - Composer (PHP), Cargo (Rust), Pip (Python) и другие.\r\n\r\n**Пример использования в npm:**\r\n\\`\\`\\`bash\r\nnpm version patch # Увеличивает PATCH\r\nnpm version minor # Увеличивает MINOR\r\nnpm version major # Увеличивает MAJOR\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testUtilityTypes = {\r\n  id: 102100,\r\n  title: \"Utility Types\",\r\n  questions: [\r\n    {\r\n      id: 102101,\r\n      question: \"Что такое utility types?\",\r\n      answer: `\r\n**Utility Types (Утилитарные типы):**\r\n- Это встроенные типы в TypeScript, которые предоставляют удобные инструменты для преобразования и манипулирования типами.\r\n- Они помогают упростить работу с типами, делая код более читаемым и поддерживаемым.\r\n\r\n**Примеры популярных Utility Types:**\r\n1. **Partial<T>:** Делает все свойства объекта необязательными.\r\n   \\`\\`\\`typescript\r\n   interface Todo {\r\n     title: string;\r\n     description: string;\r\n   }\r\n\r\n   const updateTodo = (todo: Partial<Todo>) => {\r\n     console.log(todo);\r\n   };\r\n\r\n   updateTodo({ title: \"New Title\" });\r\n   \\`\\`\\`\r\n\r\n2. **Readonly<T>:** Делает все свойства объекта доступными только для чтения.\r\n   \\`\\`\\`typescript\r\n   interface Todo {\r\n     title: string;\r\n   }\r\n\r\n   const todo: Readonly<Todo> = { title: \"Learn TypeScript\" };\r\n   // todo.title = \"Change Title\"; // Error: Cannot assign to 'title' because it is a read-only property.\r\n   \\`\\`\\`\r\n\r\n3. **Pick<T, K>:** Создает новый тип, содержащий только выбранные свойства из исходного типа.\r\n   \\`\\`\\`typescript\r\n   interface Todo {\r\n     title: string;\r\n     description: string;\r\n     completed: boolean;\r\n   }\r\n\r\n   type TodoPreview = Pick<Todo, \"title\" | \"completed\">;\r\n\r\n   const todo: TodoPreview = {\r\n     title: \"Clean room\",\r\n     completed: false,\r\n   };\r\n   \\`\\`\\`\r\n\r\n4. **Omit<T, K>:** Создает новый тип, исключая указанные свойства из исходного типа.\r\n   \\`\\`\\`typescript\r\n   interface Todo {\r\n     title: string;\r\n     description: string;\r\n     completed: boolean;\r\n   }\r\n\r\n   type TodoPreview = Omit<Todo, \"description\">;\r\n\r\n   const todo: TodoPreview = {\r\n     title: \"Clean room\",\r\n     completed: false,\r\n   };\r\n   \\`\\`\\`\r\n\r\n5. **Record<K, T>:** Создает тип объекта, где ключи имеют тип \\`K\\`, а значения — тип \\`T\\`.\r\n   \\`\\`\\`typescript\r\n   type Keys = \"title\" | \"description\";\r\n   type Todo = Record<Keys, string>;\r\n\r\n   const todo: Todo = {\r\n     title: \"Learn TypeScript\",\r\n     description: \"Study utility types\",\r\n   };\r\n   \\`\\`\\`\r\n\r\n6. **Exclude<T, U>:** Исключает из типа \\`T\\` все типы, которые совместимы с типом \\`U\\`.\r\n   \\`\\`\\`typescript\r\n   type T0 = Exclude<\"a\" | \"b\" | \"c\", \"a\">; // \"b\" | \"c\"\r\n   \\`\\`\\`\r\n\r\n7. **Extract<T, U>:** Извлекает из типа \\`T\\` все типы, которые совместимы с типом \\`U\\`.\r\n   \\`\\`\\`typescript\r\n   type T0 = Extract<\"a\" | \"b\" | \"c\", \"a\" | \"b\">; // \"a\" | \"b\"\r\n   \\`\\`\\`\r\n\r\n8. **ReturnType<T>:** Получает тип возвращаемого значения функции.\r\n   \\`\\`\\`typescript\r\n   function greet(): string {\r\n     return \"Hello, World!\";\r\n   }\r\n\r\n   type GreetReturnType = ReturnType<typeof greet>; // string\r\n   \\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102102,\r\n      question: \"Как работает Partial<T>?\",\r\n      answer: `\r\n**Partial<T>:**\r\n- Делает все свойства объекта необязательными.\r\n- Полезен, когда нужно обновить только часть свойств объекта.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\ninterface User {\r\n  name: string;\r\n  age: number;\r\n}\r\n\r\nfunction updateUser(user: User, updates: Partial<User>): User {\r\n  return { ...user, ...updates };\r\n}\r\n\r\nconst user: User = { name: \"Alice\", age: 25 };\r\nconst updatedUser = updateUser(user, { age: 26 });\r\n\r\nconsole.log(updatedUser); // { name: \"Alice\", age: 26 }\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102103,\r\n      question: \"Как использовать Readonly<T>?\",\r\n      answer: `\r\n**Readonly<T>:**\r\n- Делает все свойства объекта доступными только для чтения.\r\n- Полезен, чтобы предотвратить изменения объекта.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\ninterface Config {\r\n  apiUrl: string;\r\n}\r\n\r\nconst config: Readonly<Config> = {\r\n  apiUrl: \"https://api.example.com \",\r\n};\r\n\r\n// config.apiUrl = \"https://new-api.example.com \"; // Error: Cannot assign to 'apiUrl' because it is a read-only property.\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102104,\r\n      question: \"В чем разница между Pick<T, K> и Omit<T, K>?\",\r\n      answer: `\r\n**Разница:**\r\n- **Pick<T, K>:** Создает новый тип, содержащий только выбранные свойства из исходного типа.\r\n- **Omit<T, K>:** Создает новый тип, исключая указанные свойства из исходного типа.\r\n\r\n**Пример Pick<T, K>:**\r\n\\`\\`\\`typescript\r\ninterface Todo {\r\n  title: string;\r\n  description: string;\r\n  completed: boolean;\r\n}\r\n\r\ntype TodoPreview = Pick<Todo, \"title\" | \"completed\">;\r\n\r\nconst todo: TodoPreview = {\r\n  title: \"Learn TypeScript\",\r\n  completed: true,\r\n};\r\n\\`\\`\\`\r\n\r\n**Пример Omit<T, K>:**\r\n\\`\\`\\`typescript\r\ninterface Todo {\r\n  title: string;\r\n  description: string;\r\n  completed: boolean;\r\n}\r\n\r\ntype TodoPreview = Omit<Todo, \"description\">;\r\n\r\nconst todo: TodoPreview = {\r\n  title: \"Learn TypeScript\",\r\n  completed: true,\r\n};\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102105,\r\n      question: \"Как работает ReturnType<T>?\",\r\n      answer: `\r\n**ReturnType<T>:**\r\n- Извлекает тип возвращаемого значения функции.\r\n- Полезен для определения типа результата функции без явного его указания.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nfunction add(a: number, b: number): number {\r\n  return a + b;\r\n}\r\n\r\ntype AddReturnType = ReturnType<typeof add>; // number\r\n\r\nconst result: AddReturnType = 42;\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102106,\r\n      question: \"Как использовать Record<K, T>?\",\r\n      answer: `\r\n**Record<K, T>:**\r\n- Создает тип объекта, где ключи имеют тип \\`K\\`, а значения — тип \\`T\\`.\r\n- Полезен для создания словарей или маппингов.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\ntype Keys = \"name\" | \"age\";\r\ntype User = Record<Keys, string>;\r\n\r\nconst user: User = {\r\n  name: \"Alice\",\r\n  age: \"25\",\r\n};\r\n\r\nconsole.log(user.name); // Alice\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102107,\r\n      question: \"Что такое Exclude<T, U> и Extract<T, U>?\",\r\n      answer: `\r\n**Exclude<T, U>:**\r\n- Исключает из типа \\`T\\` все типы, которые совместимы с типом \\`U\\`.\r\n\r\n**Пример Exclude<T, U>:**\r\n\\`\\`\\`typescript\r\ntype T0 = Exclude<\"a\" | \"b\" | \"c\", \"a\">; // \"b\" | \"c\"\r\n\\`\\`\\`\r\n\r\n**Extract<T, U>:**\r\n- Извлекает из типа \\`T\\` все типы, которые совместимы с типом \\`U\\`.\r\n\r\n**Пример Extract<T, U>:**\r\n\\`\\`\\`typescript\r\ntype T0 = Extract<\"a\" | \"b\" | \"c\", \"a\" | \"b\">; // \"a\" | \"b\"\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testClassesTypeScript = {\r\n  id: 102000,\r\n  title: \"Классы\",\r\n  questions: [\r\n    {\r\n      id: 102001,\r\n      question: \"Что такое классы?\",\r\n      answer: `\r\n**Классы в TypeScript (и JavaScript):**\r\n- Это шаблоны для создания объектов. Они позволяют определять структуру и поведение объектов.\r\n- Классы поддерживают принципы объектно-ориентированного программирования (ООП), такие как инкапсуляция, наследование и полиморфизм.\r\n\r\n**Основные компоненты класса:**\r\n1. **Свойства:** Хранят данные объекта.\r\n2. **Методы:** Определяют поведение объекта.\r\n3. **Конструктор:** Инициализирует объект при его создании.\r\n4. **Модификаторы доступа:** \\`public\\`, \\`private\\`, \\`protected\\` — определяют видимость свойств и методов.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nclass Person {\r\n  // Свойства\r\n  public name: string;\r\n  private age: number;\r\n\r\n  // Конструктор\r\n  constructor(name: string, age: number) {\r\n    this.name = name;\r\n    this.age = age;\r\n  }\r\n\r\n  // Метод\r\n  greet(): void {\r\n    console.log(\\`Hello, my name is \\${this.name} and I am \\${this.age} years old.\\`);\r\n  }\r\n}\r\n\r\nconst person = new Person(\"Alice\", 25);\r\nperson.greet(); // Hello, my name is Alice and I am 25 years old.\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102002,\r\n      question: \"Как использовать модификаторы доступа в классах?\",\r\n      answer: `\r\n**Модификаторы доступа:**\r\n- Управляют видимостью свойств и методов класса.\r\n\r\n1. **public (по умолчанию):**\r\n   - Доступен везде.\r\n   \\`\\`\\`typescript\r\n   class Example {\r\n     public value: number = 42;\r\n   }\r\n   \\`\\`\\`\r\n\r\n2. **private:**\r\n   - Доступен только внутри класса.\r\n   \\`\\`\\`typescript\r\n   class Example {\r\n     private secret: string = \"hidden\";\r\n   }\r\n   \\`\\`\\`\r\n\r\n3. **protected:**\r\n   - Доступен внутри класса и его потомков.\r\n   \\`\\`\\`typescript\r\n   class Parent {\r\n     protected info: string = \"shared\";\r\n   }\r\n\r\n   class Child extends Parent {\r\n     getInfo(): string {\r\n       return this.info;\r\n     }\r\n   }\r\n   \\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102003,\r\n      question: \"Что такое наследование в классах?\",\r\n      answer: `\r\n**Наследование:**\r\n- Позволяет создавать новый класс на основе существующего, заимствуя его свойства и методы.\r\n- Используется ключевое слово \\`extends\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nclass Animal {\r\n  move(): void {\r\n    console.log(\"Moving...\");\r\n  }\r\n}\r\n\r\nclass Dog extends Animal {\r\n  bark(): void {\r\n    console.log(\"Woof!\");\r\n  }\r\n}\r\n\r\nconst dog = new Dog();\r\ndog.move(); // Moving...\r\ndog.bark(); // Woof!\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102004,\r\n      question: \"Что такое абстрактные классы?\",\r\n      answer: `\r\n**Абстрактные классы:**\r\n- Это классы, которые не могут быть инстанциированы напрямую.\r\n- Они предназначены для использования в качестве базовых классов.\r\n- Могут содержать абстрактные методы (без реализации).\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nabstract class Shape {\r\n  abstract area(): number;\r\n\r\n  describe(): void {\r\n    console.log(\"This is a shape.\");\r\n  }\r\n}\r\n\r\nclass Circle extends Shape {\r\n  radius: number;\r\n\r\n  constructor(radius: number) {\r\n    super();\r\n    this.radius = radius;\r\n  }\r\n\r\n  area(): number {\r\n    return Math.PI * this.radius ** 2;\r\n  }\r\n}\r\n\r\nconst circle = new Circle(5);\r\nconsole.log(circle.area()); // 78.54\r\ncircle.describe(); // This is a shape.\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102005,\r\n      question: \"Что такое интерфейсы для классов?\",\r\n      answer: `\r\n**Интерфейсы для классов:**\r\n- Определяют структуру класса без реализации.\r\n- Класс может реализовать один или несколько интерфейсов с помощью ключевого слова \\`implements\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\ninterface Greetable {\r\n  name: string;\r\n  greet(phrase: string): void;\r\n}\r\n\r\nclass Person implements Greetable {\r\n  name: string;\r\n\r\n  constructor(name: string) {\r\n    this.name = name;\r\n  }\r\n\r\n  greet(phrase: string): void {\r\n    console.log(\\`\\${phrase} \\${this.name}\\`);\r\n  }\r\n}\r\n\r\nconst user = new Person(\"Alice\");\r\nuser.greet(\"Hello\"); // Hello Alice\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102006,\r\n      question: \"Что такое статические свойства и методы в классах?\",\r\n      answer: `\r\n**Статические свойства и методы:**\r\n- Принадлежат самому классу, а не его экземплярам.\r\n- Используются с ключевым словом \\`static\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nclass MathUtils {\r\n  static PI: number = 3.14;\r\n\r\n  static calculateCircumference(radius: number): number {\r\n    return 2 * MathUtils.PI * radius;\r\n  }\r\n}\r\n\r\nconsole.log(MathUtils.PI); // 3.14\r\nconsole.log(MathUtils.calculateCircumference(5)); // 31.4\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102007,\r\n      question: \"Что такое конструктор в классах?\",\r\n      answer: `\r\n**Конструктор:**\r\n- Это специальный метод, который вызывается при создании нового экземпляра класса.\r\n- Используется для инициализации свойств объекта.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nclass Car {\r\n  model: string;\r\n  year: number;\r\n\r\n  constructor(model: string, year: number) {\r\n    this.model = model;\r\n    this.year = year;\r\n  }\r\n\r\n  displayInfo(): void {\r\n    console.log(\\`Model: \\${this.model}, Year: \\${this.year}\\`);\r\n  }\r\n}\r\n\r\nconst car = new Car(\"Toyota\", 2020);\r\ncar.displayInfo(); // Model: Toyota, Year: 2020\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102008,\r\n      question: \"Что такое геттеры и сеттеры в классах?\",\r\n      answer: `\r\n**Геттеры и сеттеры:**\r\n- Геттеры (\\`get\\`) позволяют получать значение свойства.\r\n- Сеттеры (\\`set\\`) позволяют изменять значение свойства.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nclass User {\r\n  private _name: string;\r\n\r\n  get name(): string {\r\n    return this._name;\r\n  }\r\n\r\n  set name(value: string) {\r\n    if (value.length > 0) {\r\n      this._name = value;\r\n    } else {\r\n      console.error(\"Name cannot be empty\");\r\n    }\r\n  }\r\n}\r\n\r\nconst user = new User();\r\nuser.name = \"Alice\";\r\nconsole.log(user.name); // Alice\r\n\r\nuser.name = \"\"; // Error: Name cannot be empty\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102009,\r\n      question: \"Что такое полиморфизм в классах?\",\r\n      answer: `\r\n**Полиморфизм:**\r\n- Это способность объектов с одинаковым интерфейсом иметь разную реализацию.\r\n- Обычно достигается через наследование и переопределение методов.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nclass Animal {\r\n  speak(): void {\r\n    console.log(\"Animal speaks\");\r\n  }\r\n}\r\n\r\nclass Dog extends Animal {\r\n  speak(): void {\r\n    console.log(\"Dog barks\");\r\n  }\r\n}\r\n\r\nclass Cat extends Animal {\r\n  speak(): void {\r\n    console.log(\"Cat meows\");\r\n  }\r\n}\r\n\r\nconst animals: Animal[] = [new Dog(), new Cat()];\r\nanimals.forEach((animal) => animal.speak());\r\n// Dog barks\r\n// Cat meows\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testModuleTypeScript = {\r\n  id: 101975,\r\n  title: \"Модули\",\r\n  questions: [\r\n    {\r\n      id: 101976,\r\n      question: \"Что такое модули?\",\r\n      answer: `\r\n**Модули:**\r\n- Это отдельные файлы или блоки кода, которые содержат логически связанные функции, классы, переменные и т.д.\r\n- Модули позволяют организовать код в независимые, переиспользуемые части.\r\n\r\n**Основные преимущества модулей:**\r\n1. **Инкапсуляция:** Код внутри модуля изолирован, и только явно экспортированные элементы доступны снаружи.\r\n2. **Повторное использование:** Модули можно импортировать и использовать в разных частях программы.\r\n3. **Управление зависимостями:** Модули помогают управлять зависимостями между частями программы.\r\n4. **Улучшение читаемости и поддержки кода:** Разделение кода на модули делает его более структурированным.\r\n\r\n**Пример модуля в TypeScript:**\r\n\\`\\`\\`typescript\r\n// math.ts\r\nexport function add(a: number, b: number): number {\r\n  return a + b;\r\n}\r\n\r\nexport function subtract(a: number, b: number): number {\r\n  return a - b;\r\n}\r\n\r\n// main.ts\r\nimport { add, subtract } from './math';\r\n\r\nconsole.log(add(5, 3)); // 8\r\nconsole.log(subtract(5, 3)); // 2\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101977,\r\n      question: \"Как экспортировать значения из модуля?\",\r\n      answer: `\r\n**Экспорт значений:**\r\n- Используйте ключевое слово \\`export\\`, чтобы сделать значения доступными для других модулей.\r\n\r\n**Способы экспорта:**\r\n1. **Named Export (именованный экспорт):**\r\n   - Экспортирует несколько значений из модуля.\r\n   \\`\\`\\`typescript\r\n   export const name = \"Alice\";\r\n   export function greet() {\r\n     console.log(\"Hello!\");\r\n   }\r\n   \\`\\`\\`\r\n\r\n2. **Default Export (экспорт по умолчанию):**\r\n   - Экспортирует одно значение как основное.\r\n   \\`\\`\\`typescript\r\n   const name = \"Alice\";\r\n   export default name;\r\n   \\`\\`\\`\r\n\r\n**Пример использования:**\r\n\\`\\`\\`typescript\r\n// module.ts\r\nexport const value = 42;\r\nexport function getValue() {\r\n  return value;\r\n}\r\n\r\n// main.ts\r\nimport { value, getValue } from './module';\r\nconsole.log(value); // 42\r\nconsole.log(getValue()); // 42\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101978,\r\n      question: \"Как импортировать значения из модуля?\",\r\n      answer: `\r\n**Импорт значений:**\r\n- Используйте ключевое слово \\`import\\`, чтобы использовать экспортированные значения из другого модуля.\r\n\r\n**Способы импорта:**\r\n1. **Named Import (именованный импорт):**\r\n   - Импортирует конкретные значения из модуля.\r\n   \\`\\`\\`typescript\r\n   import { add, subtract } from './math';\r\n   console.log(add(5, 3)); // 8\r\n   \\`\\`\\`\r\n\r\n2. **Default Import (импорт по умолчанию):**\r\n   - Импортирует значение, экспортированное по умолчанию.\r\n   \\`\\`\\`typescript\r\n   import name from './module';\r\n   console.log(name); // Alice\r\n   \\`\\`\\`\r\n\r\n3. **Import All (импорт всех значений):**\r\n   - Импортирует все экспортированные значения как объект.\r\n   \\`\\`\\`typescript\r\n   import * as MathUtils from './math';\r\n   console.log(MathUtils.add(5, 3)); // 8\r\n   \\`\\`\\`\r\n\r\n4. **Side-effect Import (импорт для побочных эффектов):**\r\n   - Импортирует модуль без использования его значений.\r\n   \\`\\`\\`typescript\r\n   import './module'; // Выполняет код модуля\r\n   \\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101979,\r\n      question: \"Что такое модульная система CommonJS и как она работает?\",\r\n      answer: `\r\n**CommonJS:**\r\n- Это модульная система, используемая в Node.js.\r\n- Использует \\`require\\` для импорта и \\`module.exports\\` для экспорта.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// math.js\r\nfunction add(a, b) {\r\n  return a + b;\r\n}\r\n\r\nmodule.exports = { add };\r\n\r\n// main.js\r\nconst { add } = require('./math');\r\nconsole.log(add(5, 3)); // 8\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101980,\r\n      question: \"В чем разница между CommonJS и ES Modules?\",\r\n      answer: `\r\n**Разница между CommonJS и ES Modules:**\r\n\r\n1. **Синтаксис:**\r\n   - **CommonJS:**\r\n     - Использует \\`require\\` для импорта и \\`module.exports\\` для экспорта.\r\n   - **ES Modules:**\r\n     - Использует \\`import\\` и \\`export\\`.\r\n\r\n2. **Поддержка:**\r\n   - **CommonJS:** Основной формат в Node.js.\r\n   - **ES Modules:** Стандарт JavaScript, поддерживается в современных браузерах и Node.js.\r\n\r\n3. **Статическая vs динамическая загрузка:**\r\n   - **ES Modules:** Статическая загрузка (импорты обрабатываются до выполнения кода).\r\n   - **CommonJS:** Динамическая загрузка (импорты могут выполняться во время выполнения).\r\n\r\n4. **Tree Shaking:**\r\n   - **ES Modules:** Поддерживают tree shaking (удаление неиспользуемого кода).\r\n   - **CommonJS:** Не поддерживают tree shaking.\r\n\r\n**Пример ES Modules:**\r\n\\`\\`\\`typescript\r\nimport { add } from './math';\r\nconsole.log(add(5, 3));\r\n\\`\\`\\`\r\n\r\n**Пример CommonJS:**\r\n\\`\\`\\`javascript\r\nconst { add } = require('./math');\r\nconsole.log(add(5, 3));\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101981,\r\n      question: \"Как использовать динамический импорт в TypeScript?\",\r\n      answer: `\r\n**Динамический импорт:**\r\n- Позволяет загружать модули асинхронно.\r\n- Используется синтаксис \\`import()\\`, который возвращает промис.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nasync function loadModule() {\r\n  const module = await import('./math');\r\n  console.log(module.add(5, 3)); // 8\r\n}\r\n\r\nloadModule();\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101982,\r\n      question: \"Как экспортировать и импортировать типы в TypeScript?\",\r\n      answer: `\r\n**Экспорт и импорт типов:**\r\n- Типы можно экспортировать и импортировать так же, как и значения.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\n// types.ts\r\nexport type User = {\r\n  name: string;\r\n  age: number;\r\n};\r\n\r\n// main.ts\r\nimport { User } from './types';\r\n\r\nconst user: User = { name: \"Alice\", age: 25 };\r\nconsole.log(user);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testStrictModeTypeScript = {\r\n  id: 101950,\r\n  title: \"Strict mode\",\r\n  questions: [\r\n    {\r\n      id: 101951,\r\n      question: \"Что такое Strict mode?\",\r\n      answer: `\r\n**Strict mode в TypeScript:**\r\n- Это набор строгих проверок и правил, которые помогают писать более безопасный и надежный код.\r\n- Включается с помощью параметра \\`\"strict\": true\\` в файле \\`tsconfig.json\\`.\r\n- При активации \\`strict\\` автоматически включаются несколько связанных флагов, таких как \\`noImplicitAny\\`, \\`strictNullChecks\\` и другие.\r\n\r\n**Основные преимущества:**\r\n1. **Повышение безопасности:** Предотвращает распространенные ошибки, такие как неявное использование \\`any\\` или работа с \\`null/undefined\\`.\r\n2. **Улучшение читаемости кода:** Строгий режим заставляет явно указывать типы и обрабатывать возможные ошибки.\r\n3. **Лучшая поддержка инструментов разработки:** Улучшает автодополнение и проверку ошибок в редакторах кода.\r\n\r\n**Пример настройки в \\`tsconfig.json\\`:**\r\n\\`\\`\\`json\r\n{\r\n  \"compilerOptions\": {\r\n    \"strict\": true\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101952,\r\n      question: \"Какие флаги включаются при активации strict mode?\",\r\n      answer: `\r\n**Флаги, включаемые \\`strict\\`:**\r\n1. **noImplicitAny:**\r\n   - Запрещает использование неявного типа \\`any\\`.\r\n   - Если TypeScript не может вывести тип, требуется явное указание.\r\n\r\n2. **strictNullChecks:**\r\n   - Требует явной проверки значений на \\`null\\` и \\`undefined\\`.\r\n   - Например, нельзя вызвать метод у переменной, которая может быть \\`null\\`.\r\n\r\n3. **strictFunctionTypes:**\r\n   - Проверяет совместимость типов функций более строго.\r\n\r\n4. **strictBindCallApply:**\r\n   - Проверяет корректность использования методов \\`bind\\`, \\`call\\` и \\`apply\\`.\r\n\r\n5. **strictPropertyInitialization:**\r\n   - Требует инициализации свойств класса в конструкторе.\r\n\r\n6. **noImplicitThis:**\r\n   - Запрещает использование \\`this\\` с неявным типом.\r\n\r\n7. **alwaysStrict:**\r\n   - Генерирует JavaScript-код в строгом режиме (\\`\"use strict\"\\`).\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nfunction greet(name: string | null) {\r\n  if (name) {\r\n    console.log(\\`Hello, \\${name.toUpperCase()}\\`);\r\n  } else {\r\n    console.log(\"Name is required\");\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101953,\r\n      question: \"Зачем нужен noImplicitAny?\",\r\n      answer: `\r\n**noImplicitAny:**\r\n- Запрещает использование неявного типа \\`any\\`.\r\n- Заставляет явно указывать типы для переменных, параметров функций и возвращаемых значений.\r\n\r\n**Пример без noImplicitAny:**\r\n\\`\\`\\`typescript\r\nfunction add(a, b) {\r\n  return a + b; // TypeScript не выдаст ошибку, но типы неизвестны.\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример с noImplicitAny:**\r\n\\`\\`\\`typescript\r\nfunction add(a: number, b: number): number {\r\n  return a + b; // Теперь типы явно указаны.\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101954,\r\n      question: \"Как работает strictNullChecks?\",\r\n      answer: `\r\n**strictNullChecks:**\r\n- Требует явной проверки значений на \\`null\\` и \\`undefined\\`.\r\n- Без этого флага TypeScript может позволить операции с \\`null/undefined\\`, что приведет к ошибкам во время выполнения.\r\n\r\n**Пример без strictNullChecks:**\r\n\\`\\`\\`typescript\r\nlet name: string;\r\nname = null; // Разрешено, но может вызвать ошибку.\r\nconsole.log(name.toUpperCase()); // Ошибка во время выполнения.\r\n\\`\\`\\`\r\n\r\n**Пример с strictNullChecks:**\r\n\\`\\`\\`typescript\r\nlet name: string | null = null;\r\n\r\nif (name !== null) {\r\n  console.log(name.toUpperCase());\r\n} else {\r\n  console.log(\"Name is null\");\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101955,\r\n      question: \"Как strictPropertyInitialization влияет на классы?\",\r\n      answer: `\r\n**strictPropertyInitialization:**\r\n- Требует инициализации свойств класса в конструкторе или при объявлении.\r\n- Если свойство не инициализировано, TypeScript выдаст ошибку.\r\n\r\n**Пример без инициализации:**\r\n\\`\\`\\`typescript\r\nclass User {\r\n  name: string; // Error: Property 'name' has no initializer and is not definitely assigned in the constructor.\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример с инициализацией:**\r\n\\`\\`\\`typescript\r\nclass User {\r\n  name: string;\r\n\r\n  constructor(name: string) {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nconst user = new User(\"Alice\");\r\nconsole.log(user.name); // Alice\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101956,\r\n      question: \"Можно ли отключить отдельные флаги strict mode?\",\r\n      answer: `\r\n**Да, можно отключить отдельные флаги:**\r\n- Если \\`strict\\` включен, можно отключить конкретные флаги в \\`tsconfig.json\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`json\r\n{\r\n  \"compilerOptions\": {\r\n    \"strict\": true,\r\n    \"noImplicitAny\": false,\r\n    \"strictNullChecks\": false\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101957,\r\n      question: \"Как strict mode помогает избежать ошибок?\",\r\n      answer: `\r\n**Помощь в избежании ошибок:**\r\n1. **Явные типы:** Исключает использование неявного \\`any\\`.\r\n2. **Проверка на \\`null/undefined\\`:** Предотвращает ошибки времени выполнения.\r\n3. **Инициализация свойств:** Убедитесь, что все свойства класса инициализированы.\r\n4. **Строгая проверка функций:** Уменьшает вероятность некорректных вызовов.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nfunction divide(a: number, b: number): number {\r\n  if (b === 0) {\r\n    throw new Error(\"Division by zero\");\r\n  }\r\n  return a / b;\r\n}\r\n\r\nconsole.log(divide(10, 2)); // 5\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testRegularExpressions = {\r\n  id: 102150,\r\n  title: \"Regular Expressions (Регулярные выражения)\",\r\n  questions: [\r\n    {\r\n      id: 102151,\r\n      question: \"Что такое Regular Expressions (Регулярные выражения)?\",\r\n      answer: `\r\n**Регулярные выражения (Regular Expressions, сокращенно RegExp):**\r\n- Это шаблоны, используемые для поиска, проверки и замены текстовых данных.\r\n- Они позволяют находить строки или их части, соответствующие определенному формату.\r\n\r\n**Основные применения:**\r\n1. **Поиск:** Находить подстроки, соответствующие шаблону.\r\n2. **Проверка (валидация):** Проверять, соответствует ли строка определенному формату (например, email, телефон).\r\n3. **Замена:** Заменять части строки на другие значения.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst regex = /hello/;\r\nconst text = \"hello world\";\r\nconsole.log(regex.test(text)); // true\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102152,\r\n      question: \"Как создать регулярное выражение в JavaScript?\",\r\n      answer: `\r\n**Создание регулярных выражений:**\r\n1. **Литеральный синтаксис:**\r\n   - Используется \\`\\\\/pattern\\\\/\\`.\r\n   \\`\\`\\`javascript\r\n   const regex = /abc/;\r\n   \\`\\`\\`\r\n\r\n2. **Конструктор \\`RegExp\\`:**\r\n   - Используется для динамического создания регулярных выражений.\r\n   \\`\\`\\`javascript\r\n   const pattern = \"abc\";\r\n   const regex = new RegExp(pattern);\r\n   \\`\\`\\`\r\n\r\n**Пример использования:**\r\n\\`\\`\\`javascript\r\nconst regex = /world/;\r\nconst text = \"hello world\";\r\nconsole.log(regex.test(text)); // true\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102153,\r\n      question:\r\n        \"Какие основные метасимволы используются в регулярных выражениях?\",\r\n      answer: `\r\n**Основные метасимволы:**\r\n1. **\\`.\\` (точка):** Соответствует любому одному символу, кроме новой строки.\r\n2. **\\`\\\\d\\`:** Цифра (0-9).\r\n3. **\\`\\\\w\\`:** Буква, цифра или символ подчеркивания (\\`a-z\\`, \\`A-Z\\`, \\`0-9\\`, \\`_\\`).\r\n4. **\\`\\\\s\\`:** Пробельный символ (пробел, табуляция, новая строка).\r\n5. **\\`\\\\D\\`, \\`\\\\W\\`, \\`\\\\S\\`:** Отрицание соответствующих символов (\\`[^0-9]\\`, \\`[^a-zA-Z0-9_]\\`, \\`[^пробельные]\\`).\r\n6. **\\`^\\`:** Начало строки.\r\n7. **\\`$\\`:** Конец строки.\r\n8. **\\`*\\`:** Ноль или более повторений предшествующего элемента.\r\n9. **\\`+\\`:** Одно или более повторений предшествующего элемента.\r\n10. **\\`?\\`:** Ноль или одно повторение предшествующего элемента.\r\n11. **\\`{n}\\`:** Ровно \\`n\\` повторений.\r\n12. **\\`{n,}\\`:** Не менее \\`n\\` повторений.\r\n13. **\\`{n,m}\\`:** От \\`n\\` до \\`m\\` повторений.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst regex = /\\\\d{3}-\\\\d{2}-\\\\d{4}/; // Формат: 123-45-6789\r\nconsole.log(regex.test(\"123-45-6789\")); // true\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102154,\r\n      question: \"Как использовать флаги в регулярных выражениях?\",\r\n      answer: `\r\n**Флаги:**\r\n1. **\\`i\\`:** Игнорировать регистр (case-insensitive).\r\n2. **\\`g\\`:** Глобальный поиск (все совпадения, а не только первое).\r\n3. **\\`m\\`:** Многострочный режим (\\`^$\\`) работают для каждой строки, а не только для всей строки).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst regex = /hello/i; // Игнорирование регистра\r\nconsole.log(regex.test(\"Hello\")); // true\r\n\r\nconst text = \"hello world, hello universe\";\r\nconst matches = text.match(/hello/g); // Все совпадения\r\nconsole.log(matches); // [\"hello\", \"hello\"]\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102155,\r\n      question: \"Как проверить строку с помощью регулярного выражения?\",\r\n      answer: `\r\n**Методы проверки:**\r\n1. **\\`test()\\`:** Возвращает \\`true\\` или \\`false\\`, если строка соответствует шаблону.\r\n   \\`\\`\\`javascript\r\n   const regex = /hello/;\r\n   console.log(regex.test(\"hello world\")); // true\r\n   \\`\\`\\`\r\n\r\n2. **\\`match()\\`:** Возвращает массив совпадений или \\`null\\`.\r\n   \\`\\`\\`javascript\r\n   const text = \"hello world, hello universe\";\r\n   const matches = text.match(/hello/g);\r\n   console.log(matches); // [\"hello\", \"hello\"]\r\n   \\`\\`\\`\r\n\r\n3. **\\`exec()\\`:** Возвращает первое совпадение или \\`null\\`.\r\n   \\`\\`\\`javascript\r\n   const regex = /hello/;\r\n   console.log(regex.exec(\"hello world\")); // [\"hello\"]\r\n   \\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102156,\r\n      question: \"Как заменить часть строки с помощью регулярных выражений?\",\r\n      answer: `\r\n**Метод \\`replace()\\`:**\r\n- Заменяет совпадения на указанное значение.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst text = \"hello world\";\r\nconst result = text.replace(/world/, \"universe\");\r\nconsole.log(result); // \"hello universe\"\r\n\r\n// Глобальная замена\r\nconst text2 = \"hello world, hello universe\";\r\nconst result2 = text2.replace(/hello/g, \"hi\");\r\nconsole.log(result2); // \"hi world, hi universe\"\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102157,\r\n      question: \"Как использовать группы захвата в регулярных выражениях?\",\r\n      answer: `\r\n**Группы захвата:**\r\n- Используются для выделения частей совпадений.\r\n- Обозначаются круглыми скобками \\`()\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst regex = /(\\\\d{3})-(\\\\d{2})-(\\\\d{4})/;\r\nconst text = \"SSN: 123-45-6789\";\r\nconst match = text.match(regex);\r\n\r\nif (match) {\r\n  console.log(match[1]); // \"123\" (первый блок)\r\n  console.log(match[2]); // \"45\" (второй блок)\r\n  console.log(match[3]); // \"6789\" (третий блок)\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102158,\r\n      question: \"Как экранировать специальные символы в регулярных выражениях?\",\r\n      answer: `\r\n**Экранирование:**\r\n- Для использования специальных символов (например, \\`.\\`, \\`*\\`, \\`?\\`) как обычных символов добавьте перед ними обратный слэш (\\`\\\\\\`).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst regex = /\\\\./; // Ищет точку как символ\r\nconst text = \"example.com\";\r\nconsole.log(regex.test(text)); // true\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102159,\r\n      question: \"Как проверить формат email с помощью регулярного выражения?\",\r\n      answer: `\r\n**Шаблон для email:**\r\n\\`\\`\\`javascript\r\nconst emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$/;\r\nconsole.log(emailRegex.test(\"example@example.com\")); // true\r\nconsole.log(emailRegex.test(\"invalid-email\")); // false\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102160,\r\n      question: \"Как проверить формат URL с помощью регулярного выражения?\",\r\n      answer: `\r\n**Шаблон для URL:**\r\n\\`\\`\\`javascript\r\nconst urlRegex = /^(https?:\\\\/\\\\/)?([a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,})(\\\\/.*)?$/;\r\nconsole.log(urlRegex.test(\"https://example.com \")); // true\r\nconsole.log(urlRegex.test(\"ftp://example.com\")); // false\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testGarbageCollector = {\r\n  id: 102175,\r\n  title: \"Garbage Collector (сборщик мусора)\",\r\n  questions: [\r\n    {\r\n      id: 102176,\r\n      question: \"Что такое Garbage Collector (сборщик мусора)?\",\r\n      answer: `\r\n**Garbage Collector (Сборщик мусора):**\r\n- Это механизм в JavaScript, который автоматически управляет памятью, освобождая ресурсы, которые больше не используются программой.\r\n- Он отслеживает объекты и переменные в памяти и удаляет те, на которые нет ссылок.\r\n\r\n**Как это работает:**\r\n1. **Выделение памяти:** Когда вы создаете переменную, объект или функцию, JavaScript выделяет для них память.\r\n2. **Использование памяти:** Пока переменная или объект используются (есть ссылки на них), они остаются в памяти.\r\n3. **Очистка памяти:** Когда ссылки на объект исчезают (например, переменная выходит из области видимости), сборщик мусора освобождает память.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nlet user = { name: \"Alice\" }; // Выделение памяти для объекта\r\nuser = null; // Удаление ссылки на объект\r\n// Сборщик мусора освободит память, занятую объектом { name: \"Alice\" }\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102177,\r\n      question: \"Как работает алгоритм подсчета ссылок?\",\r\n      answer: `\r\n**Алгоритм подсчета ссылок:**\r\n- Основной принцип: объект удаляется из памяти, если на него нет ссылок.\r\n- Каждый объект имеет счетчик ссылок. Когда ссылка добавляется, счетчик увеличивается; когда ссылка удаляется, счетчик уменьшается.\r\n- Если счетчик ссылок становится равным нулю, объект удаляется.\r\n\r\n**Проблемы:**\r\n- Не справляется с циклическими ссылками (например, два объекта ссылаются друг на друга, но больше никто на них не ссылается).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nlet obj1 = {};\r\nlet obj2 = {};\r\nobj1.ref = obj2; // obj1 ссылается на obj2\r\nobj2.ref = obj1; // obj2 ссылается на obj1\r\nobj1 = null;\r\nobj2 = null;\r\n// Несмотря на удаление ссылок, объекты остаются в памяти (проблема циклических ссылок)\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102178,\r\n      question: \"Что такое алгоритм Mark-and-Sweep (метка и очистка)?\",\r\n      answer: `\r\n**Mark-and-Sweep (Метка и очистка):**\r\n- Современный алгоритм сборки мусора, используемый в JavaScript.\r\n- Работает в два этапа:\r\n  1. **Mark (Метка):** Все достижимые объекты помечаются как используемые.\r\n  2. **Sweep (Очистка):** Все непомеченные объекты удаляются.\r\n\r\n**Преимущества:**\r\n- Эффективно обрабатывает циклические ссылки.\r\n- Автоматически освобождает память, на которую больше нет ссылок.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nlet user = { name: \"Alice\" };\r\nuser = null; // Объект становится недостижимым\r\n// На этапе Mark объект не будет помечен как достижимый\r\n// На этапе Sweep объект будет удален\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102179,\r\n      question: \"Какие типы данных управляются сборщиком мусора?\",\r\n      answer: `\r\n**Управляемые типы данных:**\r\n- Все типы данных, которые хранятся в куче (heap):\r\n  - Объекты (\\`{ }\\`)\r\n  - Массивы (\\`[ ]\\`)\r\n  - Функции\r\n  - Прочие сложные структуры данных\r\n\r\n**Неуправляемые типы данных:**\r\n- Простые типы данных (числа, строки, булевы значения, \\`null\\`, \\`undefined\\`) хранятся в стеке (stack) и управляются автоматически без участия сборщика мусора.\r\n`,\r\n    },\r\n    {\r\n      id: 102180,\r\n      question: \"Как принудительно вызвать сборку мусора?\",\r\n      answer: `\r\n**Нельзя принудительно вызвать сборку мусора:**\r\n- JavaScript автоматически управляет памятью, и разработчики не могут напрямую управлять сборщиком мусора.\r\n- Однако можно использовать метод \\`global.gc()\\` в Node.js (только при запуске с флагом \\`--expose-gc\\`).\r\n\r\n**Пример (Node.js):**\r\n\\`\\`\\`javascript\r\nif (global.gc) {\r\n  global.gc(); // Принудительный вызов сборки мусора\r\n} else {\r\n  console.log(\"Garbage collection is not exposed\");\r\n}\r\n\\`\\`\\`\r\n\r\n**Важно:**\r\n- В браузерах такой возможности нет.\r\n- Не рекомендуется полагаться на принудительный вызов сборки мусора.\r\n`,\r\n    },\r\n    {\r\n      id: 102181,\r\n      question: \"Как избежать утечек памяти?\",\r\n      answer: `\r\n**Способы избежать утечек памяти:**\r\n1. **Удаляйте ненужные ссылки:**\r\n   - Убедитесь, что переменные, которые больше не нужны, установлены в \\`null\\` или перезаписаны.\r\n2. **Избегайте глобальных переменных:**\r\n   - Глобальные переменные остаются в памяти до завершения работы программы.\r\n3. **Осторожно используйте замыкания:**\r\n   - Замыкания могут сохранять ссылки на внешние переменные, что приводит к утечкам.\r\n4. **Отписывайтесь от событий:**\r\n   - Убедитесь, что обработчики событий удалены, если они больше не нужны.\r\n5. **Используйте WeakMap и WeakSet:**\r\n   - Они позволяют хранить ссылки на объекты, которые автоматически удаляются сборщиком мусора.\r\n\r\n**Пример утечки памяти:**\r\n\\`\\`\\`javascript\r\nlet cache = [];\r\nfunction leakMemory() {\r\n  cache.push(new Array(1000000).fill(Math.random()));\r\n}\r\nsetInterval(leakMemory, 1000); // Постоянное выделение памяти\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102182,\r\n      question: \"Что такое WeakMap и WeakSet?\",\r\n      answer: `\r\n**WeakMap и WeakSet:**\r\n- Это коллекции, которые хранят ссылки на объекты, но не предотвращают их удаление сборщиком мусора.\r\n\r\n**WeakMap:**\r\n- Ключами могут быть только объекты.\r\n- Значения автоматически удаляются, если ключ больше не используется.\r\n\r\n**WeakSet:**\r\n- Хранит только объекты.\r\n- Объекты автоматически удаляются, если на них больше нет ссылок.\r\n\r\n**Пример WeakMap:**\r\n\\`\\`\\`javascript\r\nlet weakMap = new WeakMap();\r\nlet obj = {};\r\nweakMap.set(obj, \"data\");\r\nconsole.log(weakMap.has(obj)); // true\r\nobj = null; // Удаление ссылки\r\nconsole.log(weakMap.has(obj)); // false (объект удален сборщиком мусора)\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102183,\r\n      question: \"Как проверить использование памяти в JavaScript?\",\r\n      answer: `\r\n**Проверка использования памяти:**\r\n1. **В браузере:**\r\n   - Используйте инструменты разработчика (DevTools).\r\n   - Откройте вкладку \"Memory\" для анализа распределения памяти.\r\n2. **В Node.js:**\r\n   - Используйте модуль \\`process.memoryUsage()\\`.\r\n\r\n**Пример (Node.js):**\r\n\\`\\`\\`javascript\r\nconsole.log(process.memoryUsage());\r\n// {\r\n//   rss: ..., // Resident Set Size (общее использование памяти)\r\n//   heapTotal: ..., // Общий объем кучи\r\n//   heapUsed: ..., // Используемая память кучи\r\n//   external: ..., // Память, используемая внешними библиотеками\r\n// }\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testAsyncAwait = {\r\n  id: 101425,\r\n  title: \"Async Await\",\r\n  questions: [\r\n    {\r\n      id: 101426,\r\n      question: \"Расскажи про async await\",\r\n      answer: `\r\n**async и await:**\r\n- Это синтаксический сахар, упрощающий написание асинхронного кода, основанного на промисах.\r\n- \\`async\\` объявляет функцию как асинхронную и автоматически возвращает промис.\r\n- \\`await\\` приостанавливает выполнение кода до завершения промиса, делая асинхронный код более читабельным и похожим на синхронный.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nasync function fetchData() {\r\n  try {\r\n    const response = await fetch('https://api.example.com/data ');\r\n    const data = await response.json();\r\n    console.log(data);\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n  }\r\n}\r\n\r\nfetchData();\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101427,\r\n      question: \"Как работает async?\",\r\n      answer: `\r\n**async:**\r\n- Преобразует функцию в асинхронную.\r\n- Всегда возвращает промис. Если функция возвращает значение, оно автоматически оборачивается в промис.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nasync function greet() {\r\n  return \"Hello, world!\";\r\n}\r\n\r\ngreet().then((message) => {\r\n  console.log(message); // Hello, world!\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101428,\r\n      question: \"Как работает await?\",\r\n      answer: `\r\n**await:**\r\n- Приостанавливает выполнение асинхронной функции до тех пор, пока промис не будет выполнен (resolved или rejected).\r\n- Может использоваться только внутри функций, объявленных с \\`async\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nasync function waitForPromise() {\r\n  const promise = new Promise((resolve) => {\r\n    setTimeout(() => resolve(\"Done!\"), 1000);\r\n  });\r\n\r\n  const result = await promise;\r\n  console.log(result); // Done! (после 1 секунды)\r\n}\r\n\r\nwaitForPromise();\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101429,\r\n      question: \"Как обрабатывать ошибки в async/await?\",\r\n      answer: `\r\n**Обработка ошибок:**\r\n- Используйте \\`try...catch\\` для перехвата ошибок, возникающих при выполнении асинхронного кода.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nasync function fetchData() {\r\n  try {\r\n    const response = await fetch('https://api.example.com/data ');\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const data = await response.json();\r\n    console.log(data);\r\n  } catch (error) {\r\n    console.error('Error:', error.message);\r\n  }\r\n}\r\n\r\nfetchData();\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101430,\r\n      question: \"Чем async/await лучше, чем промисы?\",\r\n      answer: `\r\n**Преимущества async/await перед промисами:**\r\n1. **Читаемость:** Код выглядит как синхронный, что упрощает его понимание.\r\n2. **Удобство обработки ошибок:** \\`try...catch\\` работает так же, как в синхронном коде.\r\n3. **Меньше вложенности:** Нет необходимости использовать цепочки \\`then()\\`, что делает код более плоским и менее запутанным.\r\n\r\n**Пример сравнения:**\r\n\r\n**С промисами:**\r\n\\`\\`\\`javascript\r\nfunction fetchData() {\r\n  return fetch('https://api.example.com/data ')\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      console.log(data);\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error:', error.message);\r\n    });\r\n}\r\n\\`\\`\\`\r\n\r\n**С async/await:**\r\n\\`\\`\\`javascript\r\nasync function fetchData() {\r\n  try {\r\n    const response = await fetch('https://api.example.com/data ');\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const data = await response.json();\r\n    console.log(data);\r\n  } catch (error) {\r\n    console.error('Error:', error.message);\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101431,\r\n      question: \"Можно ли использовать async/await с forEach?\",\r\n      answer: `\r\n**Нет, нельзя:**\r\n- \\`forEach\\` не поддерживает асинхронные операции, так как он не дожидается завершения \\`await\\`.\r\n\r\n**Альтернатива:**\r\n- Используйте \\`for...of\\` или \\`map\\` с \\`Promise.all\\`.\r\n\r\n**Пример с for...of:**\r\n\\`\\`\\`javascript\r\nasync function processItems(items) {\r\n  for (const item of items) {\r\n    const result = await processItem(item);\r\n    console.log(result);\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример с map и Promise.all:**\r\n\\`\\`\\`javascript\r\nasync function processItems(items) {\r\n  const results = await Promise.all(items.map(async (item) => {\r\n    return await processItem(item);\r\n  }));\r\n  console.log(results);\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101432,\r\n      question: \"Что такое параллельное выполнение в async/await?\",\r\n      answer: `\r\n**Параллельное выполнение:**\r\n- Выполнение нескольких асинхронных операций одновременно с помощью \\`Promise.all\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nasync function fetchAllData() {\r\n  const [users, posts] = await Promise.all([\r\n    fetch('https://api.example.com/users ').then((res) => res.json()),\r\n    fetch('https://api.example.com/posts ').then((res) => res.json()),\r\n  ]);\r\n\r\n  console.log(users, posts);\r\n}\r\n\r\nfetchAllData();\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101433,\r\n      question: \"Как отменить асинхронную операцию в async/await?\",\r\n      answer: `\r\n**Отмена асинхронной операции:**\r\n- Используйте \\`AbortController\\` для отмены запросов, таких как \\`fetch\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nasync function fetchWithTimeout(url, timeout = 5000) {\r\n  const controller = new AbortController();\r\n  const signal = controller.signal;\r\n\r\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n\r\n  try {\r\n    const response = await fetch(url, { signal });\r\n    const data = await response.json();\r\n    console.log(data);\r\n  } catch (error) {\r\n    if (error.name === 'AbortError') {\r\n      console.error('Request aborted');\r\n    } else {\r\n      console.error('Error:', error.message);\r\n    }\r\n  } finally {\r\n    clearTimeout(timeoutId);\r\n  }\r\n}\r\n\r\nfetchWithTimeout('https://api.example.com/data ', 3000);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testHTML = {\r\n  id: 101475,\r\n  title: \"HTML\",\r\n  questions: [\r\n    {\r\n      id: 101476,\r\n      question: \"Что такое HTML?\",\r\n      answer: `\r\n      **HTML (HyperText Markup Language):**\r\n      - Это язык разметки, используемый для создания структуры веб-страниц.\r\n      - Определяет элементы страницы, такие как заголовки, параграфы, изображения, ссылки и другие.\r\n\r\n      **Пример простой HTML-страницы:**\r\n      \\`\\`\\`html\r\n      <!DOCTYPE html>\r\n      <html lang=\"en\">\r\n      <head>\r\n        <meta charset=\"UTF-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <title>Пример HTML</title>\r\n      </head>\r\n      <body>\r\n        <h1>Заголовок</h1>\r\n        <p>Это параграф текста.</p>\r\n      </body>\r\n      </html>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101477,\r\n      question: \"Какие основные теги HTML вы знаете?\",\r\n      answer: `\r\n      **Основные теги HTML:**\r\n      1. **\\`<html>\\`:** Корневой элемент документа.\r\n      2. **\\`<head>\\`:** Содержит метаданные, заголовок и подключаемые ресурсы (CSS, JS).\r\n      3. **\\`<body>\\`:** Основное содержимое страницы.\r\n      4. **\\`<h1>\\`-\\`<h6>\\`:** Заголовки разного уровня.\r\n      5. **\\`<p>\\`:** Параграф текста.\r\n      6. **\\`<a>\\`:** Гиперссылка (\\`href\\` указывает адрес).\r\n      7. **\\`<img>\\`:** Встраивание изображений (\\`src\\` указывает путь к файлу).\r\n      8. **\\`<div>\\`:** Блочный контейнер для группировки элементов.\r\n      9. **\\`<span>\\`:** Строчный контейнер для стилизации части текста.\r\n      10. **\\`<ul>\\`, \\`<ol>\\`, \\`<li>\\`:** Списки (неупорядоченные и упорядоченные).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <div>\r\n        <h1>Список покупок</h1>\r\n        <ul>\r\n          <li>Хлеб</li>\r\n          <li>Молоко</li>\r\n          <li>Яйца</li>\r\n        </ul>\r\n      </div>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101478,\r\n      question: \"Что такое семантические теги в HTML?\",\r\n      answer: `\r\n      **Семантические теги:**\r\n      - Это теги, которые описывают смысловое значение содержимого, а не только его внешний вид.\r\n      - Улучшают доступность и SEO (поисковую оптимизацию).\r\n\r\n      **Примеры семантических тегов:**\r\n      - \\`<header>\\`: Шапка страницы или раздела.\r\n      - \\`<footer>\\`: Подвал страницы или раздела.\r\n      - \\`<main>\\`: Основное содержимое страницы.\r\n      - \\`<article>\\`: Самостоятельный контент (например, статья).\r\n      - \\`<section>\\`: Логический раздел контента.\r\n      - \\`<nav>\\`: Блок навигации.\r\n      - \\`<aside>\\`: Дополнительный контент (например, боковая панель).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <header>\r\n        <h1>Заголовок сайта</h1>\r\n        <nav>\r\n          <ul>\r\n            <li><a href=\"#home\">Главная</a></li>\r\n            <li><a href=\"#about\">О нас</a></li>\r\n          </ul>\r\n        </nav>\r\n      </header>\r\n      <main>\r\n        <article>\r\n          <h2>Статья</h2>\r\n          <p>Текст статьи...</p>\r\n        </article>\r\n      </main>\r\n      <footer>\r\n        <p>&copy; 2023 Все права защищены.</p>\r\n      </footer>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101479,\r\n      question: \"Что такое атрибуты в HTML?\",\r\n      answer: `\r\n      **Атрибуты:**\r\n      - Это дополнительная информация, добавляемая к тегам для настройки их поведения.\r\n      - Атрибуты записываются внутри открывающего тега.\r\n\r\n      **Примеры атрибутов:**\r\n      - \\`class\\`: Определяет класс для стилизации через CSS.\r\n      - \\`id\\`: Уникальный идентификатор элемента.\r\n      - \\`src\\`: Путь к файлу (например, для изображений или скриптов).\r\n      - \\`href\\`: Адрес ссылки.\r\n      - \\`alt\\`: Альтернативный текст для изображений.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <img src=\"image.jpg\" alt=\"Описание изображения\">\r\n      <a href=\"https://example.com\"  target=\"_blank\">Ссылка</a>\r\n      <div class=\"container\" id=\"main\">Контент</div>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101480,\r\n      question: \"Что такое DOCTYPE и зачем он нужен?\",\r\n      answer: `\r\n      **DOCTYPE:**\r\n      - Объявление типа документа, которое указывает браузеру, как интерпретировать HTML-код.\r\n      - Обеспечивает корректное отображение страницы в разных браузерах.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <!DOCTYPE html>\r\n      <html lang=\"en\">\r\n      <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Пример</title>\r\n      </head>\r\n      <body>\r\n        <p>Текст</p>\r\n      </body>\r\n      </html>\r\n      \\`\\`\\`\r\n\r\n      **Важно:**\r\n      - Без \\`DOCTYPE\\` браузер может перейти в режим совместимости (quirks mode), что приведет к некорректному отображению.\r\n      `,\r\n    },\r\n    {\r\n      id: 101481,\r\n      question: \"Как создать гиперссылку в HTML?\",\r\n      answer: `\r\n      **Гиперссылка:**\r\n      - Создается с помощью тега \\`<a>\\` и атрибута \\`href\\`.\r\n\r\n      **Примеры:**\r\n      1. **Ссылка на внешний сайт:**\r\n         \\`\\`\\`html\r\n         <a href=\"https://example.com\"  target=\"_blank\">Посетить example.com</a>\r\n         \\`\\`\\`\r\n\r\n      2. **Ссылка на якорь внутри страницы:**\r\n         \\`\\`\\`html\r\n         <a href=\"#section1\">Перейти к разделу</a>\r\n         <h2 id=\"section1\">Раздел 1</h2>\r\n         \\`\\`\\`\r\n\r\n      3. **Ссылка на email:**\r\n         \\`\\`\\`html\r\n         <a href=\"mailto:example@example.com\">Написать письмо</a>\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101482,\r\n      question: \"Как вставить изображение в HTML?\",\r\n      answer: `\r\n      **Вставка изображения:**\r\n      - Используется тег \\`<img>\\` с атрибутом \\`src\\` (путь к файлу) и \\`alt\\` (альтернативный текст).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <img src=\"image.jpg\" alt=\"Описание изображения\">\r\n      \\`\\`\\`\r\n\r\n      **Дополнительно:**\r\n      - Можно указать размеры с помощью атрибутов \\`width\\` и \\`height\\`.\r\n      \\`\\`\\`html\r\n      <img src=\"image.jpg\" alt=\"Описание\" width=\"300\" height=\"200\">\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101483,\r\n      question: \"Что такое метатеги и зачем они нужны?\",\r\n      answer: `\r\n      **Метатеги:**\r\n      - Теги внутри \\`<head>\\`, которые предоставляют метаданные о странице.\r\n      - Не видны пользователю, но важны для браузеров и поисковых систем.\r\n\r\n      **Примеры метатегов:**\r\n      1. **Кодировка:**\r\n         \\`\\`\\`html\r\n         <meta charset=\"UTF-8\">\r\n         \\`\\`\\`\r\n\r\n      2. **Описание страницы:**\r\n         \\`\\`\\`html\r\n         <meta name=\"description\" content=\"Описание страницы для поисковых систем\">\r\n         \\`\\`\\`\r\n\r\n      3. **Адаптивный дизайн:**\r\n         \\`\\`\\`html\r\n         <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n         \\`\\`\\`\r\n\r\n      4. **Автор:**\r\n         \\`\\`\\`html\r\n         <meta name=\"author\" content=\"Имя автора\">\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101484,\r\n      question: \"Как создать таблицу в HTML?\",\r\n      answer: `\r\n      **Таблица:**\r\n      - Создается с помощью тегов \\`<table>\\`, \\`<tr>\\`, \\`<th>\\` и \\`<td>\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <table border=\"1\">\r\n        <thead>\r\n          <tr>\r\n            <th>Имя</th>\r\n            <th>Возраст</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Алиса</td>\r\n            <td>25</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Боб</td>\r\n            <td>30</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101485,\r\n      question: \"Что такое форма в HTML и как её создать?\",\r\n      answer: `\r\n      **Форма:**\r\n      - Используется для сбора данных от пользователя.\r\n      - Создается с помощью тега \\`<form>\\`.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <form action=\"/submit\" method=\"post\">\r\n        <label for=\"name\">Имя:</label>\r\n        <input type=\"text\" id=\"name\" name=\"name\"><br>\r\n\r\n        <label for=\"email\">Email:</label>\r\n        <input type=\"email\" id=\"email\" name=\"email\"><br>\r\n\r\n        <button type=\"submit\">Отправить</button>\r\n      </form>\r\n      \\`\\`\\`\r\n\r\n      **Элементы формы:**\r\n      - \\`<input>\\`: Поле ввода (текст, пароль, чекбокс и др.).\r\n      - \\`<select>\\`: Выпадающий список.\r\n      - \\`<textarea>\\`: Многострочное текстовое поле.\r\n      - \\`<button>\\`: Кнопка отправки.\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testDestructurization = {\r\n  id: 101325,\r\n  title: \"Деструктуризация\",\r\n  questions: [\r\n    {\r\n      id: 101326,\r\n      question: \"Что такое деструктуризация?\",\r\n      answer: `Деструктуризация — это синтаксический сахар в JavaScript (и других языках \r\n      программирования), который позволяет извлекать значения из массивов или объектов и \r\n      присваивать их переменным в более удобной форме.`,\r\n    },\r\n    {\r\n      id: 101327,\r\n      question: \"Применение деструктуризации\",\r\n      answer: `Упрощает работу с данными, особенно при работе с объектами, массивами или \r\n      возвращаемыми значениями функций.\r\n      Позволяет писать более читаемый и компактный код.`,\r\n    },\r\n    {\r\n      id: 101328,\r\n      question: \"Извлечение свойств объекта в переменные\",\r\n      answer: `const user = { name: \"Alice\", age: 25, city: \"New York\" };\r\n\r\n      // Без деструктуризации:\r\n      const name = user.name;\r\n      const age = user.age;\r\n\r\n      // С деструктуризацией:\r\n      const { name, age } = user;\r\n\r\n      console.log(name); // \"Alice\"\r\n      console.log(age);  // 25`,\r\n    },\r\n    {\r\n      id: 101329,\r\n      question: \"Переименование переменных\",\r\n      answer: `const { name: userName, age: userAge } = user;\r\n\r\n      console.log(userName); // \"Alice\"\r\n      console.log(userAge);  // 25`,\r\n    },\r\n    {\r\n      id: 101330,\r\n      question: \"Значения по умолчанию\",\r\n      answer: `const { name, age, country = \"USA\" } = user;\r\n\r\n      console.log(country); // \"USA\" (если свойства country нет в объекте)`,\r\n    },\r\n    {\r\n      id: 101331,\r\n      question: \"Извлечение элементов массива в переменные\",\r\n      answer: `const colors = [\"red\", \"green\", \"blue\"];\r\n\r\n      // Без деструктуризации:\r\n      const firstColor = colors[0];\r\n      const secondColor = colors[1];\r\n\r\n      // С деструктуризацией:\r\n      const [firstColor, secondColor] = colors;\r\n\r\n      console.log(firstColor);  // \"red\"\r\n      console.log(secondColor); // \"green\"`,\r\n    },\r\n    {\r\n      id: 101332,\r\n      question: \"Пропуск значений\",\r\n      answer: `const [first, , third] = colors;\r\n\r\n      console.log(first);  // \"red\"\r\n      console.log(third);  // \"blue\"`,\r\n    },\r\n    {\r\n      id: 101333,\r\n      question: \"Работа с объектами как аргументами функции\",\r\n      answer: `function printUser({ name, age }) {\r\n        console.log(\\`Name: \\${name}, Age: \\${age}\\`);\r\n      }\r\n\r\n      const user = { name: \"Bob\", age: 30 };\r\n      printUser(user); // \"Name: Bob, Age: 30\"`,\r\n    },\r\n    {\r\n      id: 101334,\r\n      question: \"Работа с массивами как аргументами функции\",\r\n      answer: `function printColors([first, second]) {\r\n        console.log(\\`First color: \\${first}, Second color: \\${second}\\`);\r\n      }\r\n\r\n      const colors = [\"yellow\", \"purple\"];\r\n      printColors(colors); // \"First color: yellow, Second color: purple\"`,\r\n    },\r\n    {\r\n      id: 101335,\r\n      question: \"\",\r\n      answer: ``,\r\n    },\r\n  ],\r\n};\r\n","export const testTernaryOperator = {\r\n  id: 101300,\r\n  title: \"Тернарный оператор\",\r\n  questions: [\r\n    {\r\n      id: 101301,\r\n      question: \"Что такое тернарный оператор?\",\r\n      answer: `\r\n**Тернарный оператор:**\r\n- Это сокращенная форма условного оператора \\`if...else\\`.\r\n- Синтаксис: \\`условие ? выражение1 : выражение2\\`.\r\n- Если условие истинно, возвращается \\`выражение1\\`; если ложно — \\`выражение2\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst age = 18;\r\nconst message = age >= 18 ? 'Взрослый' : 'Несовершеннолетний';\r\nconsole.log(message); // 'Взрослый'\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101302,\r\n      question: \"Как использовать тернарный оператор для отображения JSX?\",\r\n      answer: `\r\n**Использование в JSX:**\r\n- Тернарный оператор часто используется в React для условного рендеринга.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Greeting({ isLoggedIn }) {\r\n  return (\r\n    <div>\r\n      {isLoggedIn ? <p>Привет, пользователь!</p> : <p>Пожалуйста, войдите.</p>}\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101303,\r\n      question: \"Как работает вложенный тернарный оператор?\",\r\n      answer: `\r\n**Вложенный тернарный оператор:**\r\n- Позволяет проверять несколько условий в одной строке.\r\n- Рекомендуется использовать с осторожностью, чтобы не усложнять код.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst score = 85;\r\nconst grade =\r\n  score >= 90 ? 'A' :\r\n  score >= 80 ? 'B' :\r\n  score >= 70 ? 'C' :\r\n  'D';\r\n\r\nconsole.log(grade); // 'B'\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101304,\r\n      question: \"В чем разница между if...else и тернарным оператором?\",\r\n      answer: `\r\n**Разница:**\r\n1. **Синтаксис:**\r\n   - \\`if...else\\`: Более гибкий, но занимает больше строк.\r\n   - Тернарный оператор: Компактный, но подходит только для простых условий.\r\n2. **Возвращаемое значение:**\r\n   - \\`if...else\\`: Не возвращает значение напрямую.\r\n   - Тернарный оператор: Всегда возвращает значение.\r\n3. **Читаемость:**\r\n   - \\`if...else\\`: Лучше для сложных условий.\r\n   - Тернарный оператор: Подходит для простых условий.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// if...else:\r\nlet result;\r\nif (score > 50) {\r\n  result = 'Passed';\r\n} else {\r\n  result = 'Failed';\r\n}\r\n\r\n// Тернарный оператор:\r\nconst result = score > 50 ? 'Passed' : 'Failed';\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101305,\r\n      question: \"Как избежать ошибок при использовании тернарного оператора?\",\r\n      answer: `\r\n**Советы по использованию:**\r\n1. **Избегайте глубокой вложенности:**\r\n   - Вложенные тернарные операторы могут сделать код трудным для чтения.\r\n2. **Используйте скобки для ясности:**\r\n   - Добавляйте круглые скобки для улучшения читаемости.\r\n3. **Ограничьте использование для простых условий:**\r\n   - Для сложных условий лучше использовать \\`if...else\\`.\r\n\r\n**Пример с скобками:**\r\n\\`\\`\\`javascript\r\nconst result = (score > 90) ? 'Отлично' : ((score > 70) ? 'Хорошо' : 'Удовлетворительно');\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testSetTimeout = {\r\n  id: 101375,\r\n  title: \"SetTimeout\",\r\n  questions: [\r\n    {\r\n      id: 101376,\r\n      question: \"Что такое setTimeout и как он работает?\",\r\n      answer: `\r\n**setTimeout:**\r\n- Это встроенный метод JavaScript, который позволяет выполнить функцию через указанное количество миллисекунд.\r\n- Функция выполняется только один раз.\r\n\r\n**Синтаксис:**\r\n\\`\\`\\`javascript\r\nsetTimeout(callback, delay, arg1, arg2, ...);\r\n\\`\\`\\`\r\n- \\`callback\\`: Функция, которая будет выполнена.\r\n- \\`delay\\`: Задержка в миллисекундах.\r\n- \\`arg1, arg2, ...\\`: Аргументы, передаваемые в функцию.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nsetTimeout(() => {\r\n  console.log('Hello after 2 seconds');\r\n}, 2000);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101377,\r\n      question: \"Как отменить выполнение setTimeout?\",\r\n      answer: `\r\n**Отмена setTimeout:**\r\n- Для отмены используется метод \\`clearTimeout\\`, которому передается идентификатор таймера, возвращенный \\`setTimeout\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst timerId = setTimeout(() => {\r\n  console.log('This will not run');\r\n}, 3000);\r\n\r\nclearTimeout(timerId); // Отменяет выполнение\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101378,\r\n      question: \"Как передать аргументы в функцию через setTimeout?\",\r\n      answer: `\r\n**Передача аргументов:**\r\n- Аргументы можно передать после задержки в \\`setTimeout\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nsetTimeout((name, age) => {\r\n  console.log(\\`Name: \\${name}, Age: \\${age}\\`);\r\n}, 1000, 'Alice', 25);\r\n// Вывод: Name: Alice, Age: 25\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101379,\r\n      question: \"В чем разница между setTimeout и setInterval?\",\r\n      answer: `\r\n**Разница:**\r\n1. **setTimeout:**\r\n   - Выполняет функцию **один раз** через указанное время.\r\n2. **setInterval:**\r\n   - Выполняет функцию **повторно** с указанным интервалом.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// setTimeout:\r\nsetTimeout(() => {\r\n  console.log('Runs once');\r\n}, 1000);\r\n\r\n// setInterval:\r\nconst intervalId = setInterval(() => {\r\n  console.log('Runs repeatedly');\r\n}, 1000);\r\n\r\nsetTimeout(() => clearInterval(intervalId), 5000); // Останавливает через 5 секунд\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101380,\r\n      question: \"Как использовать setTimeout для создания цикла?\",\r\n      answer: `\r\n**Создание цикла:**\r\n- Можно использовать рекурсивный вызов \\`setTimeout\\` для создания цикла.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction repeatLog(message, times, delay) {\r\n  let count = 0;\r\n\r\n  function log() {\r\n    if (count < times) {\r\n      console.log(message);\r\n      count++;\r\n      setTimeout(log, delay);\r\n    }\r\n  }\r\n\r\n  log();\r\n}\r\n\r\nrepeatLog('Hello', 5, 1000); // Логирует 'Hello' 5 раз с интервалом 1 секунда\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testWorkWithBackend = {\r\n  id: 101025,\r\n  title: \"Work with backend\",\r\n  questions: [\r\n    {\r\n      id: 101026,\r\n      question:\r\n        \"Что такое протокол HTTPS и чем он отличается от HTTP? Как он защищает данные при передаче?\",\r\n      answer: `\r\nОсновные характеристики HTTP:\r\nПротокол передачи: HTTP работает по принципу клиент-сервер, где клиент (например, веб-браузер) отправляет запросы, а сервер отвечает на них.\r\nНе защищенный: Данные передаются в открытом виде, что делает их уязвимыми для перехвата и атак.\r\nМетоды: Включает методы, такие как GET, POST, PUT, DELETE и другие для взаимодействия с ресурсами.\r\nОсновные характеристики HTTPS:\r\nШифрование: HTTPS использует протокол SSL/TLS для шифрования данных, что обеспечивает защиту от перехвата.\r\nБезопасность: Защищает конфиденциальность информации, передаваемой между клиентом и сервером.\r\nАутентификация: HTTPS позволяет проверить подлинность сервера, что помогает предотвратить атаки типа \"человек посередине\".\r\n      `,\r\n    },\r\n    {\r\n      id: 101027,\r\n      question: \"Опишите принципы REST и как они применяются при работе с API\",\r\n      answer: `\r\nREST API (Representational State Transfer Application Programming Interface) — это архитектурный стиль взаимодействия компонентов распределенного приложения в сети. В контексте веб-разработки, он позволяет веб-сервисам общаться друг с другом через HTTP, используя стандартные методы HTTP (GET, POST, PUT, DELETE и т.д.) для выполнения операций над данными.\r\nПринципы REST:\r\nБез состояния (Stateless): Каждый запрос от клиента к серверу должен содержать всю информацию, необходимую для его выполнения. Сервер не сохраняет состояние клиента между запросами.\r\nЕдинообразие интерфейса (Uniform Interface): Определяет стандартный способ взаимодействия между клиентом и сервером, что облегчает и унифицирует разработку и взаимодействие компонентов системы.\r\nКэширование (Cacheable): Ответы на запросы могут быть кэшируемыми или некэшируемыми, что позволяет улучшить производительность системы за счет уменьшения нагрузки на сервер.\r\nКлиент-сервер (Client-Server): Разделение обязанностей между клиентом (например, пользовательским интерфейсом) и сервером (хранилище данных), что упрощает разработку и масштабирование компонентов независимо друг от друга.\r\nМногоуровневая система (Layered System): Клиент не может обязательно знать, общается ли он напрямую с сервером или через посредников, что повышает безопасность системы и позволяет использовать балансировщики нагрузки (Nginx, AWS ALB), кэширующие прокси (Varnish, CDN), фаерволы/API-шлюзы(Cloudflare, Kong) и прокси сервера.\r\nКод по требованию (Code on Demand, необязательно): Сервер может временно расширять или настраивать функциональность клиента, передавая ему исполняемый код.\r\nПримеры использования REST API:\r\nВеб-сервисы: Веб-сайты используют его для запроса данных с сервера (например, загрузка списка пользователей, публикации сообщений в блоге).\r\nМобильные приложения: Мобильные приложения общаются с сервером для получения и отправки данных (например, проверка погоды, отправка сообщений).\r\nИнтеграция с внешними сервисами: Приложения могут интегрироваться с внешними API для расширения своего функционала (например, использование карт Google Maps, интеграция с социальными сетями).\r\n      `,\r\n    },\r\n    {\r\n      id: 101028,\r\n      question:\r\n        \"Какие существуют способы обхода ограничений CORS и в каких ситуациях их применяют?\",\r\n      answer: `\r\nCORS (Cross-Origin Resource Sharing — это механизм безопасности браузеров, который блокирует междоменные запросы, если сервер явно не разрешил их. Однако в некоторых случаях (разработка, интеграция со сторонними API) требуется обойти эти ограничения. \r\nОсновные методы:\r\nПрокси-сервер\r\nЗапросы отправляются не напрямую к целевому API, а через ваш сервер, который добавляет нужные CORS-заголовки.\r\nКогда применять: Для доступа к API, которое не поддерживает CORS. В продакшене, если нельзя изменить API.\r\n\r\n\r\nJSONP (только для GET)\r\nAPI возвращает данные в виде JavaScript-функции (callback(data)), которую браузер выполняет.\r\nКогда применять: Для старых API, которые поддерживают JSONP. Только для GET-запросов.\r\n\r\n\r\nНастройка CORS на сервере\r\nСервер API добавляет заголовки:\r\nAccess-Control-Allow-Origin: *\r\nAccess-Control-Allow-Methods: GET, POST, PUT\r\nAccess-Control-Allow-Headers: Content-Type\r\nКогда применять: Если вы контролируете API.\r\n\r\nОтключение CORS в браузере (только для разработки)\r\nЗапуск браузера с отключенной политикой безопасности.\r\nКогда применять: Для локальной разработки.\r\n\r\nИспользование WebSockets\r\nWebSockets не подчиняются CORS.\r\nКогда применять: Для реального времени (чаты, уведомления).\r\n\r\nChrome-расширение (CORS Unblock)\r\nРасширение добавляет заголовки Access-Control-Allow-Origin: * к запросам.\r\nКогда применять: Для тестирования API без своего прокси.\r\n\r\niframe + postMessage\r\nЗагрузка данных через iframe с другого домена и обмен сообщениями через postMessage.\r\nКогда применять: Для встраивания виджетов с других доменов.      \r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testSnapshotTesting = {\r\n  id: 102225,\r\n  title: \"Snapshot Testing (снапшот тестирование)\",\r\n  questions: [\r\n    {\r\n      id: 102226,\r\n      question: \"Что такое снапшот-тестирование?\",\r\n      answer: `\r\n**Снапшот-тестирование:**\r\n- Это метод тестирования, при котором сохраняется \"снимок\" (snapshot) вывода компонента или функции.\r\n- При последующих запусках тестов вывод сравнивается с сохраненным снапшотом.\r\n- Если вывод изменился, тест завершается с ошибкой, и разработчик решает, является ли изменение ожидаемым.\r\n\r\n**Преимущества:**\r\n1. Простота настройки.\r\n2. Хорошо подходит для проверки UI-компонентов.\r\n3. Позволяет быстро выявить незапланированные изменения.\r\n\r\n**Пример (Jest):**\r\n\\`\\`\\`javascript\r\nimport renderer from 'react-test-renderer';\r\nimport MyComponent from './MyComponent';\r\n\r\ntest('renders correctly', () => {\r\n  const tree = renderer.create(<MyComponent />).toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102227,\r\n      question: \"Как работает обновление снапшотов?\",\r\n      answer: `\r\n**Обновление снапшотов:**\r\n- Если изменения в выводе компонента являются ожидаемыми, снапшот можно обновить.\r\n- Для этого используется флаг \\`--updateSnapshot\\` или \\`-u\\` при запуске тестов.\r\n\r\n**Пример команды:**\r\n\\`\\`\\`bash\r\njest --updateSnapshot\r\n# или\r\njest -u\r\n\\`\\`\\`\r\n\r\n**Важно:**\r\n- Перед обновлением убедитесь, что изменения действительно ожидаемы.\r\n- Не обновляйте снапшоты автоматически без проверки, чтобы избежать ошибок.\r\n`,\r\n    },\r\n    {\r\n      id: 102228,\r\n      question: \"Какие инструменты используются для снапшот-тестирования?\",\r\n      answer: `\r\n**Инструменты для снапшот-тестирования:**\r\n1. **Jest:**\r\n   - Встроенные возможности для создания и сравнения снапшотов.\r\n2. **React Test Renderer:**\r\n   - Используется для рендеринга React-компонентов в JSON-формат для снапшотов.\r\n3. **Testing Library:**\r\n   - Поддерживает снапшот-тестирование через Jest.\r\n4. **Storybook:**\r\n   - Инструмент для визуализации компонентов, который также может использоваться для снапшот-тестирования.\r\n\r\n**Пример с Jest и React Test Renderer:**\r\n\\`\\`\\`javascript\r\nimport renderer from 'react-test-renderer';\r\nimport MyComponent from './MyComponent';\r\n\r\ntest('renders correctly', () => {\r\n  const tree = renderer.create(<MyComponent />).toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102229,\r\n      question: \"Какие ограничения есть у снапшот-тестирования?\",\r\n      answer: `\r\n**Ограничения снапшот-тестирования:**\r\n1. **Не проверяет логику:**\r\n   - Снапшоты проверяют только внешний вид компонента, но не его поведение.\r\n2. **Чувствительность к изменениям:**\r\n   - Малейшие изменения в выводе требуют обновления снапшотов.\r\n3. **Размер снапшотов:**\r\n   - Для больших компонентов снапшоты могут стать громоздкими и сложными для анализа.\r\n4. **Ложное чувство безопасности:**\r\n   - Успешное прохождение тестов не гарантирует корректность работы компонента.\r\n\r\n**Рекомендации:**\r\n- Используйте снапшоты для небольших, стабильных компонентов.\r\n- Комбинируйте снапшот-тестирование с юнит-тестами для проверки логики.\r\n`,\r\n    },\r\n    {\r\n      id: 102230,\r\n      question: \"Как отлаживать ошибки при несоответствии снапшотов?\",\r\n      answer: `\r\n**Отладка несоответствий:**\r\n1. **Просмотр изменений:**\r\n   - Jest показывает diff между текущим выводом и сохраненным снапшотом.\r\n2. **Анализ изменений:**\r\n   - Определите, являются ли изменения ожидаемыми.\r\n3. **Обновление снапшотов:**\r\n   - Если изменения корректны, обновите снапшоты с помощью \\`jest -u\\`.\r\n4. **Исправление ошибок:**\r\n   - Если изменения неожиданны, исправьте код или верните предыдущую версию.\r\n\r\n**Пример diff:**\r\n\\`\\`\\`diff\r\n- <div className=\"old-class\">Hello</div>\r\n+ <div className=\"new-class\">Hello</div>\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102231,\r\n      question: \"Как использовать снапшоты для тестирования API-ответов?\",\r\n      answer: `\r\n**Тестирование API-ответов:**\r\n- Снапшоты можно использовать для проверки структуры данных, возвращаемых API.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\ntest('API response snapshot', async () => {\r\n  const response = await fetch('https://api.example.com/data ');\r\n  const data = await response.json();\r\n  expect(data).toMatchSnapshot();\r\n});\r\n\\`\\`\\`\r\n\r\n**Важно:**\r\n- Убедитесь, что данные стабильны (например, замокайте API, если ответы динамические).\r\n`,\r\n    },\r\n    {\r\n      id: 102232,\r\n      question: \"Как организовать хранение снапшотов в проекте?\",\r\n      answer: `\r\n**Хранение снапшотов:**\r\n- Jest автоматически создает файлы снапшотов в папке \\`__snapshots__\\` рядом с тестами.\r\n- Файлы снапшотов должны быть добавлены в систему контроля версий (например, Git).\r\n\r\n**Структура проекта:**\r\n\\`\\`\\`plaintext\r\nsrc/\r\n  components/\r\n    MyComponent/\r\n      MyComponent.test.js\r\n      __snapshots__/\r\n        MyComponent.test.js.snap\r\n\\`\\`\\`\r\n\r\n**Рекомендации:**\r\n- Регулярно проверяйте изменения в снапшотах при code review.\r\n- Удаляйте устаревшие снапшоты, если они больше не нужны.\r\n`,\r\n    },\r\n    {\r\n      id: 102233,\r\n      question:\r\n        \"Можно ли использовать снапшоты для тестирования CSS или стилей?\",\r\n      answer: `\r\n**Тестирование CSS/стилей:**\r\n- Да, снапшоты могут использоваться для проверки стилей, если они включены в вывод компонента.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\ntest('renders styles correctly', () => {\r\n  const tree = renderer.create(<StyledComponent />).toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\\`\\`\\`\r\n\r\n**Важно:**\r\n- Избегайте тестирования часто меняющихся стилей (например, уникальных классов CSS-in-JS).\r\n- Используйте снапшоты для проверки базовых структур стилей.\r\n`,\r\n    },\r\n  ],\r\n};\r\n","// import evaluateAnswers from \"../../utils/evaluateAnswers\";\r\n\r\nexport const testAgile = {\r\n  id: 100000,\r\n  title: \"Тест по Agile\",\r\n  questions: [\r\n    {\r\n      id: 100001,\r\n      question: \"Что такое Agile?\",\r\n      answer: `\r\n      **Agile:**\r\n      - Это методология разработки, которая помогает быстро адаптироваться к изменениям.\r\n      - Основана на принципах гибкости, сотрудничества и итеративности.\r\n      - Цель — доставлять ценность клиенту быстрее и эффективнее.\r\n\r\n      **Пример:**\r\n      - Команда разрабатывает MVP (минимально жизнеспособный продукт) за несколько итераций, получая обратную связь от клиента после каждой.\r\n      `,\r\n    },\r\n    {\r\n      id: 100002,\r\n      question: \"Назовите основные принципы Agile.\",\r\n      answer: `\r\n      **Основные принципы Agile:**\r\n      1. **Гибкость:** Быстрая адаптация к изменениям.\r\n      2. **Сотрудничество:** Тесное взаимодействие с заказчиком.\r\n      3. **Итеративность:** Работа выполняется небольшими шагами (итерациями).\r\n      4. **Постоянное улучшение:** Анализ процессов и их оптимизация.\r\n      5. **Доставка ценности:** Фокус на предоставлении полезного результата.\r\n\r\n      **Пример:**\r\n      - В Scrum каждая итерация (спринт) длится 2–4 недели, и в конце команда демонстрирует готовый продукт.\r\n      `,\r\n    },\r\n    {\r\n      id: 100003,\r\n      question: \"Назовите методы Agile.\",\r\n      answer: `\r\n      **Методы Agile:**\r\n      1. **Scrum:** Итеративная разработка с фиксированными ролями и спринтами.\r\n      2. **Kanban:** Управление задачами через визуализацию рабочего процесса.\r\n      3. **Extreme Programming (XP):** Фокус на техническом совершенстве (например, TDD, парное программирование).\r\n      4. **Lean:** Минимизация потерь и максимизация ценности.\r\n      5. **Crystal:** Гибкая методология, зависящая от размера команды.\r\n      6. **Dynamic System Development Method (DSDM):** Акцент на быстрое создание прототипов.\r\n\r\n      **Пример:**\r\n      - Scrum подходит для проектов с четкими требованиями, а Kanban — для поддержки текущих задач.\r\n      `,\r\n    },\r\n    {\r\n      id: 100004,\r\n      question: \"Какие преимущества есть у Agile?\",\r\n      answer: `\r\n      **Преимущества Agile:**\r\n      1. **Быстрая адаптация к изменениям:** Легко менять приоритеты.\r\n      2. **Улучшенное взаимодействие с заказчиком:** Постоянная обратная связь.\r\n      3. **Раннее выявление проблем:** Проблемы видны уже на этапе разработки.\r\n      4. **Постоянное улучшение продукта:** Каждая итерация делает продукт лучше.\r\n      5. **Высокая мотивация команды:** Команда участвует в принятии решений.\r\n\r\n      **Пример:**\r\n      - Заказчик может изменить требования в середине проекта, и команда быстро адаптируется.\r\n      `,\r\n    },\r\n    {\r\n      id: 100005,\r\n      question: \"Расскажите подробнее о Scrum, что это?\",\r\n      answer: `\r\n      **Scrum:**\r\n      - Это фреймворк Agile, который используется для управления проектами и разработки продуктов.\r\n      - Основан на итерациях (спринтах), ролях и артефактах.\r\n\r\n      **Ключевые элементы:**\r\n      1. **Роли:**\r\n         - **Product Owner:** Отвечает за бэклог продукта и приоритеты.\r\n         - **Scrum Master:** Помогает команде следовать Scrum-процессам.\r\n         - **Developers:** Реализуют задачи.\r\n      2. **Артефакты:**\r\n         - **Бэклог продукта:** Список всех требований.\r\n         - **Бэклог спринта:** Задачи на текущий спринт.\r\n         - **Инкремент:** Готовый результат спринта.\r\n      3. **События:**\r\n         - Планирование спринта.\r\n         - Ежедневные стендапы.\r\n         - Обзор спринта.\r\n         - Ретроспектива.\r\n\r\n      **Пример:**\r\n      - Команда планирует спринт, работает над задачами и демонстрирует результат заказчику.\r\n      `,\r\n    },\r\n    {\r\n      id: 100006,\r\n      question: \"Какие есть этапы в Scrum?\",\r\n      answer: `\r\n      **Этапы Scrum:**\r\n      1. **Планирование спринта:**\r\n         - Определение задач на спринт.\r\n      2. **Ежедневные стендапы (Daily Scrum):**\r\n         - Короткие встречи (15 минут) для обсуждения прогресса.\r\n      3. **Разработка в течение спринта:**\r\n         - Выполнение задач из бэклога спринта.\r\n      4. **Обзор спринта (Sprint Review):**\r\n         - Демонстрация результатов заказчику.\r\n      5. **Ретроспектива спринта (Sprint Retrospective):**\r\n         - Анализ процессов и поиск улучшений.\r\n\r\n      **Пример:**\r\n      - На ретроспективе команда обсуждает, как улучшить коммуникацию.\r\n      `,\r\n    },\r\n    {\r\n      id: 100007,\r\n      question: \"Какие преимущества Scrum?\",\r\n      answer: `\r\n      **Преимущества Scrum:**\r\n      1. **Прозрачность процесса:** Все задачи видны в бэклоге.\r\n      2. **Быстрая обратная связь:** Заказчик видит результаты каждые 2–4 недели.\r\n      3. **Гибкость:** Легко менять приоритеты.\r\n      4. **Улучшенное взаимодействие:** Команда работает как единое целое.\r\n\r\n      **Пример:**\r\n      - Команда может пересмотреть планы после каждого спринта, если требования изменились.\r\n      `,\r\n    },\r\n    {\r\n      id: 100008,\r\n      question: \"Что такое Kanban?\",\r\n      answer: `\r\n      **Kanban:**\r\n      - Это метод управления задачами, который визуализирует рабочий процесс.\r\n      - Используется доска с колонками (например, 'Сделать', 'В процессе', 'Готово').\r\n\r\n      **Пример:**\r\n      - Задачи перемещаются по доске, показывая их текущий статус.\r\n      `,\r\n    },\r\n    {\r\n      id: 100009,\r\n      question: \"Какие есть принципы Kanban?\",\r\n      answer: `\r\n      **Принципы Kanban:**\r\n      1. **Визуализация рабочего процесса:** Все задачи видны на доске.\r\n      2. **Ограничение количества задач в работе (WIP):** Предотвращает перегрузку команды.\r\n      3. **Управление потоком задач:** Задачи движутся плавно от начала до конца.\r\n      4. **Постоянное улучшение:** Команда анализирует и оптимизирует процессы.\r\n\r\n      **Пример:**\r\n      - Если WIP лимит установлен на 3 задачи, новые задачи не берутся, пока текущие не завершены.\r\n      `,\r\n    },\r\n    {\r\n      id: 100010,\r\n      question: \"Подробнее о Kanban доске.\",\r\n      answer: `\r\n      **Kanban доска:**\r\n      - Инструмент визуализации рабочего процесса.\r\n      - Состоит из колонок (например, 'Сделать', 'В процессе', 'Готово'), в которые перемещаются задачи (карточки).\r\n\r\n      **Пример:**\r\n      \\`\\`\\`\r\n      +----------------+----------------+----------------+\r\n      |     Сделать    |  В процессе    |     Готово     |\r\n      +----------------+----------------+----------------+\r\n      | Задача 1       | Задача 2       | Задача 3       |\r\n      +----------------+----------------+----------------+\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 100011,\r\n      question: \"Какие преимущества Kanban?\",\r\n      answer: `\r\n      **Преимущества Kanban:**\r\n      1. **Улучшенная визуализация:** Все задачи видны на доске.\r\n      2. **Снижение нагрузки:** Ограничение WIP предотвращает перегрузку.\r\n      3. **Гибкость:** Новые задачи могут добавляться в любое время.\r\n      4. **Улучшенный поток задач:** Задачи движутся плавно.\r\n\r\n      **Пример:**\r\n      - Команда быстро реагирует на новые задачи, не нарушая процесс.\r\n      `,\r\n    },\r\n    {\r\n      id: 100012,\r\n      question: \"Какие ещё есть методологии помимо Agile?\",\r\n      answer: `\r\n      **Другие методологии:**\r\n      1. **Waterfall (каскадная модель):**\r\n         - Линейный подход: этапы выполняются последовательно.\r\n      2. **Spiral (спиральная модель):**\r\n         - Акцент на управлении рисками.\r\n      3. **V-Model (V-образная модель):**\r\n         - Каждому этапу разработки соответствует этап тестирования.\r\n      4. **DevOps:**\r\n         - Интеграция разработки и операций.\r\n      5. **Feature-Driven Development (FDD):**\r\n         - Фокус на разработке функциональных возможностей.\r\n\r\n      **Пример:**\r\n      - Waterfall подходит для проектов с четкими требованиями, где изменения минимальны.\r\n      `,\r\n    },\r\n    {\r\n      id: 100013,\r\n      question: \"Какую роль играет Product Owner в Scrum?\",\r\n      answer: `\r\n      **Product Owner:**\r\n      - Отвечает за бэклог продукта и приоритеты.\r\n      - Основные обязанности:\r\n        1. **Управление бэклогом:** Формирует и приоритизирует задачи.\r\n        2. **Взаимодействие с заказчиком:** Уточняет требования.\r\n        3. **Представление интересов бизнеса:** Обеспечивает ценность продукта.\r\n\r\n      **Пример:**\r\n      - Product Owner решает, какие задачи войдут в следующий спринт.\r\n      `,\r\n    },\r\n    {\r\n      id: 100014,\r\n      question: \"Какую роль играет Scrum Master?\",\r\n      answer: `\r\n      **Scrum Master:**\r\n      - Помогает команде следовать Scrum-процессам.\r\n      - Основные обязанности:\r\n        1. **Обучение команды:** Объясняет принципы Scrum.\r\n        2. **Устранение препятствий:** Помогает команде работать эффективно.\r\n        3. **Фасилитация встреч:** Ведет планирование, стендапы и ретроспективы.\r\n\r\n      **Пример:**\r\n      - Scrum Master помогает команде разобраться с блокирующими задачами.\r\n      `,\r\n    },\r\n    {\r\n      id: 100015,\r\n      question: \"В чем разница между Agile и Waterfall?\",\r\n      answer: `\r\n      **Разница между Agile и Waterfall:**\r\n      1. **Подход:**\r\n         - Agile: Итеративный, гибкий.\r\n         - Waterfall: Линейный, последовательный.\r\n      2. **Изменения:**\r\n         - Agile: Легко адаптируется к изменениям.\r\n         - Waterfall: Изменения сложны и дороги.\r\n      3. **Обратная связь:**\r\n         - Agile: Постоянная обратная связь.\r\n         - Waterfall: Обратная связь только на этапе тестирования.\r\n\r\n      **Пример:**\r\n      - Agile подходит для стартапов, а Waterfall — для крупных проектов с четкими требованиями.\r\n      `,\r\n    },\r\n    {\r\n      id: 100016,\r\n      question: \"Какие метрики используются в Agile?\",\r\n      answer: `\r\n      **Метрики в Agile:**\r\n      1. **Velocity:** Скорость выполнения задач командой за спринт.\r\n      2. **Burndown Chart:** Диаграмма, показывающая оставшийся объем работы.\r\n      3. **Cycle Time:** Время, необходимое для завершения задачи.\r\n      4. **Lead Time:** Время от создания задачи до её завершения.\r\n\r\n      **Пример:**\r\n      - Velocity помогает предсказать, сколько задач команда выполнит в следующем спринте.\r\n      `,\r\n    },\r\n    {\r\n      id: 100017,\r\n      question: \"Что такое Lean в Agile?\",\r\n      answer: `\r\n      **Lean в Agile:**\r\n      - Это подход, направленный на минимизацию потерь и максимизацию ценности.\r\n      - Основные принципы:\r\n        1. **Исключение потерь:** Устранение ненужных задач.\r\n        2. **Построение качества:** Ошибки исправляются сразу.\r\n        3. **Создание знаний:** Команда учится на опыте.\r\n        4. **Отложенное решение:** Решения принимаются на основе фактов.\r\n\r\n      **Пример:**\r\n      - Команда фокусируется только на задачах, которые приносят ценность клиенту.\r\n      `,\r\n    },\r\n  ],\r\n};\r\n\r\n// export const answers = {\r\n//   1: \"Agile — это методология разработки, которая помогает быстро адаптироваться к изменениям.\",\r\n//   2: \"Agile основывается на принципах гибкости, сотрудничества и итеративности.\",\r\n//   3: \"Scrum, Kanban, Extreme Programming (XP), Lean, Crystal, Dynamic System Development Method (DSDM).\",\r\n//   4: \"Быстрая адаптация к изменениям. Улучшенное взаимодействие с заказчиком. Раннее выявление проблем. Постоянное улучшение продукта.\",\r\n//   5: \"Scrum — это фреймворк Agile, который используется для управления проектами и разработки продуктов. Он основан на итерациях (спринтах), ролях (Scrum Master, Product Owner, Developers) и артефактах (бэклог продукта, бэклог спринта, инкремент).\",\r\n//   6: \"Планирование спринта. Ежедневные стендапы (Daily Scrum). Разработка в течение спринта. Обзор спринта (Sprint Review). Ретроспектива спринта (Sprint Retrospective).\",\r\n//   7: \"Прозрачность процесса разработки. Быстрая обратная связь от заказчика. Гибкость в управлении изменениями. Улучшенное взаимодействие в команде.\",\r\n//   8: \"Kanban — это метод управления задачами, который визуализирует рабочий процесс на доске с колонками (например, 'Сделать', 'В процессе', 'Готово').\",\r\n//   9: \"Визуализация рабочего процесса. Ограничение количества задач в работе (WIP). Управление потоком задач. Постоянное улучшение процесса (Kaizen). Он помогает ограничивать количество задач в работе (WIP) и улучшает поток задач.\",\r\n//   10: \"Kanban доска — это инструмент визуализации рабочего процесса. Она состоит из колонок (например, 'Сделать', 'В процессе', 'Готово'), в которые перемещаются задачи. (карточки). Это помогает команде видеть статус задач и улучшать процесс.\",\r\n//   11: \"Улучшенная визуализация рабочего процесса. Снижение количества задач в работе (WIP). Улучшенный поток задач. Гибкость и адаптивность.\",\r\n//   12: \"Waterfall (каскадная модель). Spiral (спиральная модель). V-Model (V-образная модель). DevOps. Feature-Driven Development (FDD).\",\r\n// };\r\n\r\n// evaluateAnswers(test, answers).then((results) => {\r\n//   console.log(results);\r\n// });\r\n","export const testRequestParamJSON = {\r\n  id: 101675,\r\n  title: \"Request parameters and JSON\",\r\n  questions: [\r\n    {\r\n      id: 101676,\r\n      question: \"Как клонировать объект в JavaScript с использованием JSON?\",\r\n      answer: `\r\n      JSON.stringify() — преобразует объект в строку JSON.\r\n      JSON.parse() — превращает строку обратно в новый объект.\r\n      const original = { a: 1, b: { c: 2 } };\r\n      const clone = JSON.parse(JSON.stringify(original));`,\r\n    },\r\n    {\r\n      id: 101677,\r\n      question: \"Как добавить тело запроса в HTTP-запрос при использовании fetch API?\",\r\n      answer: `\r\n      Чтобы добавить тело запроса (body) при использовании fetch, нужно:\r\nУказать второй аргумент — объект с параметрами запроса.\r\nВ этом объекте задать метод (method), например, 'POST', 'PUT' и т.д.\r\nДобавить свойство body — данные для отправки.\r\n(Обычно) указать заголовок Content-Type через свойство headers.`,\r\n    },\r\n    {\r\n      id: 101678,\r\n      question: \"Какие типы содержимого можно использовать при отправке HTTP-запроса, и как это влияет на запрос и ответ?\",\r\n      answer: `\r\n      application/json\r\nСервер ожидает, что данные будут переданы в виде объекта JSON.\r\nКлиент может легко парсить JSON, так как он поддерживается большинством языков программирования.\r\n\r\n\r\napplication/x-www-form-urlencoded\r\nДанные кодируются как пары ключ-значение, разделённые амперсандом (&).\r\nТрадиционный способ отправки данных HTML-форм.\r\n\r\n\r\nmultipart/form-data\r\nДанные разделяются на части (части могут быть текстовыми или бинарными).\r\nИспользуется для загрузки файлов или отправки данных с файлами и текстовыми полями одновременно.\r\n\r\n\r\ntext/plain\r\nПростой текст без форматирования.\r\nОтправка простых текстовых сообщений.\r\n\r\n\r\ntext/html\r\nHTML-код.\r\nВ основном используется в ответах сервера для веб-страниц.\r\n\r\n\r\napplication/xml\r\nДанные в формате XML (eXtensible Markup Language).\r\nУстаревший, но всё ещё используемый формат для API.\r\n\r\n\r\napplication/octet-stream\r\nДвоичные данные (например, файлы).\r\nЗагрузка или скачивание файлов (например, PDF, ZIP).\r\n\r\n\r\nimage/* (например, image/jpeg, image/png)\r\nИзображения в различных форматах.\r\nПередача изображений между клиентом и сервером.\r\n`,\r\n    }\r\n  ],\r\n};\r\n","export const testSearchMethods = {\r\n  id: 100125,\r\n  title: \"Search methods\",\r\n  questions: [\r\n    {\r\n      id: 100126,\r\n      question: \"Как получить элемент DOM по его ID с помощью JavaScript?\",\r\n      answer: `\r\nКлассический способ: document.getElementById()\r\nАльтернатива: document.querySelector()\r\n      `,\r\n    },\r\n    {\r\n      id: 100127,\r\n      question: \"Объясните разницу между методами querySelector и getElementById в JavaScript.\",\r\n      answer: `\r\ngetElementById\r\nВозвращает один элемент по id. Быстрее, проще, только по id.\r\n\r\nquerySelector\r\nВозвращает первый элемент, соответствующий любому CSS-селектору (id, класс, тег, атрибут и их комбинации).\r\n      `,\r\n    },\r\n    {\r\n      id: 100128,\r\n      question: \"Каковы основные различия между статическим и живым NodeList, и как это влияет на работу с методами поиска элементов в DOM?\",\r\n      answer: `\r\nПроизводительность:\r\nЖивые коллекции могут вызывать перерасчеты при доступе к ним.\r\nСтатические — безопаснее для частых манипуляций с DOM.\r\n\r\nКеширование:\r\nСтатические можно сохранять в переменные без риска устаревания.\r\nЖивые требуют повторного запроса при изменениях.\r\n\r\nМетоды массивов:\r\nСтатические работают с forEach, map (после преобразования в массив).\r\nЖивые — только с простыми циклами (for, while).\r\n      `,\r\n    }\r\n  ],\r\n};","export const testTesting = {\r\n  id: 101500,\r\n  title: \"Тестирование\",\r\n  questions: [\r\n    {\r\n      id: 101501,\r\n      question: \"Что такое тестирование программного обеспечения?\",\r\n      answer: `\r\n**Тестирование программного обеспечения:**\r\n- Это процесс проверки и оценки работоспособности, надежности и корректности программного кода.\r\n- Цель тестирования — выявить ошибки, дефекты или недочеты в приложении до его выпуска.\r\n\r\n**Основные типы тестирования:**\r\n1. **Модульное тестирование (Unit Testing):**\r\n   - Тестирование отдельных компонентов или функций.\r\n2. **Интеграционное тестирование (Integration Testing):**\r\n   - Проверка взаимодействия между модулями.\r\n3. **Функциональное тестирование (Functional Testing):**\r\n   - Проверка, что система выполняет свои функции согласно требованиям.\r\n4. **Регрессионное тестирование (Regression Testing):**\r\n   - Убедиться, что новые изменения не сломали существующий функционал.\r\n5. **Приемочное тестирование (Acceptance Testing):**\r\n   - Проверка готовности продукта для конечных пользователей.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction add(a, b) {\r\n  return a + b;\r\n}\r\n\r\n// Unit Test\r\nconsole.assert(add(2, 3) === 5, \"Test failed: add(2, 3) should be 5\");\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101502,\r\n      question: \"Что такое unit-тесты?\",\r\n      answer: `\r\n**Unit-тесты (модульные тесты):**\r\n- Это тесты, которые проверяют отдельные части кода (функции, методы, классы) на предмет их корректной работы.\r\n- Используются для проверки небольших изолированных частей программы.\r\n\r\n**Преимущества:**\r\n1. **Быстрота:** Тестируются только отдельные модули.\r\n2. **Локализация ошибок:** Легко определить, где возникла проблема.\r\n3. **Автоматизация:** Можно запускать автоматически с помощью инструментов.\r\n\r\n**Пример (Jest):**\r\n\\`\\`\\`javascript\r\nfunction multiply(a, b) {\r\n  return a * b;\r\n}\r\n\r\ntest('multiply 2 * 3 to equal 6', () => {\r\n  expect(multiply(2, 3)).toBe(6);\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101503,\r\n      question: \"Какие популярные инструменты используются для тестирования?\",\r\n      answer: `\r\n**Популярные инструменты тестирования:**\r\n1. **Jest:**\r\n   - Популярный фреймворк для JavaScript/TypeScript.\r\n   - Поддерживает unit-тесты, моки и snapshot-тесты.\r\n2. **Mocha + Chai:**\r\n   - Mocha — фреймворк для организации тестов.\r\n   - Chai — библиотека для написания утверждений (assertions).\r\n3. **Cypress:**\r\n   - Инструмент для энд-ту-энд тестирования веб-приложений.\r\n4. **Selenium:**\r\n   - Инструмент для автоматизации тестирования веб-интерфейсов.\r\n5. **Puppeteer:**\r\n   - Библиотека для управления браузером Chrome через JavaScript.\r\n6. **Postman:**\r\n   - Инструмент для тестирования API.\r\n\r\n**Пример Cypress:**\r\n\\`\\`\\`javascript\r\ndescribe('My First Test', () => {\r\n  it('Visits the Kitchen Sink', () => {\r\n    cy.visit('https://example.cypress.io ');\r\n    cy.contains('type').click();\r\n    cy.url().should('include', '/commands/actions');\r\n  });\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101504,\r\n      question: \"Что такое TDD (Test-Driven Development)?\",\r\n      answer: `\r\n**TDD (Test-Driven Development):**\r\n- Методология разработки, при которой сначала пишутся тесты, а затем реализуется код, который удовлетворяет этим тестам.\r\n- Процесс состоит из трех этапов:\r\n  1. **Red (красный):** Написание теста, который заведомо не проходит.\r\n  2. **Green (зеленый):** Реализация минимального кода, чтобы тест проходил.\r\n  3. **Refactor (рефакторинг):** Оптимизация кода без изменения его поведения.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// Step 1: Red\r\ntest('should return true for even numbers', () => {\r\n  expect(isEven(2)).toBe(true);\r\n});\r\n\r\n// Step 2: Green\r\nfunction isEven(num) {\r\n  return num % 2 === 0;\r\n}\r\n\r\n// Step 3: Refactor (если необходимо)\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101505,\r\n      question: \"Что такое BDD (Behavior-Driven Development)?\",\r\n      answer: `\r\n**BDD (Behavior-Driven Development):**\r\n- Расширение TDD, ориентированное на описание поведения системы с точки зрения пользователя.\r\n- Тесты пишутся в виде сценариев, используя естественный язык (например, Gherkin).\r\n\r\n**Пример (Cucumber):**\r\n\\`\\`\\`gherkin\r\nFeature: Login functionality\r\n  Scenario: Successful login with valid credentials\r\n    Given I am on the login page\r\n    When I enter valid username and password\r\n    Then I should be redirected to the dashboard\r\n\\`\\`\\`\r\n\r\n**Преимущества:**\r\n1. **Понятность:** Тесты легко читаются и понимаются даже нетехническими специалистами.\r\n2. **Коллаборация:** Упрощает взаимодействие между разработчиками, тестировщиками и бизнесом.\r\n`,\r\n    },\r\n    {\r\n      id: 101506,\r\n      question: \"Что такое Mocking (моки) в тестировании?\",\r\n      answer: `\r\n**Mocking (моки):**\r\n- Это создание поддельных объектов или функций, имитирующих поведение реальных зависимостей.\r\n- Используется для изоляции тестируемого кода от внешних систем (например, баз данных, API).\r\n\r\n**Пример (Jest):**\r\n\\`\\`\\`javascript\r\nconst mockFunction = jest.fn(() => \"mocked response\");\r\n\r\ntest('mock function returns mocked response', () => {\r\n  expect(mockFunction()).toBe(\"mocked response\");\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101507,\r\n      question: \"Что такое Snapshot-тестирование?\",\r\n      answer: `\r\n**Snapshot-тестирование:**\r\n- Это метод тестирования, при котором сохраняется \"снимок\" состояния компонента или данных.\r\n- При последующих запусках теста текущее состояние сравнивается с сохраненным снимком.\r\n\r\n**Пример (Jest):**\r\n\\`\\`\\`javascript\r\ntest('renders correctly', () => {\r\n  const tree = renderer.create(<MyComponent />).toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\\`\\`\\`\r\n\r\n**Преимущества:**\r\n1. **Быстрота:** Легко проверять, что UI не изменяется случайным образом.\r\n2. **Автоматизация:** Если изменения допустимы, можно обновить снимок.\r\n`,\r\n    },\r\n    {\r\n      id: 101508,\r\n      question: \"Что такое end-to-end (E2E) тестирование?\",\r\n      answer: `\r\n**End-to-End (E2E) тестирование:**\r\n- Это тестирование, которое проверяет работу всего приложения целиком, симулируя действия реального пользователя.\r\n- Обычно используется для тестирования веб-интерфейсов и пользовательских сценариев.\r\n\r\n**Пример (Cypress):**\r\n\\`\\`\\`javascript\r\ndescribe('Login Flow', () => {\r\n  it('logs in successfully', () => {\r\n    cy.visit('/login');\r\n    cy.get('input[name=\"username\"]').type('user');\r\n    cy.get('input[name=\"password\"]').type('password');\r\n    cy.get('button[type=\"submit\"]').click();\r\n    cy.url().should('include', '/dashboard');\r\n  });\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101509,\r\n      question: \"Что такое интеграционное тестирование?\",\r\n      answer: `\r\n**Интеграционное тестирование:**\r\n- Это тестирование взаимодействия между несколькими модулями или компонентами системы.\r\n- Проверяет, как отдельные части программы работают вместе.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction fetchData() {\r\n  return fetch('https://api.example.com/data ').then((res) => res.json());\r\n}\r\n\r\ntest('fetchData returns data', async () => {\r\n  const data = await fetchData();\r\n  expect(data).toEqual({ success: true });\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101510,\r\n      question: \"Какие виды тестов относятся к регрессионному тестированию?\",\r\n      answer: `\r\n**Регрессионное тестирование:**\r\n- Это повторное выполнение ранее пройденных тестов для проверки, что новые изменения не сломали существующий функционал.\r\n\r\n**Виды тестов:**\r\n1. **Unit-тесты:** Проверка отдельных модулей.\r\n2. **Интеграционные тесты:** Проверка взаимодействия между модулями.\r\n3. **Функциональные тесты:** Проверка, что система работает по требованиям.\r\n4. **E2E тесты:** Проверка работы приложения целиком.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\ntest('existing feature still works', () => {\r\n  expect(existingFeature()).toBe(true);\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testHooksRouting = {\r\n  id: 102325,\r\n  title: \"React Hooks & Routing\",\r\n  questions: [\r\n    {\r\n      id: 102326,\r\n      question: \"Что такое React Hooks?\",\r\n      answer: `\r\n**React Hooks:**\r\n- Это функции, которые позволяют использовать состояние и другие возможности React без написания классовых компонентов.\r\n- Появились в React 16.8 и упрощают управление состоянием и побочными эффектами.\r\n\r\n**Основные хуки:**\r\n1. **useState:** Управление состоянием компонента.\r\n2. **useEffect:** Обработка побочных эффектов (например, API-запросы, подписки).\r\n3. **useContext:** Работа с контекстом для глобального состояния.\r\n4. **useReducer:** Альтернатива \\`useState\\` для сложного состояния.\r\n5. **useCallback, useMemo:** Оптимизация производительности.\r\n\r\n**Пример (\\`useState\\`):**\r\n\\`\\`\\`javascript\r\nimport React, { useState } from 'react';\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102327,\r\n      question: \"Как работает хук useEffect?\",\r\n      answer: `\r\n**Хук \\`useEffect\\`:**\r\n- Используется для выполнения побочных эффектов в функциональных компонентах.\r\n- Может заменить методы жизненного цикла классовых компонентов (\\`componentDidMount\\`, \\`componentDidUpdate\\`, \\`componentWillUnmount\\`).\r\n\r\n**Синтаксис:**\r\n\\`\\`\\`javascript\r\nuseEffect(() => {\r\n  // Код для выполнения эффекта\r\n  return () => {\r\n    // Очистка (например, отмена подписок)\r\n  };\r\n}, [dependencies]);\r\n\\`\\`\\`\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction Timer() {\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSeconds((prev) => prev + 1);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval); // Очистка при размонтировании\r\n  }, []);\r\n\r\n  return <p>Seconds: {seconds}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102328,\r\n      question: \"Что такое хук useContext?\",\r\n      answer: `\r\n**Хук \\`useContext\\`:**\r\n- Позволяет получить доступ к значению контекста без обертывания компонента в \\`Context.Consumer\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { createContext, useContext } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeContext.Provider value=\"dark\">\r\n      <ChildComponent />\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nfunction ChildComponent() {\r\n  const theme = useContext(ThemeContext);\r\n  return <p>Current theme: {theme}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102329,\r\n      question: \"Как использовать хук useReducer?\",\r\n      answer: `\r\n**Хук \\`useReducer\\`:**\r\n- Альтернатива \\`useState\\` для управления сложным состоянием.\r\n- Принимает редюсер и начальное состояние, возвращает текущее состояние и функцию dispatch.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useReducer } from 'react';\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    case 'decrement':\r\n      return { count: state.count - 1 };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nfunction Counter() {\r\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {state.count}</p>\r\n      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\r\n      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102330,\r\n      question: \"Как использовать маршрутизацию в React?\",\r\n      answer: `\r\n**Маршрутизация в React:**\r\n- Реализуется с помощью библиотеки \\`react-router-dom\\`.\r\n- Позволяет создавать одностраничные приложения (SPA) с динамической навигацией.\r\n\r\n**Основные компоненты:**\r\n1. **BrowserRouter:** Обертка для всего приложения.\r\n2. **Routes:** Группирует маршруты.\r\n3. **Route:** Определяет путь и соответствующий компонент.\r\n4. **Link:** Заменяет тег \\`<a>\\` для навигации.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <nav>\r\n        <Link to=\"/\">Home</Link> | \r\n        <Link to=\"/about\">About</Link>\r\n      </nav>\r\n      <Routes>\r\n        <Route path=\"/\" element={<Home />} />\r\n        <Route path=\"/about\" element={<About />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n  return <h1>Home Page</h1>;\r\n}\r\n\r\nfunction About() {\r\n  return <h1>About Page</h1>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102331,\r\n      question: \"Как использовать хук useNavigate?\",\r\n      answer: `\r\n**Хук \\`useNavigate\\`:**\r\n- Предоставляет функцию для программной навигации между маршрутами.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction LoginButton() {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = () => {\r\n    navigate('/dashboard'); // Переход на /dashboard\r\n  };\r\n\r\n  return <button onClick={handleLogin}>Login</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102332,\r\n      question: \"Как работают вложенные маршруты?\",\r\n      answer: `\r\n**Вложенные маршруты:**\r\n- Позволяют определять дочерние маршруты внутри родительского маршрута.\r\n- Используйте \\`Outlet\\` для рендеринга дочерних маршрутов.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { Outlet } from 'react-router-dom';\r\n\r\nfunction Dashboard() {\r\n  return (\r\n    <div>\r\n      <h1>Dashboard</h1>\r\n      <Outlet /> {/* Рендерит дочерний маршрут */}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/dashboard\" element={<Dashboard />}>\r\n          <Route path=\"profile\" element={<Profile />} />\r\n          <Route path=\"settings\" element={<Settings />} />\r\n        </Route>\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102333,\r\n      question: \"Как защитить маршруты?\",\r\n      answer: `\r\n**Защита маршрутов:**\r\n- Используйте условную логику для проверки прав доступа.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nfunction ProtectedRoute({ isLoggedIn, children }) {\r\n  if (!isLoggedIn) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n  return children;\r\n}\r\n\r\nfunction App() {\r\n  const isLoggedIn = false; // Пример состояния аутентификации\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route\r\n          path=\"/dashboard\"\r\n          element={\r\n            <ProtectedRoute isLoggedIn={isLoggedIn}>\r\n              <Dashboard />\r\n            </ProtectedRoute>\r\n          }\r\n        />\r\n        <Route path=\"/login\" element={<LoginPage />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102334,\r\n      question: \"Как использовать Query Parameters?\",\r\n      answer: `\r\n**Query Parameters:**\r\n- Используйте хук \\`useSearchParams\\` для работы с параметрами запроса.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nfunction SearchPage() {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const query = searchParams.get('q'); // Получаем параметр \"q\"\r\n\r\n  const handleSearch = (newQuery) => {\r\n    setSearchParams({ q: newQuery }); // Обновляем параметр \"q\"\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={query || ''}\r\n        onChange={(e) => handleSearch(e.target.value)}\r\n      />\r\n      <p>Search Query: {query}</p>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testHistoryLocationMatch = {\r\n  id: 102300,\r\n  title: \"History, Location, Match (React Router)\",\r\n  questions: [\r\n    {\r\n      id: 102301,\r\n      question: \"Что такое объект history в React Router?\",\r\n      answer: `\r\n**Объект \\`history\\`:**\r\n- Предоставляет API для управления историей браузера (навигация между страницами).\r\n- Используется для программной навигации и управления URL.\r\n\r\n**Основные методы:**\r\n1. **push(path, [state]):**\r\n   - Переходит на указанный путь и добавляет запись в историю.\r\n2. **replace(path, [state]):**\r\n   - Заменяет текущую запись в истории на новую.\r\n3. **go(n):**\r\n   - Перемещается на \\`n\\` шагов вперед или назад в истории.\r\n4. **goBack():**\r\n   - Возвращает пользователя на предыдущую страницу.\r\n5. **goForward():**\r\n   - Перемещает пользователя на следующую страницу.\r\n\r\n**Пример использования:**\r\n\\`\\`\\`javascript\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction NavigateButton() {\r\n  const history = useHistory();\r\n\r\n  const handleNavigate = () => {\r\n    history.push('/dashboard'); // Переход на /dashboard\r\n  };\r\n\r\n  return <button onClick={handleNavigate}>Go to Dashboard</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102302,\r\n      question: \"Что такое объект location в React Router?\",\r\n      answer: `\r\n**Объект \\`location\\`:**\r\n- Содержит информацию о текущем URL и состоянии маршрута.\r\n- Позволяет получить доступ к пути, параметрам запроса и состоянию.\r\n\r\n**Свойства объекта \\`location\\`:**\r\n1. **pathname:** Текущий путь (например, \\`/about\\`).\r\n2. **search:** Параметры запроса в виде строки (например, \\`?id=123\\`).\r\n3. **hash:** Хэш-часть URL (например, \\`#section1\\`).\r\n4. **state:** Дополнительное состояние, переданное при навигации.\r\n\r\n**Пример использования:**\r\n\\`\\`\\`javascript\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction CurrentLocation() {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <div>\r\n      <p>Pathname: {location.pathname}</p>\r\n      <p>Search: {location.search}</p>\r\n      <p>Hash: {location.hash}</p>\r\n      <p>State: {JSON.stringify(location.state)}</p>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102303,\r\n      question: \"Что такое объект match в React Router?\",\r\n      answer: `\r\n**Объект \\`match\\`:**\r\n- Содержит информацию о совпадении маршрута с текущим URL.\r\n- Позволяет получить параметры маршрута и другие данные.\r\n\r\n**Свойства объекта \\`match\\`:**\r\n1. **params:** Объект с параметрами маршрута (например, \\`{ id: '123' }\\`).\r\n2. **path:** Шаблон пути, указанный в \\`Route\\`.\r\n3. **url:** Совпавшая часть URL.\r\n4. **isExact:** Булево значение, указывающее, точно ли маршрут совпал с URL.\r\n\r\n**Пример использования:**\r\n\\`\\`\\`javascript\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction Profile() {\r\n  const { userId } = useParams(); // Получаем параметр из URL\r\n\r\n  return <h1>User ID: {userId}</h1>;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/profile/:userId\" element={<Profile />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102304,\r\n      question: \"Как использовать Query Parameters из объекта location?\",\r\n      answer: `\r\n**Query Parameters:**\r\n- Используйте хук \\`useSearchParams\\` или библиотеку \\`URLSearchParams\\` для работы с параметрами запроса.\r\n\r\n**Пример с \\`useSearchParams\\`:**\r\n\\`\\`\\`javascript\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nfunction SearchPage() {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const query = searchParams.get('q'); // Получаем параметр \"q\"\r\n\r\n  const handleSearch = (newQuery) => {\r\n    setSearchParams({ q: newQuery }); // Обновляем параметр \"q\"\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={query || ''}\r\n        onChange={(e) => handleSearch(e.target.value)}\r\n      />\r\n      <p>Search Query: {query}</p>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример с \\`URLSearchParams\\`:**\r\n\\`\\`\\`javascript\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction SearchPage() {\r\n  const location = useLocation();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const query = queryParams.get('q');\r\n\r\n  return <p>Search Query: {query}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102305,\r\n      question: \"Как передать состояние через объект history?\",\r\n      answer: `\r\n**Передача состояния через \\`history\\`:**\r\n- Используйте свойство \\`state\\` при вызове \\`push\\` или \\`replace\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction NavigateButton() {\r\n  const history = useHistory();\r\n\r\n  const handleNavigate = () => {\r\n    history.push('/dashboard', { from: 'home' }); // Передаем состояние\r\n  };\r\n\r\n  return <button onClick={handleNavigate}>Go to Dashboard</button>;\r\n}\r\n\r\nfunction Dashboard() {\r\n  const location = useLocation();\r\n\r\n  return <p>Came from: {location.state?.from}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102306,\r\n      question: \"Как обработать несуществующий маршрут?\",\r\n      answer: `\r\n**Обработка несуществующего маршрута:**\r\n- Используйте маршрут с wildcard (\\`*\\`) для отображения страницы \"Not Found\".\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/\" element={<HomePage />} />\r\n        <Route path=\"/about\" element={<AboutPage />} />\r\n        <Route path=\"*\" element={<NotFoundPage />} /> {/* 404 маршрут */}\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nfunction NotFoundPage() {\r\n  return <h1>404 - Page Not Found</h1>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102307,\r\n      question: \"Как использовать объект match для вложенных маршрутов?\",\r\n      answer: `\r\n**Использование объекта \\`match\\` для вложенных маршрутов:**\r\n- \\`match.url\\` и \\`match.path\\` помогают динамически создавать ссылки и маршруты.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/dashboard\" element={<Dashboard />}>\r\n          <Route path=\"profile\" element={<Profile />} />\r\n          <Route path=\"settings\" element={<Settings />} />\r\n        </Route>\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nfunction Dashboard() {\r\n  const match = useMatch('/dashboard'); // Получаем match\r\n\r\n  return (\r\n    <div>\r\n      <h1>Dashboard</h1>\r\n      <nav>\r\n        <Link to={\\`\\${match.url}/profile\\`}>Profile</Link> | \r\n        <Link to={\\`\\${match.url}/settings\\`}>Settings</Link>\r\n      </nav>\r\n      <Outlet /> {/* Рендерит дочерний маршрут */}\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102308,\r\n      question: \"Как работает хук useMatch?\",\r\n      answer: `\r\n**Хук \\`useMatch\\`:**\r\n- Позволяет проверить, совпадает ли текущий URL с указанным шаблоном.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useMatch } from 'react-router-dom';\r\n\r\nfunction ActiveLink({ to, children }) {\r\n  const match = useMatch(to);\r\n\r\n  return (\r\n    <div style={{ fontWeight: match ? 'bold' : 'normal' }}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav>\r\n      <ActiveLink to=\"/\">Home</ActiveLink>\r\n      <ActiveLink to=\"/about\">About</ActiveLink>\r\n    </nav>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102309,\r\n      question: \"Как использовать объект location для перенаправления?\",\r\n      answer: `\r\n**Перенаправление с использованием \\`location\\`:**\r\n- Используйте компонент \\`Navigate\\` или хук \\`useNavigate\\`.\r\n\r\n**Пример с \\`Navigate\\`:**\r\n\\`\\`\\`javascript\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\n\r\nfunction Redirect() {\r\n  const location = useLocation();\r\n\r\n  return <Navigate to=\"/dashboard\" state={{ from: location }} />;\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример с \\`useNavigate\\`:**\r\n\\`\\`\\`javascript\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction RedirectToDashboard() {\r\n  const navigate = useNavigate();\r\n\r\n  const handleClick = () => {\r\n    navigate('/dashboard');\r\n  };\r\n\r\n  return <button onClick={handleClick}>Go to Dashboard</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testUnionTypeIntersection = {\r\n  id: 101925,\r\n  title: \"Union type & Intersection type\",\r\n  questions: [\r\n    {\r\n      id: 101926,\r\n      question: \"Что такое Union type?\",\r\n      answer: `\r\n**Union Type (объединение типов):**\r\n- Позволяет переменной или параметру иметь один из нескольких указанных типов.\r\n- Обозначается с помощью оператора \\`|\\` (pipe).\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nlet value: string | number;\r\nvalue = \"Hello\"; // OK\r\nvalue = 42; // OK\r\nvalue = true; // Ошибка: тип boolean не совместим с string | number\r\n\\`\\`\\`\r\n\r\n**Использование в функциях:**\r\n\\`\\`\\`typescript\r\nfunction printId(id: string | number): void {\r\n  console.log(\\`ID: $\\{id}\\`);\r\n}\r\n\r\nprintId(101); // ID: 101\r\nprintId(\"202\"); // ID: 202\r\n\\`\\`\\`\r\n\r\n**Особенности:**\r\n- При работе с union types необходимо учитывать, что доступны только общие методы и свойства всех типов.\r\n- Для сужения типа можно использовать проверки (\\`typeof\\`, \\`instanceof\\`, пользовательские проверки).\r\n\r\n**Пример сужения типа:**\r\n\\`\\`\\`typescript\r\nfunction printValue(value: string | number): void {\r\n  if (typeof value === \"string\") {\r\n    console.log(\"String:\", value.toUpperCase());\r\n  } else {\r\n    console.log(\"Number:\", value.toFixed(2));\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101927,\r\n      question: \"Что такое Intersection type?\",\r\n      answer: `\r\n**Intersection Type (пересечение типов):**\r\n- Позволяет комбинировать несколько типов в один, объединяя все их свойства.\r\n- Обозначается с помощью оператора \\`&\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\ntype Name = { name: string };\r\ntype Age = { age: number };\r\n\r\ntype Person = Name & Age;\r\n\r\nconst person: Person = { name: \"Alice\", age: 30 }; // OK\r\nconsole.log(person); // { name: \"Alice\", age: 30 }\r\n\r\n// Ошибка: Отсутствует одно из свойств\r\nconst invalidPerson: Person = { name: \"Bob\" }; // Error: Property 'age' is missing\r\n\\`\\`\\`\r\n\r\n**Использование в сложных типах:**\r\n\\`\\`\\`typescript\r\ntype HasId = { id: number };\r\ntype HasName = { name: string };\r\n\r\ntype Entity = HasId & HasName;\r\n\r\nconst entity: Entity = { id: 1, name: \"Entity\" };\r\nconsole.log(entity); // { id: 1, name: \"Entity\" }\r\n\\`\\`\\`\r\n\r\n**Особенности:**\r\n- Intersection types полезны для создания сложных типов, например, при работе с интерфейсами или объектами.\r\n- Если пересекаемые типы имеют конфликтующие свойства (например, разные типы одного и того же ключа), результат будет некорректным.\r\n\r\n**Пример конфликта типов:**\r\n\\`\\`\\`typescript\r\ntype A = { prop: string };\r\ntype B = { prop: number };\r\n\r\ntype Conflict = A & B; // Невозможно объединить string и number\r\nconst conflict: Conflict = { prop: \"test\" }; // Error: Type 'string' is not assignable to type 'never'\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101928,\r\n      question: \"Как использовать Union type с массивами?\",\r\n      answer: `\r\n**Union type с массивами:**\r\n- Позволяет определить массив, который может содержать элементы разных типов.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nconst values: (string | number)[] = [\"hello\", 42, \"world\", 100];\r\nconsole.log(values); // [\"hello\", 42, \"world\", 100]\r\n\\`\\`\\`\r\n\r\n**Использование с функциями:**\r\n\\`\\`\\`typescript\r\nfunction processValues(values: (string | number)[]): void {\r\n  values.forEach((value) => {\r\n    if (typeof value === \"string\") {\r\n      console.log(\"String:\", value.toUpperCase());\r\n    } else {\r\n      console.log(\"Number:\", value.toFixed(2));\r\n    }\r\n  });\r\n}\r\n\r\nprocessValues([\"test\", 123, \"example\"]); \r\n// String: TEST\r\n// Number: 123.00\r\n// String: EXAMPLE\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101929,\r\n      question: \"Можно ли комбинировать Union и Intersection types?\",\r\n      answer: `\r\n**Да, можно:**\r\n- Union и Intersection types могут быть комбинированы для создания сложных типов.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\ntype A = { a: string };\r\ntype B = { b: number };\r\ntype C = { c: boolean };\r\n\r\ntype Combined = (A & B) | C;\r\n\r\nconst obj1: Combined = { a: \"test\", b: 42 }; // OK\r\nconst obj2: Combined = { c: true }; // OK\r\n\r\n// Ошибка: Недостаточно свойств\r\nconst invalidObj: Combined = { a: \"test\" }; // Error: Property 'b' is missing\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101930,\r\n      question: \"Как использовать type guards с Union types?\",\r\n      answer: `\r\n**Type Guards:**\r\n- Это техника, которая позволяет сузить тип до одного из вариантов union type.\r\n- Используются условия (\\`typeof\\`, \\`instanceof\\`, пользовательские проверки).\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\nfunction isString(value: string | number): value is string {\r\n  return typeof value === \"string\";\r\n}\r\n\r\nfunction process(value: string | number): void {\r\n  if (isString(value)) {\r\n    console.log(\"String:\", value.toUpperCase());\r\n  } else {\r\n    console.log(\"Number:\", value.toFixed(2));\r\n  }\r\n}\r\n\r\nprocess(\"hello\"); // String: HELLO\r\nprocess(42); // Number: 42.00\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101931,\r\n      question: \"Как работают Literal Types с Union types?\",\r\n      answer: `\r\n**Literal Types:**\r\n- Позволяют ограничить значения переменной конкретными литералами.\r\n- Часто используются вместе с union types для создания ограниченных наборов значений.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\ntype Status = \"success\" | \"error\" | \"pending\";\r\n\r\nfunction handleStatus(status: Status): void {\r\n  switch (status) {\r\n    case \"success\":\r\n      console.log(\"Operation successful\");\r\n      break;\r\n    case \"error\":\r\n      console.log(\"An error occurred\");\r\n      break;\r\n    case \"pending\":\r\n      console.log(\"Operation is pending\");\r\n      break;\r\n  }\r\n}\r\n\r\nhandleStatus(\"success\"); // Operation successful\r\nhandleStatus(\"invalid\"); // Error: Argument of type '\"invalid\"' is not assignable to parameter of type 'Status'\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101932,\r\n      question:\r\n        \"Как использовать Intersection type для расширения интерфейсов?\",\r\n      answer: `\r\n**Расширение интерфейсов:**\r\n- Intersection type позволяет комбинировать интерфейсы для создания нового типа.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\ninterface User {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\ninterface Timestamp {\r\n  createdAt: Date;\r\n}\r\n\r\ntype UserWithTimestamp = User & Timestamp;\r\n\r\nconst user: UserWithTimestamp = {\r\n  id: 1,\r\n  name: \"Alice\",\r\n  createdAt: new Date(),\r\n};\r\n\r\nconsole.log(user);\r\n// { id: 1, name: \"Alice\", createdAt: [Date] }\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testOtherHooks = {\r\n  id: 102500,\r\n  title: \"Другие хуки React\",\r\n  questions: [\r\n    {\r\n      id: 102501,\r\n      question: \"Что такое хук useMemo и как он работает?\",\r\n      answer: `\r\n**Хук \\`useMemo\\`:**\r\n- Используется для мемоизации (кэширования) вычислений, чтобы избежать лишних пересчетов.\r\n- Возвращает мемоизированное значение.\r\n\r\n**Синтаксис:**\r\n\\`\\`\\`javascript\r\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\r\n\\`\\`\\`\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useMemo, useState } from 'react';\r\n\r\nfunction ExpensiveComponent({ a, b }) {\r\n  const result = useMemo(() => {\r\n    console.log('Recalculating...');\r\n    return a * b; // Вычисление значения\r\n  }, [a, b]); // Пересчитывается только при изменении a или b\r\n\r\n  return <p>Result: {result}</p>;\r\n}\r\n\r\nfunction App() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <ExpensiveComponent a={count} b={2} />\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102502,\r\n      question: \"Что такое хук useCallback и чем он отличается от useMemo?\",\r\n      answer: `\r\n**Хук \\`useCallback\\`:**\r\n- Используется для мемоизации функций.\r\n- Возвращает мемоизированную версию функции.\r\n\r\n**Разница между \\`useCallback\\` и \\`useMemo\\`:**\r\n- \\`useCallback\\` мемоизирует саму функцию.\r\n- \\`useMemo\\` мемоизирует результат выполнения функции.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useCallback, useState } from 'react';\r\n\r\nfunction ChildComponent({ onClick }) {\r\n  console.log('Child rendered');\r\n  return <button onClick={onClick}>Click me</button>;\r\n}\r\n\r\nfunction ParentComponent() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  const handleClick = useCallback(() => {\r\n    console.log('Button clicked');\r\n  }, []); // Функция не меняется при рендере\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <ChildComponent onClick={handleClick} />\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102503,\r\n      question: \"Что такое хук useReducer и когда его использовать?\",\r\n      answer: `\r\n**Хук \\`useReducer\\`:**\r\n- Альтернатива \\`useState\\` для управления сложным состоянием.\r\n- Принимает редюсер и начальное состояние, возвращает текущее состояние и функцию dispatch.\r\n\r\n**Когда использовать:**\r\n1. Сложное состояние с несколькими подсостояниями.\r\n2. Логика обновления состояния зависит от предыдущего состояния.\r\n3. Необходимость централизованного управления состоянием.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useReducer } from 'react';\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    case 'decrement':\r\n      return { count: state.count - 1 };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nfunction Counter() {\r\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {state.count}</p>\r\n      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\r\n      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102504,\r\n      question: \"Что такое хук useRef и как его использовать?\",\r\n      answer: `\r\n**Хук \\`useRef\\`:**\r\n- Позволяет получить доступ к DOM-элементам или хранить изменяемое значение, которое не вызывает перерисовку компонента.\r\n\r\n**Использование:**\r\n1. **Доступ к DOM:**\r\n   - Используйте \\`ref\\` для получения ссылки на элемент.\r\n2. **Хранение значений:**\r\n   - \\`useRef\\` можно использовать для хранения данных, которые не влияют на рендеринг.\r\n\r\n**Пример (доступ к DOM):**\r\n\\`\\`\\`javascript\r\nimport React, { useRef } from 'react';\r\n\r\nfunction TextInputWithFocusButton() {\r\n  const inputEl = useRef(null);\r\n\r\n  const onButtonClick = () => {\r\n    inputEl.current.focus(); // Установка фокуса на поле ввода\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input ref={inputEl} type=\"text\" />\r\n      <button onClick={onButtonClick}>Focus the input</button>\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример (хранение значения):**\r\n\\`\\`\\`javascript\r\nimport React, { useRef, useEffect } from 'react';\r\n\r\nfunction Counter() {\r\n  const countRef = useRef(0);\r\n\r\n  useEffect(() => {\r\n    countRef.current += 1;\r\n    console.log('Current count:', countRef.current);\r\n  });\r\n\r\n  return <p>Check the console for the count value.</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102505,\r\n      question: \"Что такое хук useImperativeHandle и зачем он нужен?\",\r\n      answer: `\r\n**Хук \\`useImperativeHandle\\`:**\r\n- Позволяет настраивать экземпляр, который предоставляется родительскому компоненту через \\`ref\\`.\r\n- Используется редко, в основном для создания императивных API.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useRef, useImperativeHandle, forwardRef } from 'react';\r\n\r\nconst Child = forwardRef((props, ref) => {\r\n  const internalInputRef = useRef();\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    focus: () => {\r\n      internalInputRef.current.focus();\r\n    },\r\n  }));\r\n\r\n  return <input ref={internalInputRef} type=\"text\" />;\r\n});\r\n\r\nfunction Parent() {\r\n  const childRef = useRef(null);\r\n\r\n  const handleFocus = () => {\r\n    childRef.current.focus(); // Вызов метода focus из дочернего компонента\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Child ref={childRef} />\r\n      <button onClick={handleFocus}>Focus Input</button>\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102506,\r\n      question:\r\n        \"Что такое хук useLayoutEffect и чем он отличается от useEffect?\",\r\n      answer: `\r\n**Хук \\`useLayoutEffect\\`:**\r\n- Аналогичен \\`useEffect\\`, но выполняется синхронно после всех DOM-мутаций, но до отрисовки на экране.\r\n- Используется для синхронных операций, таких как измерение размеров элементов.\r\n\r\n**Разница между \\`useLayoutEffect\\` и \\`useEffect\\`:**\r\n1. \\`useLayoutEffect\\` выполняется перед отрисовкой.\r\n2. \\`useEffect\\` выполняется после отрисовки.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useLayoutEffect, useRef, useState } from 'react';\r\n\r\nfunction MeasureExample() {\r\n  const [height, setHeight] = useState(0);\r\n  const divRef = useRef();\r\n\r\n  useLayoutEffect(() => {\r\n    const rect = divRef.current.getBoundingClientRect();\r\n    setHeight(rect.height);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div ref={divRef}>Hello, world</div>\r\n      <p>Height: {height}px</p>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102507,\r\n      question: \"Что такое хук useDebugValue и зачем он нужен?\",\r\n      answer: `\r\n**Хук \\`useDebugValue\\`:**\r\n- Позволяет отображать метку для пользовательских хуков в инструментах разработчика React.\r\n- Используется только для отладки.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useState, useDebugValue } from 'react';\r\n\r\nfunction useCustomHook() {\r\n  const [value, setValue] = useState(false);\r\n  useDebugValue(value ? 'Active' : 'Inactive');\r\n  return [value, setValue];\r\n}\r\n\r\nfunction Component() {\r\n  const [isActive, setIsActive] = useCustomHook();\r\n  return (\r\n    <button onClick={() => setIsActive(!isActive)}>\r\n      {isActive ? 'Deactivate' : 'Activate'}\r\n    </button>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102508,\r\n      question: \"Как создать пользовательский хук?\",\r\n      answer: `\r\n**Пользовательские хуки:**\r\n- Это функции, которые начинаются с префикса \\`use\\` и могут использовать другие хуки.\r\n- Позволяют повторно использовать логику в разных компонентах.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction useFetch(url) {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        setData(result);\r\n        setLoading(false);\r\n      });\r\n  }, [url]);\r\n\r\n  return [data, loading];\r\n}\r\n\r\nfunction FetchData() {\r\n  const [data, loading] = useFetch('https://api.example.com/data ');\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  return <div>{JSON.stringify(data)}</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testSyntheticEvent = {\r\n  id: 102550,\r\n  title: \"SyntheticEvent (синтетическое событие)\",\r\n  questions: [\r\n    {\r\n      id: 102551,\r\n      question: \"Что такое SyntheticEvent?\",\r\n      answer: `\r\n**SyntheticEvent:**\r\n- Это кросс-браузерная обертка над нативными событиями браузера.\r\n- React создает объект \\`SyntheticEvent\\`, чтобы обеспечить единообразное поведение событий во всех браузерах.\r\n- Он имеет такой же интерфейс, как и нативные события, но с дополнительными возможностями для работы в React.\r\n\r\n**Основные особенности:**\r\n1. **Кросс-браузерность:**\r\n   - \\`SyntheticEvent\\` абстрагирует различия между браузерами.\r\n2. **Пул событий:**\r\n   - React использует пул событий для оптимизации производительности. После выполнения обработчика событие очищается и возвращается в пул.\r\n3. **Прекращение распространения:**\r\n   - Для остановки распространения события используется метод \\`stopPropagation\\`.\r\n4. **Отмена действия по умолчанию:**\r\n   - Для отмены действия по умолчанию (например, перехода по ссылке) используется метод \\`preventDefault\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleClick(event) {\r\n  console.log('Clicked!');\r\n  event.stopPropagation(); // Остановка всплытия\r\n  event.preventDefault();  // Отмена действия по умолчанию\r\n}\r\n\r\nfunction Button() {\r\n  return <button onClick={handleClick}>Click me</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102552,\r\n      question: \"Как работает пул событий в React?\",\r\n      answer: `\r\n**Пул событий:**\r\n- React повторно использует объекты \\`SyntheticEvent\\` для оптимизации производительности.\r\n- После вызова обработчика событие очищается (его свойства становятся \\`null\\`) и возвращается в пул для повторного использования.\r\n\r\n**Важно:**\r\n- Если вам нужно сохранить данные из события (например, \\`event.target.value\\`), скопируйте их в переменную до завершения обработчика.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleChange(event) {\r\n  const value = event.target.value; // Сохраняем значение\r\n  console.log(value);              // Используем его\r\n}\r\n\r\nfunction Input() {\r\n  return <input type=\"text\" onChange={handleChange} />;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102553,\r\n      question: \"Какие методы доступны в SyntheticEvent?\",\r\n      answer: `\r\n**Методы SyntheticEvent:**\r\n1. **stopPropagation():**\r\n   - Останавливает всплытие события.\r\n2. **preventDefault():**\r\n   - Отменяет действие по умолчанию (например, переход по ссылке или отправку формы).\r\n3. **persist():**\r\n   - Удаляет событие из пула, позволяя использовать его асинхронно.\r\n4. **nativeEvent:**\r\n   - Возвращает нативное событие браузера.\r\n\r\n**Пример использования методов:**\r\n\\`\\`\\`javascript\r\nfunction handleLinkClick(event) {\r\n  event.preventDefault(); // Отмена перехода по ссылке\r\n  console.log('Link clicked, but navigation is prevented.');\r\n}\r\n\r\nfunction App() {\r\n  return <a href=\"https://example.com \" onClick={handleLinkClick}>Example</a>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102554,\r\n      question: \"Как работать с нативными событиями в React?\",\r\n      answer: `\r\n**Нативные события:**\r\n- Если вам нужно получить доступ к нативному событию браузера, используйте свойство \\`nativeEvent\\` объекта \\`SyntheticEvent\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleNativeEvent(event) {\r\n  console.log('SyntheticEvent:', event);\r\n  console.log('Native Event:', event.nativeEvent);\r\n}\r\n\r\nfunction Button() {\r\n  return <button onClick={handleNativeEvent}>Click me</button>;\r\n}\r\n\\`\\`\\`\r\n\r\n**Важно:**\r\n- Рекомендуется использовать \\`SyntheticEvent\\`, так как он обеспечивает кросс-браузерную совместимость.\r\n`,\r\n    },\r\n    {\r\n      id: 102555,\r\n      question: \"Как передавать параметры в обработчики событий?\",\r\n      answer: `\r\n**Передача параметров:**\r\n- Используйте стрелочные функции или \\`bind\\` для передачи параметров в обработчики событий.\r\n\r\n**Пример с использованием стрелочной функции:**\r\n\\`\\`\\`javascript\r\nfunction handleClick(id, event) {\r\n  console.log('Button ID:', id);\r\n}\r\n\r\nfunction Buttons() {\r\n  return (\r\n    <>\r\n      <button onClick={(event) => handleClick(1, event)}>Button 1</button>\r\n      <button onClick={(event) => handleClick(2, event)}>Button 2</button>\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример с использованием \\`bind\\`:**\r\n\\`\\`\\`javascript\r\nfunction handleClick(id) {\r\n  console.log('Button ID:', id);\r\n}\r\n\r\nfunction Buttons() {\r\n  return (\r\n    <>\r\n      <button onClick={handleClick.bind(null, 1)}>Button 1</button>\r\n      <button onClick={handleClick.bind(null, 2)}>Button 2</button>\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102556,\r\n      question: \"Как обрабатывать события на динамически созданных элементах?\",\r\n      answer: `\r\n**Обработка событий на динамических элементах:**\r\n- React автоматически управляет событиями через синтетическую систему событий.\r\n- Нет необходимости вручную добавлять или удалять слушатели.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction DynamicList() {\r\n  const [items, setItems] = useState(['Item 1', 'Item 2']);\r\n\r\n  const addItem = () => {\r\n    setItems([...items, \\`Item $\\{items.length + 1}\\`]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {items.map((item, index) => (\r\n          <li key={index} onClick={() => console.log(item)}>\r\n            {item}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button onClick={addItem}>Add Item</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102557,\r\n      question: \"Как остановить всплытие события?\",\r\n      answer: `\r\n**Остановка всплытия:**\r\n- Используйте метод \\`stopPropagation\\` объекта \\`SyntheticEvent\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Child({ onClick }) {\r\n  return (\r\n    <div onClick={(event) => {\r\n      event.stopPropagation();\r\n      console.log('Child clicked');\r\n    }}>\r\n      Child\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Parent() {\r\n  return (\r\n    <div onClick={() => console.log('Parent clicked')}>\r\n      Parent\r\n      <Child />\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n**Результат:**\r\n- При клике на дочерний элемент событие не достигнет родителя.\r\n`,\r\n    },\r\n    {\r\n      id: 102558,\r\n      question: \"Как отменить действие по умолчанию?\",\r\n      answer: `\r\n**Отмена действия по умолчанию:**\r\n- Используйте метод \\`preventDefault\\` объекта \\`SyntheticEvent\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleFormSubmit(event) {\r\n  event.preventDefault(); // Отмена отправки формы\r\n  console.log('Form submitted, but default action is prevented.');\r\n}\r\n\r\nfunction Form() {\r\n  return (\r\n    <form onSubmit={handleFormSubmit}>\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testJSXHandlers = {\r\n  id: 102575,\r\n  title: \"JSX Handlers (обработчики JSX)\",\r\n  questions: [\r\n    {\r\n      id: 102576,\r\n      question: \"Что такое JSX Handlers (обработчики JSX)?\",\r\n      answer: `\r\n**JSX Handlers (обработчики JSX):**\r\n- Это функции, которые вызываются при событиях, связанных с элементами JSX.\r\n- Обработчики событий в JSX пишутся в camelCase (например, \\`onClick\\`, \\`onSubmit\\`).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleClick() {\r\n  console.log('Клик!');\r\n}\r\n\r\nconst element = <button onClick={handleClick}>Кликни меня</button>;\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102577,\r\n      question: \"Как передавать параметры в обработчики событий?\",\r\n      answer: `\r\n**Передача параметров:**\r\n- Используйте стрелочные функции или \\`bind\\` для передачи параметров в обработчики событий.\r\n\r\n**Пример с использованием стрелочной функции:**\r\n\\`\\`\\`javascript\r\nfunction handleClick(id, event) {\r\n  console.log('Нажата кнопка с ID:', id);\r\n}\r\n\r\nfunction Buttons() {\r\n  return (\r\n    <>\r\n      <button onClick={(event) => handleClick(1, event)}>Кнопка 1</button>\r\n      <button onClick={(event) => handleClick(2, event)}>Кнопка 2</button>\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример с использованием \\`bind\\`:**\r\n\\`\\`\\`javascript\r\nfunction handleClick(id) {\r\n  console.log('Нажата кнопка с ID:', id);\r\n}\r\n\r\nfunction Buttons() {\r\n  return (\r\n    <>\r\n      <button onClick={handleClick.bind(null, 1)}>Кнопка 1</button>\r\n      <button onClick={handleClick.bind(null, 2)}>Кнопка 2</button>\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102578,\r\n      question: \"Как остановить распространение события в JSX?\",\r\n      answer: `\r\n**Остановка распространения:**\r\n- Используйте метод \\`stopPropagation\\` объекта события.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleChildClick(event) {\r\n  event.stopPropagation();\r\n  console.log('Дочерний элемент кликнут');\r\n}\r\n\r\nfunction Parent() {\r\n  return (\r\n    <div onClick={() => console.log('Родительский элемент кликнут')}>\r\n      <div onClick={handleChildClick}>Дочерний элемент</div>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n**Результат:**\r\n- При клике на дочерний элемент событие не достигнет родителя.\r\n`,\r\n    },\r\n    {\r\n      id: 102579,\r\n      question: \"Как отменить действие по умолчанию в JSX?\",\r\n      answer: `\r\n**Отмена действия по умолчанию:**\r\n- Используйте метод \\`preventDefault\\` объекта события.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleFormSubmit(event) {\r\n  event.preventDefault();\r\n  console.log('Форма отправлена, но действие по умолчанию отменено.');\r\n}\r\n\r\nfunction Form() {\r\n  return (\r\n    <form onSubmit={handleFormSubmit}>\r\n      <button type=\"submit\">Отправить</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102580,\r\n      question: \"Как использовать стрелочные функции в JSX для обработчиков?\",\r\n      answer: `\r\n**Стрелочные функции:**\r\n- Позволяют определять обработчики событий непосредственно в JSX.\r\n- Удобны для передачи параметров.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Button({ label }) {\r\n  const handleClick = () => {\r\n    console.log(\\`Кликнули по кнопке: $\\{label}\\`);\r\n  };\r\n\r\n  return <button onClick={handleClick}>{label}</button>;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Button label=\"Кнопка 1\" />\r\n      <Button label=\"Кнопка 2\" />\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102581,\r\n      question: \"Как избежать создания новых функций на каждом рендере?\",\r\n      answer: `\r\n**Избегание создания новых функций:**\r\n- Используйте \\`useCallback\\` для мемоизации обработчиков событий.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { useCallback } from 'react';\r\n\r\nfunction Button({ onClick, label }) {\r\n  return <button onClick={onClick}>{label}</button>;\r\n}\r\n\r\nfunction Parent() {\r\n  const handleClick = useCallback(() => {\r\n    console.log('Клик!');\r\n  }, []);\r\n\r\n  return <Button onClick={handleClick} label=\"Кнопка\" />;\r\n}\r\n\\`\\`\\`\r\n\r\n**Важно:**\r\n- Без \\`useCallback\\` новая функция создается при каждом рендере, что может повлиять на производительность.\r\n`,\r\n    },\r\n    {\r\n      id: 102582,\r\n      question: \"Можно ли использовать анонимные функции в JSX?\",\r\n      answer: `\r\n**Анонимные функции:**\r\n- Да, можно, но это может повлиять на производительность, так как новая функция создается при каждом рендере.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Button() {\r\n  return <button onClick={() => console.log('Клик!')}>Кликни меня</button>;\r\n}\r\n\\`\\`\\`\r\n\r\n**Рекомендация:**\r\n- Для оптимизации используйте именованные функции или \\`useCallback\\`.\r\n`,\r\n    },\r\n    {\r\n      id: 102583,\r\n      question: \"Как работать с событиями формы в JSX?\",\r\n      answer: `\r\n**События формы:**\r\n- Основные события: \\`onChange\\` (для обработки изменений), \\`onSubmit\\` (для отправки формы).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Form() {\r\n  const [value, setValue] = React.useState('');\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log('Отправленное значение:', value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={value} onChange={handleChange} />\r\n      <button type=\"submit\">Отправить</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102584,\r\n      question: \"Какие есть типы событий в JSX?\",\r\n      answer: `\r\n**Типы событий:**\r\n1. **Мышь:** \\`onClick\\`, \\`onMouseEnter\\`, \\`onMouseLeave\\`.\r\n2. **Клавиатура:** \\`onKeyDown\\`, \\`onKeyUp\\`, \\`onKeyPress\\`.\r\n3. **Формы:** \\`onChange\\`, \\`onSubmit\\`, \\`onFocus\\`, \\`onBlur\\`.\r\n4. **Другие:** \\`onScroll\\`, \\`onLoad\\`, \\`onError\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Example() {\r\n  const handleKeyDown = (event) => {\r\n    console.log('Нажата клавиша:', event.key);\r\n  };\r\n\r\n  return <input type=\"text\" onKeyDown={handleKeyDown} />;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102585,\r\n      question: \"Как использовать синтетические события в JSX?\",\r\n      answer: `\r\n**Синтетические события:**\r\n- React оборачивает нативные события браузера в объект \\`SyntheticEvent\\`.\r\n- Предоставляет кросс-браузерную совместимость.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleClick(event) {\r\n  console.log('Событие:', event);\r\n  console.log('Тип события:', event.type); // 'click'\r\n}\r\n\r\nfunction Button() {\r\n  return <button onClick={handleClick}>Кликни меня</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testBubblingEventInReact = {\r\n  id: 102600,\r\n  title: \"Bubbling Event in React\",\r\n  questions: [\r\n    {\r\n      id: 102601,\r\n      question: \"Что такое всплытие событий (Event Bubbling) в React?\",\r\n      answer: `\r\n**Всплытие событий (Event Bubbling):**\r\n- Это механизм, при котором событие сначала обрабатывается на самом вложенном элементе, а затем \"всплывает\" вверх по дереву DOM, вызывая обработчики на родительских элементах.\r\n- В React события также всплывают, но используются синтетические события (\\`SyntheticEvent\\`) для обеспечения кросс-браузерной совместимости.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleParentClick() {\r\n  console.log('Родительский элемент кликнут');\r\n}\r\n\r\nfunction handleChildClick(event) {\r\n  console.log('Дочерний элемент кликнут');\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div onClick={handleParentClick}>\r\n      <button onClick={handleChildClick}>Кликни меня</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n**Результат:**\r\n1. Сначала выполняется \\`handleChildClick\\`.\r\n2. Затем выполняется \\`handleParentClick\\`.\r\n`,\r\n    },\r\n    {\r\n      id: 102602,\r\n      question: \"Как остановить всплытие события в React?\",\r\n      answer: `\r\n**Остановка всплытия:**\r\n- Используйте метод \\`stopPropagation\\` объекта события.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleChildClick(event) {\r\n  event.stopPropagation();\r\n  console.log('Дочерний элемент кликнут');\r\n}\r\n\r\nfunction handleParentClick() {\r\n  console.log('Родительский элемент кликнут');\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div onClick={handleParentClick}>\r\n      <button onClick={handleChildClick}>Кликни меня</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n**Результат:**\r\n- При клике на дочерний элемент событие не достигнет родителя.\r\n`,\r\n    },\r\n    {\r\n      id: 102603,\r\n      question:\r\n        \"Что такое погружение событий (Event Capturing) и как оно работает в React?\",\r\n      answer: `\r\n**Погружение событий (Event Capturing):**\r\n- Это механизм, при котором событие сначала обрабатывается на самом верхнем уровне (родительском элементе), а затем \"погружается\" вниз по дереву DOM до целевого элемента.\r\n- В React погружение событий можно использовать, передав третий аргумент \\`true\\` в \\`addEventListener\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleCapture(event) {\r\n  console.log('Событие погружения:', event.target.tagName);\r\n}\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    document.addEventListener('click', handleCapture, true);\r\n    return () => {\r\n      document.removeEventListener('click', handleCapture, true);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <p>Кликните на этот текст</p>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102604,\r\n      question:\r\n        \"Как работают синтетические события (`SyntheticEvent`) в React?\",\r\n      answer: `\r\n**Синтетические события (\\`SyntheticEvent\\`):**\r\n- Это обертка над нативными событиями браузера, которая обеспечивает кросс-браузерную совместимость.\r\n- После выполнения обработчика событие очищается и возвращается в пул для повторного использования.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleClick(event) {\r\n  console.log('Событие:', event);\r\n  console.log('Тип события:', event.type); // 'click'\r\n}\r\n\r\nfunction Button() {\r\n  return <button onClick={handleClick}>Кликни меня</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102605,\r\n      question:\r\n        \"Какие методы доступны в объекте события (`SyntheticEvent`) в React?\",\r\n      answer: `\r\n**Методы объекта события (\\`SyntheticEvent\\`):**\r\n1. **stopPropagation():**\r\n   - Останавливает всплытие события.\r\n2. **preventDefault():**\r\n   - Отменяет действие по умолчанию (например, переход по ссылке).\r\n3. **persist():**\r\n   - Удаляет событие из пула, позволяя использовать его асинхронно.\r\n4. **nativeEvent:**\r\n   - Возвращает нативное событие браузера.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleLinkClick(event) {\r\n  event.preventDefault(); // Отмена перехода по ссылке\r\n  console.log('Ссылка кликнута, но переход отменен.');\r\n}\r\n\r\nfunction App() {\r\n  return <a href=\"https://example.com \" onClick={handleLinkClick}>Example</a>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102606,\r\n      question:\r\n        \"Как работать с событиями на динамически созданных элементах в React?\",\r\n      answer: `\r\n**Обработка событий на динамических элементах:**\r\n- React автоматически управляет событиями через синтетическую систему событий.\r\n- Нет необходимости вручную добавлять или удалять слушатели.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction DynamicList() {\r\n  const [items, setItems] = useState(['Item 1', 'Item 2']);\r\n\r\n  const addItem = () => {\r\n    setItems([...items, \\`Item $\\{items.length + 1}\\`]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {items.map((item, index) => (\r\n          <li key={index} onClick={() => console.log(item)}>\r\n            {item}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button onClick={addItem}>Добавить элемент</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102607,\r\n      question: \"Как передавать параметры в обработчики событий в React?\",\r\n      answer: `\r\n**Передача параметров:**\r\n- Используйте стрелочные функции или \\`bind\\` для передачи параметров в обработчики событий.\r\n\r\n**Пример с использованием стрелочной функции:**\r\n\\`\\`\\`javascript\r\nfunction handleClick(id, event) {\r\n  console.log('Нажата кнопка с ID:', id);\r\n}\r\n\r\nfunction Buttons() {\r\n  return (\r\n    <>\r\n      <button onClick={(event) => handleClick(1, event)}>Кнопка 1</button>\r\n      <button onClick={(event) => handleClick(2, event)}>Кнопка 2</button>\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример с использованием \\`bind\\`:**\r\n\\`\\`\\`javascript\r\nfunction handleClick(id) {\r\n  console.log('Нажата кнопка с ID:', id);\r\n}\r\n\r\nfunction Buttons() {\r\n  return (\r\n    <>\r\n      <button onClick={handleClick.bind(null, 1)}>Кнопка 1</button>\r\n      <button onClick={handleClick.bind(null, 2)}>Кнопка 2</button>\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102608,\r\n      question:\r\n        \"Как предотвратить всплытие события на нескольких уровнях в React?\",\r\n      answer: `\r\n**Предотвращение всплытия:**\r\n- Используйте \\`stopPropagation\\` на каждом уровне, где необходимо остановить всплытие.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleChildClick(event) {\r\n  event.stopPropagation();\r\n  console.log('Дочерний элемент кликнут');\r\n}\r\n\r\nfunction handleParentClick() {\r\n  console.log('Родительский элемент кликнут');\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div onClick={handleParentClick}>\r\n      <div onClick={(event) => {\r\n        event.stopPropagation();\r\n        console.log('Средний элемент кликнут');\r\n      }}>\r\n        <button onClick={handleChildClick}>Кликни меня</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n**Результат:**\r\n- При клике на кнопку событие не достигнет среднего или родительского элемента.\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testBindingEvents = {\r\n  id: 102625,\r\n  title: \"Binding Events (привязка событий)\",\r\n  questions: [\r\n    {\r\n      id: 102626,\r\n      question: \"Что такое привязка событий (Event Binding)?\",\r\n      answer: `\r\n**Привязка событий (Event Binding):**\r\n- Это процесс связывания функции обработчика с определенным событием на элементе DOM или компоненте.\r\n- В React события привязываются через JSX с использованием атрибутов, таких как \\`onClick\\`, \\`onChange\\` и другие.\r\n\r\n**Пример в React:**\r\n\\`\\`\\`javascript\r\nfunction handleClick() {\r\n  console.log('Клик!');\r\n}\r\n\r\nfunction Button() {\r\n  return <button onClick={handleClick}>Кликни меня</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102627,\r\n      question: \"Как работает `this` при привязке событий в JavaScript?\",\r\n      answer: `\r\n**Работа \\`this\\` при привязке событий:**\r\n- В JavaScript значение \\`this\\` зависит от контекста вызова функции.\r\n- Если обработчик события передается как ссылка на метод объекта, \\`this\\` может потерять связь с объектом.\r\n\r\n**Пример проблемы:**\r\n\\`\\`\\`javascript\r\nconst button = document.querySelector('button');\r\n\r\nconst obj = {\r\n  name: 'Button',\r\n  handleClick() {\r\n    console.log(this.name);\r\n  },\r\n};\r\n\r\nbutton.addEventListener('click', obj.handleClick); // undefined\r\n\\`\\`\\`\r\n\r\n**Решение:**\r\nИспользуйте \\`bind\\`, стрелочные функции или привязку в конструкторе.\r\n\r\n**Пример с \\`bind\\`:**\r\n\\`\\`\\`javascript\r\nbutton.addEventListener('click', obj.handleClick.bind(obj));\r\n\\`\\`\\`\r\n\r\n**Пример со стрелочной функцией:**\r\n\\`\\`\\`javascript\r\nbutton.addEventListener('click', () => obj.handleClick());\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102628,\r\n      question: \"Как привязать обработчик события в React?\",\r\n      answer: `\r\n**Привязка обработчиков в React:**\r\n1. **Стрелочные функции:**\r\n   - Автоматически привязывают контекст.\r\n2. **Методы класса:**\r\n   - Требуют явной привязки через \\`bind\\` в конструкторе.\r\n3. **Передача параметров:**\r\n   - Используйте стрелочные функции или \\`bind\\`.\r\n\r\n**Пример с классовым компонентом:**\r\n\\`\\`\\`javascript\r\nclass Button extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    console.log('Клик!');\r\n  }\r\n\r\n  render() {\r\n    return <button onClick={this.handleClick}>Кликни меня</button>;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример с функциональным компонентом:**\r\n\\`\\`\\`javascript\r\nfunction Button() {\r\n  const handleClick = () => {\r\n    console.log('Клик!');\r\n  };\r\n\r\n  return <button onClick={handleClick}>Кликни меня</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102629,\r\n      question: \"Как передавать параметры в обработчики событий?\",\r\n      answer: `\r\n**Передача параметров:**\r\n- Используйте стрелочные функции или \\`bind\\` для передачи параметров в обработчики событий.\r\n\r\n**Пример с использованием стрелочной функции:**\r\n\\`\\`\\`javascript\r\nfunction handleClick(id, event) {\r\n  console.log('Нажата кнопка с ID:', id);\r\n}\r\n\r\nfunction Buttons() {\r\n  return (\r\n    <>\r\n      <button onClick={(event) => handleClick(1, event)}>Кнопка 1</button>\r\n      <button onClick={(event) => handleClick(2, event)}>Кнопка 2</button>\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример с использованием \\`bind\\`:**\r\n\\`\\`\\`javascript\r\nfunction handleClick(id) {\r\n  console.log('Нажата кнопка с ID:', id);\r\n}\r\n\r\nfunction Buttons() {\r\n  return (\r\n    <>\r\n      <button onClick={handleClick.bind(null, 1)}>Кнопка 1</button>\r\n      <button onClick={handleClick.bind(null, 2)}>Кнопка 2</button>\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102630,\r\n      question: \"Как удалить обработчик события?\",\r\n      answer: `\r\n**Удаление обработчика:**\r\n- В JavaScript используйте метод \\`removeEventListener\\`.\r\n- В React обработчики автоматически удаляются при размонтировании компонента.\r\n\r\n**Пример в JavaScript:**\r\n\\`\\`\\`javascript\r\nfunction handleClick() {\r\n  console.log('Клик!');\r\n}\r\n\r\nconst button = document.querySelector('button');\r\nbutton.addEventListener('click', handleClick);\r\n\r\n// Удаление обработчика\r\nbutton.removeEventListener('click', handleClick);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102631,\r\n      question: \"Как использовать делегирование событий?\",\r\n      answer: `\r\n**Делегирование событий:**\r\n- Это техника, при которой обработчик события добавляется на родительский элемент, а не на каждый дочерний элемент.\r\n- Позволяет обрабатывать события для динамически созданных элементов.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleParentClick(event) {\r\n  if (event.target.tagName === 'BUTTON') {\r\n    console.log('Кликнута кнопка:', event.target.textContent);\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div onClick={handleParentClick}>\r\n      <button>Кнопка 1</button>\r\n      <button>Кнопка 2</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102632,\r\n      question: \"Как предотвратить действие по умолчанию в обработчике?\",\r\n      answer: `\r\n**Предотвращение действия по умолчанию:**\r\n- Используйте метод \\`preventDefault\\` объекта события.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleFormSubmit(event) {\r\n  event.preventDefault();\r\n  console.log('Форма отправлена, но действие по умолчанию отменено.');\r\n}\r\n\r\nfunction Form() {\r\n  return (\r\n    <form onSubmit={handleFormSubmit}>\r\n      <button type=\"submit\">Отправить</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102633,\r\n      question: \"Как остановить всплытие события?\",\r\n      answer: `\r\n**Остановка всплытия:**\r\n- Используйте метод \\`stopPropagation\\` объекта события.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleChildClick(event) {\r\n  event.stopPropagation();\r\n  console.log('Дочерний элемент кликнут');\r\n}\r\n\r\nfunction handleParentClick() {\r\n  console.log('Родительский элемент кликнут');\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div onClick={handleParentClick}>\r\n      <button onClick={handleChildClick}>Кликни меня</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102634,\r\n      question: \"Как работают синтетические события в React?\",\r\n      answer: `\r\n**Синтетические события (\\`SyntheticEvent\\`):**\r\n- Это обертка над нативными событиями браузера, которая обеспечивает кросс-браузерную совместимость.\r\n- После выполнения обработчика событие очищается и возвращается в пул для повторного использования.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleClick(event) {\r\n  console.log('Событие:', event);\r\n  console.log('Тип события:', event.type); // 'click'\r\n}\r\n\r\nfunction Button() {\r\n  return <button onClick={handleClick}>Кликни меня</button>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102635,\r\n      question:\r\n        \"Какие методы доступны в объекте события (`SyntheticEvent`) в React?\",\r\n      answer: `\r\n**Методы объекта события (\\`SyntheticEvent\\`):**\r\n1. **stopPropagation():**\r\n   - Останавливает всплытие события.\r\n2. **preventDefault():**\r\n   - Отменяет действие по умолчанию (например, переход по ссылке).\r\n3. **persist():**\r\n   - Удаляет событие из пула, позволяя использовать его асинхронно.\r\n4. **nativeEvent:**\r\n   - Возвращает нативное событие браузера.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction handleLinkClick(event) {\r\n  event.preventDefault(); // Отмена перехода по ссылке\r\n  console.log('Ссылка кликнута, но переход отменен.');\r\n}\r\n\r\nfunction App() {\r\n  return <a href=\"https://example.com \" onClick={handleLinkClick}>Example</a>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testWhyHooks = {\r\n  id: 102675,\r\n  title: \"Why Hooks (зачем нужны хуки)\",\r\n  questions: [\r\n    {\r\n      id: 102676,\r\n      question: \"Зачем нужны хуки в React?\",\r\n      answer: `\r\n**Зачем нужны хуки:**\r\n- Хуки позволяют использовать состояние и другие возможности React без написания классовых компонентов.\r\n- Упрощают логику компонентов, делая код более читаемым и переиспользуемым.\r\n\r\n**Основные преимущества:**\r\n1. **Упрощение кода:**\r\n   - Функциональные компоненты с хуками проще для понимания и поддержки.\r\n2. **Легкость разделения логики:**\r\n   - Пользовательские хуки позволяют выносить логику в отдельные функции.\r\n3. **Избежание сложностей с \\`this\\`:**\r\n   - В классовых компонентах часто возникают проблемы с привязкой контекста (\\`this\\`).\r\n4. **Улучшение переиспользования кода:**\r\n   - Хуки позволяют создавать переиспользуемые блоки логики.\r\n\r\n**Пример использования \\`useState\\`:**\r\n\\`\\`\\`javascript\r\nimport { useState } from 'react';\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102677,\r\n      question: \"Какие проблемы решают хуки?\",\r\n      answer: `\r\n**Проблемы, решаемые хуками:**\r\n1. **Сложность классовых компонентов:**\r\n   - Классовые компоненты требуют написания большого количества шаблонного кода.\r\n2. **Проблемы с \\`this\\`:**\r\n   - Необходимость привязывать методы через \\`bind\\` или использовать стрелочные функции.\r\n3. **Разделение логики:**\r\n   - В классовых компонентах сложно разделить логику между компонентами.\r\n4. **Сложность тестирования:**\r\n   - Логика в классовых компонентах часто трудно тестируется.\r\n\r\n**Пример решения проблемы с \\`this\\`:**\r\n\\`\\`\\`javascript\r\n// До хуков (классовый компонент)\r\nclass Counter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { count: 0 };\r\n    this.increment = this.increment.bind(this);\r\n  }\r\n\r\n  increment() {\r\n    this.setState((state) => ({ count: state.count + 1 }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Count: {this.state.count}</p>\r\n        <button onClick={this.increment}>Increment</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// После хуков (функциональный компонент)\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102678,\r\n      question: \"Какие основные хуки существуют в React?\",\r\n      answer: `\r\n**Основные хуки:**\r\n1. **useState:**\r\n   - Для управления состоянием компонента.\r\n2. **useEffect:**\r\n   - Для выполнения побочных эффектов (например, API-запросы).\r\n3. **useContext:**\r\n   - Для работы с контекстом.\r\n4. **useReducer:**\r\n   - Альтернатива \\`useState\\` для сложных состояний.\r\n5. **useCallback:**\r\n   - Для мемоизации функций.\r\n6. **useMemo:**\r\n   - Для мемоизации значений.\r\n7. **useRef:**\r\n   - Для доступа к DOM или хранения изменяемых значений.\r\n\r\n**Пример \\`useEffect\\`:**\r\n\\`\\`\\`javascript\r\nimport { useEffect, useState } from 'react';\r\n\r\nfunction FetchData() {\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch('https://api.example.com/data ')\r\n      .then((response) => response.json())\r\n      .then((result) => setData(result));\r\n  }, []);\r\n\r\n  return <div>{data ? JSON.stringify(data) : 'Loading...'}</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102679,\r\n      question: \"Что такое пользовательские хуки и зачем они нужны?\",\r\n      answer: `\r\n**Пользовательские хуки:**\r\n- Это функции, которые начинаются с префикса \\`use\\` и могут использовать встроенные хуки.\r\n- Позволяют выносить повторяющуюся логику в отдельные функции.\r\n\r\n**Зачем нужны:**\r\n1. **Переиспользование логики:**\r\n   - Например, для обработки форм, API-запросов или подписок.\r\n2. **Упрощение компонентов:**\r\n   - Компоненты становятся более читаемыми.\r\n\r\n**Пример пользовательского хука:**\r\n\\`\\`\\`javascript\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction useFetch(url) {\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((result) => setData(result));\r\n  }, [url]);\r\n\r\n  return data;\r\n}\r\n\r\nfunction App() {\r\n  const data = useFetch('https://api.example.com/data ');\r\n\r\n  return <div>{data ? JSON.stringify(data) : 'Loading...'}</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102680,\r\n      question: \"Как хуки упрощают работу с состоянием?\",\r\n      answer: `\r\n**Упрощение работы с состоянием:**\r\n- Хуки позволяют использовать состояние в функциональных компонентах без написания классов.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// До хуков (классовый компонент)\r\nclass Counter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { count: 0 };\r\n  }\r\n\r\n  render() {\r\n    return <p>Count: {this.state.count}</p>;\r\n  }\r\n}\r\n\r\n// После хуков (функциональный компонент)\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return <p>Count: {count}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102681,\r\n      question:\r\n        \"Как хуки помогают избежать сложностей с жизненным циклом компонента?\",\r\n      answer: `\r\n**Работа с жизненным циклом:**\r\n- \\`useEffect\\` объединяет методы \\`componentDidMount\\`, \\`componentDidUpdate\\` и \\`componentWillUnmount\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// До хуков (классовый компонент)\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { seconds: 0 };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      this.setState((state) => ({ seconds: state.seconds + 1 }));\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    return <p>Seconds: {this.state.seconds}</p>;\r\n  }\r\n}\r\n\r\n// После хуков (функциональный компонент)\r\nfunction Timer() {\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSeconds((prev) => prev + 1);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval); // Очистка при размонтировании\r\n  }, []);\r\n\r\n  return <p>Seconds: {seconds}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102682,\r\n      question: \"Как хуки влияют на производительность?\",\r\n      answer: `\r\n**Влияние на производительность:**\r\n1. **Оптимизация:**\r\n   - \\`useMemo\\` и \\`useCallback\\` помогают избежать лишних перерасчетов и перерисовок.\r\n2. **Пул событий:**\r\n   - React оптимизирует работу с хуками, используя пул событий.\r\n\r\n**Пример оптимизации с \\`useMemo\\`:**\r\n\\`\\`\\`javascript\r\nimport { useMemo, useState } from 'react';\r\n\r\nfunction ExpensiveComponent({ a, b }) {\r\n  const result = useMemo(() => {\r\n    console.log('Recalculating...');\r\n    return a * b;\r\n  }, [a, b]);\r\n\r\n  return <p>Result: {result}</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102683,\r\n      question:\r\n        \"Можно ли заменить все классовые компоненты на функциональные с хуками?\",\r\n      answer: `\r\n**Да, можно:**\r\n- Все возможности классовых компонентов можно реализовать с помощью хуков.\r\n- Исключение: редкие случаи с использованием старых библиотек, требующих классы.\r\n\r\n**Рекомендация:**\r\n- Переходите на хуки постепенно, начиная с новых компонентов.\r\n`,\r\n    },\r\n    {\r\n      id: 102684,\r\n      question: \"Какие ограничения есть у хуков?\",\r\n      answer: `\r\n**Ограничения хуков:**\r\n1. **Вызов только на верхнем уровне:**\r\n   - Нельзя вызывать хуки внутри условий или циклов.\r\n2. **Только в функциональных компонентах:**\r\n   - Хуки нельзя использовать в классовых компонентах.\r\n3. **Порядок вызова:**\r\n   - Хуки должны вызываться в одном и том же порядке при каждом рендере.\r\n\r\n**Пример ошибки:**\r\n\\`\\`\\`javascript\r\nfunction BadComponent({ condition }) {\r\n  if (condition) {\r\n    useState(0); // Ошибка: хук вызван внутри условия\r\n  }\r\n\r\n  return <p>Bad Component</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testPosition = {\r\n  id: 100800,\r\n  title: \"Позиционирование\",\r\n  questions: [\r\n    {\r\n      id: 100801,\r\n      question: \"Какие типы позиционирования существуют в CSS?\",\r\n      answer: `\r\n**Типы позиционирования:**\r\n1. **static (статическое):**\r\n   - Значение по умолчанию.\r\n   - Элементы располагаются в обычном потоке документа.\r\n   - Свойства \\`top\\`, \\`right\\`, \\`bottom\\`, \\`left\\` и \\`z-index\\` не работают.\r\n\r\n2. **relative (относительное):**\r\n   - Элемент позиционируется относительно своего нормального положения.\r\n   - Свойства \\`top\\`, \\`right\\`, \\`bottom\\`, \\`left\\` сдвигают элемент.\r\n\r\n3. **absolute (абсолютное):**\r\n   - Элемент позиционируется относительно ближайшего позиционированного родителя (\\`position: relative\\`, \\`absolute\\`, или \\`fixed\\`).\r\n   - Если такого родителя нет, элемент позиционируется относительно документа.\r\n\r\n4. **fixed (фиксированное):**\r\n   - Элемент позиционируется относительно viewport и остается на месте при прокрутке.\r\n\r\n5. **sticky (липкое):**\r\n   - Комбинация \\`relative\\` и \\`fixed\\`.\r\n   - Элемент ведет себя как \\`relative\\`, пока не достигнет определенной точки, затем фиксируется.\r\n\r\n**Пример:**\r\n\\`\\`\\`css\r\n.relative {\r\n  position: relative;\r\n  top: 10px;\r\n}\r\n.absolute {\r\n  position: absolute;\r\n  top: 50px;\r\n}\r\n.fixed {\r\n  position: fixed;\r\n  top: 0;\r\n}\r\n.sticky {\r\n  position: sticky;\r\n  top: 20px;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100802,\r\n      question: \"Что такое z-index и как он работает?\",\r\n      answer: `\r\n**z-index:**\r\n- Определяет порядок наложения элементов.\r\n- Работает только для элементов с \\`position: relative\\`, \\`absolute\\`, \\`fixed\\`, или \\`sticky\\`.\r\n\r\n**Правила:**\r\n1. Чем выше значение \\`z-index\\`, тем «выше» элемент.\r\n2. Если \\`z-index\\` не указан, элементы накладываются в порядке их появления в HTML.\r\n\r\n**Пример:**\r\n\\`\\`\\`css\r\n.box1 {\r\n  position: absolute;\r\n  z-index: 2;\r\n}\r\n\r\n.box2 {\r\n  position: absolute;\r\n  z-index: 1;\r\n}\r\n/* box1 будет выше box2 */\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100803,\r\n      question: \"Как работает свойство position: sticky?\",\r\n      answer: `\r\n**position: sticky:**\r\n- Элемент ведет себя как \\`relative\\`, пока не достигнет определенной точки (например, верхней границы viewport), затем фиксируется.\r\n\r\n**Пример:**\r\n\\`\\`\\`css\r\n.sticky-header {\r\n  position: sticky;\r\n  top: 0;\r\n  background-color: white;\r\n}\r\n/* Элемент фиксируется в верхней части экрана при прокрутке */\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100804,\r\n      question: \"Как центрировать элемент с помощью position: absolute?\",\r\n      answer: `\r\n**Центрирование с position: absolute:**\r\n- Используйте комбинацию \\`top: 50%\\`, \\`left: 50%\\` и \\`transform: translate(-50%, -50%)\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`css\r\n.centered {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n}\r\n/* Элемент будет точно по центру родительского контейнера */\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 100805,\r\n      question: \"В чем разница между position: relative и position: absolute?\",\r\n      answer: `\r\n**Разница:**\r\n1. **position: relative:**\r\n   - Элемент позиционируется относительно своего нормального положения.\r\n   - Не влияет на другие элементы.\r\n\r\n2. **position: absolute:**\r\n   - Элемент позиционируется относительно ближайшего позиционированного родителя.\r\n   - Если такого родителя нет, элемент позиционируется относительно документа.\r\n\r\n**Пример:**\r\n\\`\\`\\`css\r\n.relative {\r\n  position: relative;\r\n  top: 10px; /* Сдвигается относительно своего места */\r\n}\r\n\r\n.absolute {\r\n  position: absolute;\r\n  top: 50px; /* Сдвигается относительно родителя */\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testTwoWayDataBinding = {\r\n  id: 101000,\r\n  title: \"Two-Way Binding (двустороннее связывание)\",\r\n  questions: [\r\n    {\r\n      id: 101001,\r\n      question: \"Что такое двустороннее связывание (Two-Way Binding)?\",\r\n      answer: `\r\n      **Двустороннее связывание (Two-Way Binding):**\r\n      - Это механизм, при котором изменения в пользовательском интерфейсе автоматически обновляют данные в модели, и наоборот.\r\n      - Обеспечивает синхронизацию между интерфейсом и данными без необходимости написания дополнительного кода.\r\n\r\n      **Пример в Vue.js:**\r\n      \\`\\`\\`html\r\n      <div id=\"app\">\r\n        <input v-model=\"message\" placeholder=\"Введите текст\">\r\n        <p>Вы ввели: {{ message }}</p>\r\n      </div>\r\n\r\n      <script>\r\n        new Vue({\r\n          el: '#app',\r\n          data: {\r\n            message: '',\r\n          },\r\n        });\r\n      </script>\r\n      \\`\\`\\`\r\n\r\n      **Пример в Angular:**\r\n      \\`\\`\\`html\r\n      <input [(ngModel)]=\"message\" placeholder=\"Введите текст\">\r\n      <p>Вы ввели: {{ message }}</p>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101002,\r\n      question: \"Как работает двустороннее связывание?\",\r\n      answer: `\r\n      **Механизм работы:**\r\n      1. **Связывание данных с интерфейсом:**\r\n         - Когда данные изменяются в модели, интерфейс автоматически обновляется.\r\n      2. **Связывание интерфейса с данными:**\r\n         - Когда пользователь взаимодействует с интерфейсом (например, вводит текст), данные в модели обновляются.\r\n\r\n      **Пример в React (ручная реализация):**\r\n      \\`\\`\\`javascript\r\n      function App() {\r\n        const [value, setValue] = React.useState('');\r\n\r\n        return (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              value={value}\r\n              onChange={(e) => setValue(e.target.value)}\r\n            />\r\n            <p>Вы ввели: {value}</p>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101003,\r\n      question: \"В чем разница между односторонним и двусторонним связыванием?\",\r\n      answer: `\r\n      **Различия:**\r\n      1. **Одностороннее связывание:**\r\n         - Изменения в модели отражаются в интерфейсе, но не наоборот.\r\n         - Требует ручной обработки событий для обновления данных.\r\n\r\n      2. **Двустороннее связывание:**\r\n         - Изменения в интерфейсе автоматически обновляют модель, и наоборот.\r\n         - Упрощает разработку, так как синхронизация происходит автоматически.\r\n\r\n      **Пример одностороннего связывания в React:**\r\n      \\`\\`\\`javascript\r\n      function App() {\r\n        const [value, setValue] = React.useState('');\r\n\r\n        return (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              value={value}\r\n              onChange={(e) => setValue(e.target.value)}\r\n            />\r\n            <p>Вы ввели: {value}</p>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101004,\r\n      question: \"Какие преимущества двустороннего связывания?\",\r\n      answer: `\r\n      **Преимущества:**\r\n      1. **Удобство разработки:**\r\n         - Автоматическая синхронизация данных и интерфейса упрощает работу.\r\n      2. **Чистый код:**\r\n         - Не требуется написание дополнительного кода для обработки событий.\r\n      3. **Быстрая разработка:**\r\n         - Подходит для небольших и средних проектов.\r\n\r\n      **Пример в Vue.js:**\r\n      \\`\\`\\`html\r\n      <div id=\"app\">\r\n        <input v-model=\"count\" type=\"number\">\r\n        <p>Значение: {{ count }}</p>\r\n      </div>\r\n\r\n      <script>\r\n        new Vue({\r\n          el: '#app',\r\n          data: {\r\n            count: 0,\r\n          },\r\n        });\r\n      </script>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101005,\r\n      question: \"Какие недостатки двустороннего связывания?\",\r\n      answer: `\r\n      **Недостатки:**\r\n      1. **Производительность:**\r\n         - В больших приложениях может привести к снижению производительности из-за частых обновлений.\r\n      2. **Сложность отладки:**\r\n         - Трудно отследить, где именно произошли изменения данных.\r\n      3. **Перегрузка данных:**\r\n         - При большом количестве связанных элементов может возникнуть путаница.\r\n\r\n      **Решение:**\r\n      - Использовать одностороннее связывание для сложных проектов.\r\n      `,\r\n    },\r\n    {\r\n      id: 101006,\r\n      question: \"Как реализовать двустороннее связывание в React?\",\r\n      answer: `\r\n      **Реализация:**\r\n      - React не имеет встроенной поддержки двустороннего связывания, но его можно реализовать вручную.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`javascript\r\n      function App() {\r\n        const [value, setValue] = React.useState('');\r\n\r\n        return (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              value={value}\r\n              onChange={(e) => setValue(e.target.value)}\r\n            />\r\n            <p>Вы ввели: {value}</p>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101007,\r\n      question: \"Как использовать v-model в Vue.js?\",\r\n      answer: `\r\n      **v-model:**\r\n      - Это директива Vue.js для реализации двустороннего связывания.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <div id=\"app\">\r\n        <input v-model=\"name\" placeholder=\"Введите имя\">\r\n        <p>Имя: {{ name }}</p>\r\n      </div>\r\n\r\n      <script>\r\n        new Vue({\r\n          el: '#app',\r\n          data: {\r\n            name: '',\r\n          },\r\n        });\r\n      </script>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101008,\r\n      question: \"Как использовать ngModel в Angular?\",\r\n      answer: `\r\n      **ngModel:**\r\n      - Это директива Angular для реализации двустороннего связывания.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <input [(ngModel)]=\"name\" placeholder=\"Введите имя\">\r\n      <p>Имя: {{ name }}</p>\r\n      \\`\\`\\`\r\n\r\n      **Необходимые шаги:**\r\n      1. Импортировать \\`FormsModule\\` в модуль:\r\n         \\`\\`\\`typescript\r\n         import { FormsModule } from '@angular/forms';\r\n\r\n         @NgModule({\r\n           imports: [FormsModule],\r\n         })\r\n         export class AppModule {}\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101009,\r\n      question:\r\n        \"Можно ли использовать двустороннее связывание в Vanilla JavaScript?\",\r\n      answer: `\r\n      **Да, можно:**\r\n      - Реализуется вручную через обработчики событий.\r\n\r\n      **Пример:**\r\n      \\`\\`\\`html\r\n      <div>\r\n        <input id=\"input\" type=\"text\" placeholder=\"Введите текст\">\r\n        <p id=\"output\"></p>\r\n      </div>\r\n\r\n      <script>\r\n        const input = document.getElementById('input');\r\n        const output = document.getElementById('output');\r\n\r\n        input.addEventListener('input', () => {\r\n          output.textContent = input.value;\r\n        });\r\n      </script>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101010,\r\n      question: \"Какие альтернативы двустороннему связыванию?\",\r\n      answer: `\r\n      **Альтернативы:**\r\n      1. **Одностороннее связывание:**\r\n         - Изменения в модели отражаются в интерфейсе, но не наоборот.\r\n      2. **Управляемые компоненты:**\r\n         - В React состояние управляется через props и события.\r\n      3. **Unidirectional Data Flow:**\r\n         - Однонаправленный поток данных (Flux, Redux).\r\n\r\n      **Пример одностороннего связывания:**\r\n      \\`\\`\\`javascript\r\n      function App() {\r\n        const [value, setValue] = React.useState('');\r\n\r\n        return (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              value={value}\r\n              onChange={(e) => setValue(e.target.value)}\r\n            />\r\n            <p>Вы ввели: {value}</p>\r\n          </div>\r\n        );\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testPsevdoelement = {\r\n  id: 101125,\r\n  title: \"Псевдоэлемент\",\r\n  questions: [\r\n    {\r\n      id: 101126,\r\n      question: \"Что такое псевдоэлементы в CSS?\",\r\n      answer: `\r\n**Псевдоэлементы:**\r\n- Это специальные селекторы, которые позволяют стилизовать определенные части элемента, такие как первый символ текста или первая строка.\r\n- Псевдоэлементы начинаются с двойного двоеточия (\\`::\\`).\r\n\r\n**Пример:**\r\n\\`\\`\\`css\r\n/* Стилизация первого символа параграфа */\r\np::first-letter {\r\n  font-size: 2em;\r\n  color: red;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101127,\r\n      question: \"Какие основные псевдоэлементы существуют в CSS?\",\r\n      answer: `\r\n**Основные псевдоэлементы:**\r\n1. \\`::before\\`: Добавляет контент перед элементом.\r\n2. \\`::after\\`: Добавляет контент после элемента.\r\n3. \\`::first-line\\`: Стилизует первую строку текста.\r\n4. \\`::first-letter\\`: Стилизует первый символ текста.\r\n5. \\`::placeholder\\`: Стилизует текст-заполнитель в полях ввода.\r\n6. \\`::selection\\`: Стилизует выделенный пользователем текст.\r\n\r\n**Пример использования:**\r\n\\`\\`\\`css\r\n/* Добавление иконки перед элементом */\r\ndiv::before {\r\n  content: '★';\r\n  color: gold;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101128,\r\n      question: \"Как использовать ::before и ::after?\",\r\n      answer: `\r\n**Использование \\`::before\\` и \\`::after\\`:**\r\n- Эти псевдоэлементы используются для добавления контента до или после элемента.\r\n- Обязательно указывать свойство \\`content\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`css\r\n/* Добавление декоративных элементов */\r\ndiv::before {\r\n  content: '[';\r\n  color: blue;\r\n}\r\n\r\ndiv::after {\r\n  content: ']';\r\n  color: blue;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101129,\r\n      question: \"Зачем нужны псевдоэлементы?\",\r\n      answer: `\r\n**Назначение псевдоэлементов:**\r\n1. **Улучшение дизайна:**\r\n   - Добавление декоративных элементов (например, иконок).\r\n2. **Тонкая стилизация:**\r\n   - Выделение первой строки или символа текста.\r\n3. **Кастомизация интерфейса:**\r\n   - Стилизация placeholder'ов и выделенного текста.\r\n4. **Создание сложных эффектов:**\r\n   - Градиенты, тени, рамки.\r\n\r\n**Пример:**\r\n\\`\\`\\`css\r\n/* Выделение первой строки текста */\r\np::first-line {\r\n  font-weight: bold;\r\n  color: navy;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 101130,\r\n      question: \"В чем разница между псевдоклассами и псевдоэлементами?\",\r\n      answer: `\r\n**Разница:**\r\n1. **Псевдоклассы (\\`:hover\\`, \\`:nth-child\\`):**\r\n   - Выбирают элементы на основе их состояния или положения.\r\n2. **Псевдоэлементы (\\`::before\\`, \\`::first-letter\\`):**\r\n   - Выбирают и стилизуют конкретные части элемента.\r\n\r\n**Пример:**\r\n\\`\\`\\`css\r\n/* Псевдокласс */\r\na:hover {\r\n  color: red;\r\n}\r\n\r\n/* Псевдоэлемент */\r\na::after {\r\n  content: '→';\r\n  margin-left: 5px;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testPropsValidation = {\r\n  id: 102775,\r\n  title: \"Props Validation (валидация пропсов)\",\r\n  questions: [\r\n    {\r\n      id: 102776,\r\n      question: \"Зачем нужна валидация пропсов в React?\",\r\n      answer: `\r\n**Зачем нужна валидация пропсов:**\r\n- Валидация пропсов помогает предотвратить ошибки, связанные с некорректными или отсутствующими данными.\r\n- Улучшает читаемость кода и документацию компонентов.\r\n- Позволяет разработчикам понимать, какие данные ожидаются в компоненте.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Greeting({ name }) {\r\n  return <p>Hello, {name}!</p>;\r\n}\r\n\r\nGreeting.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102777,\r\n      question: \"Как использовать PropTypes для валидации пропсов?\",\r\n      answer: `\r\n**Использование PropTypes:**\r\n- \\`PropTypes\\` — это библиотека для проверки типов данных пропсов.\r\n- Если тип данных не соответствует ожидаемому, React выведет предупреждение в консоль.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction UserProfile({ name, age, isAdmin }) {\r\n  return (\r\n    <div>\r\n      <p>Name: {name}</p>\r\n      <p>Age: {age}</p>\r\n      <p>Admin: {isAdmin ? 'Yes' : 'No'}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nUserProfile.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  age: PropTypes.number,\r\n  isAdmin: PropTypes.bool,\r\n};\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102778,\r\n      question: \"Какие типы данных можно валидировать с помощью PropTypes?\",\r\n      answer: `\r\n**Типы данных для валидации:**\r\n1. **Примитивные типы:**\r\n   - \\`PropTypes.string\\`\r\n   - \\`PropTypes.number\\`\r\n   - \\`PropTypes.bool\\`\r\n   - \\`PropTypes.array\\`\r\n   - \\`PropTypes.object\\`\r\n   - \\`PropTypes.func\\`\r\n   - \\`PropTypes.symbol\\`\r\n\r\n2. **Специальные типы:**\r\n   - \\`PropTypes.any\\` — любое значение.\r\n   - \\`PropTypes.node\\` — что угодно, что может быть отрендерено (строки, числа, элементы React).\r\n   - \\`PropTypes.element\\` — один React-элемент.\r\n   - \\`PropTypes.instanceOf(SomeClass)\\` — экземпляр определенного класса.\r\n\r\n3. **Коллекции:**\r\n   - \\`PropTypes.arrayOf(PropTypes.number)\\` — массив чисел.\r\n   - \\`PropTypes.objectOf(PropTypes.string)\\` — объект, где значения — строки.\r\n\r\n4. **Формы:**\r\n   - \\`PropTypes.shape({ ... })\\` — объект с определенной формой.\r\n   - \\`PropTypes.exact({ ... })\\` — строгая проверка формы объекта.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst Component = ({ user }) => <div>{user.name}</div>;\r\n\r\nComponent.propTypes = {\r\n  user: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    age: PropTypes.number,\r\n  }),\r\n};\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102779,\r\n      question: \"Что делать, если пропс является обязательным?\",\r\n      answer: `\r\n**Обязательные пропсы:**\r\n- Добавьте \\`isRequired\\` к типу данных.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Greeting({ name }) {\r\n  return <p>Hello, {name}!</p>;\r\n}\r\n\r\nGreeting.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102780,\r\n      question: \"Как задать значения по умолчанию для пропсов?\",\r\n      answer: `\r\n**Значения по умолчанию:**\r\n- Используйте \\`defaultProps\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Greeting({ name }) {\r\n  return <p>Hello, {name}!</p>;\r\n}\r\n\r\nGreeting.defaultProps = {\r\n  name: 'Guest',\r\n};\r\n\r\nGreeting.propTypes = {\r\n  name: PropTypes.string,\r\n};\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102781,\r\n      question: \"Можно ли валидировать пользовательские типы данных?\",\r\n      answer: `\r\n**Валидация пользовательских типов:**\r\n- Используйте \\`PropTypes.oneOf\\`, \\`PropTypes.oneOfType\\` или \\`PropTypes.instanceOf\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Status({ status }) {\r\n  return <p>Status: {status}</p>;\r\n}\r\n\r\nStatus.propTypes = {\r\n  status: PropTypes.oneOf(['active', 'inactive']).isRequired,\r\n};\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102782,\r\n      question: \"Как проверить, является ли пропс функцией?\",\r\n      answer: `\r\n**Проверка функций:**\r\n- Используйте \\`PropTypes.func\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Button({ onClick }) {\r\n  return <button onClick={onClick}>Click me</button>;\r\n}\r\n\r\nButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102783,\r\n      question: \"Что такое TypeScript и как он заменяет PropTypes?\",\r\n      answer: `\r\n**TypeScript:**\r\n- Это язык программирования, который добавляет статическую типизацию в JavaScript.\r\n- TypeScript заменяет \\`PropTypes\\` за счет явного указания типов данных.\r\n\r\n**Пример:**\r\n\\`\\`\\`typescript\r\ntype User = {\r\n  name: string;\r\n  age: number;\r\n  isAdmin?: boolean; // Необязательный пропс\r\n};\r\n\r\nconst UserProfile: React.FC<User> = ({ name, age, isAdmin }) => (\r\n  <div>\r\n    <p>Name: {name}</p>\r\n    <p>Age: {age}</p>\r\n    <p>Admin: {isAdmin ? 'Yes' : 'No'}</p>\r\n  </div>\r\n);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102784,\r\n      question: \"Как обрабатывать ошибки при невалидных пропсах?\",\r\n      answer: `\r\n**Обработка ошибок:**\r\n- React выводит предупреждения в консоль при невалидных пропсах.\r\n- Для более строгой проверки используйте TypeScript.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Greeting({ name }) {\r\n  if (typeof name !== 'string') {\r\n    console.error('Invalid prop type for \"name\". Expected a string.');\r\n  }\r\n  return <p>Hello, {name}!</p>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102785,\r\n      question: \"Как проверить, является ли пропс массивом объектов?\",\r\n      answer: `\r\n**Проверка массива объектов:**\r\n- Используйте \\`PropTypes.arrayOf\\` с \\`PropTypes.shape\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction UserList({ users }) {\r\n  return (\r\n    <ul>\r\n      {users.map((user) => (\r\n        <li key={user.id}>{user.name}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nUserList.propTypes = {\r\n  users: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testPortals = {\r\n  id: 102800,\r\n  title: \"Portals (порталы)\",\r\n  questions: [\r\n    {\r\n      id: 102801,\r\n      question: \"Что такое порталы (Portals) в React?\",\r\n      answer: `\r\n**Порталы (Portals):**\r\n- Это способ рендеринга дочерних элементов в DOM-узел, который находится вне иерархии родительского компонента.\r\n- Позволяют выводить элементы в другую часть DOM, не нарушая логику React.\r\n\r\n**Пример создания портала:**\r\n\\`\\`\\`javascript\r\nimport ReactDOM from 'react-dom';\r\n\r\nfunction Modal({ children }) {\r\n  return ReactDOM.createPortal(\r\n    <div className=\"modal\">{children}</div>,\r\n    document.getElementById('modal-root')\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102802,\r\n      question: \"Как создать портал в React?\",\r\n      answer: `\r\n**Создание портала:**\r\n- Используйте \\`ReactDOM.createPortal(child, container)\\`.\r\n\r\n**Шаги:**\r\n1. Создайте DOM-элемент для портала (например, \\`<div id=\"modal-root\"></div>\\`).\r\n2. Передайте дочерний элемент и контейнер в \\`createPortal\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h1>Основной контент</h1>\r\n      <Modal>\r\n        <p>Это модальное окно</p>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Modal({ children }) {\r\n  return ReactDOM.createPortal(\r\n    <div className=\"modal\">{children}</div>,\r\n    document.getElementById('modal-root')\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102803,\r\n      question: \"Зачем нужны порталы в React?\",\r\n      answer: `\r\n**Зачем нужны порталы:**\r\n1. **Выход за пределы DOM-иерархии:**\r\n   - Позволяют рендерить элементы вне родительского компонента (например, модальные окна, всплывающие подсказки).\r\n2. **Управление z-index:**\r\n   - Удобно для управления слоями (например, чтобы модальное окно было поверх других элементов).\r\n3. **Изоляция стилей:**\r\n   - Помогает избежать конфликтов стилей между родительским и дочерним компонентами.\r\n\r\n**Пример использования:**\r\n\\`\\`\\`javascript\r\nfunction Tooltip({ children }) {\r\n  return ReactDOM.createPortal(\r\n    <div className=\"tooltip\">{children}</div>,\r\n    document.body\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102804,\r\n      question: \"Как порталы работают с событиями?\",\r\n      answer: `\r\n**Работа с событиями:**\r\n- События в портале распространяются вверх по дереву React, даже если портал находится вне родительского DOM-узла.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Parent() {\r\n  const handleClick = () => {\r\n    console.log('Клик на родителе');\r\n  };\r\n\r\n  return (\r\n    <div onClick={handleClick}>\r\n      <p>Родительский компонент</p>\r\n      <Child />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Child() {\r\n  return ReactDOM.createPortal(\r\n    <button>Кнопка в портале</button>,\r\n    document.getElementById('portal-root')\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n**Результат:**\r\n- При клике на кнопку в портале событие всплывает до родительского компонента.\r\n`,\r\n    },\r\n    {\r\n      id: 102805,\r\n      question: \"Какие типичные случаи использования порталов?\",\r\n      answer: `\r\n**Типичные случаи использования:**\r\n1. **Модальные окна:**\r\n   - Вывод модальных окон поверх всего приложения.\r\n2. **Всплывающие подсказки (tooltips):**\r\n   - Отображение подсказок рядом с элементами.\r\n3. **Уведомления:**\r\n   - Показ уведомлений в верхней части экрана.\r\n4. **Контекстное меню:**\r\n   - Отображение меню относительно курсора или элемента.\r\n\r\n**Пример модального окна:**\r\n\\`\\`\\`javascript\r\nfunction Modal({ children }) {\r\n  return ReactDOM.createPortal(\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"modal-content\">{children}</div>\r\n    </div>,\r\n    document.getElementById('modal-root')\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102806,\r\n      question: \"Как порталы влияют на производительность?\",\r\n      answer: `\r\n**Влияние на производительность:**\r\n- Порталы не создают дополнительных затрат на рендеринг, так как React управляет их обновлениями так же, как обычные компоненты.\r\n- Однако, если портал содержит тяжелые вычисления или часто обновляется, это может повлиять на производительность.\r\n\r\n**Оптимизация:**\r\n- Используйте \\`React.memo\\` или \\`useMemo\\` для оптимизации содержимого портала.\r\n`,\r\n    },\r\n    {\r\n      id: 102807,\r\n      question: \"Можно ли использовать порталы с React Router?\",\r\n      answer: `\r\n**Использование с React Router:**\r\n- Да, порталы можно использовать вместе с React Router для отображения элементов в разных частях DOM.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav>\r\n          <Link to=\"/\">Home</Link>\r\n          <Link to=\"/modal\">Open Modal</Link>\r\n        </nav>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/modal\" component={ModalPage} />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction ModalPage() {\r\n  return ReactDOM.createPortal(\r\n    <div className=\"modal\">\r\n      <p>Это модальное окно через React Router</p>\r\n    </div>,\r\n    document.getElementById('modal-root')\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102808,\r\n      question: \"Как тестировать порталы?\",\r\n      answer: `\r\n**Тестирование порталов:**\r\n- Используйте библиотеки, такие как \\`@testing-library/react\\`, для тестирования порталов.\r\n- Создайте контейнер для портала в тестовой среде.\r\n\r\n**Пример теста:**\r\n\\`\\`\\`javascript\r\nimport { render, screen } from '@testing-library/react';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nfunction Modal({ children }) {\r\n  return ReactDOM.createPortal(\r\n    <div>{children}</div>,\r\n    document.getElementById('modal-root')\r\n  );\r\n}\r\n\r\ntest('рендеринг портала', () => {\r\n  const root = document.createElement('div');\r\n  root.id = 'modal-root';\r\n  document.body.appendChild(root);\r\n\r\n  render(<Modal>Тестовый текст</Modal>);\r\n\r\n  expect(screen.getByText('Тестовый текст')).toBeInTheDocument();\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102809,\r\n      question: \"Как порталы работают с SSR (Server-Side Rendering)?\",\r\n      answer: `\r\n**Работа с SSR:**\r\n- Порталы не поддерживаются напрямую в SSR, так как они зависят от DOM.\r\n- Для SSR нужно отдельно обрабатывать порталы на стороне клиента.\r\n\r\n**Решение:**\r\n- Отрисовывайте портал только на клиенте, проверяя наличие \\`document\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nfunction ClientOnlyPortal({ children, selector }) {\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  if (!mounted) return null;\r\n\r\n  return ReactDOM.createPortal(children, document.querySelector(selector));\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testControlledUncontrolled = {\r\n  id: 102900,\r\n  title:\r\n    \"Controlled vs Uncontrolled Components (управляемые и неуправляемые компоненты)\",\r\n  questions: [\r\n    {\r\n      id: 102901,\r\n      question: \"Что такое управляемые компоненты (Controlled Components)?\",\r\n      answer: `\r\n**Управляемые компоненты:**\r\n- Это компоненты, значения которых управляются через состояние React.\r\n- Значение элемента ввода синхронизируется с состоянием.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useState } from 'react';\r\n\r\nfunction ControlledInput() {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return <input type=\"text\" value={value} onChange={handleChange} />;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102902,\r\n      question: \"Что такое неуправляемые компоненты (Uncontrolled Components)?\",\r\n      answer: `\r\n**Неуправляемые компоненты:**\r\n- Это компоненты, значения которых управляются DOM.\r\n- Для доступа к значению используется \\`ref\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { useRef } from 'react';\r\n\r\nfunction UncontrolledInput() {\r\n  const inputRef = useRef(null);\r\n\r\n  const handleSubmit = () => {\r\n    console.log(inputRef.current.value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" ref={inputRef} />\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102903,\r\n      question:\r\n        \"Какие основные различия между управляемыми и неуправляемыми компонентами?\",\r\n      answer: `\r\n**Основные различия:**\r\n1. **Управление данными:**\r\n   - Управляемые: Данные хранятся в состоянии React.\r\n   - Неуправляемые: Данные хранятся в DOM.\r\n2. **Синхронизация:**\r\n   - Управляемые: Значения синхронизируются с состоянием.\r\n   - Неуправляемые: Значения извлекаются через \\`ref\\`.\r\n3. **Использование:**\r\n   - Управляемые: Подходят для форм с валидацией или динамическими изменениями.\r\n   - Неуправляемые: Проще для простых форм без сложной логики.\r\n\r\n**Пример управляемого компонента:**\r\n\\`\\`\\`javascript\r\nfunction ControlledForm() {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log('Submitted:', value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={value} onChange={handleChange} />\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n**Пример неуправляемого компонента:**\r\n\\`\\`\\`javascript\r\nfunction UncontrolledForm() {\r\n  const inputRef = useRef(null);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log('Submitted:', inputRef.current.value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" ref={inputRef} />\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102904,\r\n      question: \"Когда лучше использовать управляемые компоненты?\",\r\n      answer: `\r\n**Когда использовать управляемые компоненты:**\r\n1. **Формы с валидацией:**\r\n   - Легко реализовать проверку данных на лету.\r\n2. **Динамические формы:**\r\n   - Значения полей зависят от других полей или состояния.\r\n3. **Управление состоянием:**\r\n   - Требуется централизованное управление данными.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction DynamicForm() {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleEmailChange = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <input\r\n        type=\"email\"\r\n        value={email}\r\n        onChange={handleEmailChange}\r\n        placeholder=\"Email\"\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        value={password}\r\n        onChange={handlePasswordChange}\r\n        placeholder=\"Password\"\r\n      />\r\n      <button disabled={!email || !password}>Submit</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102905,\r\n      question: \"Когда лучше использовать неуправляемые компоненты?\",\r\n      answer: `\r\n**Когда использовать неуправляемые компоненты:**\r\n1. **Простые формы:**\r\n   - Формы без необходимости валидации или сложной логики.\r\n2. **Интеграция с библиотеками:**\r\n   - Библиотеки, которые работают напрямую с DOM.\r\n3. **Минимизация кода:**\r\n   - Меньше кода для управления состоянием.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction SimpleForm() {\r\n  const fileInput = useRef(null);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log('Selected file:', fileInput.current.files[0]);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"file\" ref={fileInput} />\r\n      <button type=\"submit\">Upload</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102906,\r\n      question: \"Как комбинировать управляемые и неуправляемые компоненты?\",\r\n      answer: `\r\n**Комбинирование компонентов:**\r\n- Используйте управляемые компоненты для полей с логикой и неуправляемые для простых полей.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction MixedForm() {\r\n  const [name, setName] = useState('');\r\n  const fileInput = useRef(null);\r\n\r\n  const handleNameChange = (event) => {\r\n    setName(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log('Name:', name);\r\n    console.log('File:', fileInput.current.files[0]);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={name}\r\n        onChange={handleNameChange}\r\n        placeholder=\"Name\"\r\n      />\r\n      <input type=\"file\" ref={fileInput} />\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102907,\r\n      question: \"Какие преимущества у управляемых компонентов?\",\r\n      answer: `\r\n**Преимущества управляемых компонентов:**\r\n1. **Полный контроль:**\r\n   - Все данные находятся в состоянии React.\r\n2. **Валидация:**\r\n   - Легко реализовать проверку данных.\r\n3. **Синхронизация:**\r\n   - Легко обновлять состояние нескольких полей одновременно.\r\n4. **Переиспользование:**\r\n   - Логика может быть вынесена в пользовательские хуки.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction useForm(initialValues) {\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setValues((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  return { values, handleChange };\r\n}\r\n\r\nfunction Form() {\r\n  const { values, handleChange } = useForm({ name: '', email: '' });\r\n\r\n  return (\r\n    <form>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={values.name}\r\n        onChange={handleChange}\r\n        placeholder=\"Name\"\r\n      />\r\n      <input\r\n        type=\"email\"\r\n        name=\"email\"\r\n        value={values.email}\r\n        onChange={handleChange}\r\n        placeholder=\"Email\"\r\n      />\r\n      <button>Submit</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102908,\r\n      question: \"Какие недостатки у неуправляемых компонентов?\",\r\n      answer: `\r\n**Недостатки неуправляемых компонентов:**\r\n1. **Меньший контроль:**\r\n   - Данные находятся вне состояния React.\r\n2. **Сложность тестирования:**\r\n   - Тестирование требует работы с реальным DOM.\r\n3. **Ограниченная функциональность:**\r\n   - Сложно реализовать валидацию или динамическое поведение.\r\n\r\n**Пример проблемы:**\r\n\\`\\`\\`javascript\r\nfunction ProblematicForm() {\r\n  const inputRef = useRef(null);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (!inputRef.current.value.trim()) {\r\n      console.error('Field is empty');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" ref={inputRef} />\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102909,\r\n      question: \"Как выбрать между управляемыми и неуправляемыми компонентами?\",\r\n      answer: `\r\n**Как выбрать:**\r\n1. **Управляемые компоненты:**\r\n   - Если нужна валидация, динамическое поведение или управление состоянием.\r\n2. **Неуправляемые компоненты:**\r\n   - Если форма простая или требуется минимальное управление данными.\r\n\r\n**Правило:**\r\n- Начните с управляемых компонентов, если нет веских причин использовать неуправляемые.\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testVirtualization = {\r\n  id: 102975,\r\n  title: \"Virtualization (виртуализация)\",\r\n  questions: [\r\n    {\r\n      id: 102976,\r\n      question: \"Что такое виртуализация в React?\",\r\n      answer: `\r\n**Виртуализация:**\r\n- Это техника, которая позволяет отображать только те элементы, которые видны пользователю, чтобы оптимизировать производительность.\r\n- Особенно полезна для больших списков или таблиц с большим количеством данных.\r\n\r\n**Преимущества:**\r\n1. Уменьшение использования памяти.\r\n2. Ускорение рендеринга.\r\n3. Повышение отзывчивости интерфейса.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { Virtuoso } from 'react-virtuoso';\r\n\r\nfunction VirtualizedList() {\r\n  const items = Array.from({ length: 1000 }, (_, index) => \\`Item \\${index + 1}\\`);\r\n\r\n  return (\r\n    <Virtuoso\r\n      style={{ height: '400px', width: '300px' }}\r\n      totalCount={items.length}\r\n      itemContent={(index) => <div>{items[index]}</div>}\r\n    />\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102977,\r\n      question: \"Зачем нужна виртуализация?\",\r\n      answer: `\r\n**Зачем нужна виртуализация:**\r\n1. **Оптимизация производительности:**\r\n   - При большом количестве элементов DOM может стать перегруженным.\r\n   - Виртуализация рендерит только видимые элементы.\r\n2. **Снижение нагрузки на браузер:**\r\n   - Меньше элементов в DOM → меньше потребление памяти и процессорного времени.\r\n3. **Улучшение UX:**\r\n   - Интерфейс становится более отзывчивым, особенно при скролле.\r\n\r\n**Пример проблемы без виртуализации:**\r\n\\`\\`\\`javascript\r\nfunction NonVirtualizedList() {\r\n  const items = Array.from({ length: 10000 }, (_, index) => \\`Item \\${index + 1}\\`);\r\n  return (\r\n    <div>\r\n      {items.map((item, index) => (\r\n        <div key={index}>{item}</div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102978,\r\n      question: \"Какие библиотеки используются для виртуализации в React?\",\r\n      answer: `\r\n**Популярные библиотеки:**\r\n1. **react-window:**\r\n   - Легковесная библиотека для виртуализации списков.\r\n2. **react-virtualized:**\r\n   - Более мощная библиотека с поддержкой сложных компонентов (таблицы, сетки).\r\n3. **react-virtuoso:**\r\n   - Простая библиотека для динамической виртуализации.\r\n\r\n**Пример react-window:**\r\n\\`\\`\\`javascript\r\nimport { FixedSizeList as List } from 'react-window';\r\n\r\nconst Row = ({ index, style }) => (\r\n  <div style={style}>Row {index}</div>\r\n);\r\n\r\nfunction VirtualizedList() {\r\n  return (\r\n    <List\r\n      height={400}\r\n      itemCount={1000}\r\n      itemSize={50}\r\n      width={300}\r\n    >\r\n      {Row}\r\n    </List>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102979,\r\n      question: \"Что такое windowing (оконная виртуализация)?\",\r\n      answer: `\r\n**Windowing (оконная виртуализация):**\r\n- Техника, при которой рендерятся только элементы, попадающие в область видимости (viewport).\r\n- Остальные элементы создаются только при прокрутке.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { FixedSizeList as List } from 'react-window';\r\n\r\nconst Row = ({ index, style }) => (\r\n  <div style={style}>Row {index}</div>\r\n);\r\n\r\nfunction WindowedList() {\r\n  return (\r\n    <List\r\n      height={400} // Высота видимой области\r\n      itemCount={1000} // Общее количество элементов\r\n      itemSize={50} // Высота каждого элемента\r\n      width={300} // Ширина списка\r\n    >\r\n      {Row}\r\n    </List>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102980,\r\n      question: \"Как реализовать виртуализацию для таблиц?\",\r\n      answer: `\r\n**Виртуализация для таблиц:**\r\n- Используйте библиотеки, такие как \\`react-virtualized\\` или \\`react-table\\`.\r\n\r\n**Пример с react-virtualized:**\r\n\\`\\`\\`javascript\r\nimport { Column, Table } from 'react-virtualized';\r\n\r\nconst list = Array.from({ length: 1000 }, (_, index) => ({\r\n  id: index,\r\n  name: \\`Name \\${index}\\`,\r\n  age: Math.floor(Math.random() * 50),\r\n}));\r\n\r\nfunction VirtualizedTable() {\r\n  return (\r\n    <Table\r\n      width={600}\r\n      height={400}\r\n      headerHeight={30}\r\n      rowHeight={30}\r\n      rowCount={list.length}\r\n      rowGetter={({ index }) => list[index]}\r\n    >\r\n      <Column label=\"ID\" dataKey=\"id\" width={100} />\r\n      <Column label=\"Name\" dataKey=\"name\" width={200} />\r\n      <Column label=\"Age\" dataKey=\"age\" width={100} />\r\n    </Table>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102981,\r\n      question: \"Как работает динамическая виртуализация?\",\r\n      answer: `\r\n**Динамическая виртуализация:**\r\n- Элементы имеют разную высоту, и их размеры вычисляются динамически.\r\n- Подходит для контента с переменной высотой.\r\n\r\n**Пример с react-virtuoso:**\r\n\\`\\`\\`javascript\r\nimport { Virtuoso } from 'react-virtuoso';\r\n\r\nfunction DynamicVirtualizedList() {\r\n  const items = Array.from({ length: 1000 }, (_, index) => \\`Item \\${index + 1}\\`);\r\n\r\n  return (\r\n    <Virtuoso\r\n      style={{ height: '400px', width: '300px' }}\r\n      totalCount={items.length}\r\n      itemContent={(index) => <div>{items[index]}</div>}\r\n    />\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102982,\r\n      question: \"Какие есть типы виртуализации?\",\r\n      answer: `\r\n**Типы виртуализации:**\r\n1. **Вертикальная виртуализация:**\r\n   - Рендеринг элементов по вертикали (например, списки).\r\n2. **Горизонтальная виртуализация:**\r\n   - Рендеринг элементов по горизонтали (например, карусели).\r\n3. **Табличная виртуализация:**\r\n   - Рендеринг строк и столбцов в таблицах.\r\n4. **Многомерная виртуализация:**\r\n   - Рендеринг элементов в сетке (например, галерея).\r\n\r\n**Пример вертикальной виртуализации:**\r\n\\`\\`\\`javascript\r\nimport { FixedSizeList as List } from 'react-window';\r\n\r\nconst Row = ({ index, style }) => (\r\n  <div style={style}>Row {index}</div>\r\n);\r\n\r\nfunction VerticalList() {\r\n  return (\r\n    <List\r\n      height={400}\r\n      itemCount={1000}\r\n      itemSize={50}\r\n      width={300}\r\n    >\r\n      {Row}\r\n    </List>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102983,\r\n      question: \"Какие ограничения у виртуализации?\",\r\n      answer: `\r\n**Ограничения:**\r\n1. **Сложность реализации:**\r\n   - Требует интеграции сторонних библиотек.\r\n2. **Динамический контент:**\r\n   - Сложно работать с элементами, у которых высота меняется динамически.\r\n3. **Анимации:**\r\n   - Анимации могут быть сложнее реализовать из-за ограниченного количества элементов в DOM.\r\n\r\n**Пример проблемы:**\r\n\\`\\`\\`javascript\r\n// Если элементы имеют динамическую высоту, нужно использовать библиотеки с поддержкой dynamic sizing.\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102984,\r\n      question: \"Как тестировать компоненты с виртуализацией?\",\r\n      answer: `\r\n**Тестирование:**\r\n- Используйте \\`@testing-library/react\\` для проверки видимых элементов.\r\n- Убедитесь, что виртуализация корректно обрабатывает прокрутку.\r\n\r\n**Пример теста:**\r\n\\`\\`\\`javascript\r\nimport { render, screen } from '@testing-library/react';\r\nimport { FixedSizeList as List } from 'react-window';\r\n\r\nconst Row = ({ index, style }) => (\r\n  <div style={style}>Row {index}</div>\r\n);\r\n\r\nfunction VirtualizedList() {\r\n  return (\r\n    <List\r\n      height={400}\r\n      itemCount={1000}\r\n      itemSize={50}\r\n      width={300}\r\n    >\r\n      {Row}\r\n    </List>\r\n  );\r\n}\r\n\r\ntest('renders first visible row', () => {\r\n  render(<VirtualizedList />);\r\n  expect(screen.getByText('Row 0')).toBeInTheDocument();\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102985,\r\n      question: \"Как оптимизировать виртуализацию для мобильных устройств?\",\r\n      answer: `\r\n**Оптимизация для мобильных устройств:**\r\n1. **Размеры элементов:**\r\n   - Используйте фиксированные размеры для упрощения расчетов.\r\n2. **Lazy loading:**\r\n   - Загружайте данные по мере прокрутки.\r\n3. **Touch events:**\r\n   - Убедитесь, что виртуализация корректно работает с touch-событиями.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { FixedSizeList as List } from 'react-window';\r\n\r\nconst Row = ({ index, style }) => (\r\n  <div style={style}>Row {index}</div>\r\n);\r\n\r\nfunction MobileOptimizedList() {\r\n  return (\r\n    <List\r\n      height={window.innerHeight}\r\n      itemCount={1000}\r\n      itemSize={50}\r\n      width={window.innerWidth}\r\n    >\r\n      {Row}\r\n    </List>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};","export const testReselectRecompose = {\r\n  id: 103025,\r\n  title: \"Reselect and Recompose (селекторы и композиция)\",\r\n  questions: [\r\n    {\r\n      id: 103026,\r\n      question: \"Что такое Reselect и зачем он нужен?\",\r\n      answer: `\r\n**Reselect:**\r\n- Библиотека для создания мемоизированных селекторов в Redux.\r\n- Позволяет избежать лишних пересчетов данных, если входные данные не изменились.\r\n\r\n**Зачем нужен:**\r\n1. **Оптимизация производительности:**\r\n   - Предотвращает повторные вычисления при каждом рендере.\r\n2. **Мемоизация данных:**\r\n   - Кэширует результаты селекторов на основе входных данных.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { createSelector } from 'reselect';\r\n\r\nconst selectItems = (state) => state.items;\r\nconst selectFilter = (state) => state.filter;\r\n\r\nconst selectFilteredItems = createSelector(\r\n  [selectItems, selectFilter],\r\n  (items, filter) => items.filter(item => item.type === filter)\r\n);\r\n\r\n// Использование:\r\nconst mapStateToProps = (state) => ({\r\n  filteredItems: selectFilteredItems(state),\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103027,\r\n      question: \"Как работает createSelector в Reselect?\",\r\n      answer: `\r\n**createSelector:**\r\n- Принимает массив входных селекторов и функцию преобразования.\r\n- Если входные данные не изменились, возвращает закэшированный результат.\r\n\r\n**Шаги работы:**\r\n1. Вызывает входные селекторы для получения данных.\r\n2. Проверяет, изменились ли входные данные.\r\n3. Если данные не изменились, возвращает кэшированный результат.\r\n4. Если данные изменились, вызывает функцию преобразования.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { createSelector } from 'reselect';\r\n\r\nconst selectNumbers = (state) => state.numbers;\r\nconst selectMultiplier = (state) => state.multiplier;\r\n\r\nconst selectMultipliedNumbers = createSelector(\r\n  [selectNumbers, selectMultiplier],\r\n  (numbers, multiplier) => numbers.map(num => num * multiplier)\r\n);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103028,\r\n      question: \"Зачем нужны селекторы в Redux?\",\r\n      answer: `\r\n**Зачем нужны селекторы:**\r\n1. **Абстракция данных:**\r\n   - Инкапсулируют логику получения данных из состояния.\r\n2. **Оптимизация:**\r\n   - Предотвращают лишние вычисления.\r\n3. **Повторное использование:**\r\n   - Селекторы можно использовать в разных компонентах.\r\n\r\n**Пример без селекторов:**\r\n\\`\\`\\`javascript\r\nconst mapStateToProps = (state) => ({\r\n  filteredItems: state.items.filter(item => item.type === state.filter),\r\n});\r\n\\`\\`\\`\r\n\r\n**Пример с селекторами:**\r\n\\`\\`\\`javascript\r\nconst selectFilteredItems = createSelector(\r\n  [(state) => state.items, (state) => state.filter],\r\n  (items, filter) => items.filter(item => item.type === filter)\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filteredItems: selectFilteredItems(state),\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103029,\r\n      question: \"Что такое Recompose и зачем он нужен?\",\r\n      answer: `\r\n**Recompose:**\r\n- Утилитарная библиотека для функциональных компонентов.\r\n- Позволяет создавать компоненты с использованием композиции хуков и высших порядковых компонентов (HOC).\r\n\r\n**Зачем нужен:**\r\n1. **Композиция логики:**\r\n   - Объединяет несколько HOC в один компонент.\r\n2. **Упрощение кода:**\r\n   - Уменьшает количество шаблонного кода.\r\n3. **Гибкость:**\r\n   - Легко комбинировать и переиспользовать логику.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { compose, withState, withHandlers } from 'recompose';\r\n\r\nconst enhance = compose(\r\n  withState('count', 'setCount', 0),\r\n  withHandlers({\r\n    increment: ({ setCount }) => () => setCount(n => n + 1),\r\n    decrement: ({ setCount }) => () => setCount(n => n - 1),\r\n  })\r\n);\r\n\r\nconst Counter = enhance(({ count, increment, decrement }) => (\r\n  <div>\r\n    <p>Count: {count}</p>\r\n    <button onClick={increment}>Increment</button>\r\n    <button onClick={decrement}>Decrement</button>\r\n  </div>\r\n));\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103030,\r\n      question: \"Какие основные функции предоставляет Recompose?\",\r\n      answer: `\r\n**Основные функции:**\r\n1. **withState:**\r\n   - Добавляет состояние в функциональный компонент.\r\n2. **withHandlers:**\r\n   - Создает обработчики событий.\r\n3. **compose:**\r\n   - Комбинирует несколько HOC в один.\r\n4. **pure:**\r\n   - Оптимизирует ререндеринг компонента.\r\n5. **branch:**\r\n   - Условно применяет HOC.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { compose, withState, pure } from 'recompose';\r\n\r\nconst enhance = compose(\r\n  withState('value', 'setValue', ''),\r\n  pure\r\n);\r\n\r\nconst Input = enhance(({ value, setValue }) => (\r\n  <input value={value} onChange={(e) => setValue(e.target.value)} />\r\n));\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103031,\r\n      question: \"Как заменить Recompose хуками?\",\r\n      answer: `\r\n**Замена Recompose хуками:**\r\n- Хуки предоставляют аналогичную функциональность, но более современным способом.\r\n\r\n**Сравнение:**\r\n\r\n**Recompose:**\r\n\\`\\`\\`javascript\r\nimport { compose, withState } from 'recompose';\r\n\r\nconst enhance = compose(\r\n  withState('count', 'setCount', 0)\r\n);\r\n\r\nconst Counter = enhance(({ count, setCount }) => (\r\n  <div>\r\n    <p>{count}</p>\r\n    <button onClick={() => setCount(count + 1)}>Increment</button>\r\n  </div>\r\n));\r\n\\`\\`\\`\r\n\r\n**Хуки:**\r\n\\`\\`\\`javascript\r\nimport { useState } from 'react';\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>{count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103032,\r\n      question: \"Какие есть альтернативы Recompose?\",\r\n      answer: `\r\n**Альтернативы:**\r\n1. **React Hooks:**\r\n   - Современный способ управления состоянием и побочными эффектами.\r\n2. **Redux Toolkit:**\r\n   - Включает встроенные утилиты для работы с состоянием.\r\n3. **Custom Hooks:**\r\n   - Пользовательские хуки для переиспользования логики.\r\n\r\n**Пример Custom Hook:**\r\n\\`\\`\\`javascript\r\nfunction useCounter(initialValue = 0) {\r\n  const [count, setCount] = useState(initialValue);\r\n  const increment = () => setCount(count + 1);\r\n  const decrement = () => setCount(count - 1);\r\n  return { count, increment, decrement };\r\n}\r\n\r\nfunction Counter() {\r\n  const { count, increment, decrement } = useCounter();\r\n  return (\r\n    <div>\r\n      <p>{count}</p>\r\n      <button onClick={increment}>Increment</button>\r\n      <button onClick={decrement}>Decrement</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103033,\r\n      question: \"Как тестировать селекторы из Reselect?\",\r\n      answer: `\r\n**Тестирование селекторов:**\r\n- Используйте Jest или другую библиотеку для тестирования.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { createSelector } from 'reselect';\r\n\r\nconst selectNumbers = (state) => state.numbers;\r\nconst selectMultiplier = (state) => state.multiplier;\r\n\r\nconst selectMultipliedNumbers = createSelector(\r\n  [selectNumbers, selectMultiplier],\r\n  (numbers, multiplier) => numbers.map(num => num * multiplier)\r\n);\r\n\r\ntest('multiplies numbers correctly', () => {\r\n  const state = {\r\n    numbers: [1, 2, 3],\r\n    multiplier: 2,\r\n  };\r\n  expect(selectMultipliedNumbers(state)).toEqual([2, 4, 6]);\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103034,\r\n      question: \"Какие ограничения у Reselect?\",\r\n      answer: `\r\n**Ограничения:**\r\n1. **Пересчет только по входным данным:**\r\n   - Если селектор зависит от глубоко вложенных данных, может потребоваться дополнительная оптимизация.\r\n2. **Неподдерживаемые сложные структуры:**\r\n   - Может быть сложно работать с иммутабельными данными.\r\n\r\n**Пример проблемы:**\r\n\\`\\`\\`javascript\r\nconst selectDeepData = createSelector(\r\n  [(state) => state.deep.nested.data],\r\n  (data) => data.filter(item => item.active)\r\n);\r\n// Если \\`deep.nested.data\\` изменяется, селектор пересчитывается.\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103035,\r\n      question: \"Как комбинировать Reselect и Redux Toolkit?\",\r\n      answer: `\r\n**Комбинирование:**\r\n- Redux Toolkit предоставляет встроенные утилиты для работы с селекторами.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { createSlice, createSelector } from '@reduxjs/toolkit';\r\n\r\nconst counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: { value: 0 },\r\n  reducers: {\r\n    increment: (state) => { state.value += 1; },\r\n    decrement: (state) => { state.value -= 1; },\r\n  },\r\n});\r\n\r\nconst selectValue = (state) => state.counter.value;\r\n\r\nconst selectDoubledValue = createSelector(\r\n  [selectValue],\r\n  (value) => value * 2\r\n);\r\n\r\nexport const { increment, decrement } = counterSlice.actions;\r\nexport default counterSlice.reducer;\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testReduxDevtools = {\r\n  id: 103050,\r\n  title: \"Redux DevTools (инструменты разработчика для Redux)\",\r\n  questions: [\r\n    {\r\n      id: 103051,\r\n      question: \"Что такое Redux DevTools?\",\r\n      answer: `\r\n**Redux DevTools:**\r\n- Это инструмент для отладки и анализа состояния приложения, использующего Redux.\r\n- Позволяет просматривать изменения состояния, действия (actions) и их последствия в реальном времени.\r\n\r\n**Основные возможности:**\r\n1. Просмотр истории действий.\r\n2. Инспектирование состояния до и после каждого действия.\r\n3. Возможность \"откатить\" состояние к предыдущему шагу (time-travel debugging).\r\n4. Фильтрация и группировка действий.\r\n\r\n**Пример подключения:**\r\n\\`\\`\\`javascript\r\nimport { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst reducer = (state = { count: 0 }, action) => {\r\n  switch (action.type) {\r\n    case 'INCREMENT':\r\n      return { count: state.count + 1 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst store = createStore(reducer, composeWithDevTools());\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103052,\r\n      question: \"Как подключить Redux DevTools к проекту?\",\r\n      answer: `\r\n**Подключение Redux DevTools:**\r\n1. Установите расширение браузера (например, Chrome или Firefox).\r\n2. Используйте \\`composeWithDevTools\\` из пакета \\`redux-devtools-extension\\`.\r\n\r\n**Шаги:**\r\n1. Установите пакет:\r\n   \\`\\`\\`bash\r\n   npm install redux-devtools-extension\r\n   \\`\\`\\`\r\n2. Подключите в коде:\r\n   \\`\\`\\`javascript\r\n   import { createStore } from 'redux';\r\n   import { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n   const store = createStore(reducer, composeWithDevTools());\r\n   \\`\\`\\`\r\n\r\n**Альтернатива (без установки пакета):**\r\nЕсли расширение установлено в браузере, можно использовать:\r\n\\`\\`\\`javascript\r\nconst store = createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103053,\r\n      question: \"Что такое time-travel debugging и как оно работает?\",\r\n      answer: `\r\n**Time-Travel Debugging:**\r\n- Это возможность перемещаться по истории изменений состояния приложения.\r\n- Позволяет \"откатить\" или \"перемотать\" состояние к любому действию.\r\n\r\n**Как это работает:**\r\n1. Каждое действие (action) сохраняется в истории.\r\n2. Вы можете выбрать конкретное действие и увидеть состояние до и после его выполнения.\r\n3. При выборе действия состояние автоматически обновляется.\r\n\r\n**Пример использования:**\r\n- Откройте Redux DevTools в браузере.\r\n- Найдите действие в списке и нажмите на него, чтобы увидеть изменения состояния.\r\n`,\r\n    },\r\n    {\r\n      id: 103054,\r\n      question: \"Как фильтровать действия в Redux DevTools?\",\r\n      answer: `\r\n**Фильтрация действий:**\r\n- Redux DevTools позволяет фильтровать действия по типу или другим критериям.\r\n\r\n**Настройка фильтрации:**\r\n1. Откройте панель настроек в Redux DevTools.\r\n2. Настройте фильтры, например, чтобы игнорировать определенные типы действий.\r\n\r\n**Пример настройки в коде:**\r\n\\`\\`\\`javascript\r\nconst store = createStore(\r\n  reducer,\r\n  composeWithDevTools({\r\n    actionsBlacklist: ['SOME_ACTION_TYPE'], // Игнорировать определенные действия\r\n  })\r\n);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103055,\r\n      question: \"Какие есть альтернативы Redux DevTools?\",\r\n      answer: `\r\n**Альтернативы:**\r\n1. **React Developer Tools:**\r\n   - Для анализа компонентов React.\r\n2. **MobX Developer Tools:**\r\n   - Для работы с MobX.\r\n3. **Built-in Logging Middleware:**\r\n   - Логирование действий и состояния в консоль.\r\n\r\n**Пример логирования:**\r\n\\`\\`\\`javascript\r\nconst loggerMiddleware = (store) => (next) => (action) => {\r\n  console.log('Current state:', store.getState());\r\n  console.log('Action:', action);\r\n  const result = next(action);\r\n  console.log('Next state:', store.getState());\r\n  return result;\r\n};\r\n\r\nconst store = createStore(reducer, applyMiddleware(loggerMiddleware));\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103056,\r\n      question: \"Как использовать Redux DevTools в продакшене?\",\r\n      answer: `\r\n**Использование в продакшене:**\r\n- По умолчанию Redux DevTools отключен в продакшене.\r\n- Для использования в продакшене добавьте проверку окружения.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst isDevelopment = process.env.NODE_ENV === 'development';\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  isDevelopment ? composeWithDevTools() : undefined\r\n);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103057,\r\n      question:\r\n        \"Как экспортировать и импортировать состояние через Redux DevTools?\",\r\n      answer: `\r\n**Экспорт и импорт состояния:**\r\n- Redux DevTools позволяет экспортировать текущее состояние в JSON.\r\n- Также можно импортировать состояние для восстановления.\r\n\r\n**Как это сделать:**\r\n1. Откройте Redux DevTools.\r\n2. Нажмите \"Export\" для сохранения состояния.\r\n3. Нажмите \"Import\" для загрузки состояния.\r\n\r\n**Пример использования:**\r\n- Полезно для воспроизведения багов или тестирования.\r\n`,\r\n    },\r\n    {\r\n      id: 103058,\r\n      question: \"Как отлаживать сложные состояния с помощью Redux DevTools?\",\r\n      answer: `\r\n**Отладка сложных состояний:**\r\n1. **Просмотр дерева состояния:**\r\n   - Вкладка \"State\" показывает структуру состояния.\r\n2. **Поиск изменений:**\r\n   - Используйте поиск для быстрого нахождения изменений.\r\n3. **Diff между состояниями:**\r\n   - Redux DevTools показывает разницу между состояниями до и после действия.\r\n\r\n**Пример использования:**\r\n- Откройте Redux DevTools и найдите действие.\r\n- Просмотрите изменения в дереве состояния.\r\n`,\r\n    },\r\n    {\r\n      id: 103059,\r\n      question: \"Как настроить Redux DevTools для больших приложений?\",\r\n      answer: `\r\n**Настройка для больших приложений:**\r\n1. **Ограничение истории:**\r\n   - Уменьшите количество сохраняемых действий.\r\n2. **Фильтрация действий:**\r\n   - Игнорируйте ненужные действия.\r\n3. **Группировка действий:**\r\n   - Группируйте связанные действия для удобства анализа.\r\n\r\n**Пример настройки:**\r\n\\`\\`\\`javascript\r\nconst store = createStore(\r\n  reducer,\r\n  composeWithDevTools({\r\n    maxAge: 50, // Ограничить историю до 50 действий\r\n    actionsBlacklist: ['LOG_ACTION'], // Игнорировать действия\r\n  })\r\n);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103060,\r\n      question:\r\n        \"Как тестировать действия и состояние с помощью Redux DevTools?\",\r\n      answer: `\r\n**Тестирование с помощью Redux DevTools:**\r\n1. **Воспроизведение ошибок:**\r\n   - Экспортируйте состояние с ошибкой и воспроизведите её в тестовой среде.\r\n2. **Анализ действий:**\r\n   - Проверьте, какие действия вызывают изменения состояния.\r\n3. **Сравнение состояний:**\r\n   - Используйте diff для сравнения состояний.\r\n\r\n**Пример:**\r\n- Экспортируйте состояние с ошибкой.\r\n- Импортируйте его в тестовое приложение для анализа.\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testReactDevtools = {\r\n  id: 103075,\r\n  title: \"React DevTools (инструменты разработчика для React)\",\r\n  questions: [\r\n    {\r\n      id: 103076,\r\n      question: \"Что такое React DevTools?\",\r\n      answer: `\r\n**React DevTools:**\r\n- Это расширение браузера для отладки и анализа приложений, написанных на React.\r\n- Позволяет инспектировать компоненты, их состояние, пропсы и хуки.\r\n\r\n**Основные возможности:**\r\n1. Просмотр дерева компонентов.\r\n2. Инспектирование состояния и пропсов каждого компонента.\r\n3. Отслеживание изменений состояния в реальном времени.\r\n4. Анализ производительности рендеринга.\r\n\r\n**Установка:**\r\n- Для Chrome: [React DevTools Extension](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi ).\r\n- Для Firefox: [React DevTools Extension](https://addons.mozilla.org/en-US/firefox/addon/react-devtools/ ).\r\n\r\n**Пример использования:**\r\n- После установки откройте панель разработчика (F12) и найдите вкладку \"React\".\r\n`,\r\n    },\r\n    {\r\n      id: 103077,\r\n      question: \"Как использовать React DevTools для инспекции компонентов?\",\r\n      answer: `\r\n**Инспекция компонентов:**\r\n1. Откройте панель разработчика (F12).\r\n2. Перейдите во вкладку \"React\".\r\n3. Выберите компонент в дереве компонентов.\r\n4. Просмотрите его состояние, пропсы и хуки.\r\n\r\n**Пример:**\r\n- Если у вас есть компонент:\r\n\\`\\`\\`javascript\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n  return <button onClick={() => setCount(count + 1)}>Count: {count}</button>;\r\n}\r\n\\`\\`\\`\r\n- Вы можете увидеть \\`count\\` в состоянии компонента через React DevTools.\r\n`,\r\n    },\r\n    {\r\n      id: 103078,\r\n      question: \"Как проверить производительность с помощью React DevTools?\",\r\n      answer: `\r\n**Проверка производительности:**\r\n1. Откройте вкладку \"Profiler\" в React DevTools.\r\n2. Нажмите \"Start profiling\" и выполните действия в приложении.\r\n3. Остановите профилирование и просмотрите результаты.\r\n\r\n**Что можно увидеть:**\r\n- Какие компоненты перерисовываются.\r\n- Почему компоненты перерисовываются.\r\n- Время, затраченное на рендеринг.\r\n\r\n**Пример:**\r\n- Профилируйте сложный интерфейс, чтобы найти \"узкие места\".\r\n`,\r\n    },\r\n    {\r\n      id: 103079,\r\n      question: \"Как отлаживать хуки с помощью React DevTools?\",\r\n      answer: `\r\n**Отладка хуков:**\r\n- React DevTools показывает значения хуков (например, \\`useState\\`, \\`useReducer\\`) в дереве компонентов.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction Example() {\r\n  const [value, setValue] = useState('');\r\n  return <input value={value} onChange={(e) => setValue(e.target.value)} />;\r\n}\r\n\\`\\`\\`\r\n- Вы можете увидеть текущее значение \\`value\\` в React DevTools.\r\n`,\r\n    },\r\n    {\r\n      id: 103080,\r\n      question: \"Как фильтровать компоненты в React DevTools?\",\r\n      answer: `\r\n**Фильтрация компонентов:**\r\n- Используйте строку поиска в верхней части панели React DevTools.\r\n- Введите имя компонента или его часть для быстрого поиска.\r\n\r\n**Пример:**\r\n- Если вы ищете компонент \\`UserProfile\\`, введите \"UserProfile\" в строке поиска.\r\n`,\r\n    },\r\n    {\r\n      id: 103081,\r\n      question: \"Как использовать React DevTools в продакшене?\",\r\n      answer: `\r\n**Использование в продакшене:**\r\n- По умолчанию React DevTools не работает в продакшене.\r\n- Для использования добавьте специальную конфигурацию.\r\n\r\n**Шаги:**\r\n1. Убедитесь, что сборка React включает режим разработки.\r\n2. Используйте CDN-версию React DevTools для продакшена:\r\n   \\`\\`\\`html\r\n   <script src=\"https://unpkg.com/react @18/umd/react.development.js\"></script>\r\n   <script src=\"https://unpkg.com/react-dom @18/umd/react-dom.development.js\"></script>\r\n   \\`\\`\\`\r\n3. Подключите расширение браузера.\r\n`,\r\n    },\r\n    {\r\n      id: 103082,\r\n      question: \"Какие есть альтернативы React DevTools?\",\r\n      answer: `\r\n**Альтернативы:**\r\n1. **Chrome DevTools:**\r\n   - Встроенные инструменты для анализа DOM и производительности.\r\n2. **Redux DevTools:**\r\n   - Для отладки состояния Redux.\r\n3. **Console Logging:**\r\n   - Логирование данных в консоль.\r\n\r\n**Пример логирования:**\r\n\\`\\`\\`javascript\r\nconsole.log('State:', state);\r\nconsole.log('Props:', props);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103083,\r\n      question:\r\n        \"Как экспортировать и импортировать данные через React DevTools?\",\r\n      answer: `\r\n**Экспорт и импорт данных:**\r\n- React DevTools позволяет экспортировать текущее состояние компонентов.\r\n- Также можно импортировать состояние для восстановления.\r\n\r\n**Как это сделать:**\r\n1. Откройте React DevTools.\r\n2. Найдите функцию экспорта/импорта в меню.\r\n3. Сохраните или загрузите файл состояния.\r\n\r\n**Пример использования:**\r\n- Полезно для воспроизведения багов или тестирования.\r\n`,\r\n    },\r\n    {\r\n      id: 103084,\r\n      question: \"Как отлаживать ошибки в React с помощью React DevTools?\",\r\n      answer: `\r\n**Отладка ошибок:**\r\n1. Просмотрите дерево компонентов.\r\n2. Найдите компонент, который вызывает ошибку.\r\n3. Проверьте его состояние и пропсы.\r\n\r\n**Пример:**\r\n- Если компонент не отображается, проверьте, правильно ли передаются пропсы.\r\n`,\r\n    },\r\n    {\r\n      id: 103085,\r\n      question: \"Как настроить React DevTools для больших приложений?\",\r\n      answer: `\r\n**Настройка для больших приложений:**\r\n1. **Фильтрация компонентов:**\r\n   - Используйте поиск для быстрого доступа к нужным компонентам.\r\n2. **Группировка компонентов:**\r\n   - Разделяйте компоненты на логические группы.\r\n3. **Производительность:**\r\n   - Используйте профилировщик для анализа рендеринга.\r\n\r\n**Пример настройки:**\r\n- Настройте фильтры и используйте профилировщик для оптимизации.\r\n`,\r\n    },\r\n    {\r\n      id: 103086,\r\n      question: \"Как тестировать компоненты с помощью React DevTools?\",\r\n      answer: `\r\n**Тестирование компонентов:**\r\n1. **Проверка состояния:**\r\n   - Убедитесь, что состояние компонентов обновляется корректно.\r\n2. **Проверка пропсов:**\r\n   - Проверьте, правильно ли передаются пропсы.\r\n3. **Анализ рендеринга:**\r\n   - Убедитесь, что компоненты не перерисовываются лишний раз.\r\n\r\n**Пример:**\r\n- Проверьте, как меняется состояние компонента при взаимодействии.\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testRenderReact = {\r\n  id: 103100,\r\n  title: \"Rendering in React (рендеринг)\",\r\n  questions: [\r\n    {\r\n      id: 103101,\r\n      question: \"Что такое рендеринг в React?\",\r\n      answer: `\r\n**Рендеринг:**\r\n- Это процесс преобразования JSX или компонентов React в реальные DOM-элементы, которые отображаются в браузере.\r\n- React использует виртуальный DOM для оптимизации рендеринга.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction App() {\r\n  return <h1>Hello, World!</h1>;\r\n}\r\n\r\nReactDOM.createRoot(document.getElementById('root')).render(<App />);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103102,\r\n      question: \"Как работает ReactDOM.render?\",\r\n      answer: `\r\n**ReactDOM.render:**\r\n- Метод \\`ReactDOM.render\\` используется для рендеринга React-компонента в DOM-контейнер.\r\n- В React 18+ рекомендуется использовать \\`createRoot\\`.\r\n\r\n**Пример (React 17 и ниже):**\r\n\\`\\`\\`javascript\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\\`\\`\\`\r\n\r\n**Пример (React 18+):**\r\n\\`\\`\\`javascript\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(<App />);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103103,\r\n      question: \"Что такое Virtual DOM и как он работает?\",\r\n      answer: `\r\n**Virtual DOM:**\r\n- Легковесная копия реального DOM, хранящаяся в памяти.\r\n- React сравнивает изменения в Virtual DOM и обновляет только те части реального DOM, которые изменились.\r\n\r\n**Как это работает:**\r\n1. Создается новое дерево Virtual DOM.\r\n2. React сравнивает его с предыдущим деревом (diffing algorithm).\r\n3. Обновляются только измененные узлы в реальном DOM.\r\n\r\n**Преимущества:**\r\n- Уменьшение количества прямых операций с DOM.\r\n- Повышение производительности.\r\n`,\r\n    },\r\n    {\r\n      id: 103104,\r\n      question: \"Что такое Reconciliation (согласование) в React?\",\r\n      answer: `\r\n**Reconciliation:**\r\n- Процесс сравнения нового и старого дерева Virtual DOM для определения изменений.\r\n- Реализован через алгоритм diffing.\r\n\r\n**Принципы работы:**\r\n1. **Элементы одного типа:** Сравниваются атрибуты, обновляются только изменения.\r\n2. **Разные типы элементов:** Старый элемент удаляется, новый добавляется.\r\n3. **Списки элементов:** Используются ключи (\\`key\\`) для идентификации элементов.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction List({ items }) {\r\n  return (\r\n    <ul>\r\n      {items.map((item) => (\r\n        <li key={item.id}>{item.name}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103105,\r\n      question: \"Как работает React.memo?\",\r\n      answer: `\r\n**React.memo:**\r\n- Это HOC (High-Order Component), который мемоизирует функциональные компоненты.\r\n- Предотвращает лишние перерисовки, если пропсы не изменились.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst MemoizedComponent = React.memo(function MyComponent({ prop }) {\r\n  console.log('Rendered');\r\n  return <p>{prop}</p>;\r\n});\r\n\r\nfunction ParentComponent() {\r\n  const [count, setCount] = React.useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <MemoizedComponent prop=\"Static Prop\" />\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103106,\r\n      question: \"Что такое Conditional Rendering (условный рендеринг)?\",\r\n      answer: `\r\n**Conditional Rendering:**\r\n- Отображение компонентов на основе условий.\r\n\r\n**Варианты реализации:**\r\n1. **Тернарный оператор:**\r\n   \\`\\`\\`javascript\r\n   function App({ isLoggedIn }) {\r\n     return isLoggedIn ? <Dashboard /> : <Login />;\r\n   }\r\n   \\`\\`\\`\r\n2. **Logical &&:**\r\n   \\`\\`\\`javascript\r\n   function App({ loading }) {\r\n     return <div>{loading && <Spinner />}</div>;\r\n   }\r\n   \\`\\`\\`\r\n3. **if/else:**\r\n   \\`\\`\\`javascript\r\n   function App({ user }) {\r\n     if (!user) return <Login />;\r\n     return <Dashboard />;\r\n   }\r\n   \\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103107,\r\n      question: \"Как работает Lazy Loading в React?\",\r\n      answer: `\r\n**Lazy Loading:**\r\n- Техника загрузки компонентов только тогда, когда они нужны.\r\n- Реализуется через \\`React.lazy\\` и \\`Suspense\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <LazyComponent />\r\n    </React.Suspense>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103108,\r\n      question: \"Что такое Server-Side Rendering (SSR) в React?\",\r\n      answer: `\r\n**Server-Side Rendering (SSR):**\r\n- Рендеринг React-приложения на сервере для отправки готового HTML клиенту.\r\n- Улучшает производительность и SEO.\r\n\r\n**Пример с Next.js:**\r\n\\`\\`\\`javascript\r\nexport default function Home() {\r\n  return <h1>Hello, SSR!</h1>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103109,\r\n      question: \"Что такое Client-Side Rendering (CSR) в React?\",\r\n      answer: `\r\n**Client-Side Rendering (CSR):**\r\n- Рендеринг React-приложения в браузере.\r\n- Более динамичный, но может быть медленнее при начальной загрузке.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction App() {\r\n  return <h1>Hello, CSR!</h1>;\r\n}\r\n\r\nReactDOM.createRoot(document.getElementById('root')).render(<App />);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103110,\r\n      question: \"Что такое Static Site Generation (SSG) в React?\",\r\n      answer: `\r\n**Static Site Generation (SSG):**\r\n- Генерация статических HTML-файлов во время сборки.\r\n- Подходит для контента, который не меняется часто.\r\n\r\n**Пример с Next.js:**\r\n\\`\\`\\`javascript\r\nexport async function getStaticProps() {\r\n  return { props: { data: 'Static Data' } };\r\n}\r\n\r\nexport default function Home({ data }) {\r\n  return <h1>{data}</h1>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103111,\r\n      question: \"Какие есть методы оптимизации рендеринга в React?\",\r\n      answer: `\r\n**Методы оптимизации:**\r\n1. **React.memo:** Мемоизация компонентов.\r\n2. **shouldComponentUpdate:** Контроль обновлений в классовых компонентах.\r\n3. **PureComponent:** Автоматическая проверка изменений в классовых компонентах.\r\n4. **useMemo/useCallback:** Мемоизация значений и функций.\r\n5. **Lazy Loading:** Загрузка компонентов по требованию.\r\n6. **Code Splitting:** Разделение кода для уменьшения размера бандла.\r\n7. **Windowing/Virtualization:** Оптимизация больших списков.\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testFragments = {\r\n  id: 103125,\r\n  title: \"React Fragments (фрагменты)\",\r\n  questions: [\r\n    {\r\n      id: 103126,\r\n      question: \"Что такое React Fragments?\",\r\n      answer: `\r\n**React Fragments:**\r\n- Это способ группировать несколько элементов без добавления лишних узлов в DOM.\r\n- Фрагменты не создают дополнительных DOM-элементов, что помогает избежать лишней вложенности.\r\n\r\n**Синтаксис:**\r\n\\`\\`\\`javascript\r\n// Короткий синтаксис:\r\n<>\r\n  <ChildA />\r\n  <ChildB />\r\n</>\r\n\r\n// Полный синтаксис:\r\n<React.Fragment>\r\n  <ChildA />\r\n  <ChildB />\r\n</React.Fragment>\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103127,\r\n      question: \"Зачем нужны React Fragments?\",\r\n      answer: `\r\n**Зачем нужны:**\r\n1. **Избежание лишних DOM-узлов:**\r\n   - Иногда нужно вернуть несколько элементов из компонента, но без обертки (например, \\`div\\`).\r\n2. **Улучшение читаемости HTML:**\r\n   - Фрагменты делают структуру DOM более чистой.\r\n3. **CSS и Layout:**\r\n   - Лишние обертки могут нарушить CSS-правила (например, \\`flexbox\\` или \\`grid\\`).\r\n\r\n**Пример проблемы без фрагментов:**\r\n\\`\\`\\`javascript\r\nfunction MyComponent() {\r\n  return (\r\n    <div>\r\n      <ChildA />\r\n      <ChildB />\r\n    </div>\r\n  );\r\n}\r\n// Лишний \\`div\\` может сломать layout.\r\n\\`\\`\\`\r\n\r\n**Решение с фрагментами:**\r\n\\`\\`\\`javascript\r\nfunction MyComponent() {\r\n  return (\r\n    <>\r\n      <ChildA />\r\n      <ChildB />\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103128,\r\n      question: \"Какие есть способы использования React Fragments?\",\r\n      answer: `\r\n**Способы использования:**\r\n1. **Короткий синтаксис (\\`<>\\`):**\r\n   - Простой и удобный для большинства случаев.\r\n   \\`\\`\\`javascript\r\n   <>\r\n     <ChildA />\r\n     <ChildB />\r\n   </>\r\n   \\`\\`\\`\r\n2. **Полный синтаксис (\\`<React.Fragment>\\`):**\r\n   - Позволяет передавать ключи (например, в списках).\r\n   \\`\\`\\`javascript\r\n   <React.Fragment key=\"uniqueKey\">\r\n     <ChildA />\r\n     <ChildB />\r\n   </React.Fragment>\r\n   \\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103129,\r\n      question: \"Как использовать ключи с React Fragments?\",\r\n      answer: `\r\n**Использование ключей:**\r\n- Ключи можно передавать только с полным синтаксисом (\\`<React.Fragment>\\`).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction List({ items }) {\r\n  return (\r\n    <>\r\n      {items.map((item) => (\r\n        <React.Fragment key={item.id}>\r\n          <h2>{item.title}</h2>\r\n          <p>{item.description}</p>\r\n        </React.Fragment>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103130,\r\n      question: \"Какие преимущества у React Fragments?\",\r\n      answer: `\r\n**Преимущества:**\r\n1. **Отсутствие лишних DOM-узлов:**\r\n   - Фрагменты не добавляют дополнительные элементы в DOM.\r\n2. **Упрощение структуры:**\r\n   - Чистый и понятный код без ненужных оберток.\r\n3. **Совместимость с CSS:**\r\n   - Не нарушает правила макета (например, \\`flexbox\\` или \\`grid\\`).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction TableRows() {\r\n  return (\r\n    <>\r\n      <tr><td>Row 1</td></tr>\r\n      <tr><td>Row 2</td></tr>\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103131,\r\n      question: \"Можно ли использовать атрибуты с React Fragments?\",\r\n      answer: `\r\n**Атрибуты:**\r\n- Нет, фрагменты не поддерживают атрибуты (например, \\`className\\`, \\`style\\`).\r\n- Если нужна обертка с атрибутами, используйте обычный HTML-элемент.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// Ошибка:\r\n<>\r\n  <ChildA />\r\n  <ChildB />\r\n</>\r\n\r\n// Решение:\r\n<div className=\"wrapper\">\r\n  <ChildA />\r\n  <ChildB />\r\n</div>\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103132,\r\n      question: \"Как тестировать компоненты с React Fragments?\",\r\n      answer: `\r\n**Тестирование:**\r\n- Фрагменты не добавляют DOM-узлы, поэтому их тестирование аналогично тестированию обычных компонентов.\r\n\r\n**Пример теста:**\r\n\\`\\`\\`javascript\r\nimport { render, screen } from '@testing-library/react';\r\n\r\nfunction ComponentWithFragments() {\r\n  return (\r\n    <>\r\n      <p>First paragraph</p>\r\n      <p>Second paragraph</p>\r\n    </>\r\n  );\r\n}\r\n\r\ntest('renders paragraphs', () => {\r\n  render(<ComponentWithFragments />);\r\n  expect(screen.getByText('First paragraph')).toBeInTheDocument();\r\n  expect(screen.getByText('Second paragraph')).toBeInTheDocument();\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103133,\r\n      question: \"Какие ограничения у React Fragments?\",\r\n      answer: `\r\n**Ограничения:**\r\n1. **Нет поддержки атрибутов:**\r\n   - Нельзя добавлять \\`className\\`, \\`style\\` или другие атрибуты.\r\n2. **Ключи только с полным синтаксисом:**\r\n   - Ключи нельзя использовать с коротким синтаксисом (\\`<>\\`).\r\n\r\n**Пример проблемы:**\r\n\\`\\`\\`javascript\r\n// Ошибка:\r\n<>\r\n  <Child key=\"1\" />\r\n</>\r\n\r\n// Решение:\r\n<React.Fragment key=\"1\">\r\n  <Child />\r\n</React.Fragment>\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103134,\r\n      question: \"Как выбрать между Fragment и div?\",\r\n      answer: `\r\n**Выбор между Fragment и div:**\r\n1. **Fragment:**\r\n   - Если нужно вернуть несколько элементов без лишней обертки.\r\n   - Когда важно сохранить чистую структуру DOM.\r\n2. **div:**\r\n   - Если нужна обертка с атрибутами (например, \\`className\\` или \\`style\\`).\r\n   - Когда обертка не нарушает макет.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// Fragment:\r\n<>\r\n  <ChildA />\r\n  <ChildB />\r\n</>\r\n\r\n// div:\r\n<div className=\"container\">\r\n  <ChildA />\r\n  <ChildB />\r\n</div>\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103135,\r\n      question: \"Как работают Fragments с таблицами?\",\r\n      answer: `\r\n**Fragments с таблицами:**\r\n- В таблицах нельзя использовать \\`div\\` как обертку.\r\n- Fragments позволяют возвращать несколько строк (\\`<tr>\\`) без нарушения структуры таблицы.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction TableRows() {\r\n  return (\r\n    <>\r\n      <tr><td>Row 1</td></tr>\r\n      <tr><td>Row 2</td></tr>\r\n    </>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testConcurrentModeSuspense = {\r\n  id: 103175,\r\n  title: \"Concurrent Mode and Suspense (конкурентный режим и подвеска)\",\r\n  questions: [\r\n    {\r\n      id: 103176,\r\n      question: \"Что такое Concurrent Mode в React?\",\r\n      answer: `\r\n**Concurrent Mode:**\r\n- Это экспериментальный режим в React, который позволяет приложению оставаться отзывчивым, даже если часть UI блокируется или требует времени для загрузки.\r\n- Включает в себя такие возможности, как приостановка рендеринга, разделение работы на части и приоритезацию обновлений.\r\n\r\n**Основные особенности:**\r\n1. **Прерываемый рендеринг:**\r\n   - React может приостановить выполнение долгих операций и вернуться к ним позже.\r\n2. **Приоритеты обновлений:**\r\n   - Высокоприоритетные обновления (например, пользовательский ввод) выполняются раньше.\r\n3. **Улучшение UX:**\r\n   - Интерфейс остается отзывчивым, даже при медленных операциях.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// Включение Concurrent Mode (React 18+):\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(<App />);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103177,\r\n      question: \"Что такое Suspense и как он работает?\",\r\n      answer: `\r\n**Suspense:**\r\n- Это компонент, который позволяет \"приостановить\" рендеринг до тех пор, пока асинхронная операция (например, загрузка данных) не завершится.\r\n- Пока данные загружаются, можно показать запасной контент (например, спиннер).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <LazyComponent />\r\n    </React.Suspense>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103178,\r\n      question: \"Как работает Suspense с ленивой загрузкой компонентов?\",\r\n      answer: `\r\n**Suspense с ленивой загрузкой:**\r\n- \\`React.lazy\\` используется для динамического импорта компонентов.\r\n- \\`Suspense\\` отвечает за отображение запасного контента, пока компонент загружается.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <LazyComponent />\r\n    </React.Suspense>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103179,\r\n      question: \"Как использовать Suspense для загрузки данных?\",\r\n      answer: `\r\n**Suspense для загрузки данных:**\r\n- В React 18+ можно использовать Suspense для загрузки данных через библиотеки (например, Relay или Next.js).\r\n- Данные загружаются асинхронно, а Suspense показывает запасной контент.\r\n\r\n**Пример (Next.js):**\r\n\\`\\`\\`javascript\r\nimport { Suspense } from 'react';\r\n\r\nfunction DataComponent() {\r\n  const data = useFetchData('/api/data'); // Гипотетический хук для загрузки данных\r\n  return <div>{data}</div>;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <Suspense fallback={<div>Loading data...</div>}>\r\n      <DataComponent />\r\n    </Suspense>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103180,\r\n      question: \"Как Concurrent Mode улучшает производительность?\",\r\n      answer: `\r\n**Улучшение производительности:**\r\n1. **Разделение работы:**\r\n   - React разделяет сложные задачи на мелкие части, чтобы избежать блокировки основного потока.\r\n2. **Приостановка рендеринга:**\r\n   - Если задача занимает много времени, React может приостановить её и выполнить другие задачи.\r\n3. **Приоритизация обновлений:**\r\n   - Высокоприоритетные обновления (например, клик пользователя) выполняются раньше.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction App() {\r\n  const [input, setInput] = React.useState('');\r\n  const [data, setData] = React.useState(null);\r\n\r\n  // Высокоприоритетное обновление\r\n  const handleChange = (e) => setInput(e.target.value);\r\n\r\n  // Низкоприоритетное обновление\r\n  React.useEffect(() => {\r\n    fetch('/api/data').then((res) => res.json()).then(setData);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <input value={input} onChange={handleChange} />\r\n      <React.Suspense fallback={<div>Loading...</div>}>\r\n        <DataDisplay data={data} />\r\n      </React.Suspense>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103181,\r\n      question: \"Какие есть ограничения у Concurrent Mode?\",\r\n      answer: `\r\n**Ограничения:**\r\n1. **Экспериментальный статус:**\r\n   - Concurrent Mode все еще находится в разработке (React 18+).\r\n2. **Сложность интеграции:**\r\n   - Требует изменения архитектуры приложения.\r\n3. **Поддержка библиотек:**\r\n   - Не все библиотеки совместимы с Concurrent Mode.\r\n\r\n**Пример проблемы:**\r\n\\`\\`\\`javascript\r\n// Библиотеки, которые полагаются на синхронный рендеринг, могут работать некорректно.\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103182,\r\n      question: \"Как тестировать компоненты с Suspense?\",\r\n      answer: `\r\n**Тестирование:**\r\n- Используйте \\`@testing-library/react\\` для тестирования компонентов с Suspense.\r\n- Мокируйте асинхронные операции для проверки поведения.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { render, screen } from '@testing-library/react';\r\nimport React, { Suspense } from 'react';\r\n\r\njest.mock('./LazyComponent', () => ({\r\n  __esModule: true,\r\n  default: () => <div>Mocked Lazy Component</div>,\r\n}));\r\n\r\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\r\n\r\nfunction App() {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <LazyComponent />\r\n    </Suspense>\r\n  );\r\n}\r\n\r\ntest('renders mocked lazy component', () => {\r\n  render(<App />);\r\n  expect(screen.getByText('Mocked Lazy Component')).toBeInTheDocument();\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103183,\r\n      question: \"Что такое Time Slicing (временные срезы)?\",\r\n      answer: `\r\n**Time Slicing:**\r\n- Это технология, которая позволяет React разделять работу на небольшие фрагменты и выполнять их постепенно.\r\n- Пользовательский интерфейс остается отзывчивым, даже при выполнении тяжелых операций.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// React автоматически разделяет рендеринг на части.\r\nfunction HeavyComponent() {\r\n  const items = Array.from({ length: 10000 }, (_, i) => <div key={i}>Item {i}</div>);\r\n  return <div>{items}</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103184,\r\n      question: \"Как Suspense помогает в SSR (Server-Side Rendering)?\",\r\n      answer: `\r\n**Suspense в SSR:**\r\n- В Next.js и других фреймворках Suspense позволяет откладывать рендеринг частей страницы, пока данные загружаются.\r\n- Это улучшает производительность и SEO.\r\n\r\n**Пример (Next.js):**\r\n\\`\\`\\`javascript\r\nexport default function Page() {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Content />\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nasync function Content() {\r\n  const data = await fetchData(); // Асинхронная загрузка данных\r\n  return <div>{data}</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103185,\r\n      question: \"Как выбрать между Suspense и useEffect для загрузки данных?\",\r\n      answer: `\r\n**Выбор между Suspense и useEffect:**\r\n1. **Suspense:**\r\n   - Подходит для декларативной загрузки данных.\r\n   - Работает с библиотеками, поддерживающими Suspense (например, Relay, Next.js).\r\n2. **useEffect:**\r\n   - Подходит для простой загрузки данных.\r\n   - Работает в любом React-приложении.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// Suspense:\r\nfunction DataComponent() {\r\n  const data = useSuspenseFetch('/api/data');\r\n  return <div>{data}</div>;\r\n}\r\n\r\n// useEffect:\r\nfunction DataComponent() {\r\n  const [data, setData] = React.useState(null);\r\n  React.useEffect(() => {\r\n    fetch('/api/data').then((res) => res.json()).then(setData);\r\n  }, []);\r\n  return data ? <div>{data}</div> : <div>Loading...</div>;\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testBundleOptimization = {\r\n  id: 103200,\r\n  title: \"Bundle Optimization (оптимизация сборки)\",\r\n  questions: [\r\n    {\r\n      id: 103201,\r\n      question: \"Что такое оптимизация бандла?\",\r\n      answer: `\r\n**Оптимизация бандла:**\r\n- Это процесс улучшения производительности и уменьшения размера конечного файла сборки (бандла).\r\n- Основная цель — сократить время загрузки приложения и улучшить пользовательский опыт.\r\n\r\n**Основные подходы:**\r\n1. Уменьшение размера бандла.\r\n2. Разделение кода (Code Splitting).\r\n3. Ленивая загрузка (Lazy Loading).\r\n4. Минификация и сжатие кода.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// Использование Code Splitting:\r\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103202,\r\n      question: \"Как работает Code Splitting?\",\r\n      answer: `\r\n**Code Splitting:**\r\n- Это техника разделения кода на более мелкие части, чтобы загружать только те части, которые нужны в данный момент.\r\n- Реализуется через динамический импорт или инструменты сборки (например, Webpack).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// Динамический импорт:\r\nconst Module = await import('./Module');\r\n\r\n// Webpack Code Splitting:\r\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103203,\r\n      question:\r\n        \"Что такое Tree Shaking и как он помогает оптимизировать бандл?\",\r\n      answer: `\r\n**Tree Shaking:**\r\n- Это процесс удаления неиспользуемого (мёртвого) кода из бандла.\r\n- Работает только с ES6 модулями (import/export).\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// Исходный код:\r\nexport const usedFunction = () => console.log('Used');\r\nexport const unusedFunction = () => console.log('Unused');\r\n\r\n// В собранном бандле останется только \\`usedFunction\\`.\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103204,\r\n      question: \"Как минифицировать код для оптимизации бандла?\",\r\n      answer: `\r\n**Минификация:**\r\n- Это процесс уменьшения размера кода за счет удаления пробелов, комментариев и переименования переменных.\r\n\r\n**Инструменты:**\r\n1. **Terser:** Популярный минификатор для JavaScript.\r\n2. **CSSNano:** Для минификации CSS.\r\n3. **Webpack/Babel:** Интегрируют минификацию в процесс сборки.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// До минификации:\r\nfunction greet(name) {\r\n  console.log('Hello, ' + name);\r\n}\r\n\r\n// После минификации:\r\nfunction g(n){console.log(\"Hello, \"+n)}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103205,\r\n      question: \"Как использовать ленивую загрузку (Lazy Loading)?\",\r\n      answer: `\r\n**Ленивая загрузка:**\r\n- Техника загрузки кода только тогда, когда он действительно нужен.\r\n- Реализуется через \\`React.lazy\\` и \\`Suspense\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <LazyComponent />\r\n    </React.Suspense>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103206,\r\n      question: \"Как анализировать размер бандла?\",\r\n      answer: `\r\n**Анализ размера бандла:**\r\n- Используйте инструменты для анализа состава бандла.\r\n\r\n**Инструменты:**\r\n1. **Webpack Bundle Analyzer:**\r\n   - Визуализирует размеры частей бандла.\r\n2. **Source Map Explorer:**\r\n   - Анализирует исходный код через source maps.\r\n\r\n**Пример Webpack Bundle Analyzer:**\r\n\\`\\`\\`javascript\r\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');\r\n\r\nmodule.exports = {\r\n  plugins: [new BundleAnalyzerPlugin()],\r\n};\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103207,\r\n      question: \"Какие есть стратегии оптимизации бандла?\",\r\n      answer: `\r\n**Стратегии:**\r\n1. **Code Splitting:**\r\n   - Разделяйте код на части.\r\n2. **Tree Shaking:**\r\n   - Удаляйте неиспользуемый код.\r\n3. **Ленивая загрузка:**\r\n   - Загружайте код по требованию.\r\n4. **Минификация:**\r\n   - Сокращайте размер кода.\r\n5. **Кэширование:**\r\n   - Используйте долгосрочное кэширование для статических файлов.\r\n6. **Compression:**\r\n   - Сжимайте файлы с помощью Gzip или Brotli.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\n// Compression с помощью Webpack:\r\nconst CompressionPlugin = require('compression-webpack-plugin');\r\n\r\nmodule.exports = {\r\n  plugins: [new CompressionPlugin()],\r\n};\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103208,\r\n      question: \"Как использовать Gzip и Brotli для сжатия бандла?\",\r\n      answer: `\r\n**Gzip и Brotli:**\r\n- Алгоритмы сжатия, которые уменьшают размер файлов для передачи по сети.\r\n\r\n**Настройка:**\r\n1. **Gzip:**\r\n   - Настройте сервер для сжатия файлов.\r\n2. **Brotli:**\r\n   - Современный алгоритм, который обеспечивает лучшее сжатие, чем Gzip.\r\n\r\n**Пример с Webpack:**\r\n\\`\\`\\`javascript\r\nconst CompressionPlugin = require('compression-webpack-plugin');\r\n\r\nmodule.exports = {\r\n  plugins: [\r\n    new CompressionPlugin({\r\n      algorithm: 'gzip', // или 'brotliCompress'\r\n    }),\r\n  ],\r\n};\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103209,\r\n      question: \"Как использовать кэширование для оптимизации бандла?\",\r\n      answer: `\r\n**Кэширование:**\r\n- Это техника сохранения статических файлов в браузере пользователя для ускорения повторной загрузки.\r\n\r\n**Подходы:**\r\n1. **Именование файлов хешами:**\r\n   - Добавьте уникальные хеши к именам файлов для долгосрочного кэширования.\r\n2. **Service Workers:**\r\n   - Используйте для управления кэшированием.\r\n\r\n**Пример Webpack:**\r\n\\`\\`\\`javascript\r\noutput: {\r\n  filename: '[name].[contenthash].js',\r\n},\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 103210,\r\n      question: \"Какие инструменты помогают оптимизировать бандл?\",\r\n      answer: `\r\n**Инструменты:**\r\n1. **Webpack:**\r\n   - Настройка Code Splitting, минификации и Tree Shaking.\r\n2. **Vite/Rollup:**\r\n   - Быстрая сборка с нативными ES модулями.\r\n3. **Parcel:**\r\n   - Автоматическая оптимизация без конфигурации.\r\n4. **ESLint/Prettier:**\r\n   - Анализ и форматирование кода.\r\n5. **Lighthouse:**\r\n   - Аудит производительности.\r\n\r\n**Пример Lighthouse:**\r\n- Запустите аудит в Chrome DevTools, чтобы проверить производительность.\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testErrorHandling = {\r\n  id: 102200,\r\n  title: \"Error Handling (обработка ошибок)\",\r\n  questions: [\r\n    {\r\n      id: 102201,\r\n      question: \"Что такое Error Handling (обработка ошибок)?\",\r\n      answer: `\r\n**Error Handling (обработка ошибок):**\r\n- Это процесс обнаружения, обработки и реагирования на ошибки в программе.\r\n- Основная цель — предотвратить сбои приложения и предоставить полезную информацию для отладки.\r\n\r\n**Основные подходы:**\r\n1. **Try...Catch:**\r\n   - Блок \\`try\\` используется для выполнения кода, который может вызвать ошибку.\r\n   - Блок \\`catch\\` перехватывает ошибку и выполняет действия по её обработке.\r\n2. **Finally:**\r\n   - Блок \\`finally\\` выполняется независимо от того, была ли ошибка или нет.\r\n3. **Throw:**\r\n   - Используется для создания пользовательских ошибок.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\ntry {\r\n  throw new Error('Something went wrong');\r\n} catch (error) {\r\n  console.error('Caught an error:', error.message);\r\n} finally {\r\n  console.log('This will run no matter what');\r\n}\r\n// Output:\r\n// Caught an error: Something went wrong\r\n// This will run no matter what\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102202,\r\n      question: \"Как работает блок try...catch?\",\r\n      answer: `\r\n**Блок try...catch:**\r\n- \\`try\\`: Код внутри этого блока выполняется до тех пор, пока не возникнет ошибка.\r\n- \\`catch\\`: Если ошибка возникает, управление передается в этот блок.\r\n- \\`finally\\`: Этот блок выполняется всегда, независимо от наличия ошибки.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\ntry {\r\n  const result = riskyOperation();\r\n  console.log(result);\r\n} catch (error) {\r\n  console.error('Error occurred:', error.message);\r\n} finally {\r\n  console.log('Cleanup or logging here');\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102203,\r\n      question: \"Как создать пользовательскую ошибку с помощью throw?\",\r\n      answer: `\r\n**Создание пользовательской ошибки:**\r\n- Используйте оператор \\`throw\\`, чтобы создать собственную ошибку.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction divide(a, b) {\r\n  if (b === 0) {\r\n    throw new Error('Division by zero is not allowed');\r\n  }\r\n  return a / b;\r\n}\r\n\r\ntry {\r\n  const result = divide(10, 0);\r\n  console.log(result);\r\n} catch (error) {\r\n  console.error(error.message); // Division by zero is not allowed\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102204,\r\n      question: \"Какие встроенные типы ошибок существуют в JavaScript?\",\r\n      answer: `\r\n**Встроенные типы ошибок:**\r\n1. **Error:** Базовый класс для всех ошибок.\r\n2. **SyntaxError:** Ошибки синтаксиса.\r\n3. **ReferenceError:** Ссылка на несуществующую переменную.\r\n4. **TypeError:** Неверный тип данных.\r\n5. **RangeError:** Число выходит за допустимый диапазон.\r\n6. **EvalError:** Ошибки, связанные с функцией \\`eval\\`.\r\n7. **URIError:** Ошибки при работе с URI.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\ntry {\r\n  const array = new Array(-1); // RangeError\r\n} catch (error) {\r\n  console.error(error.name); // RangeError\r\n  console.error(error.message); // Invalid array length\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102205,\r\n      question: \"Как обрабатывать асинхронные ошибки?\",\r\n      answer: `\r\n**Обработка асинхронных ошибок:**\r\n1. **Promises:**\r\n   - Используйте \\`catch\\` для обработки ошибок в промисах.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfetch('https://example.com ')\r\n  .then((response) => {\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return response.json();\r\n  })\r\n  .catch((error) => {\r\n    console.error('Fetch error:', error.message);\r\n  });\r\n\\`\\`\\`\r\n\r\n2. **Async/Await:**\r\n   - Используйте \\`try...catch\\` для обработки ошибок в асинхронных функциях.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nasync function fetchData() {\r\n  try {\r\n    const response = await fetch('https://example.com ');\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const data = await response.json();\r\n    console.log(data);\r\n  } catch (error) {\r\n    console.error('Fetch error:', error.message);\r\n  }\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102206,\r\n      question: \"Что такое глобальный обработчик ошибок?\",\r\n      answer: `\r\n**Глобальный обработчик ошибок:**\r\n- Позволяет перехватывать необработанные ошибки в приложении.\r\n- Полезен для логирования и предотвращения сбоев.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nwindow.addEventListener('error', (event) => {\r\n  console.error('Global error:', event.message);\r\n});\r\n\r\n// Вызов ошибки\r\nsetTimeout(() => {\r\n  throw new Error('Uncaught error');\r\n}, 1000);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102207,\r\n      question: \"Как тестировать обработку ошибок?\",\r\n      answer: `\r\n**Тестирование обработки ошибок:**\r\n- Используйте библиотеки, такие как \\`Jest\\` или \\`Mocha\\`.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nfunction riskyFunction() {\r\n  throw new Error('Test error');\r\n}\r\n\r\ntest('handles errors correctly', () => {\r\n  expect(() => riskyFunction()).toThrow('Test error');\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102208,\r\n      question: \"Как использовать Error Boundaries в React?\",\r\n      answer: `\r\n**Error Boundaries:**\r\n- Это компоненты React, которые перехватывают ошибки в дочерних компонентах.\r\n- Используются для отображения запасного UI вместо сбоя приложения.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError() {\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    console.error('Error caught by boundary:', error, info);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong.</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n// Использование:\r\n<ErrorBoundary>\r\n  <ChildComponent />\r\n</ErrorBoundary>\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102209,\r\n      question: \"Как логировать ошибки в production?\",\r\n      answer: `\r\n**Логирование ошибок:**\r\n- Используйте сторонние сервисы, такие как Sentry, LogRocket или Rollbar.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nwindow.addEventListener('error', (event) => {\r\n  fetch('/log-error', {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n      message: event.message,\r\n      stack: event.error.stack,\r\n    }),\r\n  });\r\n});\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testProcessors = {\r\n  id: 101525,\r\n  title: \"Processors - Процессоры\",\r\n  questions: [\r\n    {\r\n      id: 101526,\r\n      question: \"Что такое процессоры в контексте Frontend-разработки?\",\r\n      answer: `\r\n      **Процессоры в Frontend:**\r\n      - Это инструменты, которые обрабатывают исходный код (например, CSS, JavaScript) перед тем, как он попадает в браузер.\r\n      - Они позволяют использовать современные или расширенные возможности языков, которые затем преобразуются в формат, совместимый с браузерами.\r\n\r\n      **Примеры:**\r\n      - CSS-препроцессоры (Sass, Less).\r\n      - Транспиляторы JavaScript (Babel).\r\n      - Инструменты для оптимизации (PostCSS, Webpack).\r\n      `,\r\n    },\r\n    {\r\n      id: 101527,\r\n      question: \"Что такое CSS-препроцессоры и зачем они нужны?\",\r\n      answer: `\r\n      **CSS-препроцессоры:**\r\n      - Это инструменты, которые расширяют возможности стандартного CSS, добавляя такие функции, как переменные, вложенные правила, миксины и функции.\r\n      - После написания кода они компилируются в стандартный CSS.\r\n\r\n      **Примеры:**\r\n      - **Sass:** Поддерживает переменные, вложенные правила, миксины.\r\n        \\`\\`\\`scss\r\n        $primary-color: #3498db;\r\n\r\n        .button {\r\n          background-color: $primary-color;\r\n        }\r\n        \\`\\`\\`\r\n      - **Less:** Похож на Sass, но с более простым синтаксисом.\r\n      - **Stylus:** Гибкий препроцессор с минималистичным синтаксисом.\r\n      `,\r\n    },\r\n    {\r\n      id: 101528,\r\n      question: \"Что такое Babel и зачем он используется?\",\r\n      answer: `\r\n      **Babel:**\r\n      - Это транспилятор JavaScript, который преобразует современный JavaScript (ES6+) в более старые версии (например, ES5), чтобы обеспечить совместимость с браузерами.\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`javascript\r\n      // Современный JavaScript (ES6+)\r\n      const greet = (name) => \\`Hello, \\${name}!\\`;\r\n\r\n      // Babel преобразует его в:\r\n      var greet = function greet(name) {\r\n        return 'Hello, ' + name + '!';\r\n      };\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101529,\r\n      question: \"Что такое PostCSS и какие плагины для него популярны?\",\r\n      answer: `\r\n      **PostCSS:**\r\n      - Это инструмент для трансформации CSS с помощью плагинов.\r\n      - Он позволяет автоматизировать задачи, такие как автопрефиксы, минификация и оптимизация CSS.\r\n\r\n      **Популярные плагины:**\r\n      1. **Autoprefixer:** Добавляет вендорные префиксы для поддержки старых браузеров.\r\n      2. **CSSNano:** Минифицирует CSS-код.\r\n      3. **PurgeCSS:** Удаляет неиспользуемые стили.\r\n\r\n      **Пример Autoprefixer:**\r\n      \\`\\`\\`css\r\n      /* Исходный CSS */\r\n      .example {\r\n        display: flex;\r\n      }\r\n\r\n      /* Результат после обработки Autoprefixer */\r\n      .example {\r\n        display: -webkit-box;\r\n        display: -ms-flexbox;\r\n        display: flex;\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101530,\r\n      question: \"Что такое Webpack и зачем он используется?\",\r\n      answer: `\r\n      **Webpack:**\r\n      - Это сборщик модулей, который объединяет все ресурсы (JavaScript, CSS, изображения и т.д.) в один или несколько файлов для браузера.\r\n      - Он позволяет использовать современные подходы к разработке, такие как модульность и динамическая загрузка.\r\n\r\n      **Основные функции:**\r\n      1. **Сборка модулей:** Объединяет JavaScript-файлы.\r\n      2. **Обработка зависимостей:** Автоматически подключает зависимости.\r\n      3. **Транспиляция:** Работает с Babel, TypeScript и другими инструментами.\r\n      4. **Оптимизация:** Минифицирует и сжимает файлы.\r\n\r\n      **Пример конфигурации:**\r\n      \\`\\`\\`javascript\r\n      module.exports = {\r\n        entry: './src/index.js',\r\n        output: {\r\n          filename: 'bundle.js',\r\n          path: __dirname + '/dist',\r\n        },\r\n        module: {\r\n          rules: [\r\n            { test: /\\.css$/, use: ['style-loader', 'css-loader'] },\r\n            { test: /\\.js$/, exclude: /node_modules/, use: ['babel-loader'] },\r\n          ],\r\n        },\r\n      };\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101531,\r\n      question: \"Что такое ESLint и зачем он нужен?\",\r\n      answer: `\r\n      **ESLint:**\r\n      - Это инструмент для анализа кода JavaScript на наличие ошибок и соблюдения правил кодирования.\r\n      - Он помогает поддерживать единый стиль кода в команде и предотвращать распространенные ошибки.\r\n\r\n      **Пример использования:**\r\n      - Настройте файл \\`.eslintrc.json\\`:\r\n      \\`\\`\\`json\r\n      {\r\n        \"rules\": {\r\n          \"semi\": [\"error\", \"always\"],\r\n          \"quotes\": [\"error\", \"double\"]\r\n        }\r\n      }\r\n      \\`\\`\\`\r\n      - Запустите анализ:\r\n      \\`\\`\\`bash\r\n      npx eslint yourfile.js\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101532,\r\n      question: \"Что такое Prettier и чем он отличается от ESLint?\",\r\n      answer: `\r\n      **Prettier:**\r\n      - Это инструмент для форматирования кода, который автоматически исправляет стиль кода (отступы, кавычки, точки с запятой и т.д.).\r\n      - В отличие от ESLint, Prettier фокусируется только на стиле кода, а не на логических ошибках.\r\n\r\n      **Разница между ESLint и Prettier:**\r\n      - **ESLint:** Анализирует код на наличие ошибок и проверяет соблюдение правил.\r\n      - **Prettier:** Форматирует код, делая его единообразным.\r\n\r\n      **Пример интеграции:**\r\n      - Используйте Prettier как плагин для ESLint:\r\n      \\`\\`\\`json\r\n      {\r\n        \"extends\": [\"eslint:recommended\", \"plugin:prettier/recommended\"]\r\n      }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101533,\r\n      question:\r\n        \"Что такое Tailwind CSS и чем он отличается от других CSS-инструментов?\",\r\n      answer: `\r\n      **Tailwind CSS:**\r\n      - Это утилитарный CSS-фреймворк, который предоставляет набор классов для быстрого создания пользовательских интерфейсов.\r\n      - В отличие от Bootstrap или Foundation, Tailwind не предоставляет готовые компоненты, а позволяет создавать уникальные дизайны.\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`html\r\n      <div class=\"flex justify-center items-center bg-blue-500 text-white p-4\">\r\n        Hello, Tailwind!\r\n      </div>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101534,\r\n      question:\r\n        \"Какие инструменты используются для оптимизации изображений в Frontend?\",\r\n      answer: `\r\n      **Инструменты для оптимизации изображений:**\r\n      1. **ImageMin:** Минифицирует изображения (JPEG, PNG, SVG).\r\n      2. **Sharp:** Обрабатывает и оптимизирует изображения.\r\n      3. **TinyPNG:** Онлайн-сервис для сжатия изображений.\r\n      4. **WebP:** Формат изображений с лучшим сжатием, чем JPEG/PNG.\r\n\r\n      **Пример с ImageMin:**\r\n      \\`\\`\\`javascript\r\n      const imagemin = require('imagemin');\r\n      const imageminJpegtran = require('imagemin-jpegtran');\r\n\r\n      imagemin(['images/*.{jpg,png}'], {\r\n        destination: 'build/images',\r\n        plugins: [imageminJpegtran()],\r\n      }).then(() => {\r\n        console.log('Images optimized');\r\n      });\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101535,\r\n      question: \"Что такое Rollup и чем он отличается от Webpack?\",\r\n      answer: `\r\n      **Rollup:**\r\n      - Это сборщик модулей, который фокусируется на создании библиотек и небольших приложений.\r\n      - В отличие от Webpack, Rollup лучше подходит для проектов, где важна легковесность и чистота кода.\r\n\r\n      **Разница между Rollup и Webpack:**\r\n      - **Rollup:** Лучше для библиотек, Tree Shaking и чистого кода.\r\n      - **Webpack:** Лучше для сложных приложений с множеством зависимостей.\r\n\r\n      **Пример конфигурации Rollup:**\r\n      \\`\\`\\`javascript\r\n      export default {\r\n        input: 'src/main.js',\r\n        output: {\r\n          file: 'bundle.js',\r\n          format: 'iife',\r\n        },\r\n      };\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testLibrary = {\r\n  id: 101450,\r\n  title: \"Библиотеки\",\r\n  questions: [\r\n    {\r\n      id: 101451,\r\n      question: \"Что такое библиотека в программировании?\",\r\n      answer: `\r\n      **Библиотека:**\r\n      - Это набор готовых функций, классов или модулей, которые можно использовать для решения определенных задач.\r\n      - Библиотеки помогают ускорить разработку, предоставляя готовые решения для распространенных проблем.\r\n\r\n      **Примеры:**\r\n      - \\`Lodash\\`: Утилиты для работы с массивами, объектами и строками.\r\n      - \\`Moment.js\\`: Работа с датами и временем.\r\n      - \\`Axios\\`: HTTP-запросы к серверу.\r\n      `,\r\n    },\r\n    {\r\n      id: 101452,\r\n      question: \"Какие популярные JavaScript-библиотеки вы знаете?\",\r\n      answer: `\r\n      **Популярные JavaScript-библиотеки:**\r\n      1. **React:** Библиотека для создания пользовательских интерфейсов.\r\n      2. **Lodash:** Утилиты для работы с массивами, объектами и другими структурами данных.\r\n      3. **Axios:** Для выполнения HTTP-запросов.\r\n      4. **Moment.js (Luxon):** Для работы с датами и временем.\r\n      5. **jQuery:** Упрощает работу с DOM и AJAX.\r\n      6. **Three.js:** Для работы с 3D-графикой.\r\n      7. **Chart.js:** Для создания графиков и диаграмм.\r\n\r\n      **Пример использования Axios:**\r\n      \\`\\`\\`javascript\r\n      axios.get('https://api.example.com/data ')\r\n        .then(response => console.log(response.data))\r\n        .catch(error => console.error(error));\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101453,\r\n      question: \"Что такое Lodash и зачем она нужна?\",\r\n      answer: `\r\n      **Lodash:**\r\n      - Это популярная библиотека JavaScript, которая предоставляет множество утилит для работы с массивами, объектами, строками и другими типами данных.\r\n      - Она упрощает написание кода и делает его более читаемым.\r\n\r\n      **Примеры использования:**\r\n      \\`\\`\\`javascript\r\n      // Глубокое клонирование объекта\r\n      const clone = _.cloneDeep({ a: { b: 2 } });\r\n\r\n      // Фильтрация массива\r\n      const filtered = _.filter([1, 2, 3, 4], n => n % 2 === 0);\r\n\r\n      // Группировка по ключу\r\n      const grouped = _.groupBy(['one', 'two', 'three'], 'length');\r\n      console.log(grouped); // { 3: ['one', 'two'], 5: ['three'] }\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101454,\r\n      question: \"Что такое Axios и как он используется?\",\r\n      answer: `\r\n      **Axios:**\r\n      - Это библиотека для выполнения HTTP-запросов (GET, POST, PUT, DELETE и т.д.).\r\n      - Она поддерживает обещания (Promises) и работает как в браузере, так и на сервере (Node.js).\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`javascript\r\n      // GET-запрос\r\n      axios.get('https://api.example.com/users ')\r\n        .then(response => console.log(response.data))\r\n        .catch(error => console.error(error));\r\n\r\n      // POST-запрос\r\n      axios.post('https://api.example.com/users ', { name: 'Alice' })\r\n        .then(response => console.log(response.data))\r\n        .catch(error => console.error(error));\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101455,\r\n      question: \"Что такое Moment.js и какие альтернативы существуют?\",\r\n      answer: `\r\n      **Moment.js:**\r\n      - Это библиотека для работы с датами и временем в JavaScript.\r\n      - Она позволяет форматировать, парсить, манипулировать и отображать даты.\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`javascript\r\n      const now = moment();\r\n      console.log(now.format('YYYY-MM-DD')); // Текущая дата в формате 'ГГГГ-ММ-ДД'\r\n      \\`\\`\\`\r\n\r\n      **Альтернативы:**\r\n      1. **Luxon:** Современная альтернатива Moment.js с поддержкой временных зон.\r\n      2. **date-fns:** Легковесная библиотека с функциями для работы с датами.\r\n      3. **Day.js:** Минималистичная версия Moment.js.\r\n\r\n      **Пример Day.js:**\r\n      \\`\\`\\`javascript\r\n      const formattedDate = dayjs().format('YYYY-MM-DD');\r\n      console.log(formattedDate);\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101456,\r\n      question: \"Что такое jQuery и почему её использование уменьшилось?\",\r\n      answer: `\r\n      **jQuery:**\r\n      - Это библиотека JavaScript, которая упрощает работу с DOM, событиями, анимациями и AJAX-запросами.\r\n      - Она была особенно популярна в эпоху старых браузеров, где приходилось писать много кросс-браузерного кода.\r\n\r\n      **Причины снижения популярности:**\r\n      1. **Современные API браузеров:**\r\n         - Нативные методы (например, \\`querySelector\\`, \\`fetch\\`) заменяют многие функции jQuery.\r\n      2. **Легковесные фреймворки:**\r\n         - React, Vue и другие фреймворки предоставляют более современные способы работы с интерфейсом.\r\n      3. **Производительность:**\r\n         - jQuery может быть избыточной для простых задач.\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`javascript\r\n      // Выбор элемента и изменение текста\r\n      $('.my-element').text('Hello, jQuery!');\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101457,\r\n      question: \"Как добавить библиотеку в проект?\",\r\n      answer: `\r\n      **Добавление библиотеки:**\r\n      1. **Через CDN:**\r\n         - Включите ссылку на библиотеку в HTML-файл.\r\n         \\`\\`\\`html\r\n         <script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js \"></script>\r\n         \\`\\`\\`\r\n      2. **Через npm/yarn:**\r\n         - Установите библиотеку в проект.\r\n         \\`\\`\\`bash\r\n         npm install axios\r\n         \\`\\`\\`\r\n         - Импортируйте её в коде:\r\n         \\`\\`\\`javascript\r\n         import axios from 'axios';\r\n         \\`\\`\\`\r\n      3. **Локально:**\r\n         - Скачайте файл библиотеки и подключите его локально.\r\n         \\`\\`\\`html\r\n         <script src=\"/path/to/library.js\"></script>\r\n         \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101458,\r\n      question: \"Что такое Three.js и для чего она используется?\",\r\n      answer: `\r\n      **Three.js:**\r\n      - Это библиотека для работы с 3D-графикой в браузере.\r\n      - Она использует WebGL для рендеринга сложных 3D-сцен.\r\n\r\n      **Применение:**\r\n      - Создание игр.\r\n      - Визуализация данных.\r\n      - Интерактивные 3D-модели.\r\n\r\n      **Пример использования:**\r\n      \\`\\`\\`javascript\r\n      const scene = new THREE.Scene();\r\n      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n      const renderer = new THREE.WebGLRenderer();\r\n\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      document.body.appendChild(renderer.domElement);\r\n\r\n      const geometry = new THREE.BoxGeometry();\r\n      const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\r\n      const cube = new THREE.Mesh(geometry, material);\r\n      scene.add(cube);\r\n\r\n      camera.position.z = 5;\r\n\r\n      function animate() {\r\n        requestAnimationFrame(animate);\r\n        cube.rotation.x += 0.01;\r\n        cube.rotation.y += 0.01;\r\n        renderer.render(scene, camera);\r\n      }\r\n\r\n      animate();\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101459,\r\n      question: \"Что такое Chart.js и как создать график?\",\r\n      answer: `\r\n      **Chart.js:**\r\n      - Это библиотека для создания графиков и диаграмм в браузере.\r\n      - Она поддерживает различные типы графиков: линейные, столбчатые, круговые и т.д.\r\n\r\n      **Пример создания графика:**\r\n      \\`\\`\\`html\r\n      <canvas id=\"myChart\" width=\"400\" height=\"200\"></canvas>\r\n      <script src=\"https://cdn.jsdelivr.net/npm/chart.js \"></script>\r\n      <script>\r\n        const ctx = document.getElementById('myChart').getContext('2d');\r\n        const myChart = new Chart(ctx, {\r\n          type: 'bar',\r\n          data: {\r\n            labels: ['Январь', 'Февраль', 'Март', 'Апрель'],\r\n            datasets: [{\r\n              label: 'Продажи',\r\n              data: [12, 19, 3, 5],\r\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n              borderColor: 'rgba(75, 192, 192, 1)',\r\n              borderWidth: 1\r\n            }]\r\n          },\r\n          options: {\r\n            scales: {\r\n              y: {\r\n                beginAtZero: true\r\n              }\r\n            }\r\n          }\r\n        });\r\n      </script>\r\n      \\`\\`\\`\r\n      `,\r\n    },\r\n    {\r\n      id: 101460,\r\n      question: \"Как выбрать библиотеку для проекта?\",\r\n      answer: `\r\n      **Критерии выбора библиотеки:**\r\n      1. **Задачи проекта:**\r\n         - Выберите библиотеку, которая решает именно вашу задачу.\r\n      2. **Популярность:**\r\n         - Проверьте количество скачиваний и активность сообщества.\r\n      3. **Документация:**\r\n         - Хорошая документация упрощает использование библиотеки.\r\n      4. **Размер:**\r\n         - Убедитесь, что библиотека не слишком тяжелая для вашего проекта.\r\n      5. **Поддержка:**\r\n         - Проверьте, активно ли поддерживаются обновления и исправления ошибок.\r\n\r\n      **Пример:**\r\n      - Для работы с HTTP-запросами выберите \\`Axios\\`.\r\n      - Для работы с датами — \\`Luxon\\` или \\`date-fns\\`.\r\n      `,\r\n    },\r\n  ],\r\n};\r\n","export const testJestEnzymeOtherTools = {\r\n  id: 102125,\r\n  title: \"Другие инструменты\",\r\n  questions: [\r\n    {\r\n      id: 102126,\r\n      question: \"Что такое Enzyme?\",\r\n      answer: `\r\n**Enzyme:**\r\n- Это JavaScript-библиотека для тестирования React-компонентов.\r\n- Предоставляет удобные методы для рендеринга, обхода и взаимодействия с компонентами, что упрощает написание юнит-тестов.\r\n\r\n**Основные возможности:**\r\n1. **Shallow Rendering (поверхностный рендеринг):**\r\n   - Рендерит только сам компонент, не затрагивая дочерние компоненты.\r\n   \\`\\`\\`javascript\r\n   import { shallow } from 'enzyme';\r\n\r\n   const wrapper = shallow(<MyComponent />);\r\n   expect(wrapper.find('.my-class').length).toBe(1);\r\n   \\`\\`\\`\r\n\r\n2. **Full Rendering (полный рендеринг):**\r\n   - Рендерит компонент вместе с его дочерними элементами.\r\n   \\`\\`\\`javascript\r\n   import { mount } from 'enzyme';\r\n\r\n   const wrapper = mount(<MyComponent />);\r\n   expect(wrapper.text()).toContain('Hello World');\r\n   \\`\\`\\`\r\n\r\n3. **Static Rendering:**\r\n   - Преобразует компонент в HTML-строку для анализа.\r\n   \\`\\`\\`javascript\r\n   import { render } from 'enzyme';\r\n\r\n   const wrapper = render(<MyComponent />);\r\n   expect(wrapper.text()).toContain('Hello World');\r\n   \\`\\`\\`\r\n\r\n4. **Поиск элементов:**\r\n   - Используйте методы \\`find\\`, \\`contains\\`, \\`exists\\` для проверки структуры компонента.\r\n   \\`\\`\\`javascript\r\n   const button = wrapper.find('button');\r\n   expect(button.exists()).toBe(true);\r\n   \\`\\`\\`\r\n\r\n5. **Имитация событий:**\r\n   - Метод \\`simulate\\` позволяет имитировать события, такие как клики или изменения.\r\n   \\`\\`\\`javascript\r\n   const button = wrapper.find('button');\r\n   button.simulate('click');\r\n   expect(onClickMock).toHaveBeenCalled();\r\n   \\`\\`\\`\r\n\r\n**Преимущества:**\r\n- Удобный API для работы с React-компонентами.\r\n- Поддержка поверхностного и полного рендеринга.\r\n- Хорошо интегрируется с Jest.\r\n\r\n**Недостатки:**\r\n- Не поддерживается в современных версиях React (начиная с React 18).\r\n- Заменяется на более современные библиотеки, такие как React Testing Library.\r\n`,\r\n    },\r\n    {\r\n      id: 102127,\r\n      question: \"В чем разница между Enzyme и React Testing Library?\",\r\n      answer: `\r\n**Разница между Enzyme и React Testing Library:**\r\n\r\n1. **Философия:**\r\n   - **Enzyme:** Фокусируется на тестировании внутренней реализации компонента (например, состояние, пропсы, дочерние элементы).\r\n   - **React Testing Library:** Фокусируется на тестировании поведения компонента с точки зрения пользователя (что видит пользователь).\r\n\r\n2. **API:**\r\n   - **Enzyme:** Предоставляет методы для манипуляции DOM и состоянием компонента (\\`setState\\`, \\`instance\\`).\r\n   - **React Testing Library:** Предоставляет методы для взаимодействия с компонентом через DOM (\\`getByText\\`, \\`fireEvent\\`).\r\n\r\n3. **Поддержка:**\r\n   - **Enzyme:** Не поддерживается в React 18 и выше.\r\n   - **React Testing Library:** Активно поддерживается и рекомендуется командой React.\r\n\r\n4. **Пример теста в Enzyme:**\r\n   \\`\\`\\`javascript\r\n   import { shallow } from 'enzyme';\r\n\r\n   const wrapper = shallow(<MyComponent />);\r\n   expect(wrapper.find('.my-class').length).toBe(1);\r\n   \\`\\`\\`\r\n\r\n5. **Пример теста в React Testing Library:**\r\n   \\`\\`\\`javascript\r\n   import { render, screen } from '@testing-library/react';\r\n\r\n   render(<MyComponent />);\r\n   expect(screen.getByText('Hello World')).toBeInTheDocument();\r\n   \\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102128,\r\n      question: \"Какие основные методы предоставляет Enzyme?\",\r\n      answer: `\r\n**Основные методы Enzyme:**\r\n\r\n1. **shallow():**\r\n   - Поверхностный рендеринг компонента.\r\n   \\`\\`\\`javascript\r\n   const wrapper = shallow(<MyComponent />);\r\n   \\`\\`\\`\r\n\r\n2. **mount():**\r\n   - Полный рендеринг компонента, включая дочерние элементы.\r\n   \\`\\`\\`javascript\r\n   const wrapper = mount(<MyComponent />);\r\n   \\`\\`\\`\r\n\r\n3. **render():**\r\n   - Статический рендеринг компонента в HTML-строку.\r\n   \\`\\`\\`javascript\r\n   const wrapper = render(<MyComponent />);\r\n   \\`\\`\\`\r\n\r\n4. **find(selector):**\r\n   - Поиск элементов по селектору.\r\n   \\`\\`\\`javascript\r\n   const element = wrapper.find('.my-class');\r\n   \\`\\`\\`\r\n\r\n5. **simulate(event):**\r\n   - Имитация событий (например, кликов или изменений).\r\n   \\`\\`\\`javascript\r\n   const button = wrapper.find('button');\r\n   button.simulate('click');\r\n   \\`\\`\\`\r\n\r\n6. **props():**\r\n   - Получение пропсов компонента.\r\n   \\`\\`\\`javascript\r\n   const props = wrapper.props();\r\n   \\`\\`\\`\r\n\r\n7. **state():**\r\n   - Получение состояния компонента.\r\n   \\`\\`\\`javascript\r\n   const state = wrapper.state();\r\n   \\`\\`\\`\r\n\r\n8. **setState(newState):**\r\n   - Изменение состояния компонента.\r\n   \\`\\`\\`javascript\r\n   wrapper.setState({ active: true });\r\n   \\`\\`\\`\r\n\r\n9. **text():**\r\n   - Получение текстового содержимого компонента.\r\n   \\`\\`\\`javascript\r\n   const text = wrapper.text();\r\n   \\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102129,\r\n      question: \"Как настроить Jest для тестирования React-приложений?\",\r\n      answer: `\r\n**Настройка Jest для React:**\r\n\r\n1. **Установка зависимостей:**\r\n   - Установите Jest и необходимые библиотеки:\r\n   \\`\\`\\`bash\r\n   npm install --save-dev jest babel-jest @testing-library/react @testing-library/jest-dom\r\n   \\`\\`\\`\r\n\r\n2. **Настройка Babel:**\r\n   - Создайте файл \\`babel.config.js\\`:\r\n   \\`\\`\\`javascript\r\n   module.exports = {\r\n     presets: ['@babel/preset-env', '@babel/preset-react'],\r\n   };\r\n   \\`\\`\\`\r\n\r\n3. **Настройка Jest:**\r\n   - Создайте файл \\`jest.config.js\\`:\r\n   \\`\\`\\`javascript\r\n   module.exports = {\r\n     setupFilesAfterEnv: ['@testing-library/jest-dom/extend-expect'],\r\n     testEnvironment: 'jsdom',\r\n   };\r\n   \\`\\`\\`\r\n\r\n4. **Создание тестов:**\r\n   - Создайте файл \\`*.test.js\\` или \\`*.spec.js\\`:\r\n   \\`\\`\\`javascript\r\n   import { render, screen } from '@testing-library/react';\r\n   import MyComponent from './MyComponent';\r\n\r\n   test('renders component', () => {\r\n     render(<MyComponent />);\r\n     expect(screen.getByText('Hello World')).toBeInTheDocument();\r\n   });\r\n   \\`\\`\\`\r\n\r\n5. **Запуск тестов:**\r\n   - Добавьте скрипт в \\`package.json\\`:\r\n   \\`\\`\\`json\r\n   \"scripts\": {\r\n     \"test\": \"jest\"\r\n   }\r\n   \\`\\`\\`\r\n   - Запустите тесты:\r\n   \\`\\`\\`bash\r\n   npm test\r\n   \\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102130,\r\n      question: \"Как использовать snapshot-тестирование в Jest?\",\r\n      answer: `\r\n**Snapshot-тестирование:**\r\n- Это метод тестирования, при котором сохраняется \"снимок\" (snapshot) текущего состояния компонента.\r\n- При последующих запусках тестов Jest сравнивает текущее состояние с сохраненным снимком.\r\n\r\n**Пример использования:**\r\n1. Создайте тест:\r\n   \\`\\`\\`javascript\r\n   import { render } from '@testing-library/react';\r\n   import MyComponent from './MyComponent';\r\n\r\n   test('renders correctly', () => {\r\n     const { asFragment } = render(<MyComponent />);\r\n     expect(asFragment()).toMatchSnapshot();\r\n   });\r\n   \\`\\`\\`\r\n\r\n2. Первый запуск теста:\r\n   - Jest создаст файл \\`__snapshots__/MyComponent.test.js.snap\\`.\r\n\r\n3. Последующие запуски:\r\n   - Jest сравнит текущее состояние с сохраненным снимком.\r\n   - Если состояние изменилось, тест завершится ошибкой.\r\n\r\n4. Обновление снимков:\r\n   - Если изменения допустимы, обновите снимки:\r\n   \\`\\`\\`bash\r\n   npm test -- -u\r\n   \\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","export const testReduxAlternative = {\r\n  id: 102400,\r\n  title: \"Redux (альтернативы)\",\r\n  questions: [\r\n    {\r\n      id: 102401,\r\n      question: \"Какие существуют альтернативы Redux?\",\r\n      answer: `\r\n**Альтернативы Redux:**\r\n- Это библиотеки и подходы, которые позволяют управлять состоянием приложения без использования Redux.\r\n- Они могут быть полезны для небольших или средних проектов, где Redux может быть избыточным.\r\n\r\n**Популярные альтернативы:**\r\n1. **Context API + useReducer:**\r\n   - Встроенный в React механизм для управления глобальным состоянием.\r\n   - Подходит для небольших приложений или простых случаев управления состоянием.\r\n\r\n   **Пример:**\r\n   \\`\\`\\`javascript\r\n   import React, { createContext, useReducer } from 'react';\r\n\r\n   const initialState = { count: 0 };\r\n   const CountContext = createContext();\r\n\r\n   function countReducer(state, action) {\r\n     switch (action.type) {\r\n       case 'increment':\r\n         return { count: state.count + 1 };\r\n       case 'decrement':\r\n         return { count: state.count - 1 };\r\n       default:\r\n         throw new Error();\r\n     }\r\n   }\r\n\r\n   export function CountProvider({ children }) {\r\n     const [state, dispatch] = useReducer(countReducer, initialState);\r\n     return (\r\n       <CountContext.Provider value={{ state, dispatch }}>\r\n         {children}\r\n       </CountContext.Provider>\r\n     );\r\n   }\r\n\r\n   export function useCount() {\r\n     return React.useContext(CountContext);\r\n   }\r\n   \\`\\`\\`\r\n\r\n2. **MobX:**\r\n   - Библиотека для управления состоянием с использованием реактивных данных.\r\n   - Проще в освоении, чем Redux, благодаря декларативному стилю.\r\n\r\n   **Пример:**\r\n   \\`\\`\\`javascript\r\n   import { makeAutoObservable } from 'mobx';\r\n   import { observer } from 'mobx-react-lite';\r\n\r\n   class Store {\r\n     count = 0;\r\n\r\n     constructor() {\r\n       makeAutoObservable(this);\r\n     }\r\n\r\n     increment() {\r\n       this.count += 1;\r\n     }\r\n\r\n     decrement() {\r\n       this.count -= 1;\r\n     }\r\n   }\r\n\r\n   const store = new Store();\r\n\r\n   function Counter() {\r\n     return (\r\n       <div>\r\n         <p>{store.count}</p>\r\n         <button onClick={() => store.increment()}>Increment</button>\r\n         <button onClick={() => store.decrement()}>Decrement</button>\r\n       </div>\r\n     );\r\n   }\r\n\r\n   export default observer(Counter);\r\n   \\`\\`\\`\r\n\r\n3. **Recoil:**\r\n   - Библиотека от Facebook для управления состоянием в React.\r\n   - Использует атомы (atoms) для хранения состояния.\r\n\r\n   **Пример:**\r\n   \\`\\`\\`javascript\r\n   import { atom, useRecoilState } from 'recoil';\r\n\r\n   const counterState = atom({\r\n     key: 'counter',\r\n     default: 0,\r\n   });\r\n\r\n   function Counter() {\r\n     const [count, setCount] = useRecoilState(counterState);\r\n\r\n     return (\r\n       <div>\r\n         <p>{count}</p>\r\n         <button onClick={() => setCount(count + 1)}>Increment</button>\r\n       </div>\r\n     );\r\n   }\r\n   \\`\\`\\`\r\n\r\n4. **Zustand:**\r\n   - Легковесная библиотека для управления состоянием.\r\n   - Минималистичный API и простота использования.\r\n\r\n   **Пример:**\r\n   \\`\\`\\`javascript\r\n   import create from 'zustand';\r\n\r\n   const useStore = create((set) => ({\r\n     count: 0,\r\n     increment: () => set((state) => ({ count: state.count + 1 })),\r\n     decrement: () => set((state) => ({ count: state.count - 1 })),\r\n   }));\r\n\r\n   function Counter() {\r\n     const { count, increment, decrement } = useStore();\r\n     return (\r\n       <div>\r\n         <p>{count}</p>\r\n         <button onClick={increment}>Increment</button>\r\n         <button onClick={decrement}>Decrement</button>\r\n       </div>\r\n     );\r\n   }\r\n   \\`\\`\\`\r\n\r\n5. **Jotai:**\r\n   - Еще одна легковесная библиотека для управления состоянием.\r\n   - Похожа на Recoil, но с более простым API.\r\n\r\n   **Пример:**\r\n   \\`\\`\\`javascript\r\n   import { atom, useAtom } from 'jotai';\r\n\r\n   const countAtom = atom(0);\r\n\r\n   function Counter() {\r\n     const [count, setCount] = useAtom(countAtom);\r\n\r\n     return (\r\n       <div>\r\n         <p>{count}</p>\r\n         <button onClick={() => setCount(count + 1)}>Increment</button>\r\n       </div>\r\n     );\r\n   }\r\n   \\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102402,\r\n      question: \"Зачем нужны альтернативы Redux?\",\r\n      answer: `\r\n**Зачем нужны альтернативы Redux:**\r\n1. **Сложность Redux:**\r\n   - Redux требует большого количества кода (actions, reducers, middleware), что может быть избыточным для небольших проектов.\r\n2. **Производительность:**\r\n   - Альтернативы, такие как Zustand или Jotai, предлагают более быстрое и легковесное решение.\r\n3. **Удобство использования:**\r\n   - Библиотеки вроде MobX и Recoil предоставляют более интуитивный API.\r\n4. **Интеграция с React:**\r\n   - Context API и другие библиотеки лучше интегрируются с React, минимизируя необходимость дополнительных зависимостей.\r\n\r\n**Пример использования:**\r\n- Для небольшого приложения можно использовать Context API.\r\n- Для сложного приложения с большим количеством состояний — MobX или Zustand.\r\n`,\r\n    },\r\n    {\r\n      id: 102403,\r\n      question: \"Как выбрать между Redux и его альтернативами?\",\r\n      answer: `\r\n**Как выбрать между Redux и его альтернативами:**\r\n1. **Размер проекта:**\r\n   - Для небольших проектов лучше использовать Context API, Zustand или Jotai.\r\n   - Для больших проектов с сложным состоянием Redux остается лучшим выбором.\r\n2. **Команда разработчиков:**\r\n   - Если команда уже знакома с Redux, то его использование может быть предпочтительнее.\r\n3. **Производительность:**\r\n   - Альтернативы, такие как Zustand и Jotai, предлагают более высокую производительность за счет минимализма.\r\n4. **Требования к функциональности:**\r\n   - Если требуется сложное управление состоянием (middleware, devtools), Redux предоставляет больше возможностей.\r\n\r\n**Вывод:**\r\n- Redux: Для сложных приложений с большим количеством состояний.\r\n- Альтернативы: Для небольших или средних проектов, где важна простота и производительность.\r\n`,\r\n    },\r\n    {\r\n      id: 102404,\r\n      question: \"Что такое Context API и как она работает?\",\r\n      answer: `\r\n**Context API:**\r\n- Это встроенный механизм React для передачи данных через дерево компонентов без необходимости прокидывать props на каждом уровне.\r\n\r\n**Основные компоненты:**\r\n1. **createContext:** Создает контекст.\r\n2. **Provider:** Обеспечивает данные всем дочерним компонентам.\r\n3. **useContext:** Позволяет получить доступ к данным контекста.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport React, { createContext, useContext, useState } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nfunction ThemeProvider({ children }) {\r\n  const [theme, setTheme] = useState('light');\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nfunction ChildComponent() {\r\n  const { theme, setTheme } = useContext(ThemeContext);\r\n  return (\r\n    <div>\r\n      <p>Current theme: {theme}</p>\r\n      <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\r\n        Toggle Theme\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider>\r\n      <ChildComponent />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102405,\r\n      question: \"Как работает MobX?\",\r\n      answer: `\r\n**MobX:**\r\n- Библиотека для управления состоянием с использованием реактивных данных.\r\n- Автоматически обновляет UI при изменении состояния.\r\n\r\n**Основные концепции:**\r\n1. **Observable:** Делает данные реактивными.\r\n2. **Actions:** Функции для изменения состояния.\r\n3. **Computed:** Производные значения, которые автоматически пересчитываются при изменении данных.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nclass Store {\r\n  count = 0;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  increment() {\r\n    this.count += 1;\r\n  }\r\n\r\n  decrement() {\r\n    this.count -= 1;\r\n  }\r\n}\r\n\r\nconst store = new Store();\r\n\r\nfunction Counter() {\r\n  return (\r\n    <div>\r\n      <p>{store.count}</p>\r\n      <button onClick={() => store.increment()}>Increment</button>\r\n      <button onClick={() => store.decrement()}>Decrement</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(Counter);\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102406,\r\n      question: \"Как использовать Zustand?\",\r\n      answer: `\r\n**Zustand:**\r\n- Легковесная библиотека для управления состоянием.\r\n- Предоставляет простой API для создания и использования хранилища.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport create from 'zustand';\r\n\r\nconst useStore = create((set) => ({\r\n  count: 0,\r\n  increment: () => set((state) => ({ count: state.count + 1 })),\r\n  decrement: () => set((state) => ({ count: state.count - 1 })),\r\n}));\r\n\r\nfunction Counter() {\r\n  const { count, increment, decrement } = useStore();\r\n  return (\r\n    <div>\r\n      <p>{count}</p>\r\n      <button onClick={increment}>Increment</button>\r\n      <button onClick={decrement}>Decrement</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102407,\r\n      question: \"Как использовать Recoil?\",\r\n      answer: `\r\n**Recoil:**\r\n- Библиотека для управления состоянием в React.\r\n- Использует атомы (atoms) для хранения состояния.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { atom, useRecoilState } from 'recoil';\r\n\r\nconst counterState = atom({\r\n  key: 'counter',\r\n  default: 0,\r\n});\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useRecoilState(counterState);\r\n\r\n  return (\r\n    <div>\r\n      <p>{count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n    {\r\n      id: 102408,\r\n      question: \"Как использовать Jotai?\",\r\n      answer: `\r\n**Jotai:**\r\n- Легковесная библиотека для управления состоянием.\r\n- Предоставляет простой API для работы с атомами.\r\n\r\n**Пример:**\r\n\\`\\`\\`javascript\r\nimport { atom, useAtom } from 'jotai';\r\n\r\nconst countAtom = atom(0);\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useAtom(countAtom);\r\n\r\n  return (\r\n    <div>\r\n      <p>{count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n`,\r\n    },\r\n  ],\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst Categories = styled.section`\r\n  width: 96%;\r\n  margin: 7px auto;\r\n  text-align: justify;\r\n  padding: 0 10px;\r\n  background-color: #f5f5f5;\r\n  border: 2px solid gray;\r\n  border-radius: 8px;\r\n  Button {\r\n    cursor: pointer;\r\n    padding: 8px 20px;\r\n    margin-left: -10px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n`;\r\n\r\nconst ChildMap = styled.div`\r\n  padding: 5px 0;\r\n  margin-top: 5px;\r\n`;\r\n\r\nexport const S = {\r\n    Categories,\r\n    ChildMap\r\n}","import styled from \"styled-components\";\r\n\r\nconst Text = styled.div`\r\n  & > h3 {\r\n    padding: 0 10px;\r\n    text-align: justify;\r\n  }\r\n  & > p {\r\n    padding: 0 10px;\r\n    & > a {\r\n      padding: 0;\r\n    }\r\n  }\r\n  & > pre {\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    padding: 5px;\r\n    background-color: #f5f5f5;\r\n    font-family: monospace;\r\n    white-space: pre-wrap;\r\n    overflow: auto;\r\n    margin-bottom: 10px;\r\n  }\r\n`\r\n\r\nexport const S = {\r\n  Text,\r\n}","import { S } from \"./Text.styles\";\r\n\r\nexport default function Text({ data }) {\r\n  function formatLink() {\r\n    if (!data.link && !data.url) {\r\n      return null\r\n    } else {\r\n      if (data.link && data.url) {\r\n        const isValidUrl = data.link && data.url && data.url.startsWith(\"https://\");\r\n        if (!isValidUrl) {\r\n          return <p style={{ color: \"red\" }}>Invalid or missing link URL. Please check the URL.</p>\r\n        } else {\r\n          return (\r\n            <p>\r\n              <a href={data.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {data.link}\r\n              </a>\r\n            </p>\r\n          )\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <S.Text>\r\n      {data.title && (\r\n        <h3>\r\n          {data.title.split(\"\\n\").map((line, index) => (\r\n            <span key={index}>\r\n              {line}\r\n              <br />\r\n            </span>\r\n          ))}\r\n        </h3>\r\n      )}\r\n      {data.description && (\r\n        <p dangerouslySetInnerHTML={{ __html: data.description }} />\r\n      )}\r\n      {data.code && (\r\n        <pre>\r\n          <code>{data.code}</code>\r\n        </pre>\r\n      )}\r\n      {formatLink()}\r\n    </S.Text>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nconst Image = styled.div`\r\n  & > p {\r\n    color: red;\r\n  }\r\n  & > span > p {\r\n    text-align: center;\r\n  }\r\n  & > img {\r\n    padding: 10px 0;\r\n    max-width: 100%;\r\n    object-fit: cover;\r\n  }\r\n`\r\n\r\nexport const S = {\r\n  Image,\r\n}","import { S } from \"./Image.styles\";\r\n\r\nexport default function Image({ data }) {\r\n  const isValidUrl = data.url && data.url.startsWith(\"https://\");\r\n  \r\n  return (\r\n    <S.Image>\r\n      {data.title && (\r\n        <span>\r\n          <p>{data.title}</p>\r\n        </span>\r\n      )}\r\n      {/* нужно ли описание к картинке??? */}\r\n      {data.description && <p>{data.description}</p>}\r\n      {isValidUrl ? (\r\n        <img src={data.url} alt={data.title}/>\r\n      ) : (\r\n        <p>Invalid or missing image URL. Please check the URL.</p>\r\n      )}\r\n      {/* добавим логику опциональную добавления картинки с локального устройства и места хранения */}\r\n    </S.Image>\r\n  )\r\n}\r\n","import styled from \"styled-components\"\r\n\r\nconst Video = styled.div`\r\n  & > h3 {\r\n    margin: 0;\r\n  }\r\n  & > iframe {\r\n    height: 100%;\r\n    max-width: 100%;\r\n    max-height: 500px;\r\n    object-fit: cover;\r\n  }\r\n`\r\n\r\nexport const S = {\r\n  Video,\r\n}","import { S } from \"./Video.styles\";\r\n\r\nexport default function Video({ data }) {\r\n  const isValidUrl = data.url && data.url.startsWith(\"https://www.youtube.com/embed\");\r\n\r\n  return (\r\n    <S.Video>\r\n      {data.title && <h3>{data.title}</h3>}\r\n      {data.description && <p>{data.description}</p>}\r\n      {isValidUrl ? (\r\n        <iframe src={data.url} title={data.title} frameBorder=\"0\" allowFullScreen/>\r\n      ) : (\r\n        <p style={{ color: \"red\" }}>Invalid or missing video URL. Please check the URL.</p>\r\n      )}\r\n      {/* добавим логику опциональную добавления видео загружаемого с локального устройства */}\r\n    </S.Video>\r\n  )\r\n}\r\n","import { S } from \"./Categories.styles\";\r\nimport { useState } from \"react\";\r\nimport Button from \"../buttons/Button\";\r\nimport Text from \"../types/Text\";\r\nimport Image from \"../types/Image\";\r\nimport Video from \"../types/Video\";\r\n\r\nexport default function Categories({ data, openPath, onExpand }) {\r\n  const [searchTerm] = useState('');\r\n\r\n  const isOpen = openPath.includes(data.id);\r\n\r\n  const expand = (itemId) => {\r\n    onExpand(itemId);\r\n  }\r\n\r\n  const filterChildren = (children) => {\r\n    if (!children) return [];\r\n    return children.filter(child => {\r\n      const matchesTitle = typeof child.title === 'string'\r\n        && child.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n      const hasVisibleChildren = filterChildren(child.children).length > 0;\r\n      return matchesTitle || hasVisibleChildren;\r\n    });\r\n  }\r\n\r\n  // Защитная функция если данные не пришли корректно\r\n  const safeChildren = (children) =>\r\n    (children || []).map(child => ({\r\n      ...child,\r\n      title: child.title || 'Unknown Title', // Заполняем отсутствующие заголовки\r\n      children: safeChildren(child.children), // Рекурсивно обрабатываем дочерние элементы\r\n    }));\r\n\r\n  const filteredChildren = filterChildren(safeChildren(data.children));\r\n\r\n  return (\r\n    <S.Categories\r\n      key={data.id}>\r\n      {data.type === \"image\" ? (<Image data={data} />) :\r\n        data.type === \"video\" ? (<Video data={data} />) :\r\n          data.type === \"text\" ? (<Text data={data} />) :\r\n            (\r\n              <Button\r\n                key={data.id}\r\n                onClick={() => expand(data.id)}\r\n                type=\"button\"\r\n                title={data.title}\r\n              />\r\n            )}\r\n\r\n      {isOpen && filteredChildren.length > 0 && (\r\n        <S.ChildMap>\r\n          {filteredChildren.map((child) => (\r\n            <div key={child.id}>\r\n              <Categories\r\n                key={child.id}\r\n                data={child}\r\n                openPath={openPath}\r\n                onExpand={(itemId) => onExpand(itemId)}\r\n              />\r\n            </div>\r\n          ))}\r\n        </S.ChildMap>\r\n      )}\r\n    </S.Categories>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport Categories from \"./Categories\";\r\n\r\n\r\nexport default function ParentComponent({ data }) {\r\n  const [openPath, setOpenPath] = useState([]);\r\n\r\n  const handleExpand = (itemId) => {\r\n    const findPath = (node, targetId, path = []) => {\r\n      if (node.id === targetId) return [...path, node.id];\r\n      if (node.children) {\r\n        for (const child of node.children) {\r\n          const result = findPath(child, targetId, [...path, node.id]);\r\n          if (result) return result;\r\n        }\r\n      }\r\n      return null;\r\n    };\r\n\r\n    const newPath = findPath(data, itemId);\r\n\r\n    if(newPath) {\r\n      if (openPath.includes(itemId)) {\r\n        // Если элемент уже открыт, закрываем его и всех его детей\r\n        const parentPath = newPath.slice(0, newPath.indexOf(itemId));\r\n        setOpenPath(parentPath);\r\n      } else {\r\n        setOpenPath(newPath);\r\n      }\r\n    } else {\r\n      setOpenPath([]); // Очистка пути, если элемент не найден\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Categories \r\n      key={data.id}\r\n      data={data}\r\n      openPath={openPath}\r\n      onExpand={handleExpand}\r\n    />\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nconst Tests = styled.div`\r\n  margin: 0 auto;\r\n  padding-right: 40px;\r\n`;\r\n\r\nconst Test = styled.div`\r\n  padding: 10px 0;\r\n\r\n  & > ul {\r\n    padding-bottom: 10px;\r\n  }\r\n`\r\n\r\nconst TestWrapper = styled.div`\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Details = styled.details`\r\n  border: 1px solid #ccc;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n`\r\n\r\nconst Summary = styled.summary`\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n`\r\n\r\nexport const S = {\r\n    Tests,\r\n    Test,\r\n    TestWrapper,\r\n    Details,\r\n    Summary\r\n}","import styled from \"styled-components\";\r\n\r\nconst Results = styled.div`\r\n    margin: 0 auto;\r\n`\r\n\r\nexport const S = {\r\n    Results,\r\n}","import { S } from \"./Results.styles\";\r\n\r\nexport default function Results ({results}) {\r\n    return (\r\n        <S.Results>\r\n            <h2>Результаты</h2>\r\n            <p>Итоговый балл: {results.finalScore}</p>\r\n            {results.results.map((result, index) => (\r\n                <div key={index}>\r\n                    <h3>Вопрос: {result.question}</h3>\r\n                    <p>Ваш ответ: {result.userAnswer}</p>\r\n                    <p>Правильный ответ: {result.correctAnswer}</p>\r\n                    <p>Оценка: {result.score}% ({result.points} баллов)</p>\r\n                </div>\r\n            ))}\r\n        </S.Results>\r\n    )\r\n} ","async function evaluateAnswer(question, userAnswer) {\r\n  try {\r\n    const response = await fetch(\"http://localhost:3000/api/chatgpt\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        question: question.question,\r\n        userAnswer: userAnswer,\r\n      }),\r\n    });\r\n\r\n    const text = await response.text(); // Сначала читаем ответ как текст\r\n    console.log(\"Ответ от сервера:\", text); // Логируем ответ\r\n\r\n    const data = JSON.parse(text); // Пытаемся распарсить JSON\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.error?.message || \"Ошибка при запросе к прокси-серверу\");\r\n    }\r\n\r\n    const score = data.score;\r\n    if (isNaN(score)) {\r\n      throw new Error(\"Не удалось получить оценку от прокси-сервера.\");\r\n    }\r\n\r\n    return score;\r\n  } catch (error) {\r\n    console.error(\"Ошибка при оценке ответа:\", error);\r\n    return 0;\r\n  }\r\n}\r\n\r\nasync function evaluateAnswers(test, userAnswers) {\r\n  const results = [];\r\n  let totalScore = 0;\r\n\r\n  for (const question of test.questions) {\r\n    const userAnswer = userAnswers[question.id] || \"\";\r\n    const score = await evaluateAnswer(question, userAnswer);\r\n    const points = (score / 100) * 10; // Переводим % в баллы (0-10)\r\n    totalScore += points;\r\n    results.push({\r\n      question: question.question,\r\n      userAnswer,\r\n      correctAnswer: question.answer,\r\n      score,\r\n      points,\r\n    });\r\n  }\r\n\r\n  const finalScore = (totalScore / test.questions.length).toFixed(1); // Итоговый результат от 0 до 100\r\n  return { results, finalScore };\r\n}\r\n\r\nexport default evaluateAnswers;","import { useState } from \"react\";\r\nimport { S } from \"./Test.styles\";\r\nimport Results from \"../results/Results\";\r\nimport evaluateAnswers from \"../../utils/evaluateAnswers\";\r\n\r\nexport const Test = ({ test }) => {\r\n    const [userAnswers, setUserAnswers] = useState({});\r\n    const [results, setResults] = useState(null);\r\n    // const [showAnswer, setShowAnswer] = useState({});\r\n\r\n    // Обработчик изменения ответа\r\n    const handleAnswerChange = (questionId, answer) => {\r\n        setUserAnswers((prev) => ({ ...prev, [questionId]: answer }))\r\n    }\r\n\r\n    // Обработчик завершения теста\r\n    const handleSubmit = async () => {\r\n        const results = await evaluateAnswers(test, userAnswers);\r\n        setResults(results);\r\n    }\r\n\r\n    // const handleShowAnswerClick = (id) => {\r\n    //     setShowAnswer(prev => ({\r\n    //         ...prev,\r\n    //         [id]: !prev[id], // Переключаем отображение ответа для конкретного вопроса\r\n    //     }));\r\n    // };\r\n\r\n    // Проверяем ответил ли пользователь на все вопросы\r\n    const isTestComplete = test.questions.every(\r\n        (question) => userAnswers[question.id]?.trim() !== \"\"\r\n    );\r\n\r\n    return (\r\n        <S.Tests>\r\n            {results ? (<Results results={results} />\r\n            ) : (\r\n                <S.Test key={test.id}>\r\n                    {test.questions.map((question) => (\r\n                        <div key={question.id}>\r\n                            <h3>{question.question}</h3>\r\n                            <textarea\r\n                                rows=\"4\"\r\n                                value={userAnswers[question.id] || \"\"}\r\n                                onChange={(e) => handleAnswerChange(question.id, e.target.value)}\r\n                                placeholder=\"Введите ваш ответ\"\r\n                            ></textarea>\r\n                        </div>\r\n                    ))}\r\n                    <button onClick={handleSubmit} disabled={!isTestComplete}>Завершить тест</button>\r\n                </S.Test>\r\n            )}\r\n        </S.Tests>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n// const [showQuest, setShowQuest] = useState([]);\r\n\r\n//     const handleShowQuestionClick = () => {\r\n//         const mapQuestions = test.questions.map((quest) => {\r\n//             return {\r\n//                 id: quest.id,\r\n//                 text: quest.text,\r\n//                 answer: quest.answer,\r\n//             }\r\n//         })\r\n//         setShowQuest(mapQuestions);\r\n//     }\r\n\r\n\r\n\r\n// {/* <Button title={\"Show questions\"} onClick={handleShowQuestionClick}></Button> */ }\r\n\r\n// {/* отправляем ответ на анализ\r\n//                         <button onClick={()=> {\r\n//                             // делает API запрос на сервер AI\r\n//                         }}>Send answer</button> *\r\n//                         {/* кнопка для показа ответа\r\n//                         <button onClick={() => handleShowAnswerClick(question.id)}>\r\n//                             {showAnswer[question.id] ? \"Скрыть ответ\" : \"Показать ответ\"}\r\n//                         </button>\r\n//                         {/* Отображение ответа\r\n//                         {showAnswer[question.id] && <p>{question.answer}</p>} */}","import { S } from \"./Test.styles\"\r\nimport { Test } from \"./Test\";\r\nimport { useState } from \"react\";\r\n\r\nexport const Tests = ({ testId }) => {\r\n    const [currentTestId, setCurrentTestId] = useState(null);\r\n\r\n    const handleTestClick = (test) => {\r\n        // Сбрасываем состояние текущего теста, если выбран тот же тест\r\n        setCurrentTestId(currentTestId === test.id ? null : test.id);\r\n    }\r\n\r\n    return (\r\n        <S.TestWrapper>\r\n            {testId.map((test) => (\r\n                <S.Details key={test.id}>\r\n                    <S.Summary onClick={() => handleTestClick(test)}>\r\n                        {test.title}\r\n                    </S.Summary>\r\n                    {currentTestId === test.id && <Test test={test} />}\r\n                </S.Details>\r\n            ))}\r\n        </S.TestWrapper>\r\n    )\r\n}","import styled from \"styled-components\";\r\n\r\nconst Main = styled.div`\r\n  width: 100%;\r\n  max-width: 1024px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Details = styled.details`\r\n  border: 1px solid #ccc;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  border-radius: 5px;\r\n  \r\n  & [open] > summary {\r\n    color: blue;\r\n  }\r\n`\r\n\r\nconst Summary = styled.summary`\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n`\r\n\r\nexport const S = {\r\n    Main,\r\n    Details,\r\n    Summary,\r\n}","import { data } from \"../../data/Data\";\r\nimport { test } from \"../../data/tests/test\";\r\nimport ParentComponent from \"../categories/ParentComponent\";\r\nimport { Line } from \"../line/Line\";\r\nimport { Tests } from \"../tests/Tests\";\r\nimport { S } from \"./Main.styles\";\r\n\r\nexport const Main = () => {\r\n  return (\r\n    <S.Main>\r\n      <ParentComponent data={data} />\r\n      <Line/>\r\n      <S.Details>\r\n        <S.Summary>Тесты</S.Summary>\r\n        <Tests testId={test}/>\r\n      </S.Details>\r\n    </S.Main>\r\n  );\r\n};\r\n","import \"./styles/app.css\";\r\nimport { Header } from './components/header/Header';\r\nimport { Line } from './components/line/Line';\r\nimport { Main } from './components/main/Main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Line />\r\n      <Main />\r\n      {/* <Footer /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"names":["aa","require","ca","p","a","b","c","arguments","length","encodeURIComponent","da","Set","ea","fa","ha","add","ia","window","document","createElement","ja","Object","prototype","hasOwnProperty","ka","la","ma","v","d","e","f","g","this","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","propertyName","type","sanitizeURL","removeEmptyString","z","split","forEach","toLowerCase","ra","sa","toUpperCase","ta","slice","pa","isNaN","qa","call","test","oa","removeAttribute","setAttribute","setAttributeNS","replace","xlinkHref","ua","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","va","Symbol","for","wa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","iterator","Ka","La","A","assign","Ma","Error","stack","trim","match","Na","Oa","prepareStackTrace","defineProperty","set","Reflect","construct","l","h","k","displayName","includes","name","Pa","tag","render","Qa","$$typeof","_context","_payload","_init","Ra","Sa","Ta","nodeName","Va","_valueTracker","getOwnPropertyDescriptor","constructor","get","configurable","enumerable","getValue","setValue","stopTracking","Ua","Wa","checked","value","Xa","activeElement","body","Ya","defaultChecked","defaultValue","_wrapperState","initialChecked","Za","initialValue","controlled","ab","bb","cb","db","ownerDocument","eb","Array","isArray","fb","options","selected","defaultSelected","disabled","gb","dangerouslySetInnerHTML","children","hb","ib","jb","textContent","kb","lb","mb","nb","namespaceURI","innerHTML","valueOf","toString","firstChild","removeChild","appendChild","MSApp","execUnsafeLocalFunction","ob","lastChild","nodeType","nodeValue","pb","animationIterationCount","aspectRatio","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","qb","rb","sb","style","indexOf","setProperty","keys","charAt","substring","tb","menuitem","area","base","br","col","embed","hr","img","input","keygen","link","meta","param","source","track","wbr","ub","vb","is","wb","xb","target","srcElement","correspondingUseElement","parentNode","yb","zb","Ab","Bb","Cb","stateNode","Db","Eb","push","Fb","Gb","Hb","Ib","Jb","Kb","Lb","Mb","addEventListener","removeEventListener","Nb","apply","m","onError","Ob","Pb","Qb","Rb","Sb","Tb","Vb","alternate","return","flags","Wb","memoizedState","dehydrated","Xb","Zb","child","sibling","current","Yb","$b","ac","unstable_scheduleCallback","bc","unstable_cancelCallback","cc","unstable_shouldYield","dc","unstable_requestPaint","B","unstable_now","ec","unstable_getCurrentPriorityLevel","fc","unstable_ImmediatePriority","gc","unstable_UserBlockingPriority","hc","unstable_NormalPriority","ic","unstable_LowPriority","jc","unstable_IdlePriority","kc","lc","oc","Math","clz32","pc","qc","log","LN2","rc","sc","tc","uc","pendingLanes","suspendedLanes","pingedLanes","entangledLanes","entanglements","vc","xc","yc","zc","Ac","eventTimes","Cc","C","Dc","Ec","Fc","Gc","Hc","Ic","Jc","Kc","Lc","Mc","Nc","Oc","Map","Pc","Qc","Rc","Sc","delete","pointerId","Tc","nativeEvent","blockedOn","domEventName","eventSystemFlags","targetContainers","Vc","Wc","priority","isDehydrated","containerInfo","Xc","Yc","dispatchEvent","shift","Zc","$c","ad","bd","cd","ReactCurrentBatchConfig","dd","ed","transition","fd","gd","hd","id","Uc","stopPropagation","jd","kd","ld","md","nd","od","keyCode","charCode","pd","qd","rd","_reactName","_targetInst","currentTarget","isDefaultPrevented","defaultPrevented","returnValue","isPropagationStopped","preventDefault","cancelBubble","persist","isPersistent","wd","xd","yd","sd","eventPhase","bubbles","cancelable","timeStamp","Date","now","isTrusted","td","ud","view","detail","vd","Ad","screenX","screenY","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","zd","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","Bd","Dd","dataTransfer","Fd","Hd","animationName","elapsedTime","pseudoElement","Id","clipboardData","Jd","Ld","data","Md","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Nd","Od","Alt","Control","Meta","Shift","Pd","Qd","key","String","fromCharCode","code","location","repeat","locale","which","Rd","Td","width","height","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","Vd","touches","targetTouches","changedTouches","Xd","Yd","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","Zd","$d","ae","be","documentMode","ce","de","ee","fe","ge","he","ie","le","color","date","datetime","email","month","number","password","range","search","tel","text","time","url","week","me","ne","oe","event","listeners","pe","qe","re","se","te","ue","ve","we","xe","ye","ze","oninput","Ae","detachEvent","Be","Ce","attachEvent","De","Ee","Fe","He","Ie","Je","Ke","node","offset","nextSibling","Le","contains","compareDocumentPosition","Me","HTMLIFrameElement","contentWindow","href","Ne","contentEditable","Oe","focusedElem","selectionRange","documentElement","start","end","selectionStart","selectionEnd","min","defaultView","getSelection","extend","rangeCount","anchorNode","anchorOffset","focusNode","focusOffset","createRange","setStart","removeAllRanges","addRange","setEnd","element","left","scrollLeft","top","scrollTop","focus","Pe","Qe","Re","Se","Te","Ue","Ve","We","animationend","animationiteration","animationstart","transitionend","Xe","Ye","Ze","animation","$e","af","bf","cf","df","ef","ff","gf","hf","lf","mf","concat","nf","Ub","instance","listener","D","of","has","pf","qf","rf","random","sf","bind","capture","passive","n","t","J","x","u","w","F","tf","uf","parentWindow","vf","wf","na","xa","$a","ba","je","char","ke","unshift","xf","yf","zf","Af","Bf","Cf","Df","Ef","__html","Ff","setTimeout","Gf","clearTimeout","Hf","Promise","Jf","queueMicrotask","resolve","then","catch","If","Kf","Lf","Mf","previousSibling","Nf","Of","Pf","Qf","Rf","Sf","Tf","Uf","E","G","Vf","H","Wf","Xf","Yf","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Zf","childContextTypes","$f","ag","bg","getChildContext","cg","__reactInternalMemoizedMergedChildContext","dg","eg","fg","gg","hg","jg","kg","lg","mg","ng","og","pg","qg","rg","sg","tg","ug","vg","wg","xg","yg","I","zg","Ag","Bg","elementType","deletions","Cg","pendingProps","overflow","treeContext","retryLane","Dg","mode","Eg","Fg","Gg","memoizedProps","Hg","Ig","Jg","Kg","Lg","ref","_owner","_stringRef","refs","Mg","join","Ng","Og","index","Pg","Qg","props","Rg","implementation","Sg","Tg","q","r","y","next","done","Ug","Vg","Wg","Xg","Yg","Zg","$g","ah","_currentValue","bh","childLanes","ch","dependencies","firstContext","lanes","dh","eh","context","memoizedValue","fh","gh","hh","interleaved","ih","jh","kh","updateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","lh","mh","eventTime","lane","payload","callback","nh","K","oh","ph","qh","rh","sh","th","uh","vh","wh","xh","yh","tagName","zh","Ah","Bh","L","Ch","revealOrder","Dh","Eh","_workInProgressVersionPrimary","Fh","ReactCurrentDispatcher","Gh","Hh","M","N","O","Ih","Jh","Kh","Lh","P","Mh","Nh","Oh","Ph","Qh","Rh","Sh","Th","baseQueue","queue","Uh","Vh","Wh","lastRenderedReducer","action","hasEagerState","eagerState","lastRenderedState","dispatch","Xh","Yh","Zh","$h","ai","getSnapshot","bi","ci","Q","di","lastEffect","stores","ei","fi","gi","hi","ii","create","destroy","deps","ji","ki","li","mi","ni","oi","pi","qi","ri","si","ti","ui","vi","wi","xi","yi","zi","Ai","R","Bi","readContext","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","identifierPrefix","Ci","defaultProps","Di","Ei","isMounted","_reactInternals","enqueueSetState","enqueueReplaceState","enqueueForceUpdate","Fi","shouldComponentUpdate","isPureReactComponent","Gi","contextType","state","updater","Hi","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","Ii","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","Ji","message","digest","Ki","Li","console","error","Mi","WeakMap","Ni","Oi","Pi","Qi","getDerivedStateFromError","componentDidCatch","Ri","componentStack","Si","pingCache","Ti","Ui","Vi","Wi","ReactCurrentOwner","Xi","Yi","Zi","$i","aj","compare","bj","cj","dj","baseLanes","cachePool","transitions","ej","fj","gj","hj","ij","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","jj","kj","pendingContext","lj","zj","Aj","Bj","Cj","mj","nj","oj","fallback","pj","qj","sj","dataset","dgst","tj","uj","_reactRetry","rj","subtreeFlags","vj","wj","isBackwards","rendering","renderingStartTime","last","tail","tailMode","xj","Dj","S","Ej","Fj","wasMultiple","multiple","suppressHydrationWarning","onClick","onclick","size","createElementNS","autoFocus","createTextNode","T","Gj","Hj","Ij","Jj","U","Kj","WeakSet","V","Lj","W","Mj","Nj","Pj","Qj","Rj","Sj","Tj","Uj","Vj","insertBefore","_reactRootContainer","Wj","X","Xj","Yj","Zj","onCommitFiberUnmount","componentWillUnmount","ak","bk","ck","dk","ek","isHidden","fk","gk","display","hk","ik","jk","kk","__reactInternalSnapshotBeforeUpdate","src","Vk","lk","ceil","mk","nk","ok","Y","Z","pk","qk","rk","sk","tk","Infinity","uk","vk","wk","xk","yk","zk","Ak","Bk","Ck","Dk","callbackNode","expirationTimes","expiredLanes","wc","callbackPriority","ig","Ek","Fk","Gk","Hk","Ik","Jk","Kk","Lk","Mk","Nk","Ok","finishedWork","finishedLanes","Pk","timeoutHandle","Qk","Rk","Sk","Tk","Uk","mutableReadLanes","Bc","Oj","onCommitFiberRoot","mc","onRecoverableError","Wk","onPostCommitFiberRoot","Xk","Yk","$k","isReactComponent","pendingChildren","al","mutableSourceEagerHydrationData","bl","cache","pendingSuspenseBoundaries","dl","el","fl","gl","hl","il","yj","Zk","kl","reportError","ll","_internalRoot","ml","nl","ol","pl","rl","ql","unmount","unstable_scheduleHydration","splice","querySelectorAll","JSON","stringify","form","sl","usingClientEntryPoint","Events","tl","findFiberByHostInstance","bundleType","version","rendererPackageName","ul","rendererConfig","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","setErrorHandler","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","__REACT_DEVTOOLS_GLOBAL_HOOK__","vl","isDisabled","supportsFiber","inject","exports","createPortal","cl","createRoot","unstable_strictMode","findDOMNode","flushSync","hydrate","hydrateRoot","hydratedSources","_getVersion","_source","unmountComponentAtNode","unstable_batchedUpdates","unstable_renderSubtreeIntoContainer","checkDCE","err","module","__self","__source","jsx","jsxs","setState","forceUpdate","escape","_status","_result","default","Children","map","count","toArray","only","Component","Fragment","Profiler","PureComponent","StrictMode","Suspense","act","cloneElement","createContext","_currentValue2","_threadCount","Provider","Consumer","_defaultValue","_globalName","createFactory","createRef","forwardRef","isValidElement","lazy","memo","startTransition","unstable_act","pop","sortIndex","performance","setImmediate","startTime","expirationTime","priorityLevel","navigator","scheduling","isInputPending","MessageChannel","port2","port1","onmessage","postMessage","unstable_Profiling","unstable_continueExecution","unstable_forceFrameRate","floor","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_runWithPriority","delay","unstable_wrapCallback","objA","objB","compareContext","ret","keysA","keysB","bHasOwnProperty","idx","valueA","valueB","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","getter","__esModule","definition","o","chunkId","all","reduce","promises","miniCssF","obj","prop","inProgress","dataWebpackPrefix","script","needAttach","scripts","getElementsByTagName","i","s","getAttribute","charset","timeout","nc","onScriptComplete","prev","onerror","onload","doneFns","fn","head","toStringTag","installedChunks","j","installedChunkData","promise","reject","errorType","realSrc","request","webpackJsonpCallback","parentChunkLoadingFunction","chunkIds","moreModules","runtime","some","chunkLoadingGlobal","self","__assign","__spreadArray","to","from","pack","ar","SuppressedError","MS","MOZ","WEBKIT","COMMENT","RULESET","DECLARATION","KEYFRAMES","abs","pattern","exec","replacement","indexof","position","charat","charCodeAt","substr","begin","strlen","sizeof","append","array","filter","line","column","character","characters","root","parent","siblings","copy","lift","peek","caret","token","alloc","dealloc","delimit","delimiter","whitespace","escaping","commenter","identifier","serialize","output","prefix","hash","_","prefixer","combine","compile","parse","rule","rules","rulesets","pseudo","points","declarations","atrule","property","previous","variable","scanning","ampersand","reference","comment","declaration","ruleset","post","unitlessKeys","msGridRow","msGridRowSpan","msGridColumn","msGridColumnSpan","WebkitLineClamp","process","REACT_APP_SC_ATTR","SC_ATTR","Boolean","SC_DISABLE_SPEEDY","REACT_APP_SC_DISABLE_SPEEDY","freeze","theme","$","getDefaultProps","mixins","propTypes","caller","callee","arity","getOwnPropertyNames","getOwnPropertySymbols","getPrototypeOf","groupSizes","Uint32Array","indexOfGroup","insertRules","insertRule","clearGroup","deleteRule","getGroup","getRule","RegExp","registerName","parseInt","getTag","_e","__webpack_nonce__","sheet","styleSheets","ownerNode","cssRules","cssText","nodes","childNodes","isServer","useCSSOMInjection","gs","names","server","registerId","rehydrate","reconstructWithOptions","allocateGSInstance","hasNameForId","clearNames","clear","clearRules","clearTag","replaceAll","plugins","startsWith","endsWith","namespace","collection","shouldForwardProp","styleSheet","stylis","Ge","stylisPlugins","disableCSSOMInjection","enableVendorPrefixes","getName","isCss","styledComponentId","staticRulesId","isStatic","componentId","baseHash","baseStyle","generateAndInjectStyles","et","rt","it","attrs","parentComponentId","componentStyle","foldedComponentIds","className","as","forwardedAs","_foldedDefaultProps","at","ct","lt","ut","withConfig","pt","dt","createStyles","removeStyles","renderStyles","_emitSheetCSS","getStyleTags","sealed","getStyleElement","nonce","seal","collectStyles","interleaveWithNodeStream","Button","styled","_ref","title","_jsx","Form","NoteForm","addNote","setTitle","content","setContent","category","setCategory","setType","_jsxs","onSubmit","newNote","placeholder","required","onChange","Header","header","notes","setNotes","storedNotes","localStorage","getItem","setItem","note","Line","div","CodeModule","description","ListModule","TextModule","demo","IDE","Definitions","JSQuestions","CommonQuestionsList","HTMLCSS","Network","ReactInterview","TypeScript","ThemeFrontend","Interview","AddEventListenerFunction","ArraysJavaScript","AsynchronousProgramming","CancelAscentAndDive","ReadMoreAboutMemoryLeaksClosures","explanation","alternativeCode","Closure","fixedCode","Task_1","Task_10","Task_11","Task_12","Task_13","Task_14","Task_15","Task_2","Task_3","Task_4","Task_5","Task_6","Task_7","Task_8","Task_9","Codewars","thisAndCallApplyBind","ContextThis","DataTypes","Descriptors","DestructuringInJS","DifferenceBetweenNullAndUndefined","DragAndDrop","EventLoop","ArrowFunctions","Functions","FunctionLevenshtein","GarbageCollection","GlobalWindowObject","Hoisting","HowObjectsBecomePrimitives","IIFE","Inheritance","LexicalEnvironment","LinearEquation","LivingAndNonlivingCollections","idempotentMethods","iterationMethods","nonIdempotentMethods","verificationMethods","arrayMethods","StringAdditionalMethods","stringReplace","StringReplaceChar","StringSearchMethods","StringSliceMethods","StringSplitJoinMethods","StringTransformationsMethods","stringMethods","MathNumber","MathRoots","MathRounding","MathMethods","NumberFormation","NumberTransformationsType","numberMethods","CheckPropertiesOfObject","CopyJoinObject","CreateCompareObjects","FreezeSealObject","IterationOfObject","objectMethods","BaseTypeCycle","forWhileDoWhile","cycleMethod","Json","matchMethods","RegularExpressionAdditionalMethods","regularExpression","Methods","ModulesJavaScript","ObjectJavascript","OverrideBrowserDefaults","PageVisibilityAPI","Promises","Recursion","Reducers","RegularExpressions","Scope","Sets","SortFunctions","StrictComparison","StringsAndTemplateLiterals","Switch","TemporalDeadZone","TernaryOperatorAndLogicalOperators","TypeConversionInJS","TypeofOperator","ErrorHandling","TypeNaN","Classes","DOMManipulation","Variables","PrototypeAndProto","ForwardRef","PureFunction","JavaScript","NextJs","CI_CD_CD","CleanCode","DesignPatterns","DIALOG_MODAL_PATTERN","EventDelegation","FunctionalProgramming","ImperativeAndDeclarativeProgramming","MethodologyAgile","MethodologyBEM","MethodologyKanban","MethodologyScrum","OOP","SOLID","Patterns","CacheReact","componentRerenders","FiberTree","hooks","memoization","polymorphismInReact","PortalsReact","Props","questions","question","answer","Categories","section","ChildMap","Text","rel","formatLink","Image","isValidUrl","alt","Video","frameBorder","allowFullScreen","openPath","onExpand","searchTerm","isOpen","filterChildren","matchesTitle","hasVisibleChildren","safeChildren","filteredChildren","expand","itemId","ParentComponent","setOpenPath","findPath","targetId","path","result","newPath","parentPath","Tests","Test","TestWrapper","Details","details","Summary","summary","Results","results","finalScore","userAnswer","correctAnswer","score","async","evaluateAnswer","response","fetch","method","headers","_data$error","userAnswers","totalScore","toFixed","setUserAnswers","setResults","isTestComplete","every","_userAnswers$question","rows","handleAnswerChange","questionId","evaluateAnswers","testId","currentTestId","setCurrentTestId","handleTestClick","Main","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById","React","App","reportWebVitals"],"sourceRoot":""}